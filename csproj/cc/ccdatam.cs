// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.cc.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CCDataUnit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCDataUnit GetRootAsCCDataUnit(ByteBuffer _bb) { return GetRootAsCCDataUnit(_bb, new CCDataUnit()); }
  public static CCDataUnit GetRootAsCCDataUnit(ByteBuffer _bb, CCDataUnit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCDataUnit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Label { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(4); }
  public string CcdataPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCcdataPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCcdataPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCcdataPathArray() { return __p.__vector_as_array<byte>(6); }
  public string Variation { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVariationBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetVariationBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetVariationArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.cc.fb.CCDataUnit> CreateCCDataUnit(FlatBufferBuilder builder,
      StringOffset labelOffset = default(StringOffset),
      StringOffset ccdataPathOffset = default(StringOffset),
      StringOffset variationOffset = default(StringOffset)) {
    builder.StartTable(3);
    CCDataUnit.AddVariation(builder, variationOffset);
    CCDataUnit.AddCcdataPath(builder, ccdataPathOffset);
    CCDataUnit.AddLabel(builder, labelOffset);
    return CCDataUnit.EndCCDataUnit(builder);
  }

  public static void StartCCDataUnit(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(0, labelOffset.Value, 0); }
  public static void AddCcdataPath(FlatBufferBuilder builder, StringOffset ccdataPathOffset) { builder.AddOffset(1, ccdataPathOffset.Value, 0); }
  public static void AddVariation(FlatBufferBuilder builder, StringOffset variationOffset) { builder.AddOffset(2, variationOffset.Value, 0); }
  public static Offset<gfl.cc.fb.CCDataUnit> EndCCDataUnit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCDataUnit>(o);
  }
  public CCDataUnitT UnPack() {
    var _o = new CCDataUnitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCDataUnitT _o) {
    _o.Label = this.Label;
    _o.CcdataPath = this.CcdataPath;
    _o.Variation = this.Variation;
  }
  public static Offset<gfl.cc.fb.CCDataUnit> Pack(FlatBufferBuilder builder, CCDataUnitT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCDataUnit>);
    var _label = _o.Label == null ? default(StringOffset) : builder.CreateString(_o.Label);
    var _ccdataPath = _o.CcdataPath == null ? default(StringOffset) : builder.CreateString(_o.CcdataPath);
    var _variation = _o.Variation == null ? default(StringOffset) : builder.CreateString(_o.Variation);
    return CreateCCDataUnit(
      builder,
      _label,
      _ccdataPath,
      _variation);
  }
};

public class CCDataUnitT
{
  [Newtonsoft.Json.JsonProperty("label")]
  public string Label { get; set; }
  [Newtonsoft.Json.JsonProperty("ccdataPath")]
  public string CcdataPath { get; set; }
  [Newtonsoft.Json.JsonProperty("variation")]
  public string Variation { get; set; }

  public CCDataUnitT() {
    this.Label = null;
    this.CcdataPath = null;
    this.Variation = null;
  }
}

public struct CCDataMaster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCDataMaster GetRootAsCCDataMaster(ByteBuffer _bb) { return GetRootAsCCDataMaster(_bb, new CCDataMaster()); }
  public static CCDataMaster GetRootAsCCDataMaster(ByteBuffer _bb, CCDataMaster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCDataMaster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.cc.fb.CCDataUnit? CcdataList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.cc.fb.CCDataUnit?)(new gfl.cc.fb.CCDataUnit()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CcdataListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCDataMaster> CreateCCDataMaster(FlatBufferBuilder builder,
      VectorOffset ccdataListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CCDataMaster.AddCcdataList(builder, ccdataListOffset);
    return CCDataMaster.EndCCDataMaster(builder);
  }

  public static void StartCCDataMaster(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCcdataList(FlatBufferBuilder builder, VectorOffset ccdataListOffset) { builder.AddOffset(0, ccdataListOffset.Value, 0); }
  public static VectorOffset CreateCcdataListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCDataUnit>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCcdataListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCDataUnit>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCcdataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCDataMaster> EndCCDataMaster(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCDataMaster>(o);
  }
  public static void FinishCCDataMasterBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCDataMaster> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCCDataMasterBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCDataMaster> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CCDataMasterT UnPack() {
    var _o = new CCDataMasterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCDataMasterT _o) {
    _o.CcdataList = new List<gfl.cc.fb.CCDataUnitT>();
    for (var _j = 0; _j < this.CcdataListLength; ++_j) {_o.CcdataList.Add(this.CcdataList(_j).HasValue ? this.CcdataList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.cc.fb.CCDataMaster> Pack(FlatBufferBuilder builder, CCDataMasterT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCDataMaster>);
    var _ccdataList = default(VectorOffset);
    if (_o.CcdataList != null) {
      var __ccdataList = new Offset<gfl.cc.fb.CCDataUnit>[_o.CcdataList.Count];
      for (var _j = 0; _j < __ccdataList.Length; ++_j) { __ccdataList[_j] = gfl.cc.fb.CCDataUnit.Pack(builder, _o.CcdataList[_j]); }
      _ccdataList = CreateCcdataListVector(builder, __ccdataList);
    }
    return CreateCCDataMaster(
      builder,
      _ccdataList);
  }
};

public class CCDataMasterT
{
  [Newtonsoft.Json.JsonProperty("ccdataList")]
  public List<gfl.cc.fb.CCDataUnitT> CcdataList { get; set; }

  public CCDataMasterT() {
    this.CcdataList = null;
  }

  public static CCDataMasterT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CCDataMasterT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CCDataMasterT DeserializeFromBinary(byte[] fbBuffer) {
    return CCDataMaster.GetRootAsCCDataMaster(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CCDataMaster.FinishCCDataMasterBuffer(fbb, CCDataMaster.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
