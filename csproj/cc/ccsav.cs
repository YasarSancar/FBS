// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.cc.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CCRootPartsType : uint
{
  FromPartsList = 0,
  PreviewOnly = 1,
};

public struct CCPartsSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCPartsSaveData GetRootAsCCPartsSaveData(ByteBuffer _bb) { return GetRootAsCCPartsSaveData(_bb, new CCPartsSaveData()); }
  public static CCPartsSaveData GetRootAsCCPartsSaveData(ByteBuffer _bb, CCPartsSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCPartsSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsRoot { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TrmdljFilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmdljFilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTrmdljFilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTrmdljFilePathArray() { return __p.__vector_as_array<byte>(8); }
  public string TrmmtjFilePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmmtjFilePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTrmmtjFilePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTrmmtjFilePathArray() { return __p.__vector_as_array<byte>(10); }
  public string TracnjFilePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTracnjFilePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTracnjFilePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTracnjFilePathArray() { return __p.__vector_as_array<byte>(12); }
  public string MetadataName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMetadataNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMetadataNameArray() { return __p.__vector_as_array<byte>(14); }
  public string TracnjFilePathList(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TracnjFilePathListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsAnimationLayer { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseSharedPartsAnimation { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string SharedPartsAnimationFolder { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSharedPartsAnimationFolderBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSharedPartsAnimationFolderBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSharedPartsAnimationFolderArray() { return __p.__vector_as_array<byte>(22); }
  public string SharedPartsAnimationFileList(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SharedPartsAnimationFileListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCPartsSaveData> CreateCCPartsSaveData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool isRoot = false,
      StringOffset trmdljFilePathOffset = default(StringOffset),
      StringOffset trmmtjFilePathOffset = default(StringOffset),
      StringOffset tracnjFilePathOffset = default(StringOffset),
      StringOffset metadataNameOffset = default(StringOffset),
      VectorOffset tracnjFilePathListOffset = default(VectorOffset),
      bool isAnimationLayer = false,
      bool useSharedPartsAnimation = false,
      StringOffset sharedPartsAnimationFolderOffset = default(StringOffset),
      VectorOffset sharedPartsAnimationFileListOffset = default(VectorOffset)) {
    builder.StartTable(11);
    CCPartsSaveData.AddSharedPartsAnimationFileList(builder, sharedPartsAnimationFileListOffset);
    CCPartsSaveData.AddSharedPartsAnimationFolder(builder, sharedPartsAnimationFolderOffset);
    CCPartsSaveData.AddTracnjFilePathList(builder, tracnjFilePathListOffset);
    CCPartsSaveData.AddMetadataName(builder, metadataNameOffset);
    CCPartsSaveData.AddTracnjFilePath(builder, tracnjFilePathOffset);
    CCPartsSaveData.AddTrmmtjFilePath(builder, trmmtjFilePathOffset);
    CCPartsSaveData.AddTrmdljFilePath(builder, trmdljFilePathOffset);
    CCPartsSaveData.AddName(builder, nameOffset);
    CCPartsSaveData.AddUseSharedPartsAnimation(builder, useSharedPartsAnimation);
    CCPartsSaveData.AddIsAnimationLayer(builder, isAnimationLayer);
    CCPartsSaveData.AddIsRoot(builder, isRoot);
    return CCPartsSaveData.EndCCPartsSaveData(builder);
  }

  public static void StartCCPartsSaveData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddIsRoot(FlatBufferBuilder builder, bool isRoot) { builder.AddBool(1, isRoot, false); }
  public static void AddTrmdljFilePath(FlatBufferBuilder builder, StringOffset trmdljFilePathOffset) { builder.AddOffset(2, trmdljFilePathOffset.Value, 0); }
  public static void AddTrmmtjFilePath(FlatBufferBuilder builder, StringOffset trmmtjFilePathOffset) { builder.AddOffset(3, trmmtjFilePathOffset.Value, 0); }
  public static void AddTracnjFilePath(FlatBufferBuilder builder, StringOffset tracnjFilePathOffset) { builder.AddOffset(4, tracnjFilePathOffset.Value, 0); }
  public static void AddMetadataName(FlatBufferBuilder builder, StringOffset metadataNameOffset) { builder.AddOffset(5, metadataNameOffset.Value, 0); }
  public static void AddTracnjFilePathList(FlatBufferBuilder builder, VectorOffset tracnjFilePathListOffset) { builder.AddOffset(6, tracnjFilePathListOffset.Value, 0); }
  public static VectorOffset CreateTracnjFilePathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTracnjFilePathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTracnjFilePathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsAnimationLayer(FlatBufferBuilder builder, bool isAnimationLayer) { builder.AddBool(7, isAnimationLayer, false); }
  public static void AddUseSharedPartsAnimation(FlatBufferBuilder builder, bool useSharedPartsAnimation) { builder.AddBool(8, useSharedPartsAnimation, false); }
  public static void AddSharedPartsAnimationFolder(FlatBufferBuilder builder, StringOffset sharedPartsAnimationFolderOffset) { builder.AddOffset(9, sharedPartsAnimationFolderOffset.Value, 0); }
  public static void AddSharedPartsAnimationFileList(FlatBufferBuilder builder, VectorOffset sharedPartsAnimationFileListOffset) { builder.AddOffset(10, sharedPartsAnimationFileListOffset.Value, 0); }
  public static VectorOffset CreateSharedPartsAnimationFileListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSharedPartsAnimationFileListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSharedPartsAnimationFileListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCPartsSaveData> EndCCPartsSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCPartsSaveData>(o);
  }
  public CCPartsSaveDataT UnPack() {
    var _o = new CCPartsSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCPartsSaveDataT _o) {
    _o.Name = this.Name;
    _o.IsRoot = this.IsRoot;
    _o.TrmdljFilePath = this.TrmdljFilePath;
    _o.TrmmtjFilePath = this.TrmmtjFilePath;
    _o.TracnjFilePath = this.TracnjFilePath;
    _o.MetadataName = this.MetadataName;
    _o.TracnjFilePathList = new List<string>();
    for (var _j = 0; _j < this.TracnjFilePathListLength; ++_j) {_o.TracnjFilePathList.Add(this.TracnjFilePathList(_j));}
    _o.IsAnimationLayer = this.IsAnimationLayer;
    _o.UseSharedPartsAnimation = this.UseSharedPartsAnimation;
    _o.SharedPartsAnimationFolder = this.SharedPartsAnimationFolder;
    _o.SharedPartsAnimationFileList = new List<string>();
    for (var _j = 0; _j < this.SharedPartsAnimationFileListLength; ++_j) {_o.SharedPartsAnimationFileList.Add(this.SharedPartsAnimationFileList(_j));}
  }
  public static Offset<gfl.cc.fb.CCPartsSaveData> Pack(FlatBufferBuilder builder, CCPartsSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCPartsSaveData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _trmdljFilePath = _o.TrmdljFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmdljFilePath);
    var _trmmtjFilePath = _o.TrmmtjFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmmtjFilePath);
    var _tracnjFilePath = _o.TracnjFilePath == null ? default(StringOffset) : builder.CreateString(_o.TracnjFilePath);
    var _metadataName = _o.MetadataName == null ? default(StringOffset) : builder.CreateString(_o.MetadataName);
    var _tracnjFilePathList = default(VectorOffset);
    if (_o.TracnjFilePathList != null) {
      var __tracnjFilePathList = new StringOffset[_o.TracnjFilePathList.Count];
      for (var _j = 0; _j < __tracnjFilePathList.Length; ++_j) { __tracnjFilePathList[_j] = builder.CreateString(_o.TracnjFilePathList[_j]); }
      _tracnjFilePathList = CreateTracnjFilePathListVector(builder, __tracnjFilePathList);
    }
    var _sharedPartsAnimationFolder = _o.SharedPartsAnimationFolder == null ? default(StringOffset) : builder.CreateString(_o.SharedPartsAnimationFolder);
    var _sharedPartsAnimationFileList = default(VectorOffset);
    if (_o.SharedPartsAnimationFileList != null) {
      var __sharedPartsAnimationFileList = new StringOffset[_o.SharedPartsAnimationFileList.Count];
      for (var _j = 0; _j < __sharedPartsAnimationFileList.Length; ++_j) { __sharedPartsAnimationFileList[_j] = builder.CreateString(_o.SharedPartsAnimationFileList[_j]); }
      _sharedPartsAnimationFileList = CreateSharedPartsAnimationFileListVector(builder, __sharedPartsAnimationFileList);
    }
    return CreateCCPartsSaveData(
      builder,
      _name,
      _o.IsRoot,
      _trmdljFilePath,
      _trmmtjFilePath,
      _tracnjFilePath,
      _metadataName,
      _tracnjFilePathList,
      _o.IsAnimationLayer,
      _o.UseSharedPartsAnimation,
      _sharedPartsAnimationFolder,
      _sharedPartsAnimationFileList);
  }
};

public class CCPartsSaveDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("isRoot")]
  public bool IsRoot { get; set; }
  [Newtonsoft.Json.JsonProperty("trmdljFilePath")]
  public string TrmdljFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("trmmtjFilePath")]
  public string TrmmtjFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("tracnjFilePath")]
  public string TracnjFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("metadataName")]
  public string MetadataName { get; set; }
  [Newtonsoft.Json.JsonProperty("tracnjFilePathList")]
  public List<string> TracnjFilePathList { get; set; }
  [Newtonsoft.Json.JsonProperty("isAnimationLayer")]
  public bool IsAnimationLayer { get; set; }
  [Newtonsoft.Json.JsonProperty("useSharedPartsAnimation")]
  public bool UseSharedPartsAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("sharedPartsAnimationFolder")]
  public string SharedPartsAnimationFolder { get; set; }
  [Newtonsoft.Json.JsonProperty("sharedPartsAnimationFileList")]
  public List<string> SharedPartsAnimationFileList { get; set; }

  public CCPartsSaveDataT() {
    this.Name = null;
    this.IsRoot = false;
    this.TrmdljFilePath = null;
    this.TrmmtjFilePath = null;
    this.TracnjFilePath = null;
    this.MetadataName = null;
    this.TracnjFilePathList = null;
    this.IsAnimationLayer = false;
    this.UseSharedPartsAnimation = false;
    this.SharedPartsAnimationFolder = null;
    this.SharedPartsAnimationFileList = null;
  }
}

public struct CCModifierRatioSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierRatioSaveData GetRootAsCCModifierRatioSaveData(ByteBuffer _bb) { return GetRootAsCCModifierRatioSaveData(_bb, new CCModifierRatioSaveData()); }
  public static CCModifierRatioSaveData GetRootAsCCModifierRatioSaveData(ByteBuffer _bb, CCModifierRatioSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierRatioSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TagName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTagNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTagNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Ratio { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.cc.fb.CCModifierRatioSaveData> CreateCCModifierRatioSaveData(FlatBufferBuilder builder,
      StringOffset tagNameOffset = default(StringOffset),
      float ratio = 0.0f) {
    builder.StartTable(2);
    CCModifierRatioSaveData.AddRatio(builder, ratio);
    CCModifierRatioSaveData.AddTagName(builder, tagNameOffset);
    return CCModifierRatioSaveData.EndCCModifierRatioSaveData(builder);
  }

  public static void StartCCModifierRatioSaveData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTagName(FlatBufferBuilder builder, StringOffset tagNameOffset) { builder.AddOffset(0, tagNameOffset.Value, 0); }
  public static void AddRatio(FlatBufferBuilder builder, float ratio) { builder.AddFloat(1, ratio, 0.0f); }
  public static Offset<gfl.cc.fb.CCModifierRatioSaveData> EndCCModifierRatioSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCModifierRatioSaveData>(o);
  }
  public CCModifierRatioSaveDataT UnPack() {
    var _o = new CCModifierRatioSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierRatioSaveDataT _o) {
    _o.TagName = this.TagName;
    _o.Ratio = this.Ratio;
  }
  public static Offset<gfl.cc.fb.CCModifierRatioSaveData> Pack(FlatBufferBuilder builder, CCModifierRatioSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCModifierRatioSaveData>);
    var _tagName = _o.TagName == null ? default(StringOffset) : builder.CreateString(_o.TagName);
    return CreateCCModifierRatioSaveData(
      builder,
      _tagName,
      _o.Ratio);
  }
};

public class CCModifierRatioSaveDataT
{
  [Newtonsoft.Json.JsonProperty("tagName")]
  public string TagName { get; set; }
  [Newtonsoft.Json.JsonProperty("ratio")]
  public float Ratio { get; set; }

  public CCModifierRatioSaveDataT() {
    this.TagName = null;
    this.Ratio = 0.0f;
  }
}

public struct CCModifierScalarSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierScalarSaveData GetRootAsCCModifierScalarSaveData(ByteBuffer _bb) { return GetRootAsCCModifierScalarSaveData(_bb, new CCModifierScalarSaveData()); }
  public static CCModifierScalarSaveData GetRootAsCCModifierScalarSaveData(ByteBuffer _bb, CCModifierScalarSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierScalarSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TagName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTagNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTagNameArray() { return __p.__vector_as_array<byte>(4); }
  public float ScaleX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ScaleY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ScaleZ { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.cc.fb.CCModifierScalarSaveData> CreateCCModifierScalarSaveData(FlatBufferBuilder builder,
      StringOffset tagNameOffset = default(StringOffset),
      float scaleX = 0.0f,
      float scaleY = 0.0f,
      float scaleZ = 0.0f) {
    builder.StartTable(4);
    CCModifierScalarSaveData.AddScaleZ(builder, scaleZ);
    CCModifierScalarSaveData.AddScaleY(builder, scaleY);
    CCModifierScalarSaveData.AddScaleX(builder, scaleX);
    CCModifierScalarSaveData.AddTagName(builder, tagNameOffset);
    return CCModifierScalarSaveData.EndCCModifierScalarSaveData(builder);
  }

  public static void StartCCModifierScalarSaveData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTagName(FlatBufferBuilder builder, StringOffset tagNameOffset) { builder.AddOffset(0, tagNameOffset.Value, 0); }
  public static void AddScaleX(FlatBufferBuilder builder, float scaleX) { builder.AddFloat(1, scaleX, 0.0f); }
  public static void AddScaleY(FlatBufferBuilder builder, float scaleY) { builder.AddFloat(2, scaleY, 0.0f); }
  public static void AddScaleZ(FlatBufferBuilder builder, float scaleZ) { builder.AddFloat(3, scaleZ, 0.0f); }
  public static Offset<gfl.cc.fb.CCModifierScalarSaveData> EndCCModifierScalarSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCModifierScalarSaveData>(o);
  }
  public CCModifierScalarSaveDataT UnPack() {
    var _o = new CCModifierScalarSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierScalarSaveDataT _o) {
    _o.TagName = this.TagName;
    _o.ScaleX = this.ScaleX;
    _o.ScaleY = this.ScaleY;
    _o.ScaleZ = this.ScaleZ;
  }
  public static Offset<gfl.cc.fb.CCModifierScalarSaveData> Pack(FlatBufferBuilder builder, CCModifierScalarSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCModifierScalarSaveData>);
    var _tagName = _o.TagName == null ? default(StringOffset) : builder.CreateString(_o.TagName);
    return CreateCCModifierScalarSaveData(
      builder,
      _tagName,
      _o.ScaleX,
      _o.ScaleY,
      _o.ScaleZ);
  }
};

public class CCModifierScalarSaveDataT
{
  [Newtonsoft.Json.JsonProperty("tagName")]
  public string TagName { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleX")]
  public float ScaleX { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleY")]
  public float ScaleY { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleZ")]
  public float ScaleZ { get; set; }

  public CCModifierScalarSaveDataT() {
    this.TagName = null;
    this.ScaleX = 0.0f;
    this.ScaleY = 0.0f;
    this.ScaleZ = 0.0f;
  }
}

public struct CCModifierSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierSaveData GetRootAsCCModifierSaveData(ByteBuffer _bb) { return GetRootAsCCModifierSaveData(_bb, new CCModifierSaveData()); }
  public static CCModifierSaveData GetRootAsCCModifierSaveData(ByteBuffer _bb, CCModifierSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrbsmjFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrbsmjFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrbsmjFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrbsmjFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.cc.fb.CCModifierRatioSaveData? RatioList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.cc.fb.CCModifierRatioSaveData?)(new gfl.cc.fb.CCModifierRatioSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RatioListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.cc.fb.CCModifierScalarSaveData? ScalarList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.cc.fb.CCModifierScalarSaveData?)(new gfl.cc.fb.CCModifierScalarSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScalarListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCModifierSaveData> CreateCCModifierSaveData(FlatBufferBuilder builder,
      StringOffset trbsmjFilePathOffset = default(StringOffset),
      VectorOffset ratioListOffset = default(VectorOffset),
      VectorOffset scalarListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    CCModifierSaveData.AddScalarList(builder, scalarListOffset);
    CCModifierSaveData.AddRatioList(builder, ratioListOffset);
    CCModifierSaveData.AddTrbsmjFilePath(builder, trbsmjFilePathOffset);
    return CCModifierSaveData.EndCCModifierSaveData(builder);
  }

  public static void StartCCModifierSaveData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTrbsmjFilePath(FlatBufferBuilder builder, StringOffset trbsmjFilePathOffset) { builder.AddOffset(0, trbsmjFilePathOffset.Value, 0); }
  public static void AddRatioList(FlatBufferBuilder builder, VectorOffset ratioListOffset) { builder.AddOffset(1, ratioListOffset.Value, 0); }
  public static VectorOffset CreateRatioListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCModifierRatioSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRatioListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCModifierRatioSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRatioListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScalarList(FlatBufferBuilder builder, VectorOffset scalarListOffset) { builder.AddOffset(2, scalarListOffset.Value, 0); }
  public static VectorOffset CreateScalarListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCModifierScalarSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScalarListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCModifierScalarSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScalarListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCModifierSaveData> EndCCModifierSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCModifierSaveData>(o);
  }
  public CCModifierSaveDataT UnPack() {
    var _o = new CCModifierSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierSaveDataT _o) {
    _o.TrbsmjFilePath = this.TrbsmjFilePath;
    _o.RatioList = new List<gfl.cc.fb.CCModifierRatioSaveDataT>();
    for (var _j = 0; _j < this.RatioListLength; ++_j) {_o.RatioList.Add(this.RatioList(_j).HasValue ? this.RatioList(_j).Value.UnPack() : null);}
    _o.ScalarList = new List<gfl.cc.fb.CCModifierScalarSaveDataT>();
    for (var _j = 0; _j < this.ScalarListLength; ++_j) {_o.ScalarList.Add(this.ScalarList(_j).HasValue ? this.ScalarList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.cc.fb.CCModifierSaveData> Pack(FlatBufferBuilder builder, CCModifierSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCModifierSaveData>);
    var _trbsmjFilePath = _o.TrbsmjFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrbsmjFilePath);
    var _ratioList = default(VectorOffset);
    if (_o.RatioList != null) {
      var __ratioList = new Offset<gfl.cc.fb.CCModifierRatioSaveData>[_o.RatioList.Count];
      for (var _j = 0; _j < __ratioList.Length; ++_j) { __ratioList[_j] = gfl.cc.fb.CCModifierRatioSaveData.Pack(builder, _o.RatioList[_j]); }
      _ratioList = CreateRatioListVector(builder, __ratioList);
    }
    var _scalarList = default(VectorOffset);
    if (_o.ScalarList != null) {
      var __scalarList = new Offset<gfl.cc.fb.CCModifierScalarSaveData>[_o.ScalarList.Count];
      for (var _j = 0; _j < __scalarList.Length; ++_j) { __scalarList[_j] = gfl.cc.fb.CCModifierScalarSaveData.Pack(builder, _o.ScalarList[_j]); }
      _scalarList = CreateScalarListVector(builder, __scalarList);
    }
    return CreateCCModifierSaveData(
      builder,
      _trbsmjFilePath,
      _ratioList,
      _scalarList);
  }
};

public class CCModifierSaveDataT
{
  [Newtonsoft.Json.JsonProperty("trbsmjFilePath")]
  public string TrbsmjFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("ratioList")]
  public List<gfl.cc.fb.CCModifierRatioSaveDataT> RatioList { get; set; }
  [Newtonsoft.Json.JsonProperty("scalarList")]
  public List<gfl.cc.fb.CCModifierScalarSaveDataT> ScalarList { get; set; }

  public CCModifierSaveDataT() {
    this.TrbsmjFilePath = null;
    this.RatioList = null;
    this.ScalarList = null;
  }
}

public struct CCAttachPartsSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCAttachPartsSaveData GetRootAsCCAttachPartsSaveData(ByteBuffer _bb) { return GetRootAsCCAttachPartsSaveData(_bb, new CCAttachPartsSaveData()); }
  public static CCAttachPartsSaveData GetRootAsCCAttachPartsSaveData(ByteBuffer _bb, CCAttachPartsSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCAttachPartsSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrmdljFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmdljFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrmdljFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrmdljFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string AttachJointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttachJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAttachJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAttachJointNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool InheritedScale { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.cc.fb.CCAttachPartsSaveData> CreateCCAttachPartsSaveData(FlatBufferBuilder builder,
      StringOffset trmdljFilePathOffset = default(StringOffset),
      StringOffset attachJointNameOffset = default(StringOffset),
      bool inheritedScale = false) {
    builder.StartTable(3);
    CCAttachPartsSaveData.AddAttachJointName(builder, attachJointNameOffset);
    CCAttachPartsSaveData.AddTrmdljFilePath(builder, trmdljFilePathOffset);
    CCAttachPartsSaveData.AddInheritedScale(builder, inheritedScale);
    return CCAttachPartsSaveData.EndCCAttachPartsSaveData(builder);
  }

  public static void StartCCAttachPartsSaveData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTrmdljFilePath(FlatBufferBuilder builder, StringOffset trmdljFilePathOffset) { builder.AddOffset(0, trmdljFilePathOffset.Value, 0); }
  public static void AddAttachJointName(FlatBufferBuilder builder, StringOffset attachJointNameOffset) { builder.AddOffset(1, attachJointNameOffset.Value, 0); }
  public static void AddInheritedScale(FlatBufferBuilder builder, bool inheritedScale) { builder.AddBool(2, inheritedScale, false); }
  public static Offset<gfl.cc.fb.CCAttachPartsSaveData> EndCCAttachPartsSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCAttachPartsSaveData>(o);
  }
  public CCAttachPartsSaveDataT UnPack() {
    var _o = new CCAttachPartsSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCAttachPartsSaveDataT _o) {
    _o.TrmdljFilePath = this.TrmdljFilePath;
    _o.AttachJointName = this.AttachJointName;
    _o.InheritedScale = this.InheritedScale;
  }
  public static Offset<gfl.cc.fb.CCAttachPartsSaveData> Pack(FlatBufferBuilder builder, CCAttachPartsSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCAttachPartsSaveData>);
    var _trmdljFilePath = _o.TrmdljFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmdljFilePath);
    var _attachJointName = _o.AttachJointName == null ? default(StringOffset) : builder.CreateString(_o.AttachJointName);
    return CreateCCAttachPartsSaveData(
      builder,
      _trmdljFilePath,
      _attachJointName,
      _o.InheritedScale);
  }
};

public class CCAttachPartsSaveDataT
{
  [Newtonsoft.Json.JsonProperty("trmdljFilePath")]
  public string TrmdljFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("attachJointName")]
  public string AttachJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("inheritedScale")]
  public bool InheritedScale { get; set; }

  public CCAttachPartsSaveDataT() {
    this.TrmdljFilePath = null;
    this.AttachJointName = null;
    this.InheritedScale = false;
  }
}

public struct CCVariationParameterSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCVariationParameterSaveData GetRootAsCCVariationParameterSaveData(ByteBuffer _bb) { return GetRootAsCCVariationParameterSaveData(_bb, new CCVariationParameterSaveData()); }
  public static CCVariationParameterSaveData GetRootAsCCVariationParameterSaveData(ByteBuffer _bb, CCVariationParameterSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCVariationParameterSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.cc.fb.CCVariationParameterSaveData> CreateCCVariationParameterSaveData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int value = 0) {
    builder.StartTable(2);
    CCVariationParameterSaveData.AddValue(builder, value);
    CCVariationParameterSaveData.AddName(builder, nameOffset);
    return CCVariationParameterSaveData.EndCCVariationParameterSaveData(builder);
  }

  public static void StartCCVariationParameterSaveData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 0); }
  public static Offset<gfl.cc.fb.CCVariationParameterSaveData> EndCCVariationParameterSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCVariationParameterSaveData>(o);
  }
  public CCVariationParameterSaveDataT UnPack() {
    var _o = new CCVariationParameterSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCVariationParameterSaveDataT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
  }
  public static Offset<gfl.cc.fb.CCVariationParameterSaveData> Pack(FlatBufferBuilder builder, CCVariationParameterSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCVariationParameterSaveData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCCVariationParameterSaveData(
      builder,
      _name,
      _o.Value);
  }
};

public class CCVariationParameterSaveDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public CCVariationParameterSaveDataT() {
    this.Name = null;
    this.Value = 0;
  }
}

public struct CCVariationPartsSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCVariationPartsSaveData GetRootAsCCVariationPartsSaveData(ByteBuffer _bb) { return GetRootAsCCVariationPartsSaveData(_bb, new CCVariationPartsSaveData()); }
  public static CCVariationPartsSaveData GetRootAsCCVariationPartsSaveData(ByteBuffer _bb, CCVariationPartsSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCVariationPartsSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PartsName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPartsNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPartsNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPartsNameArray() { return __p.__vector_as_array<byte>(4); }
  public string MetadataName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMetadataNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMetadataNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.cc.fb.CCVariationParameterSaveData? ParameterList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.cc.fb.CCVariationParameterSaveData?)(new gfl.cc.fb.CCVariationParameterSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParameterListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCVariationPartsSaveData> CreateCCVariationPartsSaveData(FlatBufferBuilder builder,
      StringOffset partsNameOffset = default(StringOffset),
      StringOffset metadataNameOffset = default(StringOffset),
      VectorOffset parameterListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    CCVariationPartsSaveData.AddParameterList(builder, parameterListOffset);
    CCVariationPartsSaveData.AddMetadataName(builder, metadataNameOffset);
    CCVariationPartsSaveData.AddPartsName(builder, partsNameOffset);
    return CCVariationPartsSaveData.EndCCVariationPartsSaveData(builder);
  }

  public static void StartCCVariationPartsSaveData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPartsName(FlatBufferBuilder builder, StringOffset partsNameOffset) { builder.AddOffset(0, partsNameOffset.Value, 0); }
  public static void AddMetadataName(FlatBufferBuilder builder, StringOffset metadataNameOffset) { builder.AddOffset(1, metadataNameOffset.Value, 0); }
  public static void AddParameterList(FlatBufferBuilder builder, VectorOffset parameterListOffset) { builder.AddOffset(2, parameterListOffset.Value, 0); }
  public static VectorOffset CreateParameterListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationParameterSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParameterListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationParameterSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParameterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCVariationPartsSaveData> EndCCVariationPartsSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCVariationPartsSaveData>(o);
  }
  public CCVariationPartsSaveDataT UnPack() {
    var _o = new CCVariationPartsSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCVariationPartsSaveDataT _o) {
    _o.PartsName = this.PartsName;
    _o.MetadataName = this.MetadataName;
    _o.ParameterList = new List<gfl.cc.fb.CCVariationParameterSaveDataT>();
    for (var _j = 0; _j < this.ParameterListLength; ++_j) {_o.ParameterList.Add(this.ParameterList(_j).HasValue ? this.ParameterList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.cc.fb.CCVariationPartsSaveData> Pack(FlatBufferBuilder builder, CCVariationPartsSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCVariationPartsSaveData>);
    var _partsName = _o.PartsName == null ? default(StringOffset) : builder.CreateString(_o.PartsName);
    var _metadataName = _o.MetadataName == null ? default(StringOffset) : builder.CreateString(_o.MetadataName);
    var _parameterList = default(VectorOffset);
    if (_o.ParameterList != null) {
      var __parameterList = new Offset<gfl.cc.fb.CCVariationParameterSaveData>[_o.ParameterList.Count];
      for (var _j = 0; _j < __parameterList.Length; ++_j) { __parameterList[_j] = gfl.cc.fb.CCVariationParameterSaveData.Pack(builder, _o.ParameterList[_j]); }
      _parameterList = CreateParameterListVector(builder, __parameterList);
    }
    return CreateCCVariationPartsSaveData(
      builder,
      _partsName,
      _metadataName,
      _parameterList);
  }
};

public class CCVariationPartsSaveDataT
{
  [Newtonsoft.Json.JsonProperty("partsName")]
  public string PartsName { get; set; }
  [Newtonsoft.Json.JsonProperty("metadataName")]
  public string MetadataName { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterList")]
  public List<gfl.cc.fb.CCVariationParameterSaveDataT> ParameterList { get; set; }

  public CCVariationPartsSaveDataT() {
    this.PartsName = null;
    this.MetadataName = null;
    this.ParameterList = null;
  }
}

public struct CCVariationSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCVariationSaveData GetRootAsCCVariationSaveData(ByteBuffer _bb) { return GetRootAsCCVariationSaveData(_bb, new CCVariationSaveData()); }
  public static CCVariationSaveData GetRootAsCCVariationSaveData(ByteBuffer _bb, CCVariationSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCVariationSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.cc.fb.CCVariationPartsSaveData? PartsList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.cc.fb.CCVariationPartsSaveData?)(new gfl.cc.fb.CCVariationPartsSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartsListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCVariationSaveData> CreateCCVariationSaveData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset partsListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CCVariationSaveData.AddPartsList(builder, partsListOffset);
    CCVariationSaveData.AddName(builder, nameOffset);
    return CCVariationSaveData.EndCCVariationSaveData(builder);
  }

  public static void StartCCVariationSaveData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPartsList(FlatBufferBuilder builder, VectorOffset partsListOffset) { builder.AddOffset(1, partsListOffset.Value, 0); }
  public static VectorOffset CreatePartsListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartsListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartsListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCVariationSaveData> EndCCVariationSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCVariationSaveData>(o);
  }
  public CCVariationSaveDataT UnPack() {
    var _o = new CCVariationSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCVariationSaveDataT _o) {
    _o.Name = this.Name;
    _o.PartsList = new List<gfl.cc.fb.CCVariationPartsSaveDataT>();
    for (var _j = 0; _j < this.PartsListLength; ++_j) {_o.PartsList.Add(this.PartsList(_j).HasValue ? this.PartsList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.cc.fb.CCVariationSaveData> Pack(FlatBufferBuilder builder, CCVariationSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCVariationSaveData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _partsList = default(VectorOffset);
    if (_o.PartsList != null) {
      var __partsList = new Offset<gfl.cc.fb.CCVariationPartsSaveData>[_o.PartsList.Count];
      for (var _j = 0; _j < __partsList.Length; ++_j) { __partsList[_j] = gfl.cc.fb.CCVariationPartsSaveData.Pack(builder, _o.PartsList[_j]); }
      _partsList = CreatePartsListVector(builder, __partsList);
    }
    return CreateCCVariationSaveData(
      builder,
      _name,
      _partsList);
  }
};

public class CCVariationSaveDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("partsList")]
  public List<gfl.cc.fb.CCVariationPartsSaveDataT> PartsList { get; set; }

  public CCVariationSaveDataT() {
    this.Name = null;
    this.PartsList = null;
  }
}

public struct CCRootPartsSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCRootPartsSetting GetRootAsCCRootPartsSetting(ByteBuffer _bb) { return GetRootAsCCRootPartsSetting(_bb, new CCRootPartsSetting()); }
  public static CCRootPartsSetting GetRootAsCCRootPartsSetting(ByteBuffer _bb, CCRootPartsSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCRootPartsSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.cc.fb.CCRootPartsType Type { get { int o = __p.__offset(4); return o != 0 ? (gfl.cc.fb.CCRootPartsType)__p.bb.GetUint(o + __p.bb_pos) : gfl.cc.fb.CCRootPartsType.FromPartsList; } }
  public string RootTrmdlPathForPreview { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRootTrmdlPathForPreviewBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRootTrmdlPathForPreviewBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRootTrmdlPathForPreviewArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.cc.fb.CCRootPartsSetting> CreateCCRootPartsSetting(FlatBufferBuilder builder,
      gfl.cc.fb.CCRootPartsType type = gfl.cc.fb.CCRootPartsType.FromPartsList,
      StringOffset rootTrmdlPathForPreviewOffset = default(StringOffset)) {
    builder.StartTable(2);
    CCRootPartsSetting.AddRootTrmdlPathForPreview(builder, rootTrmdlPathForPreviewOffset);
    CCRootPartsSetting.AddType(builder, type);
    return CCRootPartsSetting.EndCCRootPartsSetting(builder);
  }

  public static void StartCCRootPartsSetting(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, gfl.cc.fb.CCRootPartsType type) { builder.AddUint(0, (uint)type, 0); }
  public static void AddRootTrmdlPathForPreview(FlatBufferBuilder builder, StringOffset rootTrmdlPathForPreviewOffset) { builder.AddOffset(1, rootTrmdlPathForPreviewOffset.Value, 0); }
  public static Offset<gfl.cc.fb.CCRootPartsSetting> EndCCRootPartsSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCRootPartsSetting>(o);
  }
  public CCRootPartsSettingT UnPack() {
    var _o = new CCRootPartsSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCRootPartsSettingT _o) {
    _o.Type = this.Type;
    _o.RootTrmdlPathForPreview = this.RootTrmdlPathForPreview;
  }
  public static Offset<gfl.cc.fb.CCRootPartsSetting> Pack(FlatBufferBuilder builder, CCRootPartsSettingT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCRootPartsSetting>);
    var _rootTrmdlPathForPreview = _o.RootTrmdlPathForPreview == null ? default(StringOffset) : builder.CreateString(_o.RootTrmdlPathForPreview);
    return CreateCCRootPartsSetting(
      builder,
      _o.Type,
      _rootTrmdlPathForPreview);
  }
};

public class CCRootPartsSettingT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.cc.fb.CCRootPartsType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("rootTrmdlPathForPreview")]
  public string RootTrmdlPathForPreview { get; set; }

  public CCRootPartsSettingT() {
    this.Type = gfl.cc.fb.CCRootPartsType.FromPartsList;
    this.RootTrmdlPathForPreview = null;
  }
}

public struct CCSaveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCSaveData GetRootAsCCSaveData(ByteBuffer _bb) { return GetRootAsCCSaveData(_bb, new CCSaveData()); }
  public static CCSaveData GetRootAsCCSaveData(ByteBuffer _bb, CCSaveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCSaveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.cc.fb.CCPartsSaveData? PartsList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.cc.fb.CCPartsSaveData?)(new gfl.cc.fb.CCPartsSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartsListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.cc.fb.CCModifierSaveData? ModifierData { get { int o = __p.__offset(6); return o != 0 ? (gfl.cc.fb.CCModifierSaveData?)(new gfl.cc.fb.CCModifierSaveData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.cc.fb.CCAttachPartsSaveData? AttachPartsList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.cc.fb.CCAttachPartsSaveData?)(new gfl.cc.fb.CCAttachPartsSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttachPartsListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.cc.fb.CCVariationSaveData? VariationList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.cc.fb.CCVariationSaveData?)(new gfl.cc.fb.CCVariationSaveData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariationListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AnimationSlotCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public gfl.cc.fb.CCRootPartsSetting? RootPartsSetting { get { int o = __p.__offset(14); return o != 0 ? (gfl.cc.fb.CCRootPartsSetting?)(new gfl.cc.fb.CCRootPartsSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string AnimationReferencePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationReferencePathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAnimationReferencePathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAnimationReferencePathArray() { return __p.__vector_as_array<byte>(16); }
  public string AnimationReferencePathList(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AnimationReferencePathListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCSaveData> CreateCCSaveData(FlatBufferBuilder builder,
      VectorOffset partsListOffset = default(VectorOffset),
      Offset<gfl.cc.fb.CCModifierSaveData> modifierDataOffset = default(Offset<gfl.cc.fb.CCModifierSaveData>),
      VectorOffset attachPartsListOffset = default(VectorOffset),
      VectorOffset variationListOffset = default(VectorOffset),
      int animationSlotCount = 1,
      Offset<gfl.cc.fb.CCRootPartsSetting> rootPartsSettingOffset = default(Offset<gfl.cc.fb.CCRootPartsSetting>),
      StringOffset animationReferencePathOffset = default(StringOffset),
      VectorOffset animationReferencePathListOffset = default(VectorOffset)) {
    builder.StartTable(8);
    CCSaveData.AddAnimationReferencePathList(builder, animationReferencePathListOffset);
    CCSaveData.AddAnimationReferencePath(builder, animationReferencePathOffset);
    CCSaveData.AddRootPartsSetting(builder, rootPartsSettingOffset);
    CCSaveData.AddAnimationSlotCount(builder, animationSlotCount);
    CCSaveData.AddVariationList(builder, variationListOffset);
    CCSaveData.AddAttachPartsList(builder, attachPartsListOffset);
    CCSaveData.AddModifierData(builder, modifierDataOffset);
    CCSaveData.AddPartsList(builder, partsListOffset);
    return CCSaveData.EndCCSaveData(builder);
  }

  public static void StartCCSaveData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddPartsList(FlatBufferBuilder builder, VectorOffset partsListOffset) { builder.AddOffset(0, partsListOffset.Value, 0); }
  public static VectorOffset CreatePartsListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartsListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartsListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddModifierData(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCModifierSaveData> modifierDataOffset) { builder.AddOffset(1, modifierDataOffset.Value, 0); }
  public static void AddAttachPartsList(FlatBufferBuilder builder, VectorOffset attachPartsListOffset) { builder.AddOffset(2, attachPartsListOffset.Value, 0); }
  public static VectorOffset CreateAttachPartsListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAttachPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttachPartsListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAttachPartsSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttachPartsListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVariationList(FlatBufferBuilder builder, VectorOffset variationListOffset) { builder.AddOffset(3, variationListOffset.Value, 0); }
  public static VectorOffset CreateVariationListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationSaveData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariationListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCVariationSaveData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVariationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnimationSlotCount(FlatBufferBuilder builder, int animationSlotCount) { builder.AddInt(4, animationSlotCount, 1); }
  public static void AddRootPartsSetting(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCRootPartsSetting> rootPartsSettingOffset) { builder.AddOffset(5, rootPartsSettingOffset.Value, 0); }
  public static void AddAnimationReferencePath(FlatBufferBuilder builder, StringOffset animationReferencePathOffset) { builder.AddOffset(6, animationReferencePathOffset.Value, 0); }
  public static void AddAnimationReferencePathList(FlatBufferBuilder builder, VectorOffset animationReferencePathListOffset) { builder.AddOffset(7, animationReferencePathListOffset.Value, 0); }
  public static VectorOffset CreateAnimationReferencePathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAnimationReferencePathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAnimationReferencePathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCSaveData> EndCCSaveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCSaveData>(o);
  }
  public static void FinishCCSaveDataBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCSaveData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCCSaveDataBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCSaveData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CCSaveDataT UnPack() {
    var _o = new CCSaveDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCSaveDataT _o) {
    _o.PartsList = new List<gfl.cc.fb.CCPartsSaveDataT>();
    for (var _j = 0; _j < this.PartsListLength; ++_j) {_o.PartsList.Add(this.PartsList(_j).HasValue ? this.PartsList(_j).Value.UnPack() : null);}
    _o.ModifierData = this.ModifierData.HasValue ? this.ModifierData.Value.UnPack() : null;
    _o.AttachPartsList = new List<gfl.cc.fb.CCAttachPartsSaveDataT>();
    for (var _j = 0; _j < this.AttachPartsListLength; ++_j) {_o.AttachPartsList.Add(this.AttachPartsList(_j).HasValue ? this.AttachPartsList(_j).Value.UnPack() : null);}
    _o.VariationList = new List<gfl.cc.fb.CCVariationSaveDataT>();
    for (var _j = 0; _j < this.VariationListLength; ++_j) {_o.VariationList.Add(this.VariationList(_j).HasValue ? this.VariationList(_j).Value.UnPack() : null);}
    _o.AnimationSlotCount = this.AnimationSlotCount;
    _o.RootPartsSetting = this.RootPartsSetting.HasValue ? this.RootPartsSetting.Value.UnPack() : null;
    _o.AnimationReferencePath = this.AnimationReferencePath;
    _o.AnimationReferencePathList = new List<string>();
    for (var _j = 0; _j < this.AnimationReferencePathListLength; ++_j) {_o.AnimationReferencePathList.Add(this.AnimationReferencePathList(_j));}
  }
  public static Offset<gfl.cc.fb.CCSaveData> Pack(FlatBufferBuilder builder, CCSaveDataT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCSaveData>);
    var _partsList = default(VectorOffset);
    if (_o.PartsList != null) {
      var __partsList = new Offset<gfl.cc.fb.CCPartsSaveData>[_o.PartsList.Count];
      for (var _j = 0; _j < __partsList.Length; ++_j) { __partsList[_j] = gfl.cc.fb.CCPartsSaveData.Pack(builder, _o.PartsList[_j]); }
      _partsList = CreatePartsListVector(builder, __partsList);
    }
    var _modifierData = _o.ModifierData == null ? default(Offset<gfl.cc.fb.CCModifierSaveData>) : gfl.cc.fb.CCModifierSaveData.Pack(builder, _o.ModifierData);
    var _attachPartsList = default(VectorOffset);
    if (_o.AttachPartsList != null) {
      var __attachPartsList = new Offset<gfl.cc.fb.CCAttachPartsSaveData>[_o.AttachPartsList.Count];
      for (var _j = 0; _j < __attachPartsList.Length; ++_j) { __attachPartsList[_j] = gfl.cc.fb.CCAttachPartsSaveData.Pack(builder, _o.AttachPartsList[_j]); }
      _attachPartsList = CreateAttachPartsListVector(builder, __attachPartsList);
    }
    var _variationList = default(VectorOffset);
    if (_o.VariationList != null) {
      var __variationList = new Offset<gfl.cc.fb.CCVariationSaveData>[_o.VariationList.Count];
      for (var _j = 0; _j < __variationList.Length; ++_j) { __variationList[_j] = gfl.cc.fb.CCVariationSaveData.Pack(builder, _o.VariationList[_j]); }
      _variationList = CreateVariationListVector(builder, __variationList);
    }
    var _rootPartsSetting = _o.RootPartsSetting == null ? default(Offset<gfl.cc.fb.CCRootPartsSetting>) : gfl.cc.fb.CCRootPartsSetting.Pack(builder, _o.RootPartsSetting);
    var _animationReferencePath = _o.AnimationReferencePath == null ? default(StringOffset) : builder.CreateString(_o.AnimationReferencePath);
    var _animationReferencePathList = default(VectorOffset);
    if (_o.AnimationReferencePathList != null) {
      var __animationReferencePathList = new StringOffset[_o.AnimationReferencePathList.Count];
      for (var _j = 0; _j < __animationReferencePathList.Length; ++_j) { __animationReferencePathList[_j] = builder.CreateString(_o.AnimationReferencePathList[_j]); }
      _animationReferencePathList = CreateAnimationReferencePathListVector(builder, __animationReferencePathList);
    }
    return CreateCCSaveData(
      builder,
      _partsList,
      _modifierData,
      _attachPartsList,
      _variationList,
      _o.AnimationSlotCount,
      _rootPartsSetting,
      _animationReferencePath,
      _animationReferencePathList);
  }
};

public class CCSaveDataT
{
  [Newtonsoft.Json.JsonProperty("partsList")]
  public List<gfl.cc.fb.CCPartsSaveDataT> PartsList { get; set; }
  [Newtonsoft.Json.JsonProperty("modifierData")]
  public gfl.cc.fb.CCModifierSaveDataT ModifierData { get; set; }
  [Newtonsoft.Json.JsonProperty("attachPartsList")]
  public List<gfl.cc.fb.CCAttachPartsSaveDataT> AttachPartsList { get; set; }
  [Newtonsoft.Json.JsonProperty("variationList")]
  public List<gfl.cc.fb.CCVariationSaveDataT> VariationList { get; set; }
  [Newtonsoft.Json.JsonProperty("animationSlotCount")]
  public int AnimationSlotCount { get; set; }
  [Newtonsoft.Json.JsonProperty("rootPartsSetting")]
  public gfl.cc.fb.CCRootPartsSettingT RootPartsSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("animationReferencePath")]
  public string AnimationReferencePath { get; set; }
  [Newtonsoft.Json.JsonProperty("animationReferencePathList")]
  public List<string> AnimationReferencePathList { get; set; }

  public CCSaveDataT() {
    this.PartsList = null;
    this.ModifierData = null;
    this.AttachPartsList = null;
    this.VariationList = null;
    this.AnimationSlotCount = 1;
    this.RootPartsSetting = null;
    this.AnimationReferencePath = null;
    this.AnimationReferencePathList = null;
  }

  public static CCSaveDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CCSaveDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CCSaveDataT DeserializeFromBinary(byte[] fbBuffer) {
    return CCSaveData.GetRootAsCCSaveData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CCSaveData.FinishCCSaveDataBuffer(fbb, CCSaveData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
