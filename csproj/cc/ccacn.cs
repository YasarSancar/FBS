// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.cc.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CCAnimationParts : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCAnimationParts GetRootAsCCAnimationParts(ByteBuffer _bb) { return GetRootAsCCAnimationParts(_bb, new CCAnimationParts()); }
  public static CCAnimationParts GetRootAsCCAnimationParts(ByteBuffer _bb, CCAnimationParts obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCAnimationParts __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TracnjFilePathList(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TracnjFilePathListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.cc.fb.CCAnimationParts> CreateCCAnimationParts(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset tracnjFilePathListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CCAnimationParts.AddTracnjFilePathList(builder, tracnjFilePathListOffset);
    CCAnimationParts.AddName(builder, nameOffset);
    return CCAnimationParts.EndCCAnimationParts(builder);
  }

  public static void StartCCAnimationParts(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTracnjFilePathList(FlatBufferBuilder builder, VectorOffset tracnjFilePathListOffset) { builder.AddOffset(1, tracnjFilePathListOffset.Value, 0); }
  public static VectorOffset CreateTracnjFilePathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTracnjFilePathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTracnjFilePathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.cc.fb.CCAnimationParts> EndCCAnimationParts(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCAnimationParts>(o);
  }
  public CCAnimationPartsT UnPack() {
    var _o = new CCAnimationPartsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCAnimationPartsT _o) {
    _o.Name = this.Name;
    _o.TracnjFilePathList = new List<string>();
    for (var _j = 0; _j < this.TracnjFilePathListLength; ++_j) {_o.TracnjFilePathList.Add(this.TracnjFilePathList(_j));}
  }
  public static Offset<gfl.cc.fb.CCAnimationParts> Pack(FlatBufferBuilder builder, CCAnimationPartsT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCAnimationParts>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _tracnjFilePathList = default(VectorOffset);
    if (_o.TracnjFilePathList != null) {
      var __tracnjFilePathList = new StringOffset[_o.TracnjFilePathList.Count];
      for (var _j = 0; _j < __tracnjFilePathList.Length; ++_j) { __tracnjFilePathList[_j] = builder.CreateString(_o.TracnjFilePathList[_j]); }
      _tracnjFilePathList = CreateTracnjFilePathListVector(builder, __tracnjFilePathList);
    }
    return CreateCCAnimationParts(
      builder,
      _name,
      _tracnjFilePathList);
  }
};

public class CCAnimationPartsT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("tracnjFilePathList")]
  public List<string> TracnjFilePathList { get; set; }

  public CCAnimationPartsT() {
    this.Name = null;
    this.TracnjFilePathList = null;
  }
}

public struct CCAnimationConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCAnimationConfig GetRootAsCCAnimationConfig(ByteBuffer _bb) { return GetRootAsCCAnimationConfig(_bb, new CCAnimationConfig()); }
  public static CCAnimationConfig GetRootAsCCAnimationConfig(ByteBuffer _bb, CCAnimationConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCAnimationConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.cc.fb.CCAnimationParts? PartsList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.cc.fb.CCAnimationParts?)(new gfl.cc.fb.CCAnimationParts()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartsListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int AnimationSlotCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<gfl.cc.fb.CCAnimationConfig> CreateCCAnimationConfig(FlatBufferBuilder builder,
      VectorOffset partsListOffset = default(VectorOffset),
      int animationSlotCount = 1) {
    builder.StartTable(2);
    CCAnimationConfig.AddAnimationSlotCount(builder, animationSlotCount);
    CCAnimationConfig.AddPartsList(builder, partsListOffset);
    return CCAnimationConfig.EndCCAnimationConfig(builder);
  }

  public static void StartCCAnimationConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPartsList(FlatBufferBuilder builder, VectorOffset partsListOffset) { builder.AddOffset(0, partsListOffset.Value, 0); }
  public static VectorOffset CreatePartsListVector(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAnimationParts>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartsListVectorBlock(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAnimationParts>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartsListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAnimationSlotCount(FlatBufferBuilder builder, int animationSlotCount) { builder.AddInt(1, animationSlotCount, 1); }
  public static Offset<gfl.cc.fb.CCAnimationConfig> EndCCAnimationConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.cc.fb.CCAnimationConfig>(o);
  }
  public static void FinishCCAnimationConfigBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAnimationConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCCAnimationConfigBuffer(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCAnimationConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CCAnimationConfigT UnPack() {
    var _o = new CCAnimationConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCAnimationConfigT _o) {
    _o.PartsList = new List<gfl.cc.fb.CCAnimationPartsT>();
    for (var _j = 0; _j < this.PartsListLength; ++_j) {_o.PartsList.Add(this.PartsList(_j).HasValue ? this.PartsList(_j).Value.UnPack() : null);}
    _o.AnimationSlotCount = this.AnimationSlotCount;
  }
  public static Offset<gfl.cc.fb.CCAnimationConfig> Pack(FlatBufferBuilder builder, CCAnimationConfigT _o) {
    if (_o == null) return default(Offset<gfl.cc.fb.CCAnimationConfig>);
    var _partsList = default(VectorOffset);
    if (_o.PartsList != null) {
      var __partsList = new Offset<gfl.cc.fb.CCAnimationParts>[_o.PartsList.Count];
      for (var _j = 0; _j < __partsList.Length; ++_j) { __partsList[_j] = gfl.cc.fb.CCAnimationParts.Pack(builder, _o.PartsList[_j]); }
      _partsList = CreatePartsListVector(builder, __partsList);
    }
    return CreateCCAnimationConfig(
      builder,
      _partsList,
      _o.AnimationSlotCount);
  }
};

public class CCAnimationConfigT
{
  [Newtonsoft.Json.JsonProperty("partsList")]
  public List<gfl.cc.fb.CCAnimationPartsT> PartsList { get; set; }
  [Newtonsoft.Json.JsonProperty("animationSlotCount")]
  public int AnimationSlotCount { get; set; }

  public CCAnimationConfigT() {
    this.PartsList = null;
    this.AnimationSlotCount = 1;
  }

  public static CCAnimationConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CCAnimationConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CCAnimationConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return CCAnimationConfig.GetRootAsCCAnimationConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CCAnimationConfig.FinishCCAnimationConfigBuffer(fbb, CCAnimationConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
