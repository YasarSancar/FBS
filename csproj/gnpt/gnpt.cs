// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.gnpt.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CompareFuncKind : uint
{
  Never = 0,
  Less = 1,
  Equal = 2,
  LEqual = 3,
  Greater = 4,
  NotEqual = 5,
  GEqual = 6,
  Always = 7,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BlendFuncKind : uint
{
  Zero = 0,
  One = 1,
  SrcColor = 2,
  OneMinusSrcColor = 3,
  SrcAlpha = 4,
  OneMinusSrcAlpha = 5,
  DstAlpha = 6,
  OneMinusDstAlpha = 7,
  DstColor = 8,
  OneMinusDstColor = 9,
  SrcAlphaSaturate = 10,
  Src1Color = 11,
  OneMinusSrc1Color = 12,
  Src1Alpha = 13,
  OneMinusSrc1Alpha = 14,
  ConstantColor = 15,
  OneMinusConstantColor = 16,
  ConstantAlpha = 17,
  OneMinusConstantAlpha = 18,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BlendOperatorKind : uint
{
  Add = 0,
  Sub = 1,
  ReverseSub = 2,
  Min = 3,
  Max = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum DrawFaceKind : uint
{
  None = 0,
  Front = 1,
  Back = 2,
  Both = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ParticleSortOrder : uint
{
  None = 0,
  Ascending = 1,
  Descending = 2,
  ZSort = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RandomType : uint
{
  ChangeEveryTime = 0,
  CommonWithinEmitterSet = 1,
  Fixed = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ParticleFollowMode : uint
{
  None = 0,
  AllSrt = 1,
  OnlyTranslation = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitProcMode : uint
{
  Time = 0,
  Distance = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RotationAxis : uint
{
  X = 0,
  Y = 1,
  Z = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BehaviorOnHit : uint
{
  Reflection = 0,
  Extinguish = 1,
  HandledByCustomShaders = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CalculationMethod : uint
{
  BillboardStripes = 0,
  EmitterMatrixStripe = 1,
  ExtendAboveAndBelowTheEmitter = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Options : uint
{
  Normal = 0,
  Cross = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Texturing : uint
{
  PasteAll = 0,
  PasteToTheDrawingArea = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ConnectionType : uint
{
  Normal = 0,
  ConnectToTheTip = 1,
  ConnectToTheEmitter = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CalculationMethod2 : uint
{
  BillboardStripes = 0,
  EmitterMatrixStripe = 1,
  ExtendAboveAndBelowTheEmitter = 2,
  BillboardStripes2 = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum UvAssignment : uint
{
  FixedPercentageForEachHistory = 0,
  DependsOnHistoryDistance = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ClippingSettings : uint
{
  NoClipping = 0,
  ClipUpperSide = 1,
  ClipLowerSide = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterPlugin : byte
{
  NONE = 0,
  ConnectableStripesEmitterPlugin = 1,
  HistoricalStripesEmitterPlugin = 2,
  HistoricalStripes2EmitterPlugin = 3,
  IntraRangeLoopEmitterPlugin = 4,
};

public class EmitterPluginUnion {
  public EmitterPlugin Type { get; set; }
  public object Value { get; set; }

  public EmitterPluginUnion() {
    this.Type = EmitterPlugin.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.gnpt.fb.ConnectableStripesEmitterPluginT AsConnectableStripesEmitterPlugin() { return this.As<gfl.gnpt.fb.ConnectableStripesEmitterPluginT>(); }
  public gfl.gnpt.fb.HistoricalStripesEmitterPluginT AsHistoricalStripesEmitterPlugin() { return this.As<gfl.gnpt.fb.HistoricalStripesEmitterPluginT>(); }
  public gfl.gnpt.fb.HistoricalStripes2EmitterPluginT AsHistoricalStripes2EmitterPlugin() { return this.As<gfl.gnpt.fb.HistoricalStripes2EmitterPluginT>(); }
  public gfl.gnpt.fb.IntraRangeLoopEmitterPluginT AsIntraRangeLoopEmitterPlugin() { return this.As<gfl.gnpt.fb.IntraRangeLoopEmitterPluginT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, EmitterPluginUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case EmitterPlugin.ConnectableStripesEmitterPlugin: return gfl.gnpt.fb.ConnectableStripesEmitterPlugin.Pack(builder, _o.AsConnectableStripesEmitterPlugin()).Value;
      case EmitterPlugin.HistoricalStripesEmitterPlugin: return gfl.gnpt.fb.HistoricalStripesEmitterPlugin.Pack(builder, _o.AsHistoricalStripesEmitterPlugin()).Value;
      case EmitterPlugin.HistoricalStripes2EmitterPlugin: return gfl.gnpt.fb.HistoricalStripes2EmitterPlugin.Pack(builder, _o.AsHistoricalStripes2EmitterPlugin()).Value;
      case EmitterPlugin.IntraRangeLoopEmitterPlugin: return gfl.gnpt.fb.IntraRangeLoopEmitterPlugin.Pack(builder, _o.AsIntraRangeLoopEmitterPlugin()).Value;
    }
  }
}

public class EmitterPluginUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(EmitterPluginUnion) || objectType == typeof(System.Collections.Generic.List<EmitterPluginUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<EmitterPluginUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as EmitterPluginUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, EmitterPluginUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<EmitterPluginUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as EmitterPluginUnion, serializer);
    }
  }
  public EmitterPluginUnion ReadJson(Newtonsoft.Json.JsonReader reader, EmitterPluginUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case EmitterPlugin.ConnectableStripesEmitterPlugin: _o.Value = serializer.Deserialize<gfl.gnpt.fb.ConnectableStripesEmitterPluginT>(reader); break;
      case EmitterPlugin.HistoricalStripesEmitterPlugin: _o.Value = serializer.Deserialize<gfl.gnpt.fb.HistoricalStripesEmitterPluginT>(reader); break;
      case EmitterPlugin.HistoricalStripes2EmitterPlugin: _o.Value = serializer.Deserialize<gfl.gnpt.fb.HistoricalStripes2EmitterPluginT>(reader); break;
      case EmitterPlugin.IntraRangeLoopEmitterPlugin: _o.Value = serializer.Deserialize<gfl.gnpt.fb.IntraRangeLoopEmitterPluginT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ShapeKind : uint
{
  Quad = 0,
  Mesh = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ParticleBehaviorKind : uint
{
  BillboardParallel = 0,
  BillboardFollow = 1,
  YAxisBillboardParallel = 2,
  YAxisBillboardFollow = 3,
  XYPlanePolygon = 4,
  XZPlanePolygon = 5,
  DirectionalBillboard = 6,
  DirectionalPolygon = 7,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ParticleOffsetKind : uint
{
  None = 0,
  ZDirection = 1,
  Camera = 2,
  FixedSize = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum WaveKind : uint
{
  SinWave = 0,
  SawWave = 1,
  SquareWave = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CombinerOperation : uint
{
  Multiply = 0,
  Add = 1,
  Sub = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CombinerChannel : uint
{
  C1 = 0,
  OneMinusC1 = 1,
  C2 = 2,
  OneMinusC2 = 3,
  One = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CombinerColorExpression : uint
{
  C0 = 0,
  C0_Mul_R = 1,
  C0_Mul_R_Plus_C1_Mul_OneMinusR = 2,
  C0_Mul_R_Plus_C1 = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CombinerAlphaExpression : uint
{
  R_Mul_A0 = 0,
  R_Mul_A0_Mul_A1 = 1,
  R_Minus_OneMinusA0_Mul_2 = 2,
  R_Minus_A0_Mul_A1 = 3,
  Clamp_R_Minus_A0_Mul_4_Mul_A1 = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ShaderKind : uint
{
  Basic = 0,
  Refract = 1,
  Distortion = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum FilterMode : uint
{
  Linear = 0,
  Nearest = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum WrapMode : uint
{
  Mirror = 0,
  Repeat = 1,
  Clamp = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum TexturePatternAnimationKind : uint
{
  None = 0,
  LifeFit = 1,
  Clamp = 2,
  Loop = 3,
  Random = 4,
  Surface = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RepeatCountKind : uint
{
  OneXOne = 0,
  TwoXOne = 1,
  OneXTwo = 2,
  TwoXTwo = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ColorBehaviorType : uint
{
  Fixed = 0,
  Animation = 1,
  Random = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AlphaBehaviorType : uint
{
  Fixed = 0,
  Animation = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AlphaProcessKind : uint
{
  None = 0,
  Vertex = 1,
  Fragment = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum SoftParticleProcessKind : uint
{
  None = 0,
  Vertex = 1,
  Fragment = 2,
  ShieldingCheck = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RotationOrder : uint
{
  Y_Z_X = 0,
  X_Y_Z = 1,
  Z_X_Y = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterTypeKind : uint
{
  Point = 0,
  Circle = 1,
  CircleEqualDivision = 2,
  CircleVolume = 3,
  Sphere = 4,
  SphereEqualDivision = 5,
  SphereEqualDivision64 = 6,
  SphereVolume = 7,
  Cylinder = 8,
  CylinderVolume = 9,
  Cube = 10,
  CubeVolume = 11,
  Line = 12,
  LineEqualDivision = 13,
  Rectangle = 14,
  Primitives = 15,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterShapeArcTypeKind : uint
{
  Longitude = 0,
  Latitude = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterShapeEmissionTypeKind : uint
{
  AllAtOnce = 0,
  Random = 1,
  IndexOrder = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterShapeSphereAxisKind : uint
{
  PlusX = 0,
  MinusX = 1,
  PlusY = 2,
  MinusY = 3,
  PlusZ = 4,
  MinusZ = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EmitterShapeSphereAndDivisionDivisionKind : uint
{
  Division2 = 0,
  Division3 = 1,
  Division4 = 2,
  Division6 = 3,
  Division8 = 4,
  Division12 = 5,
  Division20 = 6,
  Division32 = 7,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CustomShaderParameterValue : byte
{
  NONE = 0,
  Int = 1,
  Float = 2,
  Bool = 3,
};

public class CustomShaderParameterValueUnion {
  public CustomShaderParameterValue Type { get; set; }
  public object Value { get; set; }

  public CustomShaderParameterValueUnion() {
    this.Type = CustomShaderParameterValue.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.gnpt.fb.CustomShaderParameterValueIntT AsInt() { return this.As<gfl.gnpt.fb.CustomShaderParameterValueIntT>(); }
  public gfl.gnpt.fb.CustomShaderParameterValueFloatT AsFloat() { return this.As<gfl.gnpt.fb.CustomShaderParameterValueFloatT>(); }
  public gfl.gnpt.fb.CustomShaderParameterValueBoolT AsBool() { return this.As<gfl.gnpt.fb.CustomShaderParameterValueBoolT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, CustomShaderParameterValueUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case CustomShaderParameterValue.Int: return gfl.gnpt.fb.CustomShaderParameterValueInt.Pack(builder, _o.AsInt()).Value;
      case CustomShaderParameterValue.Float: return gfl.gnpt.fb.CustomShaderParameterValueFloat.Pack(builder, _o.AsFloat()).Value;
      case CustomShaderParameterValue.Bool: return gfl.gnpt.fb.CustomShaderParameterValueBool.Pack(builder, _o.AsBool()).Value;
    }
  }
}

public class CustomShaderParameterValueUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(CustomShaderParameterValueUnion) || objectType == typeof(System.Collections.Generic.List<CustomShaderParameterValueUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<CustomShaderParameterValueUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as CustomShaderParameterValueUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, CustomShaderParameterValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<CustomShaderParameterValueUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as CustomShaderParameterValueUnion, serializer);
    }
  }
  public CustomShaderParameterValueUnion ReadJson(Newtonsoft.Json.JsonReader reader, CustomShaderParameterValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case CustomShaderParameterValue.Int: _o.Value = serializer.Deserialize<gfl.gnpt.fb.CustomShaderParameterValueIntT>(reader); break;
      case CustomShaderParameterValue.Float: _o.Value = serializer.Deserialize<gfl.gnpt.fb.CustomShaderParameterValueFloatT>(reader); break;
      case CustomShaderParameterValue.Bool: _o.Value = serializer.Deserialize<gfl.gnpt.fb.CustomShaderParameterValueBoolT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CustomShaderParameterDefineType : uint
{
  Int = 0,
  Float = 1,
  Bool = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum PreviewMode : uint
{
  Restart = 0,
  Stop = 1,
  Pause = 2,
  Step = 3,
  Fade = 4,
  LoopOn = 5,
  LoopOff = 6,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LiveEditNode : byte
{
  NONE = 0,
  Workspace = 1,
  EmitterSet = 2,
  Emitter = 3,
  Preview = 4,
};

public class LiveEditNodeUnion {
  public LiveEditNode Type { get; set; }
  public object Value { get; set; }

  public LiveEditNodeUnion() {
    this.Type = LiveEditNode.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.gnpt.fb.WorkspaceT AsWorkspace() { return this.As<gfl.gnpt.fb.WorkspaceT>(); }
  public gfl.gnpt.fb.EmitterSetT AsEmitterSet() { return this.As<gfl.gnpt.fb.EmitterSetT>(); }
  public gfl.gnpt.fb.EmitterT AsEmitter() { return this.As<gfl.gnpt.fb.EmitterT>(); }
  public gfl.gnpt.fb.PreviewT AsPreview() { return this.As<gfl.gnpt.fb.PreviewT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, LiveEditNodeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case LiveEditNode.Workspace: return gfl.gnpt.fb.Workspace.Pack(builder, _o.AsWorkspace()).Value;
      case LiveEditNode.EmitterSet: return gfl.gnpt.fb.EmitterSet.Pack(builder, _o.AsEmitterSet()).Value;
      case LiveEditNode.Emitter: return gfl.gnpt.fb.Emitter.Pack(builder, _o.AsEmitter()).Value;
      case LiveEditNode.Preview: return gfl.gnpt.fb.Preview.Pack(builder, _o.AsPreview()).Value;
    }
  }
}

public class LiveEditNodeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(LiveEditNodeUnion) || objectType == typeof(System.Collections.Generic.List<LiveEditNodeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<LiveEditNodeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as LiveEditNodeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, LiveEditNodeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<LiveEditNodeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as LiveEditNodeUnion, serializer);
    }
  }
  public LiveEditNodeUnion ReadJson(Newtonsoft.Json.JsonReader reader, LiveEditNodeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case LiveEditNode.Workspace: _o.Value = serializer.Deserialize<gfl.gnpt.fb.WorkspaceT>(reader); break;
      case LiveEditNode.EmitterSet: _o.Value = serializer.Deserialize<gfl.gnpt.fb.EmitterSetT>(reader); break;
      case LiveEditNode.Emitter: _o.Value = serializer.Deserialize<gfl.gnpt.fb.EmitterT>(reader); break;
      case LiveEditNode.Preview: _o.Value = serializer.Deserialize<gfl.gnpt.fb.PreviewT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LiveEditMode : uint
{
  Reload = 0,
  Update = 1,
  Preview = 2,
};

public struct KeyframeAnimation1f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation1f GetRootAsKeyframeAnimation1f(ByteBuffer _bb) { return GetRootAsKeyframeAnimation1f(_bb, new KeyframeAnimation1f()); }
  public static KeyframeAnimation1f GetRootAsKeyframeAnimation1f(ByteBuffer _bb, KeyframeAnimation1f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation1f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Keyframes(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int KeyframesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetKeyframesBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetKeyframesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetKeyframesArray() { return __p.__vector_as_array<float>(4); }
  public float Times(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int TimesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetTimesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetTimesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetTimesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f> CreateKeyframeAnimation1f(FlatBufferBuilder builder,
      VectorOffset keyframesOffset = default(VectorOffset),
      VectorOffset timesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyframeAnimation1f.AddTimes(builder, timesOffset);
    KeyframeAnimation1f.AddKeyframes(builder, keyframesOffset);
    return KeyframeAnimation1f.EndKeyframeAnimation1f(builder);
  }

  public static void StartKeyframeAnimation1f(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyframes(FlatBufferBuilder builder, VectorOffset keyframesOffset) { builder.AddOffset(0, keyframesOffset.Value, 0); }
  public static VectorOffset CreateKeyframesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKeyframesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeyframesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTimes(FlatBufferBuilder builder, VectorOffset timesOffset) { builder.AddOffset(1, timesOffset.Value, 0); }
  public static VectorOffset CreateTimesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f> EndKeyframeAnimation1f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation1f>(o);
  }
  public KeyframeAnimation1fT UnPack() {
    var _o = new KeyframeAnimation1fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation1fT _o) {
    _o.Keyframes = new List<float>();
    for (var _j = 0; _j < this.KeyframesLength; ++_j) {_o.Keyframes.Add(this.Keyframes(_j));}
    _o.Times = new List<float>();
    for (var _j = 0; _j < this.TimesLength; ++_j) {_o.Times.Add(this.Times(_j));}
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f> Pack(FlatBufferBuilder builder, KeyframeAnimation1fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>);
    var _keyframes = default(VectorOffset);
    if (_o.Keyframes != null) {
      var __keyframes = _o.Keyframes.ToArray();
      _keyframes = CreateKeyframesVector(builder, __keyframes);
    }
    var _times = default(VectorOffset);
    if (_o.Times != null) {
      var __times = _o.Times.ToArray();
      _times = CreateTimesVector(builder, __times);
    }
    return CreateKeyframeAnimation1f(
      builder,
      _keyframes,
      _times);
  }
};

public class KeyframeAnimation1fT
{
  [Newtonsoft.Json.JsonProperty("keyframes")]
  public List<float> Keyframes { get; set; }
  [Newtonsoft.Json.JsonProperty("times")]
  public List<float> Times { get; set; }

  public KeyframeAnimation1fT() {
    this.Keyframes = null;
    this.Times = null;
  }
}

public struct KeyframeAnimation2f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation2f GetRootAsKeyframeAnimation2f(ByteBuffer _bb) { return GetRootAsKeyframeAnimation2f(_bb, new KeyframeAnimation2f()); }
  public static KeyframeAnimation2f GetRootAsKeyframeAnimation2f(ByteBuffer _bb, KeyframeAnimation2f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation2f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector2f? Keyframes(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int KeyframesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Times(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int TimesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetTimesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetTimesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetTimesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation2f> CreateKeyframeAnimation2f(FlatBufferBuilder builder,
      VectorOffset keyframesOffset = default(VectorOffset),
      VectorOffset timesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyframeAnimation2f.AddTimes(builder, timesOffset);
    KeyframeAnimation2f.AddKeyframes(builder, keyframesOffset);
    return KeyframeAnimation2f.EndKeyframeAnimation2f(builder);
  }

  public static void StartKeyframeAnimation2f(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyframes(FlatBufferBuilder builder, VectorOffset keyframesOffset) { builder.AddOffset(0, keyframesOffset.Value, 0); }
  public static void StartKeyframesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddTimes(FlatBufferBuilder builder, VectorOffset timesOffset) { builder.AddOffset(1, timesOffset.Value, 0); }
  public static VectorOffset CreateTimesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation2f> EndKeyframeAnimation2f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation2f>(o);
  }
  public KeyframeAnimation2fT UnPack() {
    var _o = new KeyframeAnimation2fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation2fT _o) {
    _o.Keyframes = new List<gfl.gnpt.fb.Vector2fT>();
    for (var _j = 0; _j < this.KeyframesLength; ++_j) {_o.Keyframes.Add(this.Keyframes(_j).HasValue ? this.Keyframes(_j).Value.UnPack() : null);}
    _o.Times = new List<float>();
    for (var _j = 0; _j < this.TimesLength; ++_j) {_o.Times.Add(this.Times(_j));}
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation2f> Pack(FlatBufferBuilder builder, KeyframeAnimation2fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation2f>);
    var _keyframes = default(VectorOffset);
    if (_o.Keyframes != null) {
      StartKeyframesVector(builder, _o.Keyframes.Count);
      for (var _j = _o.Keyframes.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.Vector2f.Pack(builder, _o.Keyframes[_j]); }
      _keyframes = builder.EndVector();
    }
    var _times = default(VectorOffset);
    if (_o.Times != null) {
      var __times = _o.Times.ToArray();
      _times = CreateTimesVector(builder, __times);
    }
    return CreateKeyframeAnimation2f(
      builder,
      _keyframes,
      _times);
  }
};

public class KeyframeAnimation2fT
{
  [Newtonsoft.Json.JsonProperty("keyframes")]
  public List<gfl.gnpt.fb.Vector2fT> Keyframes { get; set; }
  [Newtonsoft.Json.JsonProperty("times")]
  public List<float> Times { get; set; }

  public KeyframeAnimation2fT() {
    this.Keyframes = null;
    this.Times = null;
  }
}

public struct KeyframeAnimation3f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation3f GetRootAsKeyframeAnimation3f(ByteBuffer _bb) { return GetRootAsKeyframeAnimation3f(_bb, new KeyframeAnimation3f()); }
  public static KeyframeAnimation3f GetRootAsKeyframeAnimation3f(ByteBuffer _bb, KeyframeAnimation3f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Keyframes(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int KeyframesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Times(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int TimesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetTimesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetTimesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetTimesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation3f> CreateKeyframeAnimation3f(FlatBufferBuilder builder,
      VectorOffset keyframesOffset = default(VectorOffset),
      VectorOffset timesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyframeAnimation3f.AddTimes(builder, timesOffset);
    KeyframeAnimation3f.AddKeyframes(builder, keyframesOffset);
    return KeyframeAnimation3f.EndKeyframeAnimation3f(builder);
  }

  public static void StartKeyframeAnimation3f(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyframes(FlatBufferBuilder builder, VectorOffset keyframesOffset) { builder.AddOffset(0, keyframesOffset.Value, 0); }
  public static void StartKeyframesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddTimes(FlatBufferBuilder builder, VectorOffset timesOffset) { builder.AddOffset(1, timesOffset.Value, 0); }
  public static VectorOffset CreateTimesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation3f> EndKeyframeAnimation3f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation3f>(o);
  }
  public KeyframeAnimation3fT UnPack() {
    var _o = new KeyframeAnimation3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation3fT _o) {
    _o.Keyframes = new List<gfl.gnpt.fb.Vector3fT>();
    for (var _j = 0; _j < this.KeyframesLength; ++_j) {_o.Keyframes.Add(this.Keyframes(_j).HasValue ? this.Keyframes(_j).Value.UnPack() : null);}
    _o.Times = new List<float>();
    for (var _j = 0; _j < this.TimesLength; ++_j) {_o.Times.Add(this.Times(_j));}
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation3f> Pack(FlatBufferBuilder builder, KeyframeAnimation3fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>);
    var _keyframes = default(VectorOffset);
    if (_o.Keyframes != null) {
      StartKeyframesVector(builder, _o.Keyframes.Count);
      for (var _j = _o.Keyframes.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.Vector3f.Pack(builder, _o.Keyframes[_j]); }
      _keyframes = builder.EndVector();
    }
    var _times = default(VectorOffset);
    if (_o.Times != null) {
      var __times = _o.Times.ToArray();
      _times = CreateTimesVector(builder, __times);
    }
    return CreateKeyframeAnimation3f(
      builder,
      _keyframes,
      _times);
  }
};

public class KeyframeAnimation3fT
{
  [Newtonsoft.Json.JsonProperty("keyframes")]
  public List<gfl.gnpt.fb.Vector3fT> Keyframes { get; set; }
  [Newtonsoft.Json.JsonProperty("times")]
  public List<float> Times { get; set; }

  public KeyframeAnimation3fT() {
    this.Keyframes = null;
    this.Times = null;
  }
}

public struct KeyframeAnimation4f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation4f GetRootAsKeyframeAnimation4f(ByteBuffer _bb) { return GetRootAsKeyframeAnimation4f(_bb, new KeyframeAnimation4f()); }
  public static KeyframeAnimation4f GetRootAsKeyframeAnimation4f(ByteBuffer _bb, KeyframeAnimation4f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector4f? Keyframes(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector4f?)(new gfl.gnpt.fb.Vector4f()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int KeyframesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Times(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int TimesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetTimesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetTimesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetTimesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation4f> CreateKeyframeAnimation4f(FlatBufferBuilder builder,
      VectorOffset keyframesOffset = default(VectorOffset),
      VectorOffset timesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    KeyframeAnimation4f.AddTimes(builder, timesOffset);
    KeyframeAnimation4f.AddKeyframes(builder, keyframesOffset);
    return KeyframeAnimation4f.EndKeyframeAnimation4f(builder);
  }

  public static void StartKeyframeAnimation4f(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKeyframes(FlatBufferBuilder builder, VectorOffset keyframesOffset) { builder.AddOffset(0, keyframesOffset.Value, 0); }
  public static void StartKeyframesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static void AddTimes(FlatBufferBuilder builder, VectorOffset timesOffset) { builder.AddOffset(1, timesOffset.Value, 0); }
  public static VectorOffset CreateTimesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation4f> EndKeyframeAnimation4f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation4f>(o);
  }
  public KeyframeAnimation4fT UnPack() {
    var _o = new KeyframeAnimation4fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation4fT _o) {
    _o.Keyframes = new List<gfl.gnpt.fb.Vector4fT>();
    for (var _j = 0; _j < this.KeyframesLength; ++_j) {_o.Keyframes.Add(this.Keyframes(_j).HasValue ? this.Keyframes(_j).Value.UnPack() : null);}
    _o.Times = new List<float>();
    for (var _j = 0; _j < this.TimesLength; ++_j) {_o.Times.Add(this.Times(_j));}
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation4f> Pack(FlatBufferBuilder builder, KeyframeAnimation4fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation4f>);
    var _keyframes = default(VectorOffset);
    if (_o.Keyframes != null) {
      StartKeyframesVector(builder, _o.Keyframes.Count);
      for (var _j = _o.Keyframes.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.Vector4f.Pack(builder, _o.Keyframes[_j]); }
      _keyframes = builder.EndVector();
    }
    var _times = default(VectorOffset);
    if (_o.Times != null) {
      var __times = _o.Times.ToArray();
      _times = CreateTimesVector(builder, __times);
    }
    return CreateKeyframeAnimation4f(
      builder,
      _keyframes,
      _times);
  }
};

public class KeyframeAnimation4fT
{
  [Newtonsoft.Json.JsonProperty("keyframes")]
  public List<gfl.gnpt.fb.Vector4fT> Keyframes { get; set; }
  [Newtonsoft.Json.JsonProperty("times")]
  public List<float> Times { get; set; }

  public KeyframeAnimation4fT() {
    this.Keyframes = null;
    this.Times = null;
  }
}

public struct KeyframeAnimation1f2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation1f2 GetRootAsKeyframeAnimation1f2(ByteBuffer _bb) { return GetRootAsKeyframeAnimation1f2(_bb, new KeyframeAnimation1f2()); }
  public static KeyframeAnimation1f2 GetRootAsKeyframeAnimation1f2(ByteBuffer _bb, KeyframeAnimation1f2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation1f2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.KeyframeAnimation1f? X { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? Y { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f2> CreateKeyframeAnimation1f2(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> xOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> yOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>)) {
    builder.StartTable(2);
    KeyframeAnimation1f2.AddY(builder, yOffset);
    KeyframeAnimation1f2.AddX(builder, xOffset);
    return KeyframeAnimation1f2.EndKeyframeAnimation1f2(builder);
  }

  public static void StartKeyframeAnimation1f2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddX(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> xOffset) { builder.AddOffset(0, xOffset.Value, 0); }
  public static void AddY(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> yOffset) { builder.AddOffset(1, yOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f2> EndKeyframeAnimation1f2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation1f2>(o);
  }
  public KeyframeAnimation1f2T UnPack() {
    var _o = new KeyframeAnimation1f2T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation1f2T _o) {
    _o.X = this.X.HasValue ? this.X.Value.UnPack() : null;
    _o.Y = this.Y.HasValue ? this.Y.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f2> Pack(FlatBufferBuilder builder, KeyframeAnimation1f2T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation1f2>);
    var _x = _o.X == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.X);
    var _y = _o.Y == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.Y);
    return CreateKeyframeAnimation1f2(
      builder,
      _x,
      _y);
  }
};

public class KeyframeAnimation1f2T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public gfl.gnpt.fb.KeyframeAnimation1fT X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public gfl.gnpt.fb.KeyframeAnimation1fT Y { get; set; }

  public KeyframeAnimation1f2T() {
    this.X = null;
    this.Y = null;
  }
}

public struct KeyframeAnimation1f3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyframeAnimation1f3 GetRootAsKeyframeAnimation1f3(ByteBuffer _bb) { return GetRootAsKeyframeAnimation1f3(_bb, new KeyframeAnimation1f3()); }
  public static KeyframeAnimation1f3 GetRootAsKeyframeAnimation1f3(ByteBuffer _bb, KeyframeAnimation1f3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyframeAnimation1f3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.KeyframeAnimation1f? X { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? Y { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? Z { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f3> CreateKeyframeAnimation1f3(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> xOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> yOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> zOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>)) {
    builder.StartTable(3);
    KeyframeAnimation1f3.AddZ(builder, zOffset);
    KeyframeAnimation1f3.AddY(builder, yOffset);
    KeyframeAnimation1f3.AddX(builder, xOffset);
    return KeyframeAnimation1f3.EndKeyframeAnimation1f3(builder);
  }

  public static void StartKeyframeAnimation1f3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> xOffset) { builder.AddOffset(0, xOffset.Value, 0); }
  public static void AddY(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> yOffset) { builder.AddOffset(1, yOffset.Value, 0); }
  public static void AddZ(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f3> EndKeyframeAnimation1f3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.KeyframeAnimation1f3>(o);
  }
  public KeyframeAnimation1f3T UnPack() {
    var _o = new KeyframeAnimation1f3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyframeAnimation1f3T _o) {
    _o.X = this.X.HasValue ? this.X.Value.UnPack() : null;
    _o.Y = this.Y.HasValue ? this.Y.Value.UnPack() : null;
    _o.Z = this.Z.HasValue ? this.Z.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.KeyframeAnimation1f3> Pack(FlatBufferBuilder builder, KeyframeAnimation1f3T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>);
    var _x = _o.X == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.X);
    var _y = _o.Y == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.Y);
    var _z = _o.Z == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.Z);
    return CreateKeyframeAnimation1f3(
      builder,
      _x,
      _y,
      _z);
  }
};

public class KeyframeAnimation1f3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public gfl.gnpt.fb.KeyframeAnimation1fT X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public gfl.gnpt.fb.KeyframeAnimation1fT Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public gfl.gnpt.fb.KeyframeAnimation1fT Z { get; set; }

  public KeyframeAnimation1f3T() {
    this.X = null;
    this.Y = null;
    this.Z = null;
  }
}

public struct EmitterTimeAnimation1f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmitterTimeAnimation1f GetRootAsEmitterTimeAnimation1f(ByteBuffer _bb) { return GetRootAsEmitterTimeAnimation1f(_bb, new EmitterTimeAnimation1f()); }
  public static EmitterTimeAnimation1f GetRootAsEmitterTimeAnimation1f(ByteBuffer _bb, EmitterTimeAnimation1f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmitterTimeAnimation1f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enable { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? AnimationTable { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableLoop { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> CreateEmitterTimeAnimation1f(FlatBufferBuilder builder,
      bool enable = false,
      Offset<gfl.gnpt.fb.KeyframeAnimation1f> animationTableOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>),
      bool enableLoop = false) {
    builder.StartTable(3);
    EmitterTimeAnimation1f.AddAnimationTable(builder, animationTableOffset);
    EmitterTimeAnimation1f.AddEnableLoop(builder, enableLoop);
    EmitterTimeAnimation1f.AddEnable(builder, enable);
    return EmitterTimeAnimation1f.EndEmitterTimeAnimation1f(builder);
  }

  public static void StartEmitterTimeAnimation1f(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(0, enable, false); }
  public static void AddAnimationTable(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> animationTableOffset) { builder.AddOffset(1, animationTableOffset.Value, 0); }
  public static void AddEnableLoop(FlatBufferBuilder builder, bool enableLoop) { builder.AddBool(2, enableLoop, false); }
  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> EndEmitterTimeAnimation1f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>(o);
  }
  public EmitterTimeAnimation1fT UnPack() {
    var _o = new EmitterTimeAnimation1fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmitterTimeAnimation1fT _o) {
    _o.Enable = this.Enable;
    _o.AnimationTable = this.AnimationTable.HasValue ? this.AnimationTable.Value.UnPack() : null;
    _o.EnableLoop = this.EnableLoop;
  }
  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> Pack(FlatBufferBuilder builder, EmitterTimeAnimation1fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>);
    var _animationTable = _o.AnimationTable == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.AnimationTable);
    return CreateEmitterTimeAnimation1f(
      builder,
      _o.Enable,
      _animationTable,
      _o.EnableLoop);
  }
};

public class EmitterTimeAnimation1fT
{
  [Newtonsoft.Json.JsonProperty("enable")]
  public bool Enable { get; set; }
  [Newtonsoft.Json.JsonProperty("animationTable")]
  public gfl.gnpt.fb.KeyframeAnimation1fT AnimationTable { get; set; }
  [Newtonsoft.Json.JsonProperty("enableLoop")]
  public bool EnableLoop { get; set; }

  public EmitterTimeAnimation1fT() {
    this.Enable = false;
    this.AnimationTable = null;
    this.EnableLoop = false;
  }
}

public struct EmitterTimeAnimation3f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmitterTimeAnimation3f GetRootAsEmitterTimeAnimation3f(ByteBuffer _bb) { return GetRootAsEmitterTimeAnimation3f(_bb, new EmitterTimeAnimation3f()); }
  public static EmitterTimeAnimation3f GetRootAsEmitterTimeAnimation3f(ByteBuffer _bb, EmitterTimeAnimation3f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmitterTimeAnimation3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enable { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.KeyframeAnimation3f? AnimationTable { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation3f?)(new gfl.gnpt.fb.KeyframeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableLoop { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> CreateEmitterTimeAnimation3f(FlatBufferBuilder builder,
      bool enable = false,
      Offset<gfl.gnpt.fb.KeyframeAnimation3f> animationTableOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>),
      bool enableLoop = false) {
    builder.StartTable(3);
    EmitterTimeAnimation3f.AddAnimationTable(builder, animationTableOffset);
    EmitterTimeAnimation3f.AddEnableLoop(builder, enableLoop);
    EmitterTimeAnimation3f.AddEnable(builder, enable);
    return EmitterTimeAnimation3f.EndEmitterTimeAnimation3f(builder);
  }

  public static void StartEmitterTimeAnimation3f(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(0, enable, false); }
  public static void AddAnimationTable(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation3f> animationTableOffset) { builder.AddOffset(1, animationTableOffset.Value, 0); }
  public static void AddEnableLoop(FlatBufferBuilder builder, bool enableLoop) { builder.AddBool(2, enableLoop, false); }
  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> EndEmitterTimeAnimation3f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>(o);
  }
  public EmitterTimeAnimation3fT UnPack() {
    var _o = new EmitterTimeAnimation3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmitterTimeAnimation3fT _o) {
    _o.Enable = this.Enable;
    _o.AnimationTable = this.AnimationTable.HasValue ? this.AnimationTable.Value.UnPack() : null;
    _o.EnableLoop = this.EnableLoop;
  }
  public static Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> Pack(FlatBufferBuilder builder, EmitterTimeAnimation3fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>);
    var _animationTable = _o.AnimationTable == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>) : gfl.gnpt.fb.KeyframeAnimation3f.Pack(builder, _o.AnimationTable);
    return CreateEmitterTimeAnimation3f(
      builder,
      _o.Enable,
      _animationTable,
      _o.EnableLoop);
  }
};

public class EmitterTimeAnimation3fT
{
  [Newtonsoft.Json.JsonProperty("enable")]
  public bool Enable { get; set; }
  [Newtonsoft.Json.JsonProperty("animationTable")]
  public gfl.gnpt.fb.KeyframeAnimation3fT AnimationTable { get; set; }
  [Newtonsoft.Json.JsonProperty("enableLoop")]
  public bool EnableLoop { get; set; }

  public EmitterTimeAnimation3fT() {
    this.Enable = false;
    this.AnimationTable = null;
    this.EnableLoop = false;
  }
}

public struct AnimationLoopSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationLoopSetting GetRootAsAnimationLoopSetting(ByteBuffer _bb) { return GetRootAsAnimationLoopSetting(_bb, new AnimationLoopSetting()); }
  public static AnimationLoopSetting GetRootAsAnimationLoopSetting(ByteBuffer _bb, AnimationLoopSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationLoopSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool EnableLoop { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LoopFrame { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EnableStartRandom { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.AnimationLoopSetting> CreateAnimationLoopSetting(FlatBufferBuilder builder,
      bool enableLoop = false,
      int loopFrame = 0,
      bool enableStartRandom = false) {
    builder.StartTable(3);
    AnimationLoopSetting.AddLoopFrame(builder, loopFrame);
    AnimationLoopSetting.AddEnableStartRandom(builder, enableStartRandom);
    AnimationLoopSetting.AddEnableLoop(builder, enableLoop);
    return AnimationLoopSetting.EndAnimationLoopSetting(builder);
  }

  public static void StartAnimationLoopSetting(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEnableLoop(FlatBufferBuilder builder, bool enableLoop) { builder.AddBool(0, enableLoop, false); }
  public static void AddLoopFrame(FlatBufferBuilder builder, int loopFrame) { builder.AddInt(1, loopFrame, 0); }
  public static void AddEnableStartRandom(FlatBufferBuilder builder, bool enableStartRandom) { builder.AddBool(2, enableStartRandom, false); }
  public static Offset<gfl.gnpt.fb.AnimationLoopSetting> EndAnimationLoopSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.AnimationLoopSetting>(o);
  }
  public AnimationLoopSettingT UnPack() {
    var _o = new AnimationLoopSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationLoopSettingT _o) {
    _o.EnableLoop = this.EnableLoop;
    _o.LoopFrame = this.LoopFrame;
    _o.EnableStartRandom = this.EnableStartRandom;
  }
  public static Offset<gfl.gnpt.fb.AnimationLoopSetting> Pack(FlatBufferBuilder builder, AnimationLoopSettingT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.AnimationLoopSetting>);
    return CreateAnimationLoopSetting(
      builder,
      _o.EnableLoop,
      _o.LoopFrame,
      _o.EnableStartRandom);
  }
};

public class AnimationLoopSettingT
{
  [Newtonsoft.Json.JsonProperty("enableLoop")]
  public bool EnableLoop { get; set; }
  [Newtonsoft.Json.JsonProperty("loopFrame")]
  public int LoopFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("enableStartRandom")]
  public bool EnableStartRandom { get; set; }

  public AnimationLoopSettingT() {
    this.EnableLoop = false;
    this.LoopFrame = 0;
    this.EnableStartRandom = false;
  }
}

public struct RenderState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RenderState GetRootAsRenderState(ByteBuffer _bb) { return GetRootAsRenderState(_bb, new RenderState()); }
  public static RenderState GetRootAsRenderState(ByteBuffer _bb, RenderState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RenderState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool DepthTestEnable { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.CompareFuncKind DepthFunc { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.CompareFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CompareFuncKind.Never; } }
  public bool DepthWriteEnable { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AlphaTestEnable { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.CompareFuncKind AlphaTestFunc { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.CompareFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CompareFuncKind.Never; } }
  public float AlphaTestThreshold { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool BlendEnable { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.BlendOperatorKind BlendColorOperator { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.BlendOperatorKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendOperatorKind.Add; } }
  public gfl.gnpt.fb.BlendFuncKind BlendColorSrcFactor { get { int o = __p.__offset(20); return o != 0 ? (gfl.gnpt.fb.BlendFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendFuncKind.Zero; } }
  public gfl.gnpt.fb.BlendFuncKind BlendColorDstFactor { get { int o = __p.__offset(22); return o != 0 ? (gfl.gnpt.fb.BlendFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendFuncKind.Zero; } }
  public gfl.gnpt.fb.BlendOperatorKind BlendAlphaOperator { get { int o = __p.__offset(24); return o != 0 ? (gfl.gnpt.fb.BlendOperatorKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendOperatorKind.Add; } }
  public gfl.gnpt.fb.BlendFuncKind BlendAlphaSrcFactor { get { int o = __p.__offset(26); return o != 0 ? (gfl.gnpt.fb.BlendFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendFuncKind.Zero; } }
  public gfl.gnpt.fb.BlendFuncKind BlendAlphaDstFactor { get { int o = __p.__offset(28); return o != 0 ? (gfl.gnpt.fb.BlendFuncKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BlendFuncKind.Zero; } }
  public gfl.gnpt.fb.DrawFaceKind DrawFace { get { int o = __p.__offset(30); return o != 0 ? (gfl.gnpt.fb.DrawFaceKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.DrawFaceKind.None; } }
  public gfl.gnpt.fb.ParticleSortOrder ParticleSortOrder { get { int o = __p.__offset(32); return o != 0 ? (gfl.gnpt.fb.ParticleSortOrder)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ParticleSortOrder.None; } }
  public int DrawPath { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.gnpt.fb.RenderState> CreateRenderState(FlatBufferBuilder builder,
      bool depthTestEnable = false,
      gfl.gnpt.fb.CompareFuncKind depthFunc = gfl.gnpt.fb.CompareFuncKind.Never,
      bool depthWriteEnable = false,
      bool alphaTestEnable = false,
      gfl.gnpt.fb.CompareFuncKind alphaTestFunc = gfl.gnpt.fb.CompareFuncKind.Never,
      float alphaTestThreshold = 0.0f,
      bool blendEnable = false,
      gfl.gnpt.fb.BlendOperatorKind blendColorOperator = gfl.gnpt.fb.BlendOperatorKind.Add,
      gfl.gnpt.fb.BlendFuncKind blendColorSrcFactor = gfl.gnpt.fb.BlendFuncKind.Zero,
      gfl.gnpt.fb.BlendFuncKind blendColorDstFactor = gfl.gnpt.fb.BlendFuncKind.Zero,
      gfl.gnpt.fb.BlendOperatorKind blendAlphaOperator = gfl.gnpt.fb.BlendOperatorKind.Add,
      gfl.gnpt.fb.BlendFuncKind blendAlphaSrcFactor = gfl.gnpt.fb.BlendFuncKind.Zero,
      gfl.gnpt.fb.BlendFuncKind blendAlphaDstFactor = gfl.gnpt.fb.BlendFuncKind.Zero,
      gfl.gnpt.fb.DrawFaceKind drawFace = gfl.gnpt.fb.DrawFaceKind.None,
      gfl.gnpt.fb.ParticleSortOrder particleSortOrder = gfl.gnpt.fb.ParticleSortOrder.None,
      int drawPath = 0) {
    builder.StartTable(16);
    RenderState.AddDrawPath(builder, drawPath);
    RenderState.AddParticleSortOrder(builder, particleSortOrder);
    RenderState.AddDrawFace(builder, drawFace);
    RenderState.AddBlendAlphaDstFactor(builder, blendAlphaDstFactor);
    RenderState.AddBlendAlphaSrcFactor(builder, blendAlphaSrcFactor);
    RenderState.AddBlendAlphaOperator(builder, blendAlphaOperator);
    RenderState.AddBlendColorDstFactor(builder, blendColorDstFactor);
    RenderState.AddBlendColorSrcFactor(builder, blendColorSrcFactor);
    RenderState.AddBlendColorOperator(builder, blendColorOperator);
    RenderState.AddAlphaTestThreshold(builder, alphaTestThreshold);
    RenderState.AddAlphaTestFunc(builder, alphaTestFunc);
    RenderState.AddDepthFunc(builder, depthFunc);
    RenderState.AddBlendEnable(builder, blendEnable);
    RenderState.AddAlphaTestEnable(builder, alphaTestEnable);
    RenderState.AddDepthWriteEnable(builder, depthWriteEnable);
    RenderState.AddDepthTestEnable(builder, depthTestEnable);
    return RenderState.EndRenderState(builder);
  }

  public static void StartRenderState(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddDepthTestEnable(FlatBufferBuilder builder, bool depthTestEnable) { builder.AddBool(0, depthTestEnable, false); }
  public static void AddDepthFunc(FlatBufferBuilder builder, gfl.gnpt.fb.CompareFuncKind depthFunc) { builder.AddUint(1, (uint)depthFunc, 0); }
  public static void AddDepthWriteEnable(FlatBufferBuilder builder, bool depthWriteEnable) { builder.AddBool(2, depthWriteEnable, false); }
  public static void AddAlphaTestEnable(FlatBufferBuilder builder, bool alphaTestEnable) { builder.AddBool(3, alphaTestEnable, false); }
  public static void AddAlphaTestFunc(FlatBufferBuilder builder, gfl.gnpt.fb.CompareFuncKind alphaTestFunc) { builder.AddUint(4, (uint)alphaTestFunc, 0); }
  public static void AddAlphaTestThreshold(FlatBufferBuilder builder, float alphaTestThreshold) { builder.AddFloat(5, alphaTestThreshold, 0.0f); }
  public static void AddBlendEnable(FlatBufferBuilder builder, bool blendEnable) { builder.AddBool(6, blendEnable, false); }
  public static void AddBlendColorOperator(FlatBufferBuilder builder, gfl.gnpt.fb.BlendOperatorKind blendColorOperator) { builder.AddUint(7, (uint)blendColorOperator, 0); }
  public static void AddBlendColorSrcFactor(FlatBufferBuilder builder, gfl.gnpt.fb.BlendFuncKind blendColorSrcFactor) { builder.AddUint(8, (uint)blendColorSrcFactor, 0); }
  public static void AddBlendColorDstFactor(FlatBufferBuilder builder, gfl.gnpt.fb.BlendFuncKind blendColorDstFactor) { builder.AddUint(9, (uint)blendColorDstFactor, 0); }
  public static void AddBlendAlphaOperator(FlatBufferBuilder builder, gfl.gnpt.fb.BlendOperatorKind blendAlphaOperator) { builder.AddUint(10, (uint)blendAlphaOperator, 0); }
  public static void AddBlendAlphaSrcFactor(FlatBufferBuilder builder, gfl.gnpt.fb.BlendFuncKind blendAlphaSrcFactor) { builder.AddUint(11, (uint)blendAlphaSrcFactor, 0); }
  public static void AddBlendAlphaDstFactor(FlatBufferBuilder builder, gfl.gnpt.fb.BlendFuncKind blendAlphaDstFactor) { builder.AddUint(12, (uint)blendAlphaDstFactor, 0); }
  public static void AddDrawFace(FlatBufferBuilder builder, gfl.gnpt.fb.DrawFaceKind drawFace) { builder.AddUint(13, (uint)drawFace, 0); }
  public static void AddParticleSortOrder(FlatBufferBuilder builder, gfl.gnpt.fb.ParticleSortOrder particleSortOrder) { builder.AddUint(14, (uint)particleSortOrder, 0); }
  public static void AddDrawPath(FlatBufferBuilder builder, int drawPath) { builder.AddInt(15, drawPath, 0); }
  public static Offset<gfl.gnpt.fb.RenderState> EndRenderState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.RenderState>(o);
  }
  public RenderStateT UnPack() {
    var _o = new RenderStateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RenderStateT _o) {
    _o.DepthTestEnable = this.DepthTestEnable;
    _o.DepthFunc = this.DepthFunc;
    _o.DepthWriteEnable = this.DepthWriteEnable;
    _o.AlphaTestEnable = this.AlphaTestEnable;
    _o.AlphaTestFunc = this.AlphaTestFunc;
    _o.AlphaTestThreshold = this.AlphaTestThreshold;
    _o.BlendEnable = this.BlendEnable;
    _o.BlendColorOperator = this.BlendColorOperator;
    _o.BlendColorSrcFactor = this.BlendColorSrcFactor;
    _o.BlendColorDstFactor = this.BlendColorDstFactor;
    _o.BlendAlphaOperator = this.BlendAlphaOperator;
    _o.BlendAlphaSrcFactor = this.BlendAlphaSrcFactor;
    _o.BlendAlphaDstFactor = this.BlendAlphaDstFactor;
    _o.DrawFace = this.DrawFace;
    _o.ParticleSortOrder = this.ParticleSortOrder;
    _o.DrawPath = this.DrawPath;
  }
  public static Offset<gfl.gnpt.fb.RenderState> Pack(FlatBufferBuilder builder, RenderStateT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.RenderState>);
    return CreateRenderState(
      builder,
      _o.DepthTestEnable,
      _o.DepthFunc,
      _o.DepthWriteEnable,
      _o.AlphaTestEnable,
      _o.AlphaTestFunc,
      _o.AlphaTestThreshold,
      _o.BlendEnable,
      _o.BlendColorOperator,
      _o.BlendColorSrcFactor,
      _o.BlendColorDstFactor,
      _o.BlendAlphaOperator,
      _o.BlendAlphaSrcFactor,
      _o.BlendAlphaDstFactor,
      _o.DrawFace,
      _o.ParticleSortOrder,
      _o.DrawPath);
  }
};

public class RenderStateT
{
  [Newtonsoft.Json.JsonProperty("depthTestEnable")]
  public bool DepthTestEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("depthFunc")]
  public gfl.gnpt.fb.CompareFuncKind DepthFunc { get; set; }
  [Newtonsoft.Json.JsonProperty("depthWriteEnable")]
  public bool DepthWriteEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTestEnable")]
  public bool AlphaTestEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTestFunc")]
  public gfl.gnpt.fb.CompareFuncKind AlphaTestFunc { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTestThreshold")]
  public float AlphaTestThreshold { get; set; }
  [Newtonsoft.Json.JsonProperty("blendEnable")]
  public bool BlendEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("blendColorOperator")]
  public gfl.gnpt.fb.BlendOperatorKind BlendColorOperator { get; set; }
  [Newtonsoft.Json.JsonProperty("blendColorSrcFactor")]
  public gfl.gnpt.fb.BlendFuncKind BlendColorSrcFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("blendColorDstFactor")]
  public gfl.gnpt.fb.BlendFuncKind BlendColorDstFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("blendAlphaOperator")]
  public gfl.gnpt.fb.BlendOperatorKind BlendAlphaOperator { get; set; }
  [Newtonsoft.Json.JsonProperty("blendAlphaSrcFactor")]
  public gfl.gnpt.fb.BlendFuncKind BlendAlphaSrcFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("blendAlphaDstFactor")]
  public gfl.gnpt.fb.BlendFuncKind BlendAlphaDstFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("drawFace")]
  public gfl.gnpt.fb.DrawFaceKind DrawFace { get; set; }
  [Newtonsoft.Json.JsonProperty("particleSortOrder")]
  public gfl.gnpt.fb.ParticleSortOrder ParticleSortOrder { get; set; }
  [Newtonsoft.Json.JsonProperty("drawPath")]
  public int DrawPath { get; set; }

  public RenderStateT() {
    this.DepthTestEnable = false;
    this.DepthFunc = gfl.gnpt.fb.CompareFuncKind.Never;
    this.DepthWriteEnable = false;
    this.AlphaTestEnable = false;
    this.AlphaTestFunc = gfl.gnpt.fb.CompareFuncKind.Never;
    this.AlphaTestThreshold = 0.0f;
    this.BlendEnable = false;
    this.BlendColorOperator = gfl.gnpt.fb.BlendOperatorKind.Add;
    this.BlendColorSrcFactor = gfl.gnpt.fb.BlendFuncKind.Zero;
    this.BlendColorDstFactor = gfl.gnpt.fb.BlendFuncKind.Zero;
    this.BlendAlphaOperator = gfl.gnpt.fb.BlendOperatorKind.Add;
    this.BlendAlphaSrcFactor = gfl.gnpt.fb.BlendFuncKind.Zero;
    this.BlendAlphaDstFactor = gfl.gnpt.fb.BlendFuncKind.Zero;
    this.DrawFace = gfl.gnpt.fb.DrawFaceKind.None;
    this.ParticleSortOrder = gfl.gnpt.fb.ParticleSortOrder.None;
    this.DrawPath = 0;
  }
}

public struct Random : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Random GetRootAsRandom(ByteBuffer _bb) { return GetRootAsRandom(_bb, new Random()); }
  public static Random GetRootAsRandom(ByteBuffer _bb, Random obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Random __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.RandomType RandomType { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.RandomType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.RandomType.ChangeEveryTime; } }
  public int FixedRandomSeed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.gnpt.fb.Random> CreateRandom(FlatBufferBuilder builder,
      gfl.gnpt.fb.RandomType randomType = gfl.gnpt.fb.RandomType.ChangeEveryTime,
      int fixedRandomSeed = 0) {
    builder.StartTable(2);
    Random.AddFixedRandomSeed(builder, fixedRandomSeed);
    Random.AddRandomType(builder, randomType);
    return Random.EndRandom(builder);
  }

  public static void StartRandom(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRandomType(FlatBufferBuilder builder, gfl.gnpt.fb.RandomType randomType) { builder.AddUint(0, (uint)randomType, 0); }
  public static void AddFixedRandomSeed(FlatBufferBuilder builder, int fixedRandomSeed) { builder.AddInt(1, fixedRandomSeed, 0); }
  public static Offset<gfl.gnpt.fb.Random> EndRandom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Random>(o);
  }
  public RandomT UnPack() {
    var _o = new RandomT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RandomT _o) {
    _o.RandomType = this.RandomType;
    _o.FixedRandomSeed = this.FixedRandomSeed;
  }
  public static Offset<gfl.gnpt.fb.Random> Pack(FlatBufferBuilder builder, RandomT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Random>);
    return CreateRandom(
      builder,
      _o.RandomType,
      _o.FixedRandomSeed);
  }
};

public class RandomT
{
  [Newtonsoft.Json.JsonProperty("randomType")]
  public gfl.gnpt.fb.RandomType RandomType { get; set; }
  [Newtonsoft.Json.JsonProperty("fixedRandomSeed")]
  public int FixedRandomSeed { get; set; }

  public RandomT() {
    this.RandomType = gfl.gnpt.fb.RandomType.ChangeEveryTime;
    this.FixedRandomSeed = 0;
  }
}

public struct Lod : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Lod GetRootAsLod(ByteBuffer _bb) { return GetRootAsLod(_bb, new Lod()); }
  public static Lod GetRootAsLod(ByteBuffer _bb, Lod obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Lod __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float EmissionRangeNear { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmissionRangeFar { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool TestAlways { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool InterpolateEmissionAmount { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EmissionRatioFar { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.gnpt.fb.Lod> CreateLod(FlatBufferBuilder builder,
      float emissionRangeNear = 0.0f,
      float emissionRangeFar = 0.0f,
      bool testAlways = false,
      bool interpolateEmissionAmount = false,
      int emissionRatioFar = 0) {
    builder.StartTable(5);
    Lod.AddEmissionRatioFar(builder, emissionRatioFar);
    Lod.AddEmissionRangeFar(builder, emissionRangeFar);
    Lod.AddEmissionRangeNear(builder, emissionRangeNear);
    Lod.AddInterpolateEmissionAmount(builder, interpolateEmissionAmount);
    Lod.AddTestAlways(builder, testAlways);
    return Lod.EndLod(builder);
  }

  public static void StartLod(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEmissionRangeNear(FlatBufferBuilder builder, float emissionRangeNear) { builder.AddFloat(0, emissionRangeNear, 0.0f); }
  public static void AddEmissionRangeFar(FlatBufferBuilder builder, float emissionRangeFar) { builder.AddFloat(1, emissionRangeFar, 0.0f); }
  public static void AddTestAlways(FlatBufferBuilder builder, bool testAlways) { builder.AddBool(2, testAlways, false); }
  public static void AddInterpolateEmissionAmount(FlatBufferBuilder builder, bool interpolateEmissionAmount) { builder.AddBool(3, interpolateEmissionAmount, false); }
  public static void AddEmissionRatioFar(FlatBufferBuilder builder, int emissionRatioFar) { builder.AddInt(4, emissionRatioFar, 0); }
  public static Offset<gfl.gnpt.fb.Lod> EndLod(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Lod>(o);
  }
  public LodT UnPack() {
    var _o = new LodT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LodT _o) {
    _o.EmissionRangeNear = this.EmissionRangeNear;
    _o.EmissionRangeFar = this.EmissionRangeFar;
    _o.TestAlways = this.TestAlways;
    _o.InterpolateEmissionAmount = this.InterpolateEmissionAmount;
    _o.EmissionRatioFar = this.EmissionRatioFar;
  }
  public static Offset<gfl.gnpt.fb.Lod> Pack(FlatBufferBuilder builder, LodT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Lod>);
    return CreateLod(
      builder,
      _o.EmissionRangeNear,
      _o.EmissionRangeFar,
      _o.TestAlways,
      _o.InterpolateEmissionAmount,
      _o.EmissionRatioFar);
  }
};

public class LodT
{
  [Newtonsoft.Json.JsonProperty("emissionRangeNear")]
  public float EmissionRangeNear { get; set; }
  [Newtonsoft.Json.JsonProperty("emissionRangeFar")]
  public float EmissionRangeFar { get; set; }
  [Newtonsoft.Json.JsonProperty("testAlways")]
  public bool TestAlways { get; set; }
  [Newtonsoft.Json.JsonProperty("interpolateEmissionAmount")]
  public bool InterpolateEmissionAmount { get; set; }
  [Newtonsoft.Json.JsonProperty("emissionRatioFar")]
  public int EmissionRatioFar { get; set; }

  public LodT() {
    this.EmissionRangeNear = 0.0f;
    this.EmissionRangeFar = 0.0f;
    this.TestAlways = false;
    this.InterpolateEmissionAmount = false;
    this.EmissionRatioFar = 0;
  }
}

public struct RandomField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RandomField GetRootAsRandomField(ByteBuffer _bb) { return GetRootAsRandomField(_bb, new RandomField()); }
  public static RandomField GetRootAsRandomField(ByteBuffer _bb, RandomField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RandomField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? RandomAmplitude { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int RandomApplicationInterval { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.gnpt.fb.RandomField> CreateRandomField(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT randomAmplitude = null,
      int randomApplicationInterval = 0) {
    builder.StartTable(2);
    RandomField.AddRandomApplicationInterval(builder, randomApplicationInterval);
    RandomField.AddRandomAmplitude(builder, gfl.gnpt.fb.Vector3f.Pack(builder, randomAmplitude));
    return RandomField.EndRandomField(builder);
  }

  public static void StartRandomField(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRandomAmplitude(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> randomAmplitudeOffset) { builder.AddStruct(0, randomAmplitudeOffset.Value, 0); }
  public static void AddRandomApplicationInterval(FlatBufferBuilder builder, int randomApplicationInterval) { builder.AddInt(1, randomApplicationInterval, 0); }
  public static Offset<gfl.gnpt.fb.RandomField> EndRandomField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.RandomField>(o);
  }
  public RandomFieldT UnPack() {
    var _o = new RandomFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RandomFieldT _o) {
    _o.RandomAmplitude = this.RandomAmplitude.HasValue ? this.RandomAmplitude.Value.UnPack() : null;
    _o.RandomApplicationInterval = this.RandomApplicationInterval;
  }
  public static Offset<gfl.gnpt.fb.RandomField> Pack(FlatBufferBuilder builder, RandomFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.RandomField>);
    return CreateRandomField(
      builder,
      _o.RandomAmplitude,
      _o.RandomApplicationInterval);
  }
};

public class RandomFieldT
{
  [Newtonsoft.Json.JsonProperty("randomAmplitude")]
  public gfl.gnpt.fb.Vector3fT RandomAmplitude { get; set; }
  [Newtonsoft.Json.JsonProperty("randomApplicationInterval")]
  public int RandomApplicationInterval { get; set; }

  public RandomFieldT() {
    this.RandomAmplitude = new gfl.gnpt.fb.Vector3fT();
    this.RandomApplicationInterval = 0;
  }
}

public struct GpuNoiseField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GpuNoiseField GetRootAsGpuNoiseField(ByteBuffer _bb) { return GetRootAsGpuNoiseField(_bb, new GpuNoiseField()); }
  public static GpuNoiseField GetRootAsGpuNoiseField(ByteBuffer _bb, GpuNoiseField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GpuNoiseField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? NoiseIntensity { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int BasicCycle { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool AddAirResistance { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UnifyPhaseEachComponent { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float UnifyPhaseSpeed { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UnifyPhaseDistribution { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool SettingEachComponent { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.ValueFloat4? SettingWaveCycleRate { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.ValueFloat4?)(new gfl.gnpt.fb.ValueFloat4()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.ValueFloat4? SettingWaveAddParam { get { int o = __p.__offset(20); return o != 0 ? (gfl.gnpt.fb.ValueFloat4?)(new gfl.gnpt.fb.ValueFloat4()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.GpuNoiseField> CreateGpuNoiseField(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT noiseIntensity = null,
      int basicCycle = 0,
      bool addAirResistance = false,
      bool unifyPhaseEachComponent = false,
      float unifyPhaseSpeed = 0.0f,
      float unifyPhaseDistribution = 0.0f,
      bool settingEachComponent = false,
      gfl.gnpt.fb.ValueFloat4T settingWaveCycleRate = null,
      gfl.gnpt.fb.ValueFloat4T settingWaveAddParam = null) {
    builder.StartTable(9);
    GpuNoiseField.AddSettingWaveAddParam(builder, gfl.gnpt.fb.ValueFloat4.Pack(builder, settingWaveAddParam));
    GpuNoiseField.AddSettingWaveCycleRate(builder, gfl.gnpt.fb.ValueFloat4.Pack(builder, settingWaveCycleRate));
    GpuNoiseField.AddUnifyPhaseDistribution(builder, unifyPhaseDistribution);
    GpuNoiseField.AddUnifyPhaseSpeed(builder, unifyPhaseSpeed);
    GpuNoiseField.AddBasicCycle(builder, basicCycle);
    GpuNoiseField.AddNoiseIntensity(builder, gfl.gnpt.fb.Vector3f.Pack(builder, noiseIntensity));
    GpuNoiseField.AddSettingEachComponent(builder, settingEachComponent);
    GpuNoiseField.AddUnifyPhaseEachComponent(builder, unifyPhaseEachComponent);
    GpuNoiseField.AddAddAirResistance(builder, addAirResistance);
    return GpuNoiseField.EndGpuNoiseField(builder);
  }

  public static void StartGpuNoiseField(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNoiseIntensity(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> noiseIntensityOffset) { builder.AddStruct(0, noiseIntensityOffset.Value, 0); }
  public static void AddBasicCycle(FlatBufferBuilder builder, int basicCycle) { builder.AddInt(1, basicCycle, 0); }
  public static void AddAddAirResistance(FlatBufferBuilder builder, bool addAirResistance) { builder.AddBool(2, addAirResistance, false); }
  public static void AddUnifyPhaseEachComponent(FlatBufferBuilder builder, bool unifyPhaseEachComponent) { builder.AddBool(3, unifyPhaseEachComponent, false); }
  public static void AddUnifyPhaseSpeed(FlatBufferBuilder builder, float unifyPhaseSpeed) { builder.AddFloat(4, unifyPhaseSpeed, 0.0f); }
  public static void AddUnifyPhaseDistribution(FlatBufferBuilder builder, float unifyPhaseDistribution) { builder.AddFloat(5, unifyPhaseDistribution, 0.0f); }
  public static void AddSettingEachComponent(FlatBufferBuilder builder, bool settingEachComponent) { builder.AddBool(6, settingEachComponent, false); }
  public static void AddSettingWaveCycleRate(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ValueFloat4> settingWaveCycleRateOffset) { builder.AddStruct(7, settingWaveCycleRateOffset.Value, 0); }
  public static void AddSettingWaveAddParam(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ValueFloat4> settingWaveAddParamOffset) { builder.AddStruct(8, settingWaveAddParamOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.GpuNoiseField> EndGpuNoiseField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.GpuNoiseField>(o);
  }
  public GpuNoiseFieldT UnPack() {
    var _o = new GpuNoiseFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GpuNoiseFieldT _o) {
    _o.NoiseIntensity = this.NoiseIntensity.HasValue ? this.NoiseIntensity.Value.UnPack() : null;
    _o.BasicCycle = this.BasicCycle;
    _o.AddAirResistance = this.AddAirResistance;
    _o.UnifyPhaseEachComponent = this.UnifyPhaseEachComponent;
    _o.UnifyPhaseSpeed = this.UnifyPhaseSpeed;
    _o.UnifyPhaseDistribution = this.UnifyPhaseDistribution;
    _o.SettingEachComponent = this.SettingEachComponent;
    _o.SettingWaveCycleRate = this.SettingWaveCycleRate.HasValue ? this.SettingWaveCycleRate.Value.UnPack() : null;
    _o.SettingWaveAddParam = this.SettingWaveAddParam.HasValue ? this.SettingWaveAddParam.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.GpuNoiseField> Pack(FlatBufferBuilder builder, GpuNoiseFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.GpuNoiseField>);
    return CreateGpuNoiseField(
      builder,
      _o.NoiseIntensity,
      _o.BasicCycle,
      _o.AddAirResistance,
      _o.UnifyPhaseEachComponent,
      _o.UnifyPhaseSpeed,
      _o.UnifyPhaseDistribution,
      _o.SettingEachComponent,
      _o.SettingWaveCycleRate,
      _o.SettingWaveAddParam);
  }
};

public class GpuNoiseFieldT
{
  [Newtonsoft.Json.JsonProperty("noiseIntensity")]
  public gfl.gnpt.fb.Vector3fT NoiseIntensity { get; set; }
  [Newtonsoft.Json.JsonProperty("basicCycle")]
  public int BasicCycle { get; set; }
  [Newtonsoft.Json.JsonProperty("addAirResistance")]
  public bool AddAirResistance { get; set; }
  [Newtonsoft.Json.JsonProperty("unifyPhaseEachComponent")]
  public bool UnifyPhaseEachComponent { get; set; }
  [Newtonsoft.Json.JsonProperty("unifyPhaseSpeed")]
  public float UnifyPhaseSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("unifyPhaseDistribution")]
  public float UnifyPhaseDistribution { get; set; }
  [Newtonsoft.Json.JsonProperty("settingEachComponent")]
  public bool SettingEachComponent { get; set; }
  [Newtonsoft.Json.JsonProperty("settingWaveCycleRate")]
  public gfl.gnpt.fb.ValueFloat4T SettingWaveCycleRate { get; set; }
  [Newtonsoft.Json.JsonProperty("settingWaveAddParam")]
  public gfl.gnpt.fb.ValueFloat4T SettingWaveAddParam { get; set; }

  public GpuNoiseFieldT() {
    this.NoiseIntensity = new gfl.gnpt.fb.Vector3fT();
    this.BasicCycle = 0;
    this.AddAirResistance = false;
    this.UnifyPhaseEachComponent = false;
    this.UnifyPhaseSpeed = 0.0f;
    this.UnifyPhaseDistribution = 0.0f;
    this.SettingEachComponent = false;
    this.SettingWaveCycleRate = new gfl.gnpt.fb.ValueFloat4T();
    this.SettingWaveAddParam = new gfl.gnpt.fb.ValueFloat4T();
  }
}

public struct MagneticForceField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MagneticForceField GetRootAsMagneticForceField(ByteBuffer _bb) { return GetRootAsMagneticForceField(_bb, new MagneticForceField()); }
  public static MagneticForceField GetRootAsMagneticForceField(ByteBuffer _bb, MagneticForceField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MagneticForceField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float MagneticForce { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool TargetCoordinateAxisX { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TargetCoordinateAxisY { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TargetCoordinateAxisZ { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool FollowPositionToEmitter { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector3f? Position { get { int o = __p.__offset(14); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.MagneticForceField> CreateMagneticForceField(FlatBufferBuilder builder,
      float magneticForce = 0.0f,
      bool targetCoordinateAxisX = false,
      bool targetCoordinateAxisY = false,
      bool targetCoordinateAxisZ = false,
      bool followPositionToEmitter = false,
      gfl.gnpt.fb.Vector3fT position = null) {
    builder.StartTable(6);
    MagneticForceField.AddPosition(builder, gfl.gnpt.fb.Vector3f.Pack(builder, position));
    MagneticForceField.AddMagneticForce(builder, magneticForce);
    MagneticForceField.AddFollowPositionToEmitter(builder, followPositionToEmitter);
    MagneticForceField.AddTargetCoordinateAxisZ(builder, targetCoordinateAxisZ);
    MagneticForceField.AddTargetCoordinateAxisY(builder, targetCoordinateAxisY);
    MagneticForceField.AddTargetCoordinateAxisX(builder, targetCoordinateAxisX);
    return MagneticForceField.EndMagneticForceField(builder);
  }

  public static void StartMagneticForceField(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddMagneticForce(FlatBufferBuilder builder, float magneticForce) { builder.AddFloat(0, magneticForce, 0.0f); }
  public static void AddTargetCoordinateAxisX(FlatBufferBuilder builder, bool targetCoordinateAxisX) { builder.AddBool(1, targetCoordinateAxisX, false); }
  public static void AddTargetCoordinateAxisY(FlatBufferBuilder builder, bool targetCoordinateAxisY) { builder.AddBool(2, targetCoordinateAxisY, false); }
  public static void AddTargetCoordinateAxisZ(FlatBufferBuilder builder, bool targetCoordinateAxisZ) { builder.AddBool(3, targetCoordinateAxisZ, false); }
  public static void AddFollowPositionToEmitter(FlatBufferBuilder builder, bool followPositionToEmitter) { builder.AddBool(4, followPositionToEmitter, false); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> positionOffset) { builder.AddStruct(5, positionOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.MagneticForceField> EndMagneticForceField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.MagneticForceField>(o);
  }
  public MagneticForceFieldT UnPack() {
    var _o = new MagneticForceFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MagneticForceFieldT _o) {
    _o.MagneticForce = this.MagneticForce;
    _o.TargetCoordinateAxisX = this.TargetCoordinateAxisX;
    _o.TargetCoordinateAxisY = this.TargetCoordinateAxisY;
    _o.TargetCoordinateAxisZ = this.TargetCoordinateAxisZ;
    _o.FollowPositionToEmitter = this.FollowPositionToEmitter;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.MagneticForceField> Pack(FlatBufferBuilder builder, MagneticForceFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.MagneticForceField>);
    return CreateMagneticForceField(
      builder,
      _o.MagneticForce,
      _o.TargetCoordinateAxisX,
      _o.TargetCoordinateAxisY,
      _o.TargetCoordinateAxisZ,
      _o.FollowPositionToEmitter,
      _o.Position);
  }
};

public class MagneticForceFieldT
{
  [Newtonsoft.Json.JsonProperty("magneticForce")]
  public float MagneticForce { get; set; }
  [Newtonsoft.Json.JsonProperty("targetCoordinateAxisX")]
  public bool TargetCoordinateAxisX { get; set; }
  [Newtonsoft.Json.JsonProperty("targetCoordinateAxisY")]
  public bool TargetCoordinateAxisY { get; set; }
  [Newtonsoft.Json.JsonProperty("targetCoordinateAxisZ")]
  public bool TargetCoordinateAxisZ { get; set; }
  [Newtonsoft.Json.JsonProperty("followPositionToEmitter")]
  public bool FollowPositionToEmitter { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.gnpt.fb.Vector3fT Position { get; set; }

  public MagneticForceFieldT() {
    this.MagneticForce = 0.0f;
    this.TargetCoordinateAxisX = false;
    this.TargetCoordinateAxisY = false;
    this.TargetCoordinateAxisZ = false;
    this.FollowPositionToEmitter = false;
    this.Position = new gfl.gnpt.fb.Vector3fT();
  }
}

public struct SpinField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SpinField GetRootAsSpinField(ByteBuffer _bb) { return GetRootAsSpinField(_bb, new SpinField()); }
  public static SpinField GetRootAsSpinField(ByteBuffer _bb, SpinField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpinField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float RotationSpeed { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.RotationAxis RotationAxis { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.RotationAxis)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.RotationAxis.X; } }
  public float DiffusionSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.SpinField> CreateSpinField(FlatBufferBuilder builder,
      float rotationSpeed = 0.0f,
      gfl.gnpt.fb.RotationAxis rotationAxis = gfl.gnpt.fb.RotationAxis.X,
      float DiffusionSpeed = 0.0f) {
    builder.StartTable(3);
    SpinField.AddDiffusionSpeed(builder, DiffusionSpeed);
    SpinField.AddRotationAxis(builder, rotationAxis);
    SpinField.AddRotationSpeed(builder, rotationSpeed);
    return SpinField.EndSpinField(builder);
  }

  public static void StartSpinField(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRotationSpeed(FlatBufferBuilder builder, float rotationSpeed) { builder.AddFloat(0, rotationSpeed, 0.0f); }
  public static void AddRotationAxis(FlatBufferBuilder builder, gfl.gnpt.fb.RotationAxis rotationAxis) { builder.AddUint(1, (uint)rotationAxis, 0); }
  public static void AddDiffusionSpeed(FlatBufferBuilder builder, float DiffusionSpeed) { builder.AddFloat(2, DiffusionSpeed, 0.0f); }
  public static Offset<gfl.gnpt.fb.SpinField> EndSpinField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.SpinField>(o);
  }
  public SpinFieldT UnPack() {
    var _o = new SpinFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpinFieldT _o) {
    _o.RotationSpeed = this.RotationSpeed;
    _o.RotationAxis = this.RotationAxis;
    _o.DiffusionSpeed = this.DiffusionSpeed;
  }
  public static Offset<gfl.gnpt.fb.SpinField> Pack(FlatBufferBuilder builder, SpinFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.SpinField>);
    return CreateSpinField(
      builder,
      _o.RotationSpeed,
      _o.RotationAxis,
      _o.DiffusionSpeed);
  }
};

public class SpinFieldT
{
  [Newtonsoft.Json.JsonProperty("rotationSpeed")]
  public float RotationSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationAxis")]
  public gfl.gnpt.fb.RotationAxis RotationAxis { get; set; }
  [Newtonsoft.Json.JsonProperty("DiffusionSpeed")]
  public float DiffusionSpeed { get; set; }

  public SpinFieldT() {
    this.RotationSpeed = 0.0f;
    this.RotationAxis = gfl.gnpt.fb.RotationAxis.X;
    this.DiffusionSpeed = 0.0f;
  }
}

public struct ConvergenceField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConvergenceField GetRootAsConvergenceField(ByteBuffer _bb) { return GetRootAsConvergenceField(_bb, new ConvergenceField()); }
  public static ConvergenceField GetRootAsConvergenceField(ByteBuffer _bb, ConvergenceField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConvergenceField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Convergence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool FollowPositionToEmitter { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector3f? Position { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.ConvergenceField> CreateConvergenceField(FlatBufferBuilder builder,
      float convergence = 0.0f,
      bool followPositionToEmitter = false,
      gfl.gnpt.fb.Vector3fT position = null) {
    builder.StartTable(3);
    ConvergenceField.AddPosition(builder, gfl.gnpt.fb.Vector3f.Pack(builder, position));
    ConvergenceField.AddConvergence(builder, convergence);
    ConvergenceField.AddFollowPositionToEmitter(builder, followPositionToEmitter);
    return ConvergenceField.EndConvergenceField(builder);
  }

  public static void StartConvergenceField(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddConvergence(FlatBufferBuilder builder, float convergence) { builder.AddFloat(0, convergence, 0.0f); }
  public static void AddFollowPositionToEmitter(FlatBufferBuilder builder, bool followPositionToEmitter) { builder.AddBool(1, followPositionToEmitter, false); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.ConvergenceField> EndConvergenceField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ConvergenceField>(o);
  }
  public ConvergenceFieldT UnPack() {
    var _o = new ConvergenceFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConvergenceFieldT _o) {
    _o.Convergence = this.Convergence;
    _o.FollowPositionToEmitter = this.FollowPositionToEmitter;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.ConvergenceField> Pack(FlatBufferBuilder builder, ConvergenceFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ConvergenceField>);
    return CreateConvergenceField(
      builder,
      _o.Convergence,
      _o.FollowPositionToEmitter,
      _o.Position);
  }
};

public class ConvergenceFieldT
{
  [Newtonsoft.Json.JsonProperty("convergence")]
  public float Convergence { get; set; }
  [Newtonsoft.Json.JsonProperty("followPositionToEmitter")]
  public bool FollowPositionToEmitter { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.gnpt.fb.Vector3fT Position { get; set; }

  public ConvergenceFieldT() {
    this.Convergence = 0.0f;
    this.FollowPositionToEmitter = false;
    this.Position = new gfl.gnpt.fb.Vector3fT();
  }
}

public struct OffsetField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OffsetField GetRootAsOffsetField(ByteBuffer _bb) { return GetRootAsOffsetField(_bb, new OffsetField()); }
  public static OffsetField GetRootAsOffsetField(ByteBuffer _bb, OffsetField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OffsetField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Offset { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool IsGlobalOffset { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.OffsetField> CreateOffsetField(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT offset = null,
      bool isGlobalOffset = false) {
    builder.StartTable(2);
    OffsetField.AddOffset(builder, gfl.gnpt.fb.Vector3f.Pack(builder, offset));
    OffsetField.AddIsGlobalOffset(builder, isGlobalOffset);
    return OffsetField.EndOffsetField(builder);
  }

  public static void StartOffsetField(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOffset(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> offsetOffset) { builder.AddStruct(0, offsetOffset.Value, 0); }
  public static void AddIsGlobalOffset(FlatBufferBuilder builder, bool isGlobalOffset) { builder.AddBool(1, isGlobalOffset, false); }
  public static Offset<gfl.gnpt.fb.OffsetField> EndOffsetField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.OffsetField>(o);
  }
  public OffsetFieldT UnPack() {
    var _o = new OffsetFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OffsetFieldT _o) {
    _o.Offset = this.Offset.HasValue ? this.Offset.Value.UnPack() : null;
    _o.IsGlobalOffset = this.IsGlobalOffset;
  }
  public static Offset<gfl.gnpt.fb.OffsetField> Pack(FlatBufferBuilder builder, OffsetFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.OffsetField>);
    return CreateOffsetField(
      builder,
      _o.Offset,
      _o.IsGlobalOffset);
  }
};

public class OffsetFieldT
{
  [Newtonsoft.Json.JsonProperty("offset")]
  public gfl.gnpt.fb.Vector3fT Offset { get; set; }
  [Newtonsoft.Json.JsonProperty("isGlobalOffset")]
  public bool IsGlobalOffset { get; set; }

  public OffsetFieldT() {
    this.Offset = new gfl.gnpt.fb.Vector3fT();
    this.IsGlobalOffset = false;
  }
}

public struct SimpleCollisionField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SimpleCollisionField GetRootAsSimpleCollisionField(ByteBuffer _bb) { return GetRootAsSimpleCollisionField(_bb, new SimpleCollisionField()); }
  public static SimpleCollisionField GetRootAsSimpleCollisionField(ByteBuffer _bb, SimpleCollisionField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SimpleCollisionField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool AppliedInWorldCoordinate { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.BehaviorOnHit BehaviorOnHit { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.BehaviorOnHit)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.BehaviorOnHit.Reflection; } }
  public float CollisionPlaneYCoordinate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ReflectionRate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NumberOfReflections { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float FrictionCoefficient { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.SimpleCollisionField> CreateSimpleCollisionField(FlatBufferBuilder builder,
      bool appliedInWorldCoordinate = false,
      gfl.gnpt.fb.BehaviorOnHit behaviorOnHit = gfl.gnpt.fb.BehaviorOnHit.Reflection,
      float collisionPlaneYCoordinate = 0.0f,
      float reflectionRate = 0.0f,
      int numberOfReflections = 0,
      float frictionCoefficient = 0.0f) {
    builder.StartTable(6);
    SimpleCollisionField.AddFrictionCoefficient(builder, frictionCoefficient);
    SimpleCollisionField.AddNumberOfReflections(builder, numberOfReflections);
    SimpleCollisionField.AddReflectionRate(builder, reflectionRate);
    SimpleCollisionField.AddCollisionPlaneYCoordinate(builder, collisionPlaneYCoordinate);
    SimpleCollisionField.AddBehaviorOnHit(builder, behaviorOnHit);
    SimpleCollisionField.AddAppliedInWorldCoordinate(builder, appliedInWorldCoordinate);
    return SimpleCollisionField.EndSimpleCollisionField(builder);
  }

  public static void StartSimpleCollisionField(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAppliedInWorldCoordinate(FlatBufferBuilder builder, bool appliedInWorldCoordinate) { builder.AddBool(0, appliedInWorldCoordinate, false); }
  public static void AddBehaviorOnHit(FlatBufferBuilder builder, gfl.gnpt.fb.BehaviorOnHit behaviorOnHit) { builder.AddUint(1, (uint)behaviorOnHit, 0); }
  public static void AddCollisionPlaneYCoordinate(FlatBufferBuilder builder, float collisionPlaneYCoordinate) { builder.AddFloat(2, collisionPlaneYCoordinate, 0.0f); }
  public static void AddReflectionRate(FlatBufferBuilder builder, float reflectionRate) { builder.AddFloat(3, reflectionRate, 0.0f); }
  public static void AddNumberOfReflections(FlatBufferBuilder builder, int numberOfReflections) { builder.AddInt(4, numberOfReflections, 0); }
  public static void AddFrictionCoefficient(FlatBufferBuilder builder, float frictionCoefficient) { builder.AddFloat(5, frictionCoefficient, 0.0f); }
  public static Offset<gfl.gnpt.fb.SimpleCollisionField> EndSimpleCollisionField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.SimpleCollisionField>(o);
  }
  public SimpleCollisionFieldT UnPack() {
    var _o = new SimpleCollisionFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SimpleCollisionFieldT _o) {
    _o.AppliedInWorldCoordinate = this.AppliedInWorldCoordinate;
    _o.BehaviorOnHit = this.BehaviorOnHit;
    _o.CollisionPlaneYCoordinate = this.CollisionPlaneYCoordinate;
    _o.ReflectionRate = this.ReflectionRate;
    _o.NumberOfReflections = this.NumberOfReflections;
    _o.FrictionCoefficient = this.FrictionCoefficient;
  }
  public static Offset<gfl.gnpt.fb.SimpleCollisionField> Pack(FlatBufferBuilder builder, SimpleCollisionFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.SimpleCollisionField>);
    return CreateSimpleCollisionField(
      builder,
      _o.AppliedInWorldCoordinate,
      _o.BehaviorOnHit,
      _o.CollisionPlaneYCoordinate,
      _o.ReflectionRate,
      _o.NumberOfReflections,
      _o.FrictionCoefficient);
  }
};

public class SimpleCollisionFieldT
{
  [Newtonsoft.Json.JsonProperty("appliedInWorldCoordinate")]
  public bool AppliedInWorldCoordinate { get; set; }
  [Newtonsoft.Json.JsonProperty("behaviorOnHit")]
  public gfl.gnpt.fb.BehaviorOnHit BehaviorOnHit { get; set; }
  [Newtonsoft.Json.JsonProperty("collisionPlaneYCoordinate")]
  public float CollisionPlaneYCoordinate { get; set; }
  [Newtonsoft.Json.JsonProperty("reflectionRate")]
  public float ReflectionRate { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfReflections")]
  public int NumberOfReflections { get; set; }
  [Newtonsoft.Json.JsonProperty("frictionCoefficient")]
  public float FrictionCoefficient { get; set; }

  public SimpleCollisionFieldT() {
    this.AppliedInWorldCoordinate = false;
    this.BehaviorOnHit = gfl.gnpt.fb.BehaviorOnHit.Reflection;
    this.CollisionPlaneYCoordinate = 0.0f;
    this.ReflectionRate = 0.0f;
    this.NumberOfReflections = 0;
    this.FrictionCoefficient = 0.0f;
  }
}

public struct CurlNoiseField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CurlNoiseField GetRootAsCurlNoiseField(ByteBuffer _bb) { return GetRootAsCurlNoiseField(_bb, new CurlNoiseField()); }
  public static CurlNoiseField GetRootAsCurlNoiseField(ByteBuffer _bb, CurlNoiseField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CurlNoiseField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? ImpactStrength { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool InterpolatingNoiseTable { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AppliedInWorldCoordinate { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float NoiseScale { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? NoiseMoveSpeed { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float NoiseOffset { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool RandomNoiseOffset { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.CurlNoiseField> CreateCurlNoiseField(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT impactStrength = null,
      bool interpolatingNoiseTable = false,
      bool appliedInWorldCoordinate = false,
      float noiseScale = 0.0f,
      gfl.gnpt.fb.Vector3fT noiseMoveSpeed = null,
      float noiseOffset = 0.0f,
      bool randomNoiseOffset = false) {
    builder.StartTable(7);
    CurlNoiseField.AddNoiseOffset(builder, noiseOffset);
    CurlNoiseField.AddNoiseMoveSpeed(builder, gfl.gnpt.fb.Vector3f.Pack(builder, noiseMoveSpeed));
    CurlNoiseField.AddNoiseScale(builder, noiseScale);
    CurlNoiseField.AddImpactStrength(builder, gfl.gnpt.fb.Vector3f.Pack(builder, impactStrength));
    CurlNoiseField.AddRandomNoiseOffset(builder, randomNoiseOffset);
    CurlNoiseField.AddAppliedInWorldCoordinate(builder, appliedInWorldCoordinate);
    CurlNoiseField.AddInterpolatingNoiseTable(builder, interpolatingNoiseTable);
    return CurlNoiseField.EndCurlNoiseField(builder);
  }

  public static void StartCurlNoiseField(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddImpactStrength(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> impactStrengthOffset) { builder.AddStruct(0, impactStrengthOffset.Value, 0); }
  public static void AddInterpolatingNoiseTable(FlatBufferBuilder builder, bool interpolatingNoiseTable) { builder.AddBool(1, interpolatingNoiseTable, false); }
  public static void AddAppliedInWorldCoordinate(FlatBufferBuilder builder, bool appliedInWorldCoordinate) { builder.AddBool(2, appliedInWorldCoordinate, false); }
  public static void AddNoiseScale(FlatBufferBuilder builder, float noiseScale) { builder.AddFloat(3, noiseScale, 0.0f); }
  public static void AddNoiseMoveSpeed(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> noiseMoveSpeedOffset) { builder.AddStruct(4, noiseMoveSpeedOffset.Value, 0); }
  public static void AddNoiseOffset(FlatBufferBuilder builder, float noiseOffset) { builder.AddFloat(5, noiseOffset, 0.0f); }
  public static void AddRandomNoiseOffset(FlatBufferBuilder builder, bool randomNoiseOffset) { builder.AddBool(6, randomNoiseOffset, false); }
  public static Offset<gfl.gnpt.fb.CurlNoiseField> EndCurlNoiseField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CurlNoiseField>(o);
  }
  public CurlNoiseFieldT UnPack() {
    var _o = new CurlNoiseFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CurlNoiseFieldT _o) {
    _o.ImpactStrength = this.ImpactStrength.HasValue ? this.ImpactStrength.Value.UnPack() : null;
    _o.InterpolatingNoiseTable = this.InterpolatingNoiseTable;
    _o.AppliedInWorldCoordinate = this.AppliedInWorldCoordinate;
    _o.NoiseScale = this.NoiseScale;
    _o.NoiseMoveSpeed = this.NoiseMoveSpeed.HasValue ? this.NoiseMoveSpeed.Value.UnPack() : null;
    _o.NoiseOffset = this.NoiseOffset;
    _o.RandomNoiseOffset = this.RandomNoiseOffset;
  }
  public static Offset<gfl.gnpt.fb.CurlNoiseField> Pack(FlatBufferBuilder builder, CurlNoiseFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CurlNoiseField>);
    return CreateCurlNoiseField(
      builder,
      _o.ImpactStrength,
      _o.InterpolatingNoiseTable,
      _o.AppliedInWorldCoordinate,
      _o.NoiseScale,
      _o.NoiseMoveSpeed,
      _o.NoiseOffset,
      _o.RandomNoiseOffset);
  }
};

public class CurlNoiseFieldT
{
  [Newtonsoft.Json.JsonProperty("impactStrength")]
  public gfl.gnpt.fb.Vector3fT ImpactStrength { get; set; }
  [Newtonsoft.Json.JsonProperty("interpolatingNoiseTable")]
  public bool InterpolatingNoiseTable { get; set; }
  [Newtonsoft.Json.JsonProperty("appliedInWorldCoordinate")]
  public bool AppliedInWorldCoordinate { get; set; }
  [Newtonsoft.Json.JsonProperty("noiseScale")]
  public float NoiseScale { get; set; }
  [Newtonsoft.Json.JsonProperty("noiseMoveSpeed")]
  public gfl.gnpt.fb.Vector3fT NoiseMoveSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("noiseOffset")]
  public float NoiseOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("randomNoiseOffset")]
  public bool RandomNoiseOffset { get; set; }

  public CurlNoiseFieldT() {
    this.ImpactStrength = new gfl.gnpt.fb.Vector3fT();
    this.InterpolatingNoiseTable = false;
    this.AppliedInWorldCoordinate = false;
    this.NoiseScale = 0.0f;
    this.NoiseMoveSpeed = new gfl.gnpt.fb.Vector3fT();
    this.NoiseOffset = 0.0f;
    this.RandomNoiseOffset = false;
  }
}

public struct CustomField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CustomField GetRootAsCustomField(ByteBuffer _bb) { return GetRootAsCustomField(_bb, new CustomField()); }
  public static CustomField GetRootAsCustomField(ByteBuffer _bb, CustomField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.ValueBool16? Bit { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.ValueBool16?)(new gfl.gnpt.fb.ValueBool16()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.ValueFloat16? Value { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ValueFloat16?)(new gfl.gnpt.fb.ValueFloat16()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartCustomField(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBit(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ValueBool16> bitOffset) { builder.AddStruct(0, bitOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ValueFloat16> valueOffset) { builder.AddStruct(1, valueOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.CustomField> EndCustomField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CustomField>(o);
  }
  public CustomFieldT UnPack() {
    var _o = new CustomFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomFieldT _o) {
    _o.Bit = this.Bit.HasValue ? this.Bit.Value.UnPack() : null;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.CustomField> Pack(FlatBufferBuilder builder, CustomFieldT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomField>);
    StartCustomField(builder);
    AddBit(builder, gfl.gnpt.fb.ValueBool16.Pack(builder, _o.Bit));
    AddValue(builder, gfl.gnpt.fb.ValueFloat16.Pack(builder, _o.Value));
    return EndCustomField(builder);
  }
};

public class CustomFieldT
{
  [Newtonsoft.Json.JsonProperty("bit")]
  public gfl.gnpt.fb.ValueBool16T Bit { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.gnpt.fb.ValueFloat16T Value { get; set; }

  public CustomFieldT() {
    this.Bit = new gfl.gnpt.fb.ValueBool16T();
    this.Value = new gfl.gnpt.fb.ValueFloat16T();
  }
}

public struct ConnectableStripesEmitterPlugin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConnectableStripesEmitterPlugin GetRootAsConnectableStripesEmitterPlugin(ByteBuffer _bb) { return GetRootAsConnectableStripesEmitterPlugin(_bb, new ConnectableStripesEmitterPlugin()); }
  public static ConnectableStripesEmitterPlugin GetRootAsConnectableStripesEmitterPlugin(ByteBuffer _bb, ConnectableStripesEmitterPlugin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConnectableStripesEmitterPlugin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.CalculationMethod)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CalculationMethod.BillboardStripes; } }
  public gfl.gnpt.fb.Options Options { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Options)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Options.Normal; } }
  public gfl.gnpt.fb.Texturing Texturing { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Texturing)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Texturing.PasteAll; } }
  public int NumberOfDivisions { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.gnpt.fb.ConnectionType ConnectionType { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.ConnectionType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ConnectionType.Normal; } }
  public float TipAlpha { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndAlpha { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HistoryInterpolationParameters { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DirectionalInterpolationRate { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.ConnectableStripesEmitterPlugin> CreateConnectableStripesEmitterPlugin(FlatBufferBuilder builder,
      gfl.gnpt.fb.CalculationMethod calculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes,
      gfl.gnpt.fb.Options options = gfl.gnpt.fb.Options.Normal,
      gfl.gnpt.fb.Texturing texturing = gfl.gnpt.fb.Texturing.PasteAll,
      int numberOfDivisions = 0,
      gfl.gnpt.fb.ConnectionType connectionType = gfl.gnpt.fb.ConnectionType.Normal,
      float tipAlpha = 0.0f,
      float endAlpha = 0.0f,
      float historyInterpolationParameters = 0.0f,
      float directionalInterpolationRate = 0.0f) {
    builder.StartTable(9);
    ConnectableStripesEmitterPlugin.AddDirectionalInterpolationRate(builder, directionalInterpolationRate);
    ConnectableStripesEmitterPlugin.AddHistoryInterpolationParameters(builder, historyInterpolationParameters);
    ConnectableStripesEmitterPlugin.AddEndAlpha(builder, endAlpha);
    ConnectableStripesEmitterPlugin.AddTipAlpha(builder, tipAlpha);
    ConnectableStripesEmitterPlugin.AddConnectionType(builder, connectionType);
    ConnectableStripesEmitterPlugin.AddNumberOfDivisions(builder, numberOfDivisions);
    ConnectableStripesEmitterPlugin.AddTexturing(builder, texturing);
    ConnectableStripesEmitterPlugin.AddOptions(builder, options);
    ConnectableStripesEmitterPlugin.AddCalculationMethod(builder, calculationMethod);
    return ConnectableStripesEmitterPlugin.EndConnectableStripesEmitterPlugin(builder);
  }

  public static void StartConnectableStripesEmitterPlugin(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddCalculationMethod(FlatBufferBuilder builder, gfl.gnpt.fb.CalculationMethod calculationMethod) { builder.AddUint(0, (uint)calculationMethod, 0); }
  public static void AddOptions(FlatBufferBuilder builder, gfl.gnpt.fb.Options options) { builder.AddUint(1, (uint)options, 0); }
  public static void AddTexturing(FlatBufferBuilder builder, gfl.gnpt.fb.Texturing texturing) { builder.AddUint(2, (uint)texturing, 0); }
  public static void AddNumberOfDivisions(FlatBufferBuilder builder, int numberOfDivisions) { builder.AddInt(3, numberOfDivisions, 0); }
  public static void AddConnectionType(FlatBufferBuilder builder, gfl.gnpt.fb.ConnectionType connectionType) { builder.AddUint(4, (uint)connectionType, 0); }
  public static void AddTipAlpha(FlatBufferBuilder builder, float tipAlpha) { builder.AddFloat(5, tipAlpha, 0.0f); }
  public static void AddEndAlpha(FlatBufferBuilder builder, float endAlpha) { builder.AddFloat(6, endAlpha, 0.0f); }
  public static void AddHistoryInterpolationParameters(FlatBufferBuilder builder, float historyInterpolationParameters) { builder.AddFloat(7, historyInterpolationParameters, 0.0f); }
  public static void AddDirectionalInterpolationRate(FlatBufferBuilder builder, float directionalInterpolationRate) { builder.AddFloat(8, directionalInterpolationRate, 0.0f); }
  public static Offset<gfl.gnpt.fb.ConnectableStripesEmitterPlugin> EndConnectableStripesEmitterPlugin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ConnectableStripesEmitterPlugin>(o);
  }
  public ConnectableStripesEmitterPluginT UnPack() {
    var _o = new ConnectableStripesEmitterPluginT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConnectableStripesEmitterPluginT _o) {
    _o.CalculationMethod = this.CalculationMethod;
    _o.Options = this.Options;
    _o.Texturing = this.Texturing;
    _o.NumberOfDivisions = this.NumberOfDivisions;
    _o.ConnectionType = this.ConnectionType;
    _o.TipAlpha = this.TipAlpha;
    _o.EndAlpha = this.EndAlpha;
    _o.HistoryInterpolationParameters = this.HistoryInterpolationParameters;
    _o.DirectionalInterpolationRate = this.DirectionalInterpolationRate;
  }
  public static Offset<gfl.gnpt.fb.ConnectableStripesEmitterPlugin> Pack(FlatBufferBuilder builder, ConnectableStripesEmitterPluginT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ConnectableStripesEmitterPlugin>);
    return CreateConnectableStripesEmitterPlugin(
      builder,
      _o.CalculationMethod,
      _o.Options,
      _o.Texturing,
      _o.NumberOfDivisions,
      _o.ConnectionType,
      _o.TipAlpha,
      _o.EndAlpha,
      _o.HistoryInterpolationParameters,
      _o.DirectionalInterpolationRate);
  }
};

public class ConnectableStripesEmitterPluginT
{
  [Newtonsoft.Json.JsonProperty("calculationMethod")]
  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get; set; }
  [Newtonsoft.Json.JsonProperty("options")]
  public gfl.gnpt.fb.Options Options { get; set; }
  [Newtonsoft.Json.JsonProperty("texturing")]
  public gfl.gnpt.fb.Texturing Texturing { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfDivisions")]
  public int NumberOfDivisions { get; set; }
  [Newtonsoft.Json.JsonProperty("connectionType")]
  public gfl.gnpt.fb.ConnectionType ConnectionType { get; set; }
  [Newtonsoft.Json.JsonProperty("tipAlpha")]
  public float TipAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("endAlpha")]
  public float EndAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("historyInterpolationParameters")]
  public float HistoryInterpolationParameters { get; set; }
  [Newtonsoft.Json.JsonProperty("directionalInterpolationRate")]
  public float DirectionalInterpolationRate { get; set; }

  public ConnectableStripesEmitterPluginT() {
    this.CalculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes;
    this.Options = gfl.gnpt.fb.Options.Normal;
    this.Texturing = gfl.gnpt.fb.Texturing.PasteAll;
    this.NumberOfDivisions = 0;
    this.ConnectionType = gfl.gnpt.fb.ConnectionType.Normal;
    this.TipAlpha = 0.0f;
    this.EndAlpha = 0.0f;
    this.HistoryInterpolationParameters = 0.0f;
    this.DirectionalInterpolationRate = 0.0f;
  }
}

public struct HistoricalStripesEmitterPlugin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HistoricalStripesEmitterPlugin GetRootAsHistoricalStripesEmitterPlugin(ByteBuffer _bb) { return GetRootAsHistoricalStripesEmitterPlugin(_bb, new HistoricalStripesEmitterPlugin()); }
  public static HistoricalStripesEmitterPlugin GetRootAsHistoricalStripesEmitterPlugin(ByteBuffer _bb, HistoricalStripesEmitterPlugin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HistoricalStripesEmitterPlugin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.CalculationMethod)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CalculationMethod.BillboardStripes; } }
  public bool PerfectlyFollowsTheEmitter { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Options Options { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Options)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Options.Normal; } }
  public gfl.gnpt.fb.Texturing Texturing { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.Texturing)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Texturing.PasteAll; } }
  public float NumberOfDivisions { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NumberOfHistories { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float HistoryPolygonizationInterval { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TipAlpha { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndAlpha { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HistoryInterpolationParameters { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DirectionalInterpolationRate { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.HistoricalStripesEmitterPlugin> CreateHistoricalStripesEmitterPlugin(FlatBufferBuilder builder,
      gfl.gnpt.fb.CalculationMethod calculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes,
      bool perfectlyFollowsTheEmitter = false,
      gfl.gnpt.fb.Options options = gfl.gnpt.fb.Options.Normal,
      gfl.gnpt.fb.Texturing texturing = gfl.gnpt.fb.Texturing.PasteAll,
      float numberOfDivisions = 0.0f,
      int numberOfHistories = 0,
      float historyPolygonizationInterval = 0.0f,
      float tipAlpha = 0.0f,
      float endAlpha = 0.0f,
      float historyInterpolationParameters = 0.0f,
      float directionalInterpolationRate = 0.0f) {
    builder.StartTable(11);
    HistoricalStripesEmitterPlugin.AddDirectionalInterpolationRate(builder, directionalInterpolationRate);
    HistoricalStripesEmitterPlugin.AddHistoryInterpolationParameters(builder, historyInterpolationParameters);
    HistoricalStripesEmitterPlugin.AddEndAlpha(builder, endAlpha);
    HistoricalStripesEmitterPlugin.AddTipAlpha(builder, tipAlpha);
    HistoricalStripesEmitterPlugin.AddHistoryPolygonizationInterval(builder, historyPolygonizationInterval);
    HistoricalStripesEmitterPlugin.AddNumberOfHistories(builder, numberOfHistories);
    HistoricalStripesEmitterPlugin.AddNumberOfDivisions(builder, numberOfDivisions);
    HistoricalStripesEmitterPlugin.AddTexturing(builder, texturing);
    HistoricalStripesEmitterPlugin.AddOptions(builder, options);
    HistoricalStripesEmitterPlugin.AddCalculationMethod(builder, calculationMethod);
    HistoricalStripesEmitterPlugin.AddPerfectlyFollowsTheEmitter(builder, perfectlyFollowsTheEmitter);
    return HistoricalStripesEmitterPlugin.EndHistoricalStripesEmitterPlugin(builder);
  }

  public static void StartHistoricalStripesEmitterPlugin(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddCalculationMethod(FlatBufferBuilder builder, gfl.gnpt.fb.CalculationMethod calculationMethod) { builder.AddUint(0, (uint)calculationMethod, 0); }
  public static void AddPerfectlyFollowsTheEmitter(FlatBufferBuilder builder, bool perfectlyFollowsTheEmitter) { builder.AddBool(1, perfectlyFollowsTheEmitter, false); }
  public static void AddOptions(FlatBufferBuilder builder, gfl.gnpt.fb.Options options) { builder.AddUint(2, (uint)options, 0); }
  public static void AddTexturing(FlatBufferBuilder builder, gfl.gnpt.fb.Texturing texturing) { builder.AddUint(3, (uint)texturing, 0); }
  public static void AddNumberOfDivisions(FlatBufferBuilder builder, float numberOfDivisions) { builder.AddFloat(4, numberOfDivisions, 0.0f); }
  public static void AddNumberOfHistories(FlatBufferBuilder builder, int numberOfHistories) { builder.AddInt(5, numberOfHistories, 0); }
  public static void AddHistoryPolygonizationInterval(FlatBufferBuilder builder, float historyPolygonizationInterval) { builder.AddFloat(6, historyPolygonizationInterval, 0.0f); }
  public static void AddTipAlpha(FlatBufferBuilder builder, float tipAlpha) { builder.AddFloat(7, tipAlpha, 0.0f); }
  public static void AddEndAlpha(FlatBufferBuilder builder, float endAlpha) { builder.AddFloat(8, endAlpha, 0.0f); }
  public static void AddHistoryInterpolationParameters(FlatBufferBuilder builder, float historyInterpolationParameters) { builder.AddFloat(9, historyInterpolationParameters, 0.0f); }
  public static void AddDirectionalInterpolationRate(FlatBufferBuilder builder, float directionalInterpolationRate) { builder.AddFloat(10, directionalInterpolationRate, 0.0f); }
  public static Offset<gfl.gnpt.fb.HistoricalStripesEmitterPlugin> EndHistoricalStripesEmitterPlugin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.HistoricalStripesEmitterPlugin>(o);
  }
  public HistoricalStripesEmitterPluginT UnPack() {
    var _o = new HistoricalStripesEmitterPluginT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HistoricalStripesEmitterPluginT _o) {
    _o.CalculationMethod = this.CalculationMethod;
    _o.PerfectlyFollowsTheEmitter = this.PerfectlyFollowsTheEmitter;
    _o.Options = this.Options;
    _o.Texturing = this.Texturing;
    _o.NumberOfDivisions = this.NumberOfDivisions;
    _o.NumberOfHistories = this.NumberOfHistories;
    _o.HistoryPolygonizationInterval = this.HistoryPolygonizationInterval;
    _o.TipAlpha = this.TipAlpha;
    _o.EndAlpha = this.EndAlpha;
    _o.HistoryInterpolationParameters = this.HistoryInterpolationParameters;
    _o.DirectionalInterpolationRate = this.DirectionalInterpolationRate;
  }
  public static Offset<gfl.gnpt.fb.HistoricalStripesEmitterPlugin> Pack(FlatBufferBuilder builder, HistoricalStripesEmitterPluginT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.HistoricalStripesEmitterPlugin>);
    return CreateHistoricalStripesEmitterPlugin(
      builder,
      _o.CalculationMethod,
      _o.PerfectlyFollowsTheEmitter,
      _o.Options,
      _o.Texturing,
      _o.NumberOfDivisions,
      _o.NumberOfHistories,
      _o.HistoryPolygonizationInterval,
      _o.TipAlpha,
      _o.EndAlpha,
      _o.HistoryInterpolationParameters,
      _o.DirectionalInterpolationRate);
  }
};

public class HistoricalStripesEmitterPluginT
{
  [Newtonsoft.Json.JsonProperty("calculationMethod")]
  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get; set; }
  [Newtonsoft.Json.JsonProperty("perfectlyFollowsTheEmitter")]
  public bool PerfectlyFollowsTheEmitter { get; set; }
  [Newtonsoft.Json.JsonProperty("options")]
  public gfl.gnpt.fb.Options Options { get; set; }
  [Newtonsoft.Json.JsonProperty("texturing")]
  public gfl.gnpt.fb.Texturing Texturing { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfDivisions")]
  public float NumberOfDivisions { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfHistories")]
  public int NumberOfHistories { get; set; }
  [Newtonsoft.Json.JsonProperty("historyPolygonizationInterval")]
  public float HistoryPolygonizationInterval { get; set; }
  [Newtonsoft.Json.JsonProperty("tipAlpha")]
  public float TipAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("endAlpha")]
  public float EndAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("historyInterpolationParameters")]
  public float HistoryInterpolationParameters { get; set; }
  [Newtonsoft.Json.JsonProperty("directionalInterpolationRate")]
  public float DirectionalInterpolationRate { get; set; }

  public HistoricalStripesEmitterPluginT() {
    this.CalculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes;
    this.PerfectlyFollowsTheEmitter = false;
    this.Options = gfl.gnpt.fb.Options.Normal;
    this.Texturing = gfl.gnpt.fb.Texturing.PasteAll;
    this.NumberOfDivisions = 0.0f;
    this.NumberOfHistories = 0;
    this.HistoryPolygonizationInterval = 0.0f;
    this.TipAlpha = 0.0f;
    this.EndAlpha = 0.0f;
    this.HistoryInterpolationParameters = 0.0f;
    this.DirectionalInterpolationRate = 0.0f;
  }
}

public struct HistoricalStripes2EmitterPlugin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HistoricalStripes2EmitterPlugin GetRootAsHistoricalStripes2EmitterPlugin(ByteBuffer _bb) { return GetRootAsHistoricalStripes2EmitterPlugin(_bb, new HistoricalStripes2EmitterPlugin()); }
  public static HistoricalStripes2EmitterPlugin GetRootAsHistoricalStripes2EmitterPlugin(ByteBuffer _bb, HistoricalStripes2EmitterPlugin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HistoricalStripes2EmitterPlugin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.CalculationMethod)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CalculationMethod.BillboardStripes; } }
  public gfl.gnpt.fb.Options Options { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Options)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Options.Normal; } }
  public gfl.gnpt.fb.UvAssignment UvAssignment { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.UvAssignment)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.UvAssignment.FixedPercentageForEachHistory; } }
  public bool PerfectlyFollowsTheEmitter { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float LengthOfHistory { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Texturing Texturing0 { get { int o = __p.__offset(14); return o != 0 ? (gfl.gnpt.fb.Texturing)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Texturing.PasteAll; } }
  public gfl.gnpt.fb.Texturing Texturing1 { get { int o = __p.__offset(16); return o != 0 ? (gfl.gnpt.fb.Texturing)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Texturing.PasteAll; } }
  public gfl.gnpt.fb.Texturing Texturing2 { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.Texturing)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.Texturing.PasteAll; } }
  public float NumberOfDivisions { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InitialSPeedOfTheHistory { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? ChangeCycleOfTheHistory { get { int o = __p.__offset(24); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float DirectionalChangeRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? AccelerationOfHistory { get { int o = __p.__offset(28); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float AirResistanceOfHistory { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TipAlpha { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndAlpha { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TipScale { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndScale { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin> CreateHistoricalStripes2EmitterPlugin(FlatBufferBuilder builder,
      gfl.gnpt.fb.CalculationMethod calculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes,
      gfl.gnpt.fb.Options options = gfl.gnpt.fb.Options.Normal,
      gfl.gnpt.fb.UvAssignment uvAssignment = gfl.gnpt.fb.UvAssignment.FixedPercentageForEachHistory,
      bool perfectlyFollowsTheEmitter = false,
      float lengthOfHistory = 0.0f,
      gfl.gnpt.fb.Texturing texturing0 = gfl.gnpt.fb.Texturing.PasteAll,
      gfl.gnpt.fb.Texturing texturing1 = gfl.gnpt.fb.Texturing.PasteAll,
      gfl.gnpt.fb.Texturing texturing2 = gfl.gnpt.fb.Texturing.PasteAll,
      float numberOfDivisions = 0.0f,
      float initialSPeedOfTheHistory = 0.0f,
      gfl.gnpt.fb.Vector3fT changeCycleOfTheHistory = null,
      float directionalChangeRate = 0.0f,
      gfl.gnpt.fb.Vector3fT accelerationOfHistory = null,
      float airResistanceOfHistory = 0.0f,
      float tipAlpha = 0.0f,
      float endAlpha = 0.0f,
      float tipScale = 0.0f,
      float endScale = 0.0f) {
    builder.StartTable(18);
    HistoricalStripes2EmitterPlugin.AddEndScale(builder, endScale);
    HistoricalStripes2EmitterPlugin.AddTipScale(builder, tipScale);
    HistoricalStripes2EmitterPlugin.AddEndAlpha(builder, endAlpha);
    HistoricalStripes2EmitterPlugin.AddTipAlpha(builder, tipAlpha);
    HistoricalStripes2EmitterPlugin.AddAirResistanceOfHistory(builder, airResistanceOfHistory);
    HistoricalStripes2EmitterPlugin.AddAccelerationOfHistory(builder, gfl.gnpt.fb.Vector3f.Pack(builder, accelerationOfHistory));
    HistoricalStripes2EmitterPlugin.AddDirectionalChangeRate(builder, directionalChangeRate);
    HistoricalStripes2EmitterPlugin.AddChangeCycleOfTheHistory(builder, gfl.gnpt.fb.Vector3f.Pack(builder, changeCycleOfTheHistory));
    HistoricalStripes2EmitterPlugin.AddInitialSPeedOfTheHistory(builder, initialSPeedOfTheHistory);
    HistoricalStripes2EmitterPlugin.AddNumberOfDivisions(builder, numberOfDivisions);
    HistoricalStripes2EmitterPlugin.AddTexturing2(builder, texturing2);
    HistoricalStripes2EmitterPlugin.AddTexturing1(builder, texturing1);
    HistoricalStripes2EmitterPlugin.AddTexturing0(builder, texturing0);
    HistoricalStripes2EmitterPlugin.AddLengthOfHistory(builder, lengthOfHistory);
    HistoricalStripes2EmitterPlugin.AddUvAssignment(builder, uvAssignment);
    HistoricalStripes2EmitterPlugin.AddOptions(builder, options);
    HistoricalStripes2EmitterPlugin.AddCalculationMethod(builder, calculationMethod);
    HistoricalStripes2EmitterPlugin.AddPerfectlyFollowsTheEmitter(builder, perfectlyFollowsTheEmitter);
    return HistoricalStripes2EmitterPlugin.EndHistoricalStripes2EmitterPlugin(builder);
  }

  public static void StartHistoricalStripes2EmitterPlugin(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddCalculationMethod(FlatBufferBuilder builder, gfl.gnpt.fb.CalculationMethod calculationMethod) { builder.AddUint(0, (uint)calculationMethod, 0); }
  public static void AddOptions(FlatBufferBuilder builder, gfl.gnpt.fb.Options options) { builder.AddUint(1, (uint)options, 0); }
  public static void AddUvAssignment(FlatBufferBuilder builder, gfl.gnpt.fb.UvAssignment uvAssignment) { builder.AddUint(2, (uint)uvAssignment, 0); }
  public static void AddPerfectlyFollowsTheEmitter(FlatBufferBuilder builder, bool perfectlyFollowsTheEmitter) { builder.AddBool(3, perfectlyFollowsTheEmitter, false); }
  public static void AddLengthOfHistory(FlatBufferBuilder builder, float lengthOfHistory) { builder.AddFloat(4, lengthOfHistory, 0.0f); }
  public static void AddTexturing0(FlatBufferBuilder builder, gfl.gnpt.fb.Texturing texturing0) { builder.AddUint(5, (uint)texturing0, 0); }
  public static void AddTexturing1(FlatBufferBuilder builder, gfl.gnpt.fb.Texturing texturing1) { builder.AddUint(6, (uint)texturing1, 0); }
  public static void AddTexturing2(FlatBufferBuilder builder, gfl.gnpt.fb.Texturing texturing2) { builder.AddUint(7, (uint)texturing2, 0); }
  public static void AddNumberOfDivisions(FlatBufferBuilder builder, float numberOfDivisions) { builder.AddFloat(8, numberOfDivisions, 0.0f); }
  public static void AddInitialSPeedOfTheHistory(FlatBufferBuilder builder, float initialSPeedOfTheHistory) { builder.AddFloat(9, initialSPeedOfTheHistory, 0.0f); }
  public static void AddChangeCycleOfTheHistory(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> changeCycleOfTheHistoryOffset) { builder.AddStruct(10, changeCycleOfTheHistoryOffset.Value, 0); }
  public static void AddDirectionalChangeRate(FlatBufferBuilder builder, float directionalChangeRate) { builder.AddFloat(11, directionalChangeRate, 0.0f); }
  public static void AddAccelerationOfHistory(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> accelerationOfHistoryOffset) { builder.AddStruct(12, accelerationOfHistoryOffset.Value, 0); }
  public static void AddAirResistanceOfHistory(FlatBufferBuilder builder, float airResistanceOfHistory) { builder.AddFloat(13, airResistanceOfHistory, 0.0f); }
  public static void AddTipAlpha(FlatBufferBuilder builder, float tipAlpha) { builder.AddFloat(14, tipAlpha, 0.0f); }
  public static void AddEndAlpha(FlatBufferBuilder builder, float endAlpha) { builder.AddFloat(15, endAlpha, 0.0f); }
  public static void AddTipScale(FlatBufferBuilder builder, float tipScale) { builder.AddFloat(16, tipScale, 0.0f); }
  public static void AddEndScale(FlatBufferBuilder builder, float endScale) { builder.AddFloat(17, endScale, 0.0f); }
  public static Offset<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin> EndHistoricalStripes2EmitterPlugin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin>(o);
  }
  public HistoricalStripes2EmitterPluginT UnPack() {
    var _o = new HistoricalStripes2EmitterPluginT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HistoricalStripes2EmitterPluginT _o) {
    _o.CalculationMethod = this.CalculationMethod;
    _o.Options = this.Options;
    _o.UvAssignment = this.UvAssignment;
    _o.PerfectlyFollowsTheEmitter = this.PerfectlyFollowsTheEmitter;
    _o.LengthOfHistory = this.LengthOfHistory;
    _o.Texturing0 = this.Texturing0;
    _o.Texturing1 = this.Texturing1;
    _o.Texturing2 = this.Texturing2;
    _o.NumberOfDivisions = this.NumberOfDivisions;
    _o.InitialSPeedOfTheHistory = this.InitialSPeedOfTheHistory;
    _o.ChangeCycleOfTheHistory = this.ChangeCycleOfTheHistory.HasValue ? this.ChangeCycleOfTheHistory.Value.UnPack() : null;
    _o.DirectionalChangeRate = this.DirectionalChangeRate;
    _o.AccelerationOfHistory = this.AccelerationOfHistory.HasValue ? this.AccelerationOfHistory.Value.UnPack() : null;
    _o.AirResistanceOfHistory = this.AirResistanceOfHistory;
    _o.TipAlpha = this.TipAlpha;
    _o.EndAlpha = this.EndAlpha;
    _o.TipScale = this.TipScale;
    _o.EndScale = this.EndScale;
  }
  public static Offset<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin> Pack(FlatBufferBuilder builder, HistoricalStripes2EmitterPluginT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin>);
    return CreateHistoricalStripes2EmitterPlugin(
      builder,
      _o.CalculationMethod,
      _o.Options,
      _o.UvAssignment,
      _o.PerfectlyFollowsTheEmitter,
      _o.LengthOfHistory,
      _o.Texturing0,
      _o.Texturing1,
      _o.Texturing2,
      _o.NumberOfDivisions,
      _o.InitialSPeedOfTheHistory,
      _o.ChangeCycleOfTheHistory,
      _o.DirectionalChangeRate,
      _o.AccelerationOfHistory,
      _o.AirResistanceOfHistory,
      _o.TipAlpha,
      _o.EndAlpha,
      _o.TipScale,
      _o.EndScale);
  }
};

public class HistoricalStripes2EmitterPluginT
{
  [Newtonsoft.Json.JsonProperty("calculationMethod")]
  public gfl.gnpt.fb.CalculationMethod CalculationMethod { get; set; }
  [Newtonsoft.Json.JsonProperty("options")]
  public gfl.gnpt.fb.Options Options { get; set; }
  [Newtonsoft.Json.JsonProperty("uvAssignment")]
  public gfl.gnpt.fb.UvAssignment UvAssignment { get; set; }
  [Newtonsoft.Json.JsonProperty("perfectlyFollowsTheEmitter")]
  public bool PerfectlyFollowsTheEmitter { get; set; }
  [Newtonsoft.Json.JsonProperty("lengthOfHistory")]
  public float LengthOfHistory { get; set; }
  [Newtonsoft.Json.JsonProperty("texturing0")]
  public gfl.gnpt.fb.Texturing Texturing0 { get; set; }
  [Newtonsoft.Json.JsonProperty("texturing1")]
  public gfl.gnpt.fb.Texturing Texturing1 { get; set; }
  [Newtonsoft.Json.JsonProperty("texturing2")]
  public gfl.gnpt.fb.Texturing Texturing2 { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfDivisions")]
  public float NumberOfDivisions { get; set; }
  [Newtonsoft.Json.JsonProperty("initialSPeedOfTheHistory")]
  public float InitialSPeedOfTheHistory { get; set; }
  [Newtonsoft.Json.JsonProperty("changeCycleOfTheHistory")]
  public gfl.gnpt.fb.Vector3fT ChangeCycleOfTheHistory { get; set; }
  [Newtonsoft.Json.JsonProperty("directionalChangeRate")]
  public float DirectionalChangeRate { get; set; }
  [Newtonsoft.Json.JsonProperty("accelerationOfHistory")]
  public gfl.gnpt.fb.Vector3fT AccelerationOfHistory { get; set; }
  [Newtonsoft.Json.JsonProperty("airResistanceOfHistory")]
  public float AirResistanceOfHistory { get; set; }
  [Newtonsoft.Json.JsonProperty("tipAlpha")]
  public float TipAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("endAlpha")]
  public float EndAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("tipScale")]
  public float TipScale { get; set; }
  [Newtonsoft.Json.JsonProperty("endScale")]
  public float EndScale { get; set; }

  public HistoricalStripes2EmitterPluginT() {
    this.CalculationMethod = gfl.gnpt.fb.CalculationMethod.BillboardStripes;
    this.Options = gfl.gnpt.fb.Options.Normal;
    this.UvAssignment = gfl.gnpt.fb.UvAssignment.FixedPercentageForEachHistory;
    this.PerfectlyFollowsTheEmitter = false;
    this.LengthOfHistory = 0.0f;
    this.Texturing0 = gfl.gnpt.fb.Texturing.PasteAll;
    this.Texturing1 = gfl.gnpt.fb.Texturing.PasteAll;
    this.Texturing2 = gfl.gnpt.fb.Texturing.PasteAll;
    this.NumberOfDivisions = 0.0f;
    this.InitialSPeedOfTheHistory = 0.0f;
    this.ChangeCycleOfTheHistory = new gfl.gnpt.fb.Vector3fT();
    this.DirectionalChangeRate = 0.0f;
    this.AccelerationOfHistory = new gfl.gnpt.fb.Vector3fT();
    this.AirResistanceOfHistory = 0.0f;
    this.TipAlpha = 0.0f;
    this.EndAlpha = 0.0f;
    this.TipScale = 0.0f;
    this.EndScale = 0.0f;
  }
}

public struct IntraRangeLoopEmitterPlugin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IntraRangeLoopEmitterPlugin GetRootAsIntraRangeLoopEmitterPlugin(ByteBuffer _bb) { return GetRootAsIntraRangeLoopEmitterPlugin(_bb, new IntraRangeLoopEmitterPlugin()); }
  public static IntraRangeLoopEmitterPlugin GetRootAsIntraRangeLoopEmitterPlugin(ByteBuffer _bb, IntraRangeLoopEmitterPlugin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IntraRangeLoopEmitterPlugin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? LocationOfTheBox { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? SizeOfTheBox { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? AmountOfRotationOfTheBox { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? RateOfThinningAlphaAtTheEdge { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool FixTheBoxInFrontOfTheCamera { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float NumberOfRepeat { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? OffsetPerRepeat { get { int o = __p.__offset(16); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.ClippingSettings ClippingSettings { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.ClippingSettings)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ClippingSettings.NoClipping; } }
  public float HeightOfClippingPlane { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin> CreateIntraRangeLoopEmitterPlugin(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT locationOfTheBox = null,
      gfl.gnpt.fb.Vector3fT sizeOfTheBox = null,
      gfl.gnpt.fb.Vector3fT amountOfRotationOfTheBox = null,
      gfl.gnpt.fb.Vector3fT rateOfThinningAlphaAtTheEdge = null,
      bool fixTheBoxInFrontOfTheCamera = false,
      float numberOfRepeat = 0.0f,
      gfl.gnpt.fb.Vector3fT offsetPerRepeat = null,
      gfl.gnpt.fb.ClippingSettings clippingSettings = gfl.gnpt.fb.ClippingSettings.NoClipping,
      float heightOfClippingPlane = 0.0f) {
    builder.StartTable(9);
    IntraRangeLoopEmitterPlugin.AddHeightOfClippingPlane(builder, heightOfClippingPlane);
    IntraRangeLoopEmitterPlugin.AddClippingSettings(builder, clippingSettings);
    IntraRangeLoopEmitterPlugin.AddOffsetPerRepeat(builder, gfl.gnpt.fb.Vector3f.Pack(builder, offsetPerRepeat));
    IntraRangeLoopEmitterPlugin.AddNumberOfRepeat(builder, numberOfRepeat);
    IntraRangeLoopEmitterPlugin.AddRateOfThinningAlphaAtTheEdge(builder, gfl.gnpt.fb.Vector3f.Pack(builder, rateOfThinningAlphaAtTheEdge));
    IntraRangeLoopEmitterPlugin.AddAmountOfRotationOfTheBox(builder, gfl.gnpt.fb.Vector3f.Pack(builder, amountOfRotationOfTheBox));
    IntraRangeLoopEmitterPlugin.AddSizeOfTheBox(builder, gfl.gnpt.fb.Vector3f.Pack(builder, sizeOfTheBox));
    IntraRangeLoopEmitterPlugin.AddLocationOfTheBox(builder, gfl.gnpt.fb.Vector3f.Pack(builder, locationOfTheBox));
    IntraRangeLoopEmitterPlugin.AddFixTheBoxInFrontOfTheCamera(builder, fixTheBoxInFrontOfTheCamera);
    return IntraRangeLoopEmitterPlugin.EndIntraRangeLoopEmitterPlugin(builder);
  }

  public static void StartIntraRangeLoopEmitterPlugin(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddLocationOfTheBox(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> locationOfTheBoxOffset) { builder.AddStruct(0, locationOfTheBoxOffset.Value, 0); }
  public static void AddSizeOfTheBox(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> sizeOfTheBoxOffset) { builder.AddStruct(1, sizeOfTheBoxOffset.Value, 0); }
  public static void AddAmountOfRotationOfTheBox(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> amountOfRotationOfTheBoxOffset) { builder.AddStruct(2, amountOfRotationOfTheBoxOffset.Value, 0); }
  public static void AddRateOfThinningAlphaAtTheEdge(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> rateOfThinningAlphaAtTheEdgeOffset) { builder.AddStruct(3, rateOfThinningAlphaAtTheEdgeOffset.Value, 0); }
  public static void AddFixTheBoxInFrontOfTheCamera(FlatBufferBuilder builder, bool fixTheBoxInFrontOfTheCamera) { builder.AddBool(4, fixTheBoxInFrontOfTheCamera, false); }
  public static void AddNumberOfRepeat(FlatBufferBuilder builder, float numberOfRepeat) { builder.AddFloat(5, numberOfRepeat, 0.0f); }
  public static void AddOffsetPerRepeat(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> offsetPerRepeatOffset) { builder.AddStruct(6, offsetPerRepeatOffset.Value, 0); }
  public static void AddClippingSettings(FlatBufferBuilder builder, gfl.gnpt.fb.ClippingSettings clippingSettings) { builder.AddUint(7, (uint)clippingSettings, 0); }
  public static void AddHeightOfClippingPlane(FlatBufferBuilder builder, float heightOfClippingPlane) { builder.AddFloat(8, heightOfClippingPlane, 0.0f); }
  public static Offset<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin> EndIntraRangeLoopEmitterPlugin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin>(o);
  }
  public IntraRangeLoopEmitterPluginT UnPack() {
    var _o = new IntraRangeLoopEmitterPluginT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntraRangeLoopEmitterPluginT _o) {
    _o.LocationOfTheBox = this.LocationOfTheBox.HasValue ? this.LocationOfTheBox.Value.UnPack() : null;
    _o.SizeOfTheBox = this.SizeOfTheBox.HasValue ? this.SizeOfTheBox.Value.UnPack() : null;
    _o.AmountOfRotationOfTheBox = this.AmountOfRotationOfTheBox.HasValue ? this.AmountOfRotationOfTheBox.Value.UnPack() : null;
    _o.RateOfThinningAlphaAtTheEdge = this.RateOfThinningAlphaAtTheEdge.HasValue ? this.RateOfThinningAlphaAtTheEdge.Value.UnPack() : null;
    _o.FixTheBoxInFrontOfTheCamera = this.FixTheBoxInFrontOfTheCamera;
    _o.NumberOfRepeat = this.NumberOfRepeat;
    _o.OffsetPerRepeat = this.OffsetPerRepeat.HasValue ? this.OffsetPerRepeat.Value.UnPack() : null;
    _o.ClippingSettings = this.ClippingSettings;
    _o.HeightOfClippingPlane = this.HeightOfClippingPlane;
  }
  public static Offset<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin> Pack(FlatBufferBuilder builder, IntraRangeLoopEmitterPluginT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin>);
    return CreateIntraRangeLoopEmitterPlugin(
      builder,
      _o.LocationOfTheBox,
      _o.SizeOfTheBox,
      _o.AmountOfRotationOfTheBox,
      _o.RateOfThinningAlphaAtTheEdge,
      _o.FixTheBoxInFrontOfTheCamera,
      _o.NumberOfRepeat,
      _o.OffsetPerRepeat,
      _o.ClippingSettings,
      _o.HeightOfClippingPlane);
  }
};

public class IntraRangeLoopEmitterPluginT
{
  [Newtonsoft.Json.JsonProperty("locationOfTheBox")]
  public gfl.gnpt.fb.Vector3fT LocationOfTheBox { get; set; }
  [Newtonsoft.Json.JsonProperty("sizeOfTheBox")]
  public gfl.gnpt.fb.Vector3fT SizeOfTheBox { get; set; }
  [Newtonsoft.Json.JsonProperty("amountOfRotationOfTheBox")]
  public gfl.gnpt.fb.Vector3fT AmountOfRotationOfTheBox { get; set; }
  [Newtonsoft.Json.JsonProperty("rateOfThinningAlphaAtTheEdge")]
  public gfl.gnpt.fb.Vector3fT RateOfThinningAlphaAtTheEdge { get; set; }
  [Newtonsoft.Json.JsonProperty("fixTheBoxInFrontOfTheCamera")]
  public bool FixTheBoxInFrontOfTheCamera { get; set; }
  [Newtonsoft.Json.JsonProperty("numberOfRepeat")]
  public float NumberOfRepeat { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetPerRepeat")]
  public gfl.gnpt.fb.Vector3fT OffsetPerRepeat { get; set; }
  [Newtonsoft.Json.JsonProperty("clippingSettings")]
  public gfl.gnpt.fb.ClippingSettings ClippingSettings { get; set; }
  [Newtonsoft.Json.JsonProperty("heightOfClippingPlane")]
  public float HeightOfClippingPlane { get; set; }

  public IntraRangeLoopEmitterPluginT() {
    this.LocationOfTheBox = new gfl.gnpt.fb.Vector3fT();
    this.SizeOfTheBox = new gfl.gnpt.fb.Vector3fT();
    this.AmountOfRotationOfTheBox = new gfl.gnpt.fb.Vector3fT();
    this.RateOfThinningAlphaAtTheEdge = new gfl.gnpt.fb.Vector3fT();
    this.FixTheBoxInFrontOfTheCamera = false;
    this.NumberOfRepeat = 0.0f;
    this.OffsetPerRepeat = new gfl.gnpt.fb.Vector3fT();
    this.ClippingSettings = gfl.gnpt.fb.ClippingSettings.NoClipping;
    this.HeightOfClippingPlane = 0.0f;
  }
}

public struct CustomAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CustomAction GetRootAsCustomAction(ByteBuffer _bb) { return GetRootAsCustomAction(_bb, new CustomAction()); }
  public static CustomAction GetRootAsCustomAction(ByteBuffer _bb, CustomAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint CallBackId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int CallBackIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetCallBackIdBytes() { return __p.__vector_as_span<uint>(4, 4); }
#else
  public ArraySegment<byte>? GetCallBackIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public uint[] GetCallBackIdArray() { return __p.__vector_as_array<uint>(4); }
  public gfl.gnpt.fb.ValueBool16? Bit(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ValueBool16?)(new gfl.gnpt.fb.ValueBool16()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int BitLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.ValueInt16? Value(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.ValueInt16?)(new gfl.gnpt.fb.ValueInt16()).__assign(__p.__vector(o) + j * 64, __p.bb) : null; }
  public int ValueLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.ValueFloat16? ValueFloat(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.ValueFloat16?)(new gfl.gnpt.fb.ValueFloat16()).__assign(__p.__vector(o) + j * 64, __p.bb) : null; }
  public int ValueFloatLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.CustomAction> CreateCustomAction(FlatBufferBuilder builder,
      VectorOffset callBackIdOffset = default(VectorOffset),
      VectorOffset bitOffset = default(VectorOffset),
      VectorOffset valueOffset = default(VectorOffset),
      VectorOffset valueFloatOffset = default(VectorOffset)) {
    builder.StartTable(4);
    CustomAction.AddValueFloat(builder, valueFloatOffset);
    CustomAction.AddValue(builder, valueOffset);
    CustomAction.AddBit(builder, bitOffset);
    CustomAction.AddCallBackId(builder, callBackIdOffset);
    return CustomAction.EndCustomAction(builder);
  }

  public static void StartCustomAction(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCallBackId(FlatBufferBuilder builder, VectorOffset callBackIdOffset) { builder.AddOffset(0, callBackIdOffset.Value, 0); }
  public static VectorOffset CreateCallBackIdVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCallBackIdVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCallBackIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBit(FlatBufferBuilder builder, VectorOffset bitOffset) { builder.AddOffset(1, bitOffset.Value, 0); }
  public static void StartBitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 1); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(2, valueOffset.Value, 0); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(64, numElems, 4); }
  public static void AddValueFloat(FlatBufferBuilder builder, VectorOffset valueFloatOffset) { builder.AddOffset(3, valueFloatOffset.Value, 0); }
  public static void StartValueFloatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(64, numElems, 4); }
  public static Offset<gfl.gnpt.fb.CustomAction> EndCustomAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CustomAction>(o);
  }
  public CustomActionT UnPack() {
    var _o = new CustomActionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomActionT _o) {
    _o.CallBackId = new List<uint>();
    for (var _j = 0; _j < this.CallBackIdLength; ++_j) {_o.CallBackId.Add(this.CallBackId(_j));}
    _o.Bit = new List<gfl.gnpt.fb.ValueBool16T>();
    for (var _j = 0; _j < this.BitLength; ++_j) {_o.Bit.Add(this.Bit(_j).HasValue ? this.Bit(_j).Value.UnPack() : null);}
    _o.Value = new List<gfl.gnpt.fb.ValueInt16T>();
    for (var _j = 0; _j < this.ValueLength; ++_j) {_o.Value.Add(this.Value(_j).HasValue ? this.Value(_j).Value.UnPack() : null);}
    _o.ValueFloat = new List<gfl.gnpt.fb.ValueFloat16T>();
    for (var _j = 0; _j < this.ValueFloatLength; ++_j) {_o.ValueFloat.Add(this.ValueFloat(_j).HasValue ? this.ValueFloat(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.CustomAction> Pack(FlatBufferBuilder builder, CustomActionT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomAction>);
    var _callBackId = default(VectorOffset);
    if (_o.CallBackId != null) {
      var __callBackId = _o.CallBackId.ToArray();
      _callBackId = CreateCallBackIdVector(builder, __callBackId);
    }
    var _bit = default(VectorOffset);
    if (_o.Bit != null) {
      StartBitVector(builder, _o.Bit.Count);
      for (var _j = _o.Bit.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueBool16.Pack(builder, _o.Bit[_j]); }
      _bit = builder.EndVector();
    }
    var _value = default(VectorOffset);
    if (_o.Value != null) {
      StartValueVector(builder, _o.Value.Count);
      for (var _j = _o.Value.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueInt16.Pack(builder, _o.Value[_j]); }
      _value = builder.EndVector();
    }
    var _valueFloat = default(VectorOffset);
    if (_o.ValueFloat != null) {
      StartValueFloatVector(builder, _o.ValueFloat.Count);
      for (var _j = _o.ValueFloat.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueFloat16.Pack(builder, _o.ValueFloat[_j]); }
      _valueFloat = builder.EndVector();
    }
    return CreateCustomAction(
      builder,
      _callBackId,
      _bit,
      _value,
      _valueFloat);
  }
};

public class CustomActionT
{
  [Newtonsoft.Json.JsonProperty("callBackId")]
  public List<uint> CallBackId { get; set; }
  [Newtonsoft.Json.JsonProperty("bit")]
  public List<gfl.gnpt.fb.ValueBool16T> Bit { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public List<gfl.gnpt.fb.ValueInt16T> Value { get; set; }
  [Newtonsoft.Json.JsonProperty("valueFloat")]
  public List<gfl.gnpt.fb.ValueFloat16T> ValueFloat { get; set; }

  public CustomActionT() {
    this.CallBackId = null;
    this.Bit = null;
    this.Value = null;
    this.ValueFloat = null;
  }
}

public struct EmitterExpansionParameters : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmitterExpansionParameters GetRootAsEmitterExpansionParameters(ByteBuffer _bb) { return GetRootAsEmitterExpansionParameters(_bb, new EmitterExpansionParameters()); }
  public static EmitterExpansionParameters GetRootAsEmitterExpansionParameters(ByteBuffer _bb, EmitterExpansionParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmitterExpansionParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.ValueBool16? Bit(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.ValueBool16?)(new gfl.gnpt.fb.ValueBool16()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int BitLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.ValueInt16? Value(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ValueInt16?)(new gfl.gnpt.fb.ValueInt16()).__assign(__p.__vector(o) + j * 64, __p.bb) : null; }
  public int ValueLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.ValueFloat16? ValueFloat(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.ValueFloat16?)(new gfl.gnpt.fb.ValueFloat16()).__assign(__p.__vector(o) + j * 64, __p.bb) : null; }
  public int ValueFloatLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.EmitterExpansionParameters> CreateEmitterExpansionParameters(FlatBufferBuilder builder,
      VectorOffset bitOffset = default(VectorOffset),
      VectorOffset valueOffset = default(VectorOffset),
      VectorOffset valueFloatOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EmitterExpansionParameters.AddValueFloat(builder, valueFloatOffset);
    EmitterExpansionParameters.AddValue(builder, valueOffset);
    EmitterExpansionParameters.AddBit(builder, bitOffset);
    return EmitterExpansionParameters.EndEmitterExpansionParameters(builder);
  }

  public static void StartEmitterExpansionParameters(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBit(FlatBufferBuilder builder, VectorOffset bitOffset) { builder.AddOffset(0, bitOffset.Value, 0); }
  public static void StartBitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 1); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(64, numElems, 4); }
  public static void AddValueFloat(FlatBufferBuilder builder, VectorOffset valueFloatOffset) { builder.AddOffset(2, valueFloatOffset.Value, 0); }
  public static void StartValueFloatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(64, numElems, 4); }
  public static Offset<gfl.gnpt.fb.EmitterExpansionParameters> EndEmitterExpansionParameters(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.EmitterExpansionParameters>(o);
  }
  public EmitterExpansionParametersT UnPack() {
    var _o = new EmitterExpansionParametersT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmitterExpansionParametersT _o) {
    _o.Bit = new List<gfl.gnpt.fb.ValueBool16T>();
    for (var _j = 0; _j < this.BitLength; ++_j) {_o.Bit.Add(this.Bit(_j).HasValue ? this.Bit(_j).Value.UnPack() : null);}
    _o.Value = new List<gfl.gnpt.fb.ValueInt16T>();
    for (var _j = 0; _j < this.ValueLength; ++_j) {_o.Value.Add(this.Value(_j).HasValue ? this.Value(_j).Value.UnPack() : null);}
    _o.ValueFloat = new List<gfl.gnpt.fb.ValueFloat16T>();
    for (var _j = 0; _j < this.ValueFloatLength; ++_j) {_o.ValueFloat.Add(this.ValueFloat(_j).HasValue ? this.ValueFloat(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.EmitterExpansionParameters> Pack(FlatBufferBuilder builder, EmitterExpansionParametersT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.EmitterExpansionParameters>);
    var _bit = default(VectorOffset);
    if (_o.Bit != null) {
      StartBitVector(builder, _o.Bit.Count);
      for (var _j = _o.Bit.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueBool16.Pack(builder, _o.Bit[_j]); }
      _bit = builder.EndVector();
    }
    var _value = default(VectorOffset);
    if (_o.Value != null) {
      StartValueVector(builder, _o.Value.Count);
      for (var _j = _o.Value.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueInt16.Pack(builder, _o.Value[_j]); }
      _value = builder.EndVector();
    }
    var _valueFloat = default(VectorOffset);
    if (_o.ValueFloat != null) {
      StartValueFloatVector(builder, _o.ValueFloat.Count);
      for (var _j = _o.ValueFloat.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.ValueFloat16.Pack(builder, _o.ValueFloat[_j]); }
      _valueFloat = builder.EndVector();
    }
    return CreateEmitterExpansionParameters(
      builder,
      _bit,
      _value,
      _valueFloat);
  }
};

public class EmitterExpansionParametersT
{
  [Newtonsoft.Json.JsonProperty("bit")]
  public List<gfl.gnpt.fb.ValueBool16T> Bit { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public List<gfl.gnpt.fb.ValueInt16T> Value { get; set; }
  [Newtonsoft.Json.JsonProperty("valueFloat")]
  public List<gfl.gnpt.fb.ValueFloat16T> ValueFloat { get; set; }

  public EmitterExpansionParametersT() {
    this.Bit = null;
    this.Value = null;
    this.ValueFloat = null;
  }
}

public struct Inheritance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Inheritance GetRootAsInheritance(ByteBuffer _bb) { return GetRootAsInheritance(_bb, new Inheritance()); }
  public static Inheritance GetRootAsInheritance(ByteBuffer _bb, Inheritance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Inheritance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool PreDrawBeforeParent { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableVelocity { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float VelocityRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableScale { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ScaleRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableRotate { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableColorScale { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableColor0 { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableColor1 { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableAlpha0 { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableAlpha1 { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableAlpha0EachFrame { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableAlpha1EachFrame { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableEmitterParticle { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.Inheritance> CreateInheritance(FlatBufferBuilder builder,
      bool preDrawBeforeParent = false,
      bool enableVelocity = false,
      float velocityRate = 0.0f,
      bool enableScale = false,
      float scaleRate = 0.0f,
      bool enableRotate = false,
      bool enableColorScale = false,
      bool enableColor0 = false,
      bool enableColor1 = false,
      bool enableAlpha0 = false,
      bool enableAlpha1 = false,
      bool enableAlpha0EachFrame = false,
      bool enableAlpha1EachFrame = false,
      bool enableEmitterParticle = false) {
    builder.StartTable(14);
    Inheritance.AddScaleRate(builder, scaleRate);
    Inheritance.AddVelocityRate(builder, velocityRate);
    Inheritance.AddEnableEmitterParticle(builder, enableEmitterParticle);
    Inheritance.AddEnableAlpha1EachFrame(builder, enableAlpha1EachFrame);
    Inheritance.AddEnableAlpha0EachFrame(builder, enableAlpha0EachFrame);
    Inheritance.AddEnableAlpha1(builder, enableAlpha1);
    Inheritance.AddEnableAlpha0(builder, enableAlpha0);
    Inheritance.AddEnableColor1(builder, enableColor1);
    Inheritance.AddEnableColor0(builder, enableColor0);
    Inheritance.AddEnableColorScale(builder, enableColorScale);
    Inheritance.AddEnableRotate(builder, enableRotate);
    Inheritance.AddEnableScale(builder, enableScale);
    Inheritance.AddEnableVelocity(builder, enableVelocity);
    Inheritance.AddPreDrawBeforeParent(builder, preDrawBeforeParent);
    return Inheritance.EndInheritance(builder);
  }

  public static void StartInheritance(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddPreDrawBeforeParent(FlatBufferBuilder builder, bool preDrawBeforeParent) { builder.AddBool(0, preDrawBeforeParent, false); }
  public static void AddEnableVelocity(FlatBufferBuilder builder, bool enableVelocity) { builder.AddBool(1, enableVelocity, false); }
  public static void AddVelocityRate(FlatBufferBuilder builder, float velocityRate) { builder.AddFloat(2, velocityRate, 0.0f); }
  public static void AddEnableScale(FlatBufferBuilder builder, bool enableScale) { builder.AddBool(3, enableScale, false); }
  public static void AddScaleRate(FlatBufferBuilder builder, float scaleRate) { builder.AddFloat(4, scaleRate, 0.0f); }
  public static void AddEnableRotate(FlatBufferBuilder builder, bool enableRotate) { builder.AddBool(5, enableRotate, false); }
  public static void AddEnableColorScale(FlatBufferBuilder builder, bool enableColorScale) { builder.AddBool(6, enableColorScale, false); }
  public static void AddEnableColor0(FlatBufferBuilder builder, bool enableColor0) { builder.AddBool(7, enableColor0, false); }
  public static void AddEnableColor1(FlatBufferBuilder builder, bool enableColor1) { builder.AddBool(8, enableColor1, false); }
  public static void AddEnableAlpha0(FlatBufferBuilder builder, bool enableAlpha0) { builder.AddBool(9, enableAlpha0, false); }
  public static void AddEnableAlpha1(FlatBufferBuilder builder, bool enableAlpha1) { builder.AddBool(10, enableAlpha1, false); }
  public static void AddEnableAlpha0EachFrame(FlatBufferBuilder builder, bool enableAlpha0EachFrame) { builder.AddBool(11, enableAlpha0EachFrame, false); }
  public static void AddEnableAlpha1EachFrame(FlatBufferBuilder builder, bool enableAlpha1EachFrame) { builder.AddBool(12, enableAlpha1EachFrame, false); }
  public static void AddEnableEmitterParticle(FlatBufferBuilder builder, bool enableEmitterParticle) { builder.AddBool(13, enableEmitterParticle, false); }
  public static Offset<gfl.gnpt.fb.Inheritance> EndInheritance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Inheritance>(o);
  }
  public InheritanceT UnPack() {
    var _o = new InheritanceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InheritanceT _o) {
    _o.PreDrawBeforeParent = this.PreDrawBeforeParent;
    _o.EnableVelocity = this.EnableVelocity;
    _o.VelocityRate = this.VelocityRate;
    _o.EnableScale = this.EnableScale;
    _o.ScaleRate = this.ScaleRate;
    _o.EnableRotate = this.EnableRotate;
    _o.EnableColorScale = this.EnableColorScale;
    _o.EnableColor0 = this.EnableColor0;
    _o.EnableColor1 = this.EnableColor1;
    _o.EnableAlpha0 = this.EnableAlpha0;
    _o.EnableAlpha1 = this.EnableAlpha1;
    _o.EnableAlpha0EachFrame = this.EnableAlpha0EachFrame;
    _o.EnableAlpha1EachFrame = this.EnableAlpha1EachFrame;
    _o.EnableEmitterParticle = this.EnableEmitterParticle;
  }
  public static Offset<gfl.gnpt.fb.Inheritance> Pack(FlatBufferBuilder builder, InheritanceT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Inheritance>);
    return CreateInheritance(
      builder,
      _o.PreDrawBeforeParent,
      _o.EnableVelocity,
      _o.VelocityRate,
      _o.EnableScale,
      _o.ScaleRate,
      _o.EnableRotate,
      _o.EnableColorScale,
      _o.EnableColor0,
      _o.EnableColor1,
      _o.EnableAlpha0,
      _o.EnableAlpha1,
      _o.EnableAlpha0EachFrame,
      _o.EnableAlpha1EachFrame,
      _o.EnableEmitterParticle);
  }
};

public class InheritanceT
{
  [Newtonsoft.Json.JsonProperty("preDrawBeforeParent")]
  public bool PreDrawBeforeParent { get; set; }
  [Newtonsoft.Json.JsonProperty("enableVelocity")]
  public bool EnableVelocity { get; set; }
  [Newtonsoft.Json.JsonProperty("velocityRate")]
  public float VelocityRate { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScale")]
  public bool EnableScale { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleRate")]
  public float ScaleRate { get; set; }
  [Newtonsoft.Json.JsonProperty("enableRotate")]
  public bool EnableRotate { get; set; }
  [Newtonsoft.Json.JsonProperty("enableColorScale")]
  public bool EnableColorScale { get; set; }
  [Newtonsoft.Json.JsonProperty("enableColor0")]
  public bool EnableColor0 { get; set; }
  [Newtonsoft.Json.JsonProperty("enableColor1")]
  public bool EnableColor1 { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlpha0")]
  public bool EnableAlpha0 { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlpha1")]
  public bool EnableAlpha1 { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlpha0EachFrame")]
  public bool EnableAlpha0EachFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlpha1EachFrame")]
  public bool EnableAlpha1EachFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("enableEmitterParticle")]
  public bool EnableEmitterParticle { get; set; }

  public InheritanceT() {
    this.PreDrawBeforeParent = false;
    this.EnableVelocity = false;
    this.VelocityRate = 0.0f;
    this.EnableScale = false;
    this.ScaleRate = 0.0f;
    this.EnableRotate = false;
    this.EnableColorScale = false;
    this.EnableColor0 = false;
    this.EnableColor1 = false;
    this.EnableAlpha0 = false;
    this.EnableAlpha1 = false;
    this.EnableAlpha0EachFrame = false;
    this.EnableAlpha1EachFrame = false;
    this.EnableEmitterParticle = false;
  }
}

public struct Fluctutaion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Fluctutaion GetRootAsFluctutaion(ByteBuffer _bb) { return GetRootAsFluctutaion(_bb, new Fluctutaion()); }
  public static Fluctutaion GetRootAsFluctutaion(ByteBuffer _bb, Fluctutaion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Fluctutaion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.WaveKind WaveType { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.WaveKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.WaveKind.SinWave; } }
  public bool ApplyAlpha { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ApplyScale { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ApplyScaleY { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector2f? Amplitude { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2i? Frequency { get { int o = __p.__offset(14); return o != 0 ? (gfl.gnpt.fb.Vector2i?)(new gfl.gnpt.fb.Vector2i()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2i? InitPhase { get { int o = __p.__offset(16); return o != 0 ? (gfl.gnpt.fb.Vector2i?)(new gfl.gnpt.fb.Vector2i()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool PhaseRandom { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PhaseRandomY { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.Fluctutaion> CreateFluctutaion(FlatBufferBuilder builder,
      gfl.gnpt.fb.WaveKind waveType = gfl.gnpt.fb.WaveKind.SinWave,
      bool applyAlpha = false,
      bool applyScale = false,
      bool applyScaleY = false,
      gfl.gnpt.fb.Vector2fT amplitude = null,
      gfl.gnpt.fb.Vector2iT frequency = null,
      gfl.gnpt.fb.Vector2iT initPhase = null,
      bool phaseRandom = false,
      bool phaseRandomY = false) {
    builder.StartTable(9);
    Fluctutaion.AddInitPhase(builder, gfl.gnpt.fb.Vector2i.Pack(builder, initPhase));
    Fluctutaion.AddFrequency(builder, gfl.gnpt.fb.Vector2i.Pack(builder, frequency));
    Fluctutaion.AddAmplitude(builder, gfl.gnpt.fb.Vector2f.Pack(builder, amplitude));
    Fluctutaion.AddWaveType(builder, waveType);
    Fluctutaion.AddPhaseRandomY(builder, phaseRandomY);
    Fluctutaion.AddPhaseRandom(builder, phaseRandom);
    Fluctutaion.AddApplyScaleY(builder, applyScaleY);
    Fluctutaion.AddApplyScale(builder, applyScale);
    Fluctutaion.AddApplyAlpha(builder, applyAlpha);
    return Fluctutaion.EndFluctutaion(builder);
  }

  public static void StartFluctutaion(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddWaveType(FlatBufferBuilder builder, gfl.gnpt.fb.WaveKind waveType) { builder.AddUint(0, (uint)waveType, 0); }
  public static void AddApplyAlpha(FlatBufferBuilder builder, bool applyAlpha) { builder.AddBool(1, applyAlpha, false); }
  public static void AddApplyScale(FlatBufferBuilder builder, bool applyScale) { builder.AddBool(2, applyScale, false); }
  public static void AddApplyScaleY(FlatBufferBuilder builder, bool applyScaleY) { builder.AddBool(3, applyScaleY, false); }
  public static void AddAmplitude(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> amplitudeOffset) { builder.AddStruct(4, amplitudeOffset.Value, 0); }
  public static void AddFrequency(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2i> frequencyOffset) { builder.AddStruct(5, frequencyOffset.Value, 0); }
  public static void AddInitPhase(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2i> initPhaseOffset) { builder.AddStruct(6, initPhaseOffset.Value, 0); }
  public static void AddPhaseRandom(FlatBufferBuilder builder, bool phaseRandom) { builder.AddBool(7, phaseRandom, false); }
  public static void AddPhaseRandomY(FlatBufferBuilder builder, bool phaseRandomY) { builder.AddBool(8, phaseRandomY, false); }
  public static Offset<gfl.gnpt.fb.Fluctutaion> EndFluctutaion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Fluctutaion>(o);
  }
  public FluctutaionT UnPack() {
    var _o = new FluctutaionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FluctutaionT _o) {
    _o.WaveType = this.WaveType;
    _o.ApplyAlpha = this.ApplyAlpha;
    _o.ApplyScale = this.ApplyScale;
    _o.ApplyScaleY = this.ApplyScaleY;
    _o.Amplitude = this.Amplitude.HasValue ? this.Amplitude.Value.UnPack() : null;
    _o.Frequency = this.Frequency.HasValue ? this.Frequency.Value.UnPack() : null;
    _o.InitPhase = this.InitPhase.HasValue ? this.InitPhase.Value.UnPack() : null;
    _o.PhaseRandom = this.PhaseRandom;
    _o.PhaseRandomY = this.PhaseRandomY;
  }
  public static Offset<gfl.gnpt.fb.Fluctutaion> Pack(FlatBufferBuilder builder, FluctutaionT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Fluctutaion>);
    return CreateFluctutaion(
      builder,
      _o.WaveType,
      _o.ApplyAlpha,
      _o.ApplyScale,
      _o.ApplyScaleY,
      _o.Amplitude,
      _o.Frequency,
      _o.InitPhase,
      _o.PhaseRandom,
      _o.PhaseRandomY);
  }
};

public class FluctutaionT
{
  [Newtonsoft.Json.JsonProperty("waveType")]
  public gfl.gnpt.fb.WaveKind WaveType { get; set; }
  [Newtonsoft.Json.JsonProperty("applyAlpha")]
  public bool ApplyAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("applyScale")]
  public bool ApplyScale { get; set; }
  [Newtonsoft.Json.JsonProperty("applyScaleY")]
  public bool ApplyScaleY { get; set; }
  [Newtonsoft.Json.JsonProperty("amplitude")]
  public gfl.gnpt.fb.Vector2fT Amplitude { get; set; }
  [Newtonsoft.Json.JsonProperty("frequency")]
  public gfl.gnpt.fb.Vector2iT Frequency { get; set; }
  [Newtonsoft.Json.JsonProperty("initPhase")]
  public gfl.gnpt.fb.Vector2iT InitPhase { get; set; }
  [Newtonsoft.Json.JsonProperty("phaseRandom")]
  public bool PhaseRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("phaseRandomY")]
  public bool PhaseRandomY { get; set; }

  public FluctutaionT() {
    this.WaveType = gfl.gnpt.fb.WaveKind.SinWave;
    this.ApplyAlpha = false;
    this.ApplyScale = false;
    this.ApplyScaleY = false;
    this.Amplitude = new gfl.gnpt.fb.Vector2fT();
    this.Frequency = new gfl.gnpt.fb.Vector2iT();
    this.InitPhase = new gfl.gnpt.fb.Vector2iT();
    this.PhaseRandom = false;
    this.PhaseRandomY = false;
  }
}

public struct AssetTag : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AssetTag GetRootAsAssetTag(ByteBuffer _bb) { return GetRootAsAssetTag(_bb, new AssetTag()); }
  public static AssetTag GetRootAsAssetTag(ByteBuffer _bb, AssetTag obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssetTag __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Tag { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTagArray() { return __p.__vector_as_array<byte>(6); }
  public string Path { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.gnpt.fb.AssetTag> CreateAssetTag(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset tagOffset = default(StringOffset),
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(3);
    AssetTag.AddPath(builder, pathOffset);
    AssetTag.AddTag(builder, tagOffset);
    AssetTag.AddId(builder, idOffset);
    return AssetTag.EndAssetTag(builder);
  }

  public static void StartAssetTag(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddTag(FlatBufferBuilder builder, StringOffset tagOffset) { builder.AddOffset(1, tagOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(2, pathOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.AssetTag> EndAssetTag(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.AssetTag>(o);
  }
  public AssetTagT UnPack() {
    var _o = new AssetTagT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssetTagT _o) {
    _o.Id = this.Id;
    _o.Tag = this.Tag;
    _o.Path = this.Path;
  }
  public static Offset<gfl.gnpt.fb.AssetTag> Pack(FlatBufferBuilder builder, AssetTagT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.AssetTag>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _tag = _o.Tag == null ? default(StringOffset) : builder.CreateString(_o.Tag);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateAssetTag(
      builder,
      _id,
      _tag,
      _path);
  }
};

public class AssetTagT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("tag")]
  public string Tag { get; set; }
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public AssetTagT() {
    this.Id = null;
    this.Tag = null;
    this.Path = null;
  }
}

public struct AssetPath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AssetPath GetRootAsAssetPath(ByteBuffer _bb) { return GetRootAsAssetPath(_bb, new AssetPath()); }
  public static AssetPath GetRootAsAssetPath(ByteBuffer _bb, AssetPath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssetPath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TagId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTagIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTagIdArray() { return __p.__vector_as_array<byte>(4); }
  public string FileName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.gnpt.fb.AssetPath> CreateAssetPath(FlatBufferBuilder builder,
      StringOffset tagIdOffset = default(StringOffset),
      StringOffset fileNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    AssetPath.AddFileName(builder, fileNameOffset);
    AssetPath.AddTagId(builder, tagIdOffset);
    return AssetPath.EndAssetPath(builder);
  }

  public static void StartAssetPath(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTagId(FlatBufferBuilder builder, StringOffset tagIdOffset) { builder.AddOffset(0, tagIdOffset.Value, 0); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(1, fileNameOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.AssetPath> EndAssetPath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.AssetPath>(o);
  }
  public AssetPathT UnPack() {
    var _o = new AssetPathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssetPathT _o) {
    _o.TagId = this.TagId;
    _o.FileName = this.FileName;
  }
  public static Offset<gfl.gnpt.fb.AssetPath> Pack(FlatBufferBuilder builder, AssetPathT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.AssetPath>);
    var _tagId = _o.TagId == null ? default(StringOffset) : builder.CreateString(_o.TagId);
    var _fileName = _o.FileName == null ? default(StringOffset) : builder.CreateString(_o.FileName);
    return CreateAssetPath(
      builder,
      _tagId,
      _fileName);
  }
};

public class AssetPathT
{
  [Newtonsoft.Json.JsonProperty("tagId")]
  public string TagId { get; set; }
  [Newtonsoft.Json.JsonProperty("fileName")]
  public string FileName { get; set; }

  public AssetPathT() {
    this.TagId = null;
    this.FileName = null;
  }
}

public struct Texture : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Texture GetRootAsTexture(ByteBuffer _bb) { return GetRootAsTexture(_bb, new Texture()); }
  public static Texture GetRootAsTexture(ByteBuffer _bb, Texture obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Texture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.AssetPath? AssetPath { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.AssetPath?)(new gfl.gnpt.fb.AssetPath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int PatternDivU { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternDivV { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.gnpt.fb.WrapMode WrapTypeU { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.WrapMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.WrapMode.Mirror; } }
  public gfl.gnpt.fb.WrapMode WrapTypeV { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.WrapMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.WrapMode.Mirror; } }
  public bool RandomInvU { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RandomInvV { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.RepeatCountKind RepeatCount { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.RepeatCountKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.RepeatCountKind.OneXOne; } }
  public gfl.gnpt.fb.FilterMode FilterMode { get { int o = __p.__offset(20); return o != 0 ? (gfl.gnpt.fb.FilterMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.FilterMode.Linear; } }
  public float AvailableMipMapLevel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MipMapBias { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MipMapLevelLimit { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool SphericalMap { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float UvChannel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsSquareRGB { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableUvScrollAnimation { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableUvRotAnimation { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableUvScaleAnimation { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector2f? UvScrollAddValue { get { int o = __p.__offset(40); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2f? UvScrollInitialValue { get { int o = __p.__offset(42); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2f? UvScrollInitialRandomValue { get { int o = __p.__offset(44); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float UvRotationAddValue { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UvRotationInitialValue { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UvRotationInitialRandomValue { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector2f? UvScaleAddValue { get { int o = __p.__offset(52); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2f? UvScaleInitialValue { get { int o = __p.__offset(54); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector2f? UvScaleInitialRandomValue { get { int o = __p.__offset(56); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.TexturePatternAnimationKind PatternAnimType { get { int o = __p.__offset(58); return o != 0 ? (gfl.gnpt.fb.TexturePatternAnimationKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.TexturePatternAnimationKind.None; } }
  public int LoopCount { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EnableCrossfade { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int DurationCountPerFrame { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternTableCount { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RandomPatternTableCount { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EnableSimpleTableRandom { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int PatternTable(int j) { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PatternTableLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPatternTableBytes() { return __p.__vector_as_span<int>(72, 4); }
#else
  public ArraySegment<byte>? GetPatternTableBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public int[] GetPatternTableArray() { return __p.__vector_as_array<int>(72); }
  public bool EnablePatternBlend { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDensityFixedU { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDensityFixedV { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.gnpt.fb.Texture> CreateTexture(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.AssetPath> assetPathOffset = default(Offset<gfl.gnpt.fb.AssetPath>),
      int patternDivU = 0,
      int patternDivV = 0,
      gfl.gnpt.fb.WrapMode wrapTypeU = gfl.gnpt.fb.WrapMode.Mirror,
      gfl.gnpt.fb.WrapMode wrapTypeV = gfl.gnpt.fb.WrapMode.Mirror,
      bool randomInvU = false,
      bool randomInvV = false,
      gfl.gnpt.fb.RepeatCountKind repeatCount = gfl.gnpt.fb.RepeatCountKind.OneXOne,
      gfl.gnpt.fb.FilterMode filterMode = gfl.gnpt.fb.FilterMode.Linear,
      float availableMipMapLevel = 0.0f,
      float mipMapBias = 0.0f,
      bool mipMapLevelLimit = false,
      bool sphericalMap = false,
      float uvChannel = 0.0f,
      bool isSquareRGB = false,
      bool enableUvScrollAnimation = false,
      bool enableUvRotAnimation = false,
      bool enableUvScaleAnimation = false,
      gfl.gnpt.fb.Vector2fT uvScrollAddValue = null,
      gfl.gnpt.fb.Vector2fT uvScrollInitialValue = null,
      gfl.gnpt.fb.Vector2fT uvScrollInitialRandomValue = null,
      float uvRotationAddValue = 0.0f,
      float uvRotationInitialValue = 0.0f,
      float uvRotationInitialRandomValue = 0.0f,
      gfl.gnpt.fb.Vector2fT uvScaleAddValue = null,
      gfl.gnpt.fb.Vector2fT uvScaleInitialValue = null,
      gfl.gnpt.fb.Vector2fT uvScaleInitialRandomValue = null,
      gfl.gnpt.fb.TexturePatternAnimationKind patternAnimType = gfl.gnpt.fb.TexturePatternAnimationKind.None,
      int loopCount = 0,
      bool enableCrossfade = false,
      int durationCountPerFrame = 0,
      int patternTableCount = 0,
      int randomPatternTableCount = 0,
      bool enableSimpleTableRandom = false,
      VectorOffset patternTableOffset = default(VectorOffset),
      bool enablePatternBlend = false,
      bool isDensityFixedU = false,
      bool isDensityFixedV = false) {
    builder.StartTable(38);
    Texture.AddPatternTable(builder, patternTableOffset);
    Texture.AddRandomPatternTableCount(builder, randomPatternTableCount);
    Texture.AddPatternTableCount(builder, patternTableCount);
    Texture.AddDurationCountPerFrame(builder, durationCountPerFrame);
    Texture.AddLoopCount(builder, loopCount);
    Texture.AddPatternAnimType(builder, patternAnimType);
    Texture.AddUvScaleInitialRandomValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScaleInitialRandomValue));
    Texture.AddUvScaleInitialValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScaleInitialValue));
    Texture.AddUvScaleAddValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScaleAddValue));
    Texture.AddUvRotationInitialRandomValue(builder, uvRotationInitialRandomValue);
    Texture.AddUvRotationInitialValue(builder, uvRotationInitialValue);
    Texture.AddUvRotationAddValue(builder, uvRotationAddValue);
    Texture.AddUvScrollInitialRandomValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScrollInitialRandomValue));
    Texture.AddUvScrollInitialValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScrollInitialValue));
    Texture.AddUvScrollAddValue(builder, gfl.gnpt.fb.Vector2f.Pack(builder, uvScrollAddValue));
    Texture.AddUvChannel(builder, uvChannel);
    Texture.AddMipMapBias(builder, mipMapBias);
    Texture.AddAvailableMipMapLevel(builder, availableMipMapLevel);
    Texture.AddFilterMode(builder, filterMode);
    Texture.AddRepeatCount(builder, repeatCount);
    Texture.AddWrapTypeV(builder, wrapTypeV);
    Texture.AddWrapTypeU(builder, wrapTypeU);
    Texture.AddPatternDivV(builder, patternDivV);
    Texture.AddPatternDivU(builder, patternDivU);
    Texture.AddAssetPath(builder, assetPathOffset);
    Texture.AddIsDensityFixedV(builder, isDensityFixedV);
    Texture.AddIsDensityFixedU(builder, isDensityFixedU);
    Texture.AddEnablePatternBlend(builder, enablePatternBlend);
    Texture.AddEnableSimpleTableRandom(builder, enableSimpleTableRandom);
    Texture.AddEnableCrossfade(builder, enableCrossfade);
    Texture.AddEnableUvScaleAnimation(builder, enableUvScaleAnimation);
    Texture.AddEnableUvRotAnimation(builder, enableUvRotAnimation);
    Texture.AddEnableUvScrollAnimation(builder, enableUvScrollAnimation);
    Texture.AddIsSquareRGB(builder, isSquareRGB);
    Texture.AddSphericalMap(builder, sphericalMap);
    Texture.AddMipMapLevelLimit(builder, mipMapLevelLimit);
    Texture.AddRandomInvV(builder, randomInvV);
    Texture.AddRandomInvU(builder, randomInvU);
    return Texture.EndTexture(builder);
  }

  public static void StartTexture(FlatBufferBuilder builder) { builder.StartTable(38); }
  public static void AddAssetPath(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AssetPath> assetPathOffset) { builder.AddOffset(0, assetPathOffset.Value, 0); }
  public static void AddPatternDivU(FlatBufferBuilder builder, int patternDivU) { builder.AddInt(1, patternDivU, 0); }
  public static void AddPatternDivV(FlatBufferBuilder builder, int patternDivV) { builder.AddInt(2, patternDivV, 0); }
  public static void AddWrapTypeU(FlatBufferBuilder builder, gfl.gnpt.fb.WrapMode wrapTypeU) { builder.AddUint(3, (uint)wrapTypeU, 0); }
  public static void AddWrapTypeV(FlatBufferBuilder builder, gfl.gnpt.fb.WrapMode wrapTypeV) { builder.AddUint(4, (uint)wrapTypeV, 0); }
  public static void AddRandomInvU(FlatBufferBuilder builder, bool randomInvU) { builder.AddBool(5, randomInvU, false); }
  public static void AddRandomInvV(FlatBufferBuilder builder, bool randomInvV) { builder.AddBool(6, randomInvV, false); }
  public static void AddRepeatCount(FlatBufferBuilder builder, gfl.gnpt.fb.RepeatCountKind repeatCount) { builder.AddUint(7, (uint)repeatCount, 0); }
  public static void AddFilterMode(FlatBufferBuilder builder, gfl.gnpt.fb.FilterMode filterMode) { builder.AddUint(8, (uint)filterMode, 0); }
  public static void AddAvailableMipMapLevel(FlatBufferBuilder builder, float availableMipMapLevel) { builder.AddFloat(9, availableMipMapLevel, 0.0f); }
  public static void AddMipMapBias(FlatBufferBuilder builder, float mipMapBias) { builder.AddFloat(10, mipMapBias, 0.0f); }
  public static void AddMipMapLevelLimit(FlatBufferBuilder builder, bool mipMapLevelLimit) { builder.AddBool(11, mipMapLevelLimit, false); }
  public static void AddSphericalMap(FlatBufferBuilder builder, bool sphericalMap) { builder.AddBool(12, sphericalMap, false); }
  public static void AddUvChannel(FlatBufferBuilder builder, float uvChannel) { builder.AddFloat(13, uvChannel, 0.0f); }
  public static void AddIsSquareRGB(FlatBufferBuilder builder, bool isSquareRGB) { builder.AddBool(14, isSquareRGB, false); }
  public static void AddEnableUvScrollAnimation(FlatBufferBuilder builder, bool enableUvScrollAnimation) { builder.AddBool(15, enableUvScrollAnimation, false); }
  public static void AddEnableUvRotAnimation(FlatBufferBuilder builder, bool enableUvRotAnimation) { builder.AddBool(16, enableUvRotAnimation, false); }
  public static void AddEnableUvScaleAnimation(FlatBufferBuilder builder, bool enableUvScaleAnimation) { builder.AddBool(17, enableUvScaleAnimation, false); }
  public static void AddUvScrollAddValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScrollAddValueOffset) { builder.AddStruct(18, uvScrollAddValueOffset.Value, 0); }
  public static void AddUvScrollInitialValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScrollInitialValueOffset) { builder.AddStruct(19, uvScrollInitialValueOffset.Value, 0); }
  public static void AddUvScrollInitialRandomValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScrollInitialRandomValueOffset) { builder.AddStruct(20, uvScrollInitialRandomValueOffset.Value, 0); }
  public static void AddUvRotationAddValue(FlatBufferBuilder builder, float uvRotationAddValue) { builder.AddFloat(21, uvRotationAddValue, 0.0f); }
  public static void AddUvRotationInitialValue(FlatBufferBuilder builder, float uvRotationInitialValue) { builder.AddFloat(22, uvRotationInitialValue, 0.0f); }
  public static void AddUvRotationInitialRandomValue(FlatBufferBuilder builder, float uvRotationInitialRandomValue) { builder.AddFloat(23, uvRotationInitialRandomValue, 0.0f); }
  public static void AddUvScaleAddValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScaleAddValueOffset) { builder.AddStruct(24, uvScaleAddValueOffset.Value, 0); }
  public static void AddUvScaleInitialValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScaleInitialValueOffset) { builder.AddStruct(25, uvScaleInitialValueOffset.Value, 0); }
  public static void AddUvScaleInitialRandomValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> uvScaleInitialRandomValueOffset) { builder.AddStruct(26, uvScaleInitialRandomValueOffset.Value, 0); }
  public static void AddPatternAnimType(FlatBufferBuilder builder, gfl.gnpt.fb.TexturePatternAnimationKind patternAnimType) { builder.AddUint(27, (uint)patternAnimType, 0); }
  public static void AddLoopCount(FlatBufferBuilder builder, int loopCount) { builder.AddInt(28, loopCount, 0); }
  public static void AddEnableCrossfade(FlatBufferBuilder builder, bool enableCrossfade) { builder.AddBool(29, enableCrossfade, false); }
  public static void AddDurationCountPerFrame(FlatBufferBuilder builder, int durationCountPerFrame) { builder.AddInt(30, durationCountPerFrame, 0); }
  public static void AddPatternTableCount(FlatBufferBuilder builder, int patternTableCount) { builder.AddInt(31, patternTableCount, 0); }
  public static void AddRandomPatternTableCount(FlatBufferBuilder builder, int randomPatternTableCount) { builder.AddInt(32, randomPatternTableCount, 0); }
  public static void AddEnableSimpleTableRandom(FlatBufferBuilder builder, bool enableSimpleTableRandom) { builder.AddBool(33, enableSimpleTableRandom, false); }
  public static void AddPatternTable(FlatBufferBuilder builder, VectorOffset patternTableOffset) { builder.AddOffset(34, patternTableOffset.Value, 0); }
  public static VectorOffset CreatePatternTableVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePatternTableVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPatternTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnablePatternBlend(FlatBufferBuilder builder, bool enablePatternBlend) { builder.AddBool(35, enablePatternBlend, false); }
  public static void AddIsDensityFixedU(FlatBufferBuilder builder, bool isDensityFixedU) { builder.AddBool(36, isDensityFixedU, false); }
  public static void AddIsDensityFixedV(FlatBufferBuilder builder, bool isDensityFixedV) { builder.AddBool(37, isDensityFixedV, false); }
  public static Offset<gfl.gnpt.fb.Texture> EndTexture(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Texture>(o);
  }
  public TextureT UnPack() {
    var _o = new TextureT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TextureT _o) {
    _o.AssetPath = this.AssetPath.HasValue ? this.AssetPath.Value.UnPack() : null;
    _o.PatternDivU = this.PatternDivU;
    _o.PatternDivV = this.PatternDivV;
    _o.WrapTypeU = this.WrapTypeU;
    _o.WrapTypeV = this.WrapTypeV;
    _o.RandomInvU = this.RandomInvU;
    _o.RandomInvV = this.RandomInvV;
    _o.RepeatCount = this.RepeatCount;
    _o.FilterMode = this.FilterMode;
    _o.AvailableMipMapLevel = this.AvailableMipMapLevel;
    _o.MipMapBias = this.MipMapBias;
    _o.MipMapLevelLimit = this.MipMapLevelLimit;
    _o.SphericalMap = this.SphericalMap;
    _o.UvChannel = this.UvChannel;
    _o.IsSquareRGB = this.IsSquareRGB;
    _o.EnableUvScrollAnimation = this.EnableUvScrollAnimation;
    _o.EnableUvRotAnimation = this.EnableUvRotAnimation;
    _o.EnableUvScaleAnimation = this.EnableUvScaleAnimation;
    _o.UvScrollAddValue = this.UvScrollAddValue.HasValue ? this.UvScrollAddValue.Value.UnPack() : null;
    _o.UvScrollInitialValue = this.UvScrollInitialValue.HasValue ? this.UvScrollInitialValue.Value.UnPack() : null;
    _o.UvScrollInitialRandomValue = this.UvScrollInitialRandomValue.HasValue ? this.UvScrollInitialRandomValue.Value.UnPack() : null;
    _o.UvRotationAddValue = this.UvRotationAddValue;
    _o.UvRotationInitialValue = this.UvRotationInitialValue;
    _o.UvRotationInitialRandomValue = this.UvRotationInitialRandomValue;
    _o.UvScaleAddValue = this.UvScaleAddValue.HasValue ? this.UvScaleAddValue.Value.UnPack() : null;
    _o.UvScaleInitialValue = this.UvScaleInitialValue.HasValue ? this.UvScaleInitialValue.Value.UnPack() : null;
    _o.UvScaleInitialRandomValue = this.UvScaleInitialRandomValue.HasValue ? this.UvScaleInitialRandomValue.Value.UnPack() : null;
    _o.PatternAnimType = this.PatternAnimType;
    _o.LoopCount = this.LoopCount;
    _o.EnableCrossfade = this.EnableCrossfade;
    _o.DurationCountPerFrame = this.DurationCountPerFrame;
    _o.PatternTableCount = this.PatternTableCount;
    _o.RandomPatternTableCount = this.RandomPatternTableCount;
    _o.EnableSimpleTableRandom = this.EnableSimpleTableRandom;
    _o.PatternTable = new List<int>();
    for (var _j = 0; _j < this.PatternTableLength; ++_j) {_o.PatternTable.Add(this.PatternTable(_j));}
    _o.EnablePatternBlend = this.EnablePatternBlend;
    _o.IsDensityFixedU = this.IsDensityFixedU;
    _o.IsDensityFixedV = this.IsDensityFixedV;
  }
  public static Offset<gfl.gnpt.fb.Texture> Pack(FlatBufferBuilder builder, TextureT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Texture>);
    var _assetPath = _o.AssetPath == null ? default(Offset<gfl.gnpt.fb.AssetPath>) : gfl.gnpt.fb.AssetPath.Pack(builder, _o.AssetPath);
    var _patternTable = default(VectorOffset);
    if (_o.PatternTable != null) {
      var __patternTable = _o.PatternTable.ToArray();
      _patternTable = CreatePatternTableVector(builder, __patternTable);
    }
    return CreateTexture(
      builder,
      _assetPath,
      _o.PatternDivU,
      _o.PatternDivV,
      _o.WrapTypeU,
      _o.WrapTypeV,
      _o.RandomInvU,
      _o.RandomInvV,
      _o.RepeatCount,
      _o.FilterMode,
      _o.AvailableMipMapLevel,
      _o.MipMapBias,
      _o.MipMapLevelLimit,
      _o.SphericalMap,
      _o.UvChannel,
      _o.IsSquareRGB,
      _o.EnableUvScrollAnimation,
      _o.EnableUvRotAnimation,
      _o.EnableUvScaleAnimation,
      _o.UvScrollAddValue,
      _o.UvScrollInitialValue,
      _o.UvScrollInitialRandomValue,
      _o.UvRotationAddValue,
      _o.UvRotationInitialValue,
      _o.UvRotationInitialRandomValue,
      _o.UvScaleAddValue,
      _o.UvScaleInitialValue,
      _o.UvScaleInitialRandomValue,
      _o.PatternAnimType,
      _o.LoopCount,
      _o.EnableCrossfade,
      _o.DurationCountPerFrame,
      _o.PatternTableCount,
      _o.RandomPatternTableCount,
      _o.EnableSimpleTableRandom,
      _patternTable,
      _o.EnablePatternBlend,
      _o.IsDensityFixedU,
      _o.IsDensityFixedV);
  }
};

public class TextureT
{
  [Newtonsoft.Json.JsonProperty("assetPath")]
  public gfl.gnpt.fb.AssetPathT AssetPath { get; set; }
  [Newtonsoft.Json.JsonProperty("patternDivU")]
  public int PatternDivU { get; set; }
  [Newtonsoft.Json.JsonProperty("patternDivV")]
  public int PatternDivV { get; set; }
  [Newtonsoft.Json.JsonProperty("wrapTypeU")]
  public gfl.gnpt.fb.WrapMode WrapTypeU { get; set; }
  [Newtonsoft.Json.JsonProperty("wrapTypeV")]
  public gfl.gnpt.fb.WrapMode WrapTypeV { get; set; }
  [Newtonsoft.Json.JsonProperty("randomInvU")]
  public bool RandomInvU { get; set; }
  [Newtonsoft.Json.JsonProperty("randomInvV")]
  public bool RandomInvV { get; set; }
  [Newtonsoft.Json.JsonProperty("repeatCount")]
  public gfl.gnpt.fb.RepeatCountKind RepeatCount { get; set; }
  [Newtonsoft.Json.JsonProperty("filterMode")]
  public gfl.gnpt.fb.FilterMode FilterMode { get; set; }
  [Newtonsoft.Json.JsonProperty("availableMipMapLevel")]
  public float AvailableMipMapLevel { get; set; }
  [Newtonsoft.Json.JsonProperty("mipMapBias")]
  public float MipMapBias { get; set; }
  [Newtonsoft.Json.JsonProperty("mipMapLevelLimit")]
  public bool MipMapLevelLimit { get; set; }
  [Newtonsoft.Json.JsonProperty("sphericalMap")]
  public bool SphericalMap { get; set; }
  [Newtonsoft.Json.JsonProperty("uvChannel")]
  public float UvChannel { get; set; }
  [Newtonsoft.Json.JsonProperty("isSquareRGB")]
  public bool IsSquareRGB { get; set; }
  [Newtonsoft.Json.JsonProperty("enableUvScrollAnimation")]
  public bool EnableUvScrollAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableUvRotAnimation")]
  public bool EnableUvRotAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableUvScaleAnimation")]
  public bool EnableUvScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScrollAddValue")]
  public gfl.gnpt.fb.Vector2fT UvScrollAddValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScrollInitialValue")]
  public gfl.gnpt.fb.Vector2fT UvScrollInitialValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScrollInitialRandomValue")]
  public gfl.gnpt.fb.Vector2fT UvScrollInitialRandomValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvRotationAddValue")]
  public float UvRotationAddValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvRotationInitialValue")]
  public float UvRotationInitialValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvRotationInitialRandomValue")]
  public float UvRotationInitialRandomValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScaleAddValue")]
  public gfl.gnpt.fb.Vector2fT UvScaleAddValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScaleInitialValue")]
  public gfl.gnpt.fb.Vector2fT UvScaleInitialValue { get; set; }
  [Newtonsoft.Json.JsonProperty("uvScaleInitialRandomValue")]
  public gfl.gnpt.fb.Vector2fT UvScaleInitialRandomValue { get; set; }
  [Newtonsoft.Json.JsonProperty("patternAnimType")]
  public gfl.gnpt.fb.TexturePatternAnimationKind PatternAnimType { get; set; }
  [Newtonsoft.Json.JsonProperty("loopCount")]
  public int LoopCount { get; set; }
  [Newtonsoft.Json.JsonProperty("enableCrossfade")]
  public bool EnableCrossfade { get; set; }
  [Newtonsoft.Json.JsonProperty("durationCountPerFrame")]
  public int DurationCountPerFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("patternTableCount")]
  public int PatternTableCount { get; set; }
  [Newtonsoft.Json.JsonProperty("randomPatternTableCount")]
  public int RandomPatternTableCount { get; set; }
  [Newtonsoft.Json.JsonProperty("enableSimpleTableRandom")]
  public bool EnableSimpleTableRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("patternTable")]
  public List<int> PatternTable { get; set; }
  [Newtonsoft.Json.JsonProperty("enablePatternBlend")]
  public bool EnablePatternBlend { get; set; }
  [Newtonsoft.Json.JsonProperty("isDensityFixedU")]
  public bool IsDensityFixedU { get; set; }
  [Newtonsoft.Json.JsonProperty("isDensityFixedV")]
  public bool IsDensityFixedV { get; set; }

  public TextureT() {
    this.AssetPath = null;
    this.PatternDivU = 0;
    this.PatternDivV = 0;
    this.WrapTypeU = gfl.gnpt.fb.WrapMode.Mirror;
    this.WrapTypeV = gfl.gnpt.fb.WrapMode.Mirror;
    this.RandomInvU = false;
    this.RandomInvV = false;
    this.RepeatCount = gfl.gnpt.fb.RepeatCountKind.OneXOne;
    this.FilterMode = gfl.gnpt.fb.FilterMode.Linear;
    this.AvailableMipMapLevel = 0.0f;
    this.MipMapBias = 0.0f;
    this.MipMapLevelLimit = false;
    this.SphericalMap = false;
    this.UvChannel = 0.0f;
    this.IsSquareRGB = false;
    this.EnableUvScrollAnimation = false;
    this.EnableUvRotAnimation = false;
    this.EnableUvScaleAnimation = false;
    this.UvScrollAddValue = new gfl.gnpt.fb.Vector2fT();
    this.UvScrollInitialValue = new gfl.gnpt.fb.Vector2fT();
    this.UvScrollInitialRandomValue = new gfl.gnpt.fb.Vector2fT();
    this.UvRotationAddValue = 0.0f;
    this.UvRotationInitialValue = 0.0f;
    this.UvRotationInitialRandomValue = 0.0f;
    this.UvScaleAddValue = new gfl.gnpt.fb.Vector2fT();
    this.UvScaleInitialValue = new gfl.gnpt.fb.Vector2fT();
    this.UvScaleInitialRandomValue = new gfl.gnpt.fb.Vector2fT();
    this.PatternAnimType = gfl.gnpt.fb.TexturePatternAnimationKind.None;
    this.LoopCount = 0;
    this.EnableCrossfade = false;
    this.DurationCountPerFrame = 0;
    this.PatternTableCount = 0;
    this.RandomPatternTableCount = 0;
    this.EnableSimpleTableRandom = false;
    this.PatternTable = null;
    this.EnablePatternBlend = false;
    this.IsDensityFixedU = false;
    this.IsDensityFixedV = false;
  }
}

public struct RandomColorTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RandomColorTable GetRootAsRandomColorTable(ByteBuffer _bb) { return GetRootAsRandomColorTable(_bb, new RandomColorTable()); }
  public static RandomColorTable GetRootAsRandomColorTable(ByteBuffer _bb, RandomColorTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RandomColorTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Colors(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ColorsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Enables(int j) { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int EnablesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetEnablesBytes() { return __p.__vector_as_span<bool>(6, 1); }
#else
  public ArraySegment<byte>? GetEnablesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public bool[] GetEnablesArray() { return __p.__vector_as_array<bool>(6); }

  public static Offset<gfl.gnpt.fb.RandomColorTable> CreateRandomColorTable(FlatBufferBuilder builder,
      VectorOffset colorsOffset = default(VectorOffset),
      VectorOffset enablesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    RandomColorTable.AddEnables(builder, enablesOffset);
    RandomColorTable.AddColors(builder, colorsOffset);
    return RandomColorTable.EndRandomColorTable(builder);
  }

  public static void StartRandomColorTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddColors(FlatBufferBuilder builder, VectorOffset colorsOffset) { builder.AddOffset(0, colorsOffset.Value, 0); }
  public static void StartColorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddEnables(FlatBufferBuilder builder, VectorOffset enablesOffset) { builder.AddOffset(1, enablesOffset.Value, 0); }
  public static VectorOffset CreateEnablesVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEnablesVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartEnablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.gnpt.fb.RandomColorTable> EndRandomColorTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.RandomColorTable>(o);
  }
  public RandomColorTableT UnPack() {
    var _o = new RandomColorTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RandomColorTableT _o) {
    _o.Colors = new List<gfl.gnpt.fb.Vector3fT>();
    for (var _j = 0; _j < this.ColorsLength; ++_j) {_o.Colors.Add(this.Colors(_j).HasValue ? this.Colors(_j).Value.UnPack() : null);}
    _o.Enables = new List<bool>();
    for (var _j = 0; _j < this.EnablesLength; ++_j) {_o.Enables.Add(this.Enables(_j));}
  }
  public static Offset<gfl.gnpt.fb.RandomColorTable> Pack(FlatBufferBuilder builder, RandomColorTableT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.RandomColorTable>);
    var _colors = default(VectorOffset);
    if (_o.Colors != null) {
      StartColorsVector(builder, _o.Colors.Count);
      for (var _j = _o.Colors.Count - 1; _j >= 0; --_j) { gfl.gnpt.fb.Vector3f.Pack(builder, _o.Colors[_j]); }
      _colors = builder.EndVector();
    }
    var _enables = default(VectorOffset);
    if (_o.Enables != null) {
      var __enables = _o.Enables.ToArray();
      _enables = CreateEnablesVector(builder, __enables);
    }
    return CreateRandomColorTable(
      builder,
      _colors,
      _enables);
  }
};

public class RandomColorTableT
{
  [Newtonsoft.Json.JsonProperty("colors")]
  public List<gfl.gnpt.fb.Vector3fT> Colors { get; set; }
  [Newtonsoft.Json.JsonProperty("enables")]
  public List<bool> Enables { get; set; }

  public RandomColorTableT() {
    this.Colors = null;
    this.Enables = null;
  }
}

public struct Rotation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Rotation GetRootAsRotation(ByteBuffer _bb) { return GetRootAsRotation(_bb, new Rotation()); }
  public static Rotation GetRootAsRotation(ByteBuffer _bb, Rotation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Rotation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float InitialRotation { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InitialRotationRandom { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableRotationRandom { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float RotationSpeed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RotationSpeedRandom { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.Rotation> CreateRotation(FlatBufferBuilder builder,
      float initialRotation = 0.0f,
      float initialRotationRandom = 0.0f,
      bool enableRotationRandom = false,
      float rotationSpeed = 0.0f,
      float rotationSpeedRandom = 0.0f) {
    builder.StartTable(5);
    Rotation.AddRotationSpeedRandom(builder, rotationSpeedRandom);
    Rotation.AddRotationSpeed(builder, rotationSpeed);
    Rotation.AddInitialRotationRandom(builder, initialRotationRandom);
    Rotation.AddInitialRotation(builder, initialRotation);
    Rotation.AddEnableRotationRandom(builder, enableRotationRandom);
    return Rotation.EndRotation(builder);
  }

  public static void StartRotation(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddInitialRotation(FlatBufferBuilder builder, float initialRotation) { builder.AddFloat(0, initialRotation, 0.0f); }
  public static void AddInitialRotationRandom(FlatBufferBuilder builder, float initialRotationRandom) { builder.AddFloat(1, initialRotationRandom, 0.0f); }
  public static void AddEnableRotationRandom(FlatBufferBuilder builder, bool enableRotationRandom) { builder.AddBool(2, enableRotationRandom, false); }
  public static void AddRotationSpeed(FlatBufferBuilder builder, float rotationSpeed) { builder.AddFloat(3, rotationSpeed, 0.0f); }
  public static void AddRotationSpeedRandom(FlatBufferBuilder builder, float rotationSpeedRandom) { builder.AddFloat(4, rotationSpeedRandom, 0.0f); }
  public static Offset<gfl.gnpt.fb.Rotation> EndRotation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Rotation>(o);
  }
  public RotationT UnPack() {
    var _o = new RotationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RotationT _o) {
    _o.InitialRotation = this.InitialRotation;
    _o.InitialRotationRandom = this.InitialRotationRandom;
    _o.EnableRotationRandom = this.EnableRotationRandom;
    _o.RotationSpeed = this.RotationSpeed;
    _o.RotationSpeedRandom = this.RotationSpeedRandom;
  }
  public static Offset<gfl.gnpt.fb.Rotation> Pack(FlatBufferBuilder builder, RotationT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Rotation>);
    return CreateRotation(
      builder,
      _o.InitialRotation,
      _o.InitialRotationRandom,
      _o.EnableRotationRandom,
      _o.RotationSpeed,
      _o.RotationSpeedRandom);
  }
};

public class RotationT
{
  [Newtonsoft.Json.JsonProperty("initialRotation")]
  public float InitialRotation { get; set; }
  [Newtonsoft.Json.JsonProperty("initialRotationRandom")]
  public float InitialRotationRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("enableRotationRandom")]
  public bool EnableRotationRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationSpeed")]
  public float RotationSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationSpeedRandom")]
  public float RotationSpeedRandom { get; set; }

  public RotationT() {
    this.InitialRotation = 0.0f;
    this.InitialRotationRandom = 0.0f;
    this.EnableRotationRandom = false;
    this.RotationSpeed = 0.0f;
    this.RotationSpeedRandom = 0.0f;
  }
}

public struct CustomShaderParameterValueInt : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CustomShaderParameterValueInt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { return __p.bb.GetInt(__p.bb_pos + 0); } }

  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueInt> CreateCustomShaderParameterValueInt(FlatBufferBuilder builder, int Value) {
    builder.Prep(4, 4);
    builder.PutInt(Value);
    return new Offset<gfl.gnpt.fb.CustomShaderParameterValueInt>(builder.Offset);
  }
  public CustomShaderParameterValueIntT UnPack() {
    var _o = new CustomShaderParameterValueIntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderParameterValueIntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueInt> Pack(FlatBufferBuilder builder, CustomShaderParameterValueIntT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderParameterValueInt>);
    return CreateCustomShaderParameterValueInt(
      builder,
      _o.Value);
  }
};

public class CustomShaderParameterValueIntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public CustomShaderParameterValueIntT() {
    this.Value = 0;
  }
}

public struct CustomShaderParameterValueFloat : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CustomShaderParameterValueFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }

  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueFloat> CreateCustomShaderParameterValueFloat(FlatBufferBuilder builder, float Value) {
    builder.Prep(4, 4);
    builder.PutFloat(Value);
    return new Offset<gfl.gnpt.fb.CustomShaderParameterValueFloat>(builder.Offset);
  }
  public CustomShaderParameterValueFloatT UnPack() {
    var _o = new CustomShaderParameterValueFloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderParameterValueFloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueFloat> Pack(FlatBufferBuilder builder, CustomShaderParameterValueFloatT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderParameterValueFloat>);
    return CreateCustomShaderParameterValueFloat(
      builder,
      _o.Value);
  }
};

public class CustomShaderParameterValueFloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public CustomShaderParameterValueFloatT() {
    this.Value = 0.0f;
  }
}

public struct CustomShaderParameterValueBool : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CustomShaderParameterValueBool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }

  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueBool> CreateCustomShaderParameterValueBool(FlatBufferBuilder builder, bool Value) {
    builder.Prep(1, 1);
    builder.PutBool(Value);
    return new Offset<gfl.gnpt.fb.CustomShaderParameterValueBool>(builder.Offset);
  }
  public CustomShaderParameterValueBoolT UnPack() {
    var _o = new CustomShaderParameterValueBoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderParameterValueBoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.gnpt.fb.CustomShaderParameterValueBool> Pack(FlatBufferBuilder builder, CustomShaderParameterValueBoolT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderParameterValueBool>);
    return CreateCustomShaderParameterValueBool(
      builder,
      _o.Value);
  }
};

public class CustomShaderParameterValueBoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public CustomShaderParameterValueBoolT() {
    this.Value = false;
  }
}

public struct CustomShaderParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CustomShaderParameter GetRootAsCustomShaderParameter(ByteBuffer _bb) { return GetRootAsCustomShaderParameter(_bb, new CustomShaderParameter()); }
  public static CustomShaderParameter GetRootAsCustomShaderParameter(ByteBuffer _bb, CustomShaderParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomShaderParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.CustomShaderParameterValue ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.CustomShaderParameterValue)__p.bb.Get(o + __p.bb_pos) : gfl.gnpt.fb.CustomShaderParameterValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.gnpt.fb.CustomShaderParameter> CreateCustomShaderParameter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.gnpt.fb.CustomShaderParameterValue value_type = gfl.gnpt.fb.CustomShaderParameterValue.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    CustomShaderParameter.AddValue(builder, valueOffset);
    CustomShaderParameter.AddName(builder, nameOffset);
    CustomShaderParameter.AddValueType(builder, value_type);
    return CustomShaderParameter.EndCustomShaderParameter(builder);
  }

  public static void StartCustomShaderParameter(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.gnpt.fb.CustomShaderParameterValue valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<gfl.gnpt.fb.CustomShaderParameter> EndCustomShaderParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CustomShaderParameter>(o);
  }
  public CustomShaderParameterT UnPack() {
    var _o = new CustomShaderParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderParameterT _o) {
    _o.Name = this.Name;
    _o.Value = new gfl.gnpt.fb.CustomShaderParameterValueUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.gnpt.fb.CustomShaderParameterValue.Int:
        _o.Value.Value = this.Value<gfl.gnpt.fb.CustomShaderParameterValueInt>().HasValue ? this.Value<gfl.gnpt.fb.CustomShaderParameterValueInt>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.CustomShaderParameterValue.Float:
        _o.Value.Value = this.Value<gfl.gnpt.fb.CustomShaderParameterValueFloat>().HasValue ? this.Value<gfl.gnpt.fb.CustomShaderParameterValueFloat>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.CustomShaderParameterValue.Bool:
        _o.Value.Value = this.Value<gfl.gnpt.fb.CustomShaderParameterValueBool>().HasValue ? this.Value<gfl.gnpt.fb.CustomShaderParameterValueBool>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.gnpt.fb.CustomShaderParameter> Pack(FlatBufferBuilder builder, CustomShaderParameterT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderParameter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? gfl.gnpt.fb.CustomShaderParameterValue.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.gnpt.fb.CustomShaderParameterValueUnion.Pack(builder, _o.Value);
    return CreateCustomShaderParameter(
      builder,
      _name,
      _value_type,
      _value);
  }
};

public class CustomShaderParameterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.gnpt.fb.CustomShaderParameterValue ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.gnpt.fb.CustomShaderParameterValue.NONE;
    }
    set {
      this.Value = new gfl.gnpt.fb.CustomShaderParameterValueUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.gnpt.fb.CustomShaderParameterValueUnion_JsonConverter))]
  public gfl.gnpt.fb.CustomShaderParameterValueUnion Value { get; set; }

  public CustomShaderParameterT() {
    this.Name = null;
    this.Value = null;
  }
}

public struct Emitter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Emitter GetRootAsEmitter(ByteBuffer _bb) { return GetRootAsEmitter(_bb, new Emitter()); }
  public static Emitter GetRootAsEmitter(ByteBuffer _bb, Emitter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Emitter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.ParticleFollowMode FollowMode { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ParticleFollowMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ParticleFollowMode.None; } }
  public bool EnableStopOnEnd { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableAlphaFadeOut { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableScaleFadeOut { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int FadeOutTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EnableAlphaFadeIn { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableScaleFadeIn { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int FadeInTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.gnpt.fb.RenderState? RenderState { get { int o = __p.__offset(22); return o != 0 ? (gfl.gnpt.fb.RenderState?)(new gfl.gnpt.fb.RenderState()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Random? Random { get { int o = __p.__offset(24); return o != 0 ? (gfl.gnpt.fb.Random?)(new gfl.gnpt.fb.Random()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Lod? Lod { get { int o = __p.__offset(26); return o != 0 ? (gfl.gnpt.fb.Lod?)(new gfl.gnpt.fb.Lod()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Inheritance? Inheritance { get { int o = __p.__offset(28); return o != 0 ? (gfl.gnpt.fb.Inheritance?)(new gfl.gnpt.fb.Inheritance()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTypeKind EmitterType { get { int o = __p.__offset(30); return o != 0 ? (gfl.gnpt.fb.EmitterTypeKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitterTypeKind.Point; } }
  public gfl.gnpt.fb.Vector3f? EmitterTypeEmitterRadius { get { int o = __p.__offset(32); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EmitterShapeLongitudeArcLength { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitterShapeLatitudeArcLength { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitterShapeStartArc { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EmitterShapeStartArcRandom { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float EmitterShapeRandomPos { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitterShapeHollowRatio { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterShapeArcTypeKind EmitterShapeArcType { get { int o = __p.__offset(46); return o != 0 ? (gfl.gnpt.fb.EmitterShapeArcTypeKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitterShapeArcTypeKind.Longitude; } }
  public float EmitterShapeLineCenter { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitterShapeLineLength { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterShapeEmissionTypeKind EmitterShapeEmissionType { get { int o = __p.__offset(52); return o != 0 ? (gfl.gnpt.fb.EmitterShapeEmissionTypeKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitterShapeEmissionTypeKind.AllAtOnce; } }
  public gfl.gnpt.fb.EmitterShapeSphereAxisKind EmitterShapeSphereAxis { get { int o = __p.__offset(54); return o != 0 ? (gfl.gnpt.fb.EmitterShapeSphereAxisKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitterShapeSphereAxisKind.PlusX; } }
  public gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind EmitterShapeSphereAndDivisionDivision { get { int o = __p.__offset(56); return o != 0 ? (gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind.Division2; } }
  public int EmitterShapeSphereAndDivision64Division { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitterShapeCircleDivision { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitterShapeCircleDivisionRandom { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitterShapeLineDivision { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitterShapeLineDivisionRandom { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.gnpt.fb.Vector3f? EmitterShapeScale { get { int o = __p.__offset(68); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.AssetPath? EmitterShapePrimitiveFilePath { get { int o = __p.__offset(70); return o != 0 ? (gfl.gnpt.fb.AssetPath?)(new gfl.gnpt.fb.AssetPath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float RandomPosition { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? ShapeScaleAnimation { get { int o = __p.__offset(74); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterScale { get { int o = __p.__offset(76); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? EmitterScaleAnimation { get { int o = __p.__offset(78); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterRotation { get { int o = __p.__offset(80); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterRotationRandom { get { int o = __p.__offset(82); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? EmitterRotationAnimation { get { int o = __p.__offset(84); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterPosition { get { int o = __p.__offset(86); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterPositionRandom { get { int o = __p.__offset(88); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? EmitterPositionAnimation { get { int o = __p.__offset(90); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableUpdateRandom { get { int o = __p.__offset(92); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableOneShot { get { int o = __p.__offset(94); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int OneShotDuration { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitStartFrame { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float EmitTimingRate { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitProcMode EmitProcMode { get { int o = __p.__offset(102); return o != 0 ? (gfl.gnpt.fb.EmitProcMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.EmitProcMode.Time; } }
  public float EmitTimeEmissionRate { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EmitTimeEmissionRateRandom { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? EmitTimeEmissionRateAnimation { get { int o = __p.__offset(108); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int EmitTimeDistUnit { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmitTimeDistUnitRandom { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float EmitDistDistUnit { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EmitDistParticleMax { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float EmitDistMaxDistPerFrame { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitDistMinDistPerFrame { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitDistMargin { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OmnidirectionalVelocity { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? OmnidirectionalVelocityAnimation { get { int o = __p.__offset(126); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float OrientedVelocity { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? OrientedVelocityAnimation { get { int o = __p.__offset(130); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableOrientedVelocityOnWorldCoordinate { get { int o = __p.__offset(132); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector3f? OrientedDirection { get { int o = __p.__offset(134); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float OrientedDirectionalDiffusionAngle { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float YaxisDiffusionVelocity { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? DiffusionVelocity { get { int o = __p.__offset(140); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float VelocityRandom { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AirRegist { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float GravityVolume { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? GravityVolumeAnimation { get { int o = __p.__offset(148); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableWorldCoordinate { get { int o = __p.__offset(150); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Vector3f? GravityDir { get { int o = __p.__offset(152); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float VelocityInheritRate { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MomentumRandom { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableInfinityLife { get { int o = __p.__offset(158); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Life { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float LifeRandom { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? LifeAnimation { get { int o = __p.__offset(164); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ShapeKind ShapeType { get { int o = __p.__offset(166); return o != 0 ? (gfl.gnpt.fb.ShapeKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ShapeKind.Quad; } }
  public bool EnableTrimming { get { int o = __p.__offset(168); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ConnectPtclScaleToZOffset { get { int o = __p.__offset(170); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.ParticleBehaviorKind ParticleType { get { int o = __p.__offset(172); return o != 0 ? (gfl.gnpt.fb.ParticleBehaviorKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ParticleBehaviorKind.BillboardParallel; } }
  public gfl.gnpt.fb.Vector2f? ParticleOffset { get { int o = __p.__offset(174); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.ParticleOffsetKind CameraOffsetProcessType { get { int o = __p.__offset(176); return o != 0 ? (gfl.gnpt.fb.ParticleOffsetKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ParticleOffsetKind.None; } }
  public float CameraOffsetValue { get { int o = __p.__offset(178); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.AssetPath? PrimitiveFilePath { get { int o = __p.__offset(180); return o != 0 ? (gfl.gnpt.fb.AssetPath?)(new gfl.gnpt.fb.AssetPath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableAvoidZFighting { get { int o = __p.__offset(182); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Fluctutaion? Fluctutation { get { int o = __p.__offset(184); return o != 0 ? (gfl.gnpt.fb.Fluctutaion?)(new gfl.gnpt.fb.Fluctutaion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.CombinerOperation ColorTexture0BlendType { get { int o = __p.__offset(186); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel ColorTexture0Channel { get { int o = __p.__offset(188); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation ColorTexture1BlendType { get { int o = __p.__offset(190); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel ColorTexture1Channel { get { int o = __p.__offset(192); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation ColorTexture2BlendType { get { int o = __p.__offset(194); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel ColorTexture2Channel { get { int o = __p.__offset(196); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerColorExpression ColorTextureExpression { get { int o = __p.__offset(198); return o != 0 ? (gfl.gnpt.fb.CombinerColorExpression)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerColorExpression.C0; } }
  public gfl.gnpt.fb.CombinerOperation ColorPrimitiveExpression { get { int o = __p.__offset(200); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel ColorPrimitiveChannel { get { int o = __p.__offset(202); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation AlphaTexture0BlendType { get { int o = __p.__offset(204); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel AlphaTexture0Channel { get { int o = __p.__offset(206); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation AlphaTexture1BlendType { get { int o = __p.__offset(208); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel AlphaTexture1Channel { get { int o = __p.__offset(210); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation AlphaTexture2BlendType { get { int o = __p.__offset(212); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel AlphaTexture2Channel { get { int o = __p.__offset(214); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerOperation AlphaPrimitiveExpression { get { int o = __p.__offset(216); return o != 0 ? (gfl.gnpt.fb.CombinerOperation)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerOperation.Multiply; } }
  public gfl.gnpt.fb.CombinerChannel AlphaPrimitiveChannel { get { int o = __p.__offset(218); return o != 0 ? (gfl.gnpt.fb.CombinerChannel)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerChannel.C1; } }
  public gfl.gnpt.fb.CombinerAlphaExpression AlphaExpression { get { int o = __p.__offset(220); return o != 0 ? (gfl.gnpt.fb.CombinerAlphaExpression)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CombinerAlphaExpression.R_Mul_A0; } }
  public gfl.gnpt.fb.ShaderKind ShaderType { get { int o = __p.__offset(222); return o != 0 ? (gfl.gnpt.fb.ShaderKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ShaderKind.Basic; } }
  public gfl.gnpt.fb.Vector2f? Coefficient { get { int o = __p.__offset(224); return o != 0 ? (gfl.gnpt.fb.Vector2f?)(new gfl.gnpt.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation2f? CoefficientAnimationTable { get { int o = __p.__offset(226); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation2f?)(new gfl.gnpt.fb.KeyframeAnimation2f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool ParticleApplyAlphaValue { get { int o = __p.__offset(228); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsDistortionByCameraDistance { get { int o = __p.__offset(230); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CombinerEditorProjectPath { get { int o = __p.__offset(232); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCombinerEditorProjectPathBytes() { return __p.__vector_as_span<byte>(232, 1); }
#else
  public ArraySegment<byte>? GetCombinerEditorProjectPathBytes() { return __p.__vector_as_arraysegment(232); }
#endif
  public byte[] GetCombinerEditorProjectPathArray() { return __p.__vector_as_array<byte>(232); }
  public gfl.gnpt.fb.KeyframeAnimation4f? CombinerEditorAnimation { get { int o = __p.__offset(234); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation4f?)(new gfl.gnpt.fb.KeyframeAnimation4f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? CombinerEditorAnimationLoopSetting { get { int o = __p.__offset(236); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Texture? Texture0 { get { int o = __p.__offset(238); return o != 0 ? (gfl.gnpt.fb.Texture?)(new gfl.gnpt.fb.Texture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Texture? Texture1 { get { int o = __p.__offset(240); return o != 0 ? (gfl.gnpt.fb.Texture?)(new gfl.gnpt.fb.Texture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Texture? Texture2 { get { int o = __p.__offset(242); return o != 0 ? (gfl.gnpt.fb.Texture?)(new gfl.gnpt.fb.Texture()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool FixedUvAnim { get { int o = __p.__offset(244); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ColorScale { get { int o = __p.__offset(246); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.ColorBehaviorType Color0BehaviorType { get { int o = __p.__offset(248); return o != 0 ? (gfl.gnpt.fb.ColorBehaviorType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ColorBehaviorType.Fixed; } }
  public gfl.gnpt.fb.ColorBehaviorType Color1BehaviorType { get { int o = __p.__offset(250); return o != 0 ? (gfl.gnpt.fb.ColorBehaviorType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.ColorBehaviorType.Fixed; } }
  public gfl.gnpt.fb.AlphaBehaviorType Alpha0BehaviorType { get { int o = __p.__offset(252); return o != 0 ? (gfl.gnpt.fb.AlphaBehaviorType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.AlphaBehaviorType.Fixed; } }
  public gfl.gnpt.fb.AlphaBehaviorType Alpha1BehaviorType { get { int o = __p.__offset(254); return o != 0 ? (gfl.gnpt.fb.AlphaBehaviorType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.AlphaBehaviorType.Fixed; } }
  public gfl.gnpt.fb.Vector3f? Color0Value { get { int o = __p.__offset(256); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? Color1Value { get { int o = __p.__offset(258); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Alpha0Value { get { int o = __p.__offset(260); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Alpha1Value { get { int o = __p.__offset(262); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.KeyframeAnimation3f? Color0Animation { get { int o = __p.__offset(264); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation3f?)(new gfl.gnpt.fb.KeyframeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? Color0AnimationLoopSetting { get { int o = __p.__offset(266); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation3f? Color1Animation { get { int o = __p.__offset(268); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation3f?)(new gfl.gnpt.fb.KeyframeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? Color1AnimationLoopSetting { get { int o = __p.__offset(270); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? Alpha0Animation { get { int o = __p.__offset(272); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? Alpha0AnimationLoopSetting { get { int o = __p.__offset(274); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f? Alpha1Animation { get { int o = __p.__offset(276); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f?)(new gfl.gnpt.fb.KeyframeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? Alpha1AnimationLoopSetting { get { int o = __p.__offset(278); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.RandomColorTable? Color0Random { get { int o = __p.__offset(280); return o != 0 ? (gfl.gnpt.fb.RandomColorTable?)(new gfl.gnpt.fb.RandomColorTable()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.RandomColorTable? Color1Random { get { int o = __p.__offset(282); return o != 0 ? (gfl.gnpt.fb.RandomColorTable?)(new gfl.gnpt.fb.RandomColorTable()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.SoftParticleProcessKind SoftParticleProcessType { get { int o = __p.__offset(284); return o != 0 ? (gfl.gnpt.fb.SoftParticleProcessKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.SoftParticleProcessKind.None; } }
  public float AlphaFadeStartAlphaOffset { get { int o = __p.__offset(286); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AlphaSamplingRadius { get { int o = __p.__offset(288); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.AlphaProcessKind FresnelAlphaProcessType { get { int o = __p.__offset(290); return o != 0 ? (gfl.gnpt.fb.AlphaProcessKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.AlphaProcessKind.None; } }
  public float MinimumAlphaAngle { get { int o = __p.__offset(292); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaximumAlphaAngle { get { int o = __p.__offset(294); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableNearAlpha { get { int o = __p.__offset(296); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float NearAlphaZeroDistance { get { int o = __p.__offset(298); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float NearAlphaOneDistance { get { int o = __p.__offset(300); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableFarAlpha { get { int o = __p.__offset(302); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float FarAlphaOneDistance { get { int o = __p.__offset(304); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FarAlphaZeroDistance { get { int o = __p.__offset(306); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableDecal { get { int o = __p.__offset(308); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float DecalAlphaOneDistance { get { int o = __p.__offset(310); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FeedStartDistance { get { int o = __p.__offset(312); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float VolumeValue { get { int o = __p.__offset(314); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.Vector3f? EmitterColor0Value { get { int o = __p.__offset(316); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? EmitterColor1Value { get { int o = __p.__offset(318); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EmitterAlpha0Value { get { int o = __p.__offset(320); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EmitterAlpha1Value { get { int o = __p.__offset(322); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? EmitterColor0Animation { get { int o = __p.__offset(324); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? EmitterColor1Animation { get { int o = __p.__offset(326); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? EmitterAlpha0Animation { get { int o = __p.__offset(328); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation1f? EmitterAlpha1Animation { get { int o = __p.__offset(330); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation1f?)(new gfl.gnpt.fb.EmitterTimeAnimation1f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? ScaleBasicValue { get { int o = __p.__offset(332); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? ScaleBasicRandom { get { int o = __p.__offset(334); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterTimeAnimation3f? ScaleBasicAnimation { get { int o = __p.__offset(336); return o != 0 ? (gfl.gnpt.fb.EmitterTimeAnimation3f?)(new gfl.gnpt.fb.EmitterTimeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool EnableScaleVelAddY { get { int o = __p.__offset(338); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ScaleVelAddY { get { int o = __p.__offset(340); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableScalingByCameraDistNear { get { int o = __p.__offset(342); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableScalingByCameraDistFar { get { int o = __p.__offset(344); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ScaleLimitDistNear { get { int o = __p.__offset(346); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ScaleLimitDistFar { get { int o = __p.__offset(348); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableLinkFovyToScaleValue { get { int o = __p.__offset(350); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.KeyframeAnimation3f? ScaleAnimation { get { int o = __p.__offset(352); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation3f?)(new gfl.gnpt.fb.KeyframeAnimation3f()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.AnimationLoopSetting? ScaleAnimationLoopSetting { get { int o = __p.__offset(354); return o != 0 ? (gfl.gnpt.fb.AnimationLoopSetting?)(new gfl.gnpt.fb.AnimationLoopSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.RotationOrder RotationType { get { int o = __p.__offset(356); return o != 0 ? (gfl.gnpt.fb.RotationOrder)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.RotationOrder.Y_Z_X; } }
  public float RotationAttenuation { get { int o = __p.__offset(358); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EnableRotationAxisX { get { int o = __p.__offset(360); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableRotationAxisY { get { int o = __p.__offset(362); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableRotationAxisZ { get { int o = __p.__offset(364); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.gnpt.fb.Rotation? RotationX { get { int o = __p.__offset(366); return o != 0 ? (gfl.gnpt.fb.Rotation?)(new gfl.gnpt.fb.Rotation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Rotation? RotationY { get { int o = __p.__offset(368); return o != 0 ? (gfl.gnpt.fb.Rotation?)(new gfl.gnpt.fb.Rotation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Rotation? RotationZ { get { int o = __p.__offset(370); return o != 0 ? (gfl.gnpt.fb.Rotation?)(new gfl.gnpt.fb.Rotation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string CustomShaderSelectShaderName { get { int o = __p.__offset(372); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomShaderSelectShaderNameBytes() { return __p.__vector_as_span<byte>(372, 1); }
#else
  public ArraySegment<byte>? GetCustomShaderSelectShaderNameBytes() { return __p.__vector_as_arraysegment(372); }
#endif
  public byte[] GetCustomShaderSelectShaderNameArray() { return __p.__vector_as_array<byte>(372); }
  public gfl.gnpt.fb.CustomShaderParameter? CustomShaderParameters(int j) { int o = __p.__offset(374); return o != 0 ? (gfl.gnpt.fb.CustomShaderParameter?)(new gfl.gnpt.fb.CustomShaderParameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CustomShaderParametersLength { get { int o = __p.__offset(374); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.Emitter? ChildEmitters(int j) { int o = __p.__offset(376); return o != 0 ? (gfl.gnpt.fb.Emitter?)(new gfl.gnpt.fb.Emitter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildEmittersLength { get { int o = __p.__offset(376); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.RandomField? RandomField { get { int o = __p.__offset(378); return o != 0 ? (gfl.gnpt.fb.RandomField?)(new gfl.gnpt.fb.RandomField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.GpuNoiseField? GpuNoiseField { get { int o = __p.__offset(380); return o != 0 ? (gfl.gnpt.fb.GpuNoiseField?)(new gfl.gnpt.fb.GpuNoiseField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.MagneticForceField? MagneticForceField { get { int o = __p.__offset(382); return o != 0 ? (gfl.gnpt.fb.MagneticForceField?)(new gfl.gnpt.fb.MagneticForceField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.SpinField? SpinField { get { int o = __p.__offset(384); return o != 0 ? (gfl.gnpt.fb.SpinField?)(new gfl.gnpt.fb.SpinField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ConvergenceField? ConvergenceField { get { int o = __p.__offset(386); return o != 0 ? (gfl.gnpt.fb.ConvergenceField?)(new gfl.gnpt.fb.ConvergenceField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.OffsetField? OffsetField { get { int o = __p.__offset(388); return o != 0 ? (gfl.gnpt.fb.OffsetField?)(new gfl.gnpt.fb.OffsetField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.SimpleCollisionField? SimpleCollisionField { get { int o = __p.__offset(390); return o != 0 ? (gfl.gnpt.fb.SimpleCollisionField?)(new gfl.gnpt.fb.SimpleCollisionField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.CurlNoiseField? CurlNoiseField { get { int o = __p.__offset(392); return o != 0 ? (gfl.gnpt.fb.CurlNoiseField?)(new gfl.gnpt.fb.CurlNoiseField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.CustomField? CustomField { get { int o = __p.__offset(394); return o != 0 ? (gfl.gnpt.fb.CustomField?)(new gfl.gnpt.fb.CustomField()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterPlugin EmitterPluginType { get { int o = __p.__offset(396); return o != 0 ? (gfl.gnpt.fb.EmitterPlugin)__p.bb.Get(o + __p.bb_pos) : gfl.gnpt.fb.EmitterPlugin.NONE; } }
  public TTable? EmitterPlugin<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(398); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.gnpt.fb.CustomAction? CustomAction { get { int o = __p.__offset(400); return o != 0 ? (gfl.gnpt.fb.CustomAction?)(new gfl.gnpt.fb.CustomAction()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.EmitterExpansionParameters? EmitterExpansionParameters { get { int o = __p.__offset(402); return o != 0 ? (gfl.gnpt.fb.EmitterExpansionParameters?)(new gfl.gnpt.fb.EmitterExpansionParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartEmitter(FlatBufferBuilder builder) { builder.StartTable(200); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFollowMode(FlatBufferBuilder builder, gfl.gnpt.fb.ParticleFollowMode followMode) { builder.AddUint(1, (uint)followMode, 0); }
  public static void AddEnableStopOnEnd(FlatBufferBuilder builder, bool enableStopOnEnd) { builder.AddBool(2, enableStopOnEnd, false); }
  public static void AddEnableAlphaFadeOut(FlatBufferBuilder builder, bool enableAlphaFadeOut) { builder.AddBool(3, enableAlphaFadeOut, false); }
  public static void AddEnableScaleFadeOut(FlatBufferBuilder builder, bool enableScaleFadeOut) { builder.AddBool(4, enableScaleFadeOut, false); }
  public static void AddFadeOutTime(FlatBufferBuilder builder, int fadeOutTime) { builder.AddInt(5, fadeOutTime, 0); }
  public static void AddEnableAlphaFadeIn(FlatBufferBuilder builder, bool enableAlphaFadeIn) { builder.AddBool(6, enableAlphaFadeIn, false); }
  public static void AddEnableScaleFadeIn(FlatBufferBuilder builder, bool enableScaleFadeIn) { builder.AddBool(7, enableScaleFadeIn, false); }
  public static void AddFadeInTime(FlatBufferBuilder builder, int fadeInTime) { builder.AddInt(8, fadeInTime, 0); }
  public static void AddRenderState(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.RenderState> renderStateOffset) { builder.AddOffset(9, renderStateOffset.Value, 0); }
  public static void AddRandom(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Random> randomOffset) { builder.AddOffset(10, randomOffset.Value, 0); }
  public static void AddLod(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Lod> lodOffset) { builder.AddOffset(11, lodOffset.Value, 0); }
  public static void AddInheritance(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Inheritance> inheritanceOffset) { builder.AddOffset(12, inheritanceOffset.Value, 0); }
  public static void AddEmitterType(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterTypeKind emitterType) { builder.AddUint(13, (uint)emitterType, 0); }
  public static void AddEmitterTypeEmitterRadius(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterTypeEmitterRadiusOffset) { builder.AddStruct(14, emitterTypeEmitterRadiusOffset.Value, 0); }
  public static void AddEmitterShapeLongitudeArcLength(FlatBufferBuilder builder, float emitterShapeLongitudeArcLength) { builder.AddFloat(15, emitterShapeLongitudeArcLength, 0.0f); }
  public static void AddEmitterShapeLatitudeArcLength(FlatBufferBuilder builder, float emitterShapeLatitudeArcLength) { builder.AddFloat(16, emitterShapeLatitudeArcLength, 0.0f); }
  public static void AddEmitterShapeStartArc(FlatBufferBuilder builder, float emitterShapeStartArc) { builder.AddFloat(17, emitterShapeStartArc, 0.0f); }
  public static void AddEmitterShapeStartArcRandom(FlatBufferBuilder builder, bool emitterShapeStartArcRandom) { builder.AddBool(18, emitterShapeStartArcRandom, false); }
  public static void AddEmitterShapeRandomPos(FlatBufferBuilder builder, float emitterShapeRandomPos) { builder.AddFloat(19, emitterShapeRandomPos, 0.0f); }
  public static void AddEmitterShapeHollowRatio(FlatBufferBuilder builder, float emitterShapeHollowRatio) { builder.AddFloat(20, emitterShapeHollowRatio, 0.0f); }
  public static void AddEmitterShapeArcType(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterShapeArcTypeKind emitterShapeArcType) { builder.AddUint(21, (uint)emitterShapeArcType, 0); }
  public static void AddEmitterShapeLineCenter(FlatBufferBuilder builder, float emitterShapeLineCenter) { builder.AddFloat(22, emitterShapeLineCenter, 0.0f); }
  public static void AddEmitterShapeLineLength(FlatBufferBuilder builder, float emitterShapeLineLength) { builder.AddFloat(23, emitterShapeLineLength, 0.0f); }
  public static void AddEmitterShapeEmissionType(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterShapeEmissionTypeKind emitterShapeEmissionType) { builder.AddUint(24, (uint)emitterShapeEmissionType, 0); }
  public static void AddEmitterShapeSphereAxis(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterShapeSphereAxisKind emitterShapeSphereAxis) { builder.AddUint(25, (uint)emitterShapeSphereAxis, 0); }
  public static void AddEmitterShapeSphereAndDivisionDivision(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind emitterShapeSphereAndDivisionDivision) { builder.AddUint(26, (uint)emitterShapeSphereAndDivisionDivision, 0); }
  public static void AddEmitterShapeSphereAndDivision64Division(FlatBufferBuilder builder, int emitterShapeSphereAndDivision64Division) { builder.AddInt(27, emitterShapeSphereAndDivision64Division, 0); }
  public static void AddEmitterShapeCircleDivision(FlatBufferBuilder builder, int emitterShapeCircleDivision) { builder.AddInt(28, emitterShapeCircleDivision, 0); }
  public static void AddEmitterShapeCircleDivisionRandom(FlatBufferBuilder builder, int emitterShapeCircleDivisionRandom) { builder.AddInt(29, emitterShapeCircleDivisionRandom, 0); }
  public static void AddEmitterShapeLineDivision(FlatBufferBuilder builder, int emitterShapeLineDivision) { builder.AddInt(30, emitterShapeLineDivision, 0); }
  public static void AddEmitterShapeLineDivisionRandom(FlatBufferBuilder builder, int emitterShapeLineDivisionRandom) { builder.AddInt(31, emitterShapeLineDivisionRandom, 0); }
  public static void AddEmitterShapeScale(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterShapeScaleOffset) { builder.AddStruct(32, emitterShapeScaleOffset.Value, 0); }
  public static void AddEmitterShapePrimitiveFilePath(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AssetPath> emitterShapePrimitiveFilePathOffset) { builder.AddOffset(33, emitterShapePrimitiveFilePathOffset.Value, 0); }
  public static void AddRandomPosition(FlatBufferBuilder builder, float randomPosition) { builder.AddFloat(34, randomPosition, 0.0f); }
  public static void AddShapeScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> shapeScaleAnimationOffset) { builder.AddOffset(35, shapeScaleAnimationOffset.Value, 0); }
  public static void AddEmitterScale(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterScaleOffset) { builder.AddStruct(36, emitterScaleOffset.Value, 0); }
  public static void AddEmitterScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> emitterScaleAnimationOffset) { builder.AddOffset(37, emitterScaleAnimationOffset.Value, 0); }
  public static void AddEmitterRotation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterRotationOffset) { builder.AddStruct(38, emitterRotationOffset.Value, 0); }
  public static void AddEmitterRotationRandom(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterRotationRandomOffset) { builder.AddStruct(39, emitterRotationRandomOffset.Value, 0); }
  public static void AddEmitterRotationAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> emitterRotationAnimationOffset) { builder.AddOffset(40, emitterRotationAnimationOffset.Value, 0); }
  public static void AddEmitterPosition(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterPositionOffset) { builder.AddStruct(41, emitterPositionOffset.Value, 0); }
  public static void AddEmitterPositionRandom(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterPositionRandomOffset) { builder.AddStruct(42, emitterPositionRandomOffset.Value, 0); }
  public static void AddEmitterPositionAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> emitterPositionAnimationOffset) { builder.AddOffset(43, emitterPositionAnimationOffset.Value, 0); }
  public static void AddEnableUpdateRandom(FlatBufferBuilder builder, bool enableUpdateRandom) { builder.AddBool(44, enableUpdateRandom, false); }
  public static void AddEnableOneShot(FlatBufferBuilder builder, bool enableOneShot) { builder.AddBool(45, enableOneShot, false); }
  public static void AddOneShotDuration(FlatBufferBuilder builder, int oneShotDuration) { builder.AddInt(46, oneShotDuration, 0); }
  public static void AddEmitStartFrame(FlatBufferBuilder builder, int emitStartFrame) { builder.AddInt(47, emitStartFrame, 0); }
  public static void AddEmitTimingRate(FlatBufferBuilder builder, float emitTimingRate) { builder.AddFloat(48, emitTimingRate, 0.0f); }
  public static void AddEmitProcMode(FlatBufferBuilder builder, gfl.gnpt.fb.EmitProcMode emitProcMode) { builder.AddUint(49, (uint)emitProcMode, 0); }
  public static void AddEmitTimeEmissionRate(FlatBufferBuilder builder, float emitTimeEmissionRate) { builder.AddFloat(50, emitTimeEmissionRate, 0.0f); }
  public static void AddEmitTimeEmissionRateRandom(FlatBufferBuilder builder, int emitTimeEmissionRateRandom) { builder.AddInt(51, emitTimeEmissionRateRandom, 0); }
  public static void AddEmitTimeEmissionRateAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> emitTimeEmissionRateAnimationOffset) { builder.AddOffset(52, emitTimeEmissionRateAnimationOffset.Value, 0); }
  public static void AddEmitTimeDistUnit(FlatBufferBuilder builder, int emitTimeDistUnit) { builder.AddInt(53, emitTimeDistUnit, 0); }
  public static void AddEmitTimeDistUnitRandom(FlatBufferBuilder builder, int emitTimeDistUnitRandom) { builder.AddInt(54, emitTimeDistUnitRandom, 0); }
  public static void AddEmitDistDistUnit(FlatBufferBuilder builder, float emitDistDistUnit) { builder.AddFloat(55, emitDistDistUnit, 0.0f); }
  public static void AddEmitDistParticleMax(FlatBufferBuilder builder, int emitDistParticleMax) { builder.AddInt(56, emitDistParticleMax, 0); }
  public static void AddEmitDistMaxDistPerFrame(FlatBufferBuilder builder, float emitDistMaxDistPerFrame) { builder.AddFloat(57, emitDistMaxDistPerFrame, 0.0f); }
  public static void AddEmitDistMinDistPerFrame(FlatBufferBuilder builder, float emitDistMinDistPerFrame) { builder.AddFloat(58, emitDistMinDistPerFrame, 0.0f); }
  public static void AddEmitDistMargin(FlatBufferBuilder builder, float emitDistMargin) { builder.AddFloat(59, emitDistMargin, 0.0f); }
  public static void AddOmnidirectionalVelocity(FlatBufferBuilder builder, float omnidirectionalVelocity) { builder.AddFloat(60, omnidirectionalVelocity, 0.0f); }
  public static void AddOmnidirectionalVelocityAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> omnidirectionalVelocityAnimationOffset) { builder.AddOffset(61, omnidirectionalVelocityAnimationOffset.Value, 0); }
  public static void AddOrientedVelocity(FlatBufferBuilder builder, float orientedVelocity) { builder.AddFloat(62, orientedVelocity, 0.0f); }
  public static void AddOrientedVelocityAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> orientedVelocityAnimationOffset) { builder.AddOffset(63, orientedVelocityAnimationOffset.Value, 0); }
  public static void AddEnableOrientedVelocityOnWorldCoordinate(FlatBufferBuilder builder, bool enableOrientedVelocityOnWorldCoordinate) { builder.AddBool(64, enableOrientedVelocityOnWorldCoordinate, false); }
  public static void AddOrientedDirection(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> orientedDirectionOffset) { builder.AddStruct(65, orientedDirectionOffset.Value, 0); }
  public static void AddOrientedDirectionalDiffusionAngle(FlatBufferBuilder builder, float orientedDirectionalDiffusionAngle) { builder.AddFloat(66, orientedDirectionalDiffusionAngle, 0.0f); }
  public static void AddYaxisDiffusionVelocity(FlatBufferBuilder builder, float yaxisDiffusionVelocity) { builder.AddFloat(67, yaxisDiffusionVelocity, 0.0f); }
  public static void AddDiffusionVelocity(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> diffusionVelocityOffset) { builder.AddStruct(68, diffusionVelocityOffset.Value, 0); }
  public static void AddVelocityRandom(FlatBufferBuilder builder, float velocityRandom) { builder.AddFloat(69, velocityRandom, 0.0f); }
  public static void AddAirRegist(FlatBufferBuilder builder, float airRegist) { builder.AddFloat(70, airRegist, 0.0f); }
  public static void AddGravityVolume(FlatBufferBuilder builder, float gravityVolume) { builder.AddFloat(71, gravityVolume, 0.0f); }
  public static void AddGravityVolumeAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> gravityVolumeAnimationOffset) { builder.AddOffset(72, gravityVolumeAnimationOffset.Value, 0); }
  public static void AddEnableWorldCoordinate(FlatBufferBuilder builder, bool enableWorldCoordinate) { builder.AddBool(73, enableWorldCoordinate, false); }
  public static void AddGravityDir(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> gravityDirOffset) { builder.AddStruct(74, gravityDirOffset.Value, 0); }
  public static void AddVelocityInheritRate(FlatBufferBuilder builder, float velocityInheritRate) { builder.AddFloat(75, velocityInheritRate, 0.0f); }
  public static void AddMomentumRandom(FlatBufferBuilder builder, float momentumRandom) { builder.AddFloat(76, momentumRandom, 0.0f); }
  public static void AddEnableInfinityLife(FlatBufferBuilder builder, bool enableInfinityLife) { builder.AddBool(77, enableInfinityLife, false); }
  public static void AddLife(FlatBufferBuilder builder, float life) { builder.AddFloat(78, life, 0.0f); }
  public static void AddLifeRandom(FlatBufferBuilder builder, float lifeRandom) { builder.AddFloat(79, lifeRandom, 0.0f); }
  public static void AddLifeAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> lifeAnimationOffset) { builder.AddOffset(80, lifeAnimationOffset.Value, 0); }
  public static void AddShapeType(FlatBufferBuilder builder, gfl.gnpt.fb.ShapeKind shapeType) { builder.AddUint(81, (uint)shapeType, 0); }
  public static void AddEnableTrimming(FlatBufferBuilder builder, bool enableTrimming) { builder.AddBool(82, enableTrimming, false); }
  public static void AddConnectPtclScaleToZOffset(FlatBufferBuilder builder, bool connectPtclScaleToZOffset) { builder.AddBool(83, connectPtclScaleToZOffset, false); }
  public static void AddParticleType(FlatBufferBuilder builder, gfl.gnpt.fb.ParticleBehaviorKind particleType) { builder.AddUint(84, (uint)particleType, 0); }
  public static void AddParticleOffset(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> particleOffsetOffset) { builder.AddStruct(85, particleOffsetOffset.Value, 0); }
  public static void AddCameraOffsetProcessType(FlatBufferBuilder builder, gfl.gnpt.fb.ParticleOffsetKind cameraOffsetProcessType) { builder.AddUint(86, (uint)cameraOffsetProcessType, 0); }
  public static void AddCameraOffsetValue(FlatBufferBuilder builder, float cameraOffsetValue) { builder.AddFloat(87, cameraOffsetValue, 0.0f); }
  public static void AddPrimitiveFilePath(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AssetPath> primitiveFilePathOffset) { builder.AddOffset(88, primitiveFilePathOffset.Value, 0); }
  public static void AddEnableAvoidZFighting(FlatBufferBuilder builder, bool enableAvoidZFighting) { builder.AddBool(89, enableAvoidZFighting, false); }
  public static void AddFluctutation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Fluctutaion> fluctutationOffset) { builder.AddOffset(90, fluctutationOffset.Value, 0); }
  public static void AddColorTexture0BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation colorTexture0BlendType) { builder.AddUint(91, (uint)colorTexture0BlendType, 0); }
  public static void AddColorTexture0Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel colorTexture0Channel) { builder.AddUint(92, (uint)colorTexture0Channel, 0); }
  public static void AddColorTexture1BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation colorTexture1BlendType) { builder.AddUint(93, (uint)colorTexture1BlendType, 0); }
  public static void AddColorTexture1Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel colorTexture1Channel) { builder.AddUint(94, (uint)colorTexture1Channel, 0); }
  public static void AddColorTexture2BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation colorTexture2BlendType) { builder.AddUint(95, (uint)colorTexture2BlendType, 0); }
  public static void AddColorTexture2Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel colorTexture2Channel) { builder.AddUint(96, (uint)colorTexture2Channel, 0); }
  public static void AddColorTextureExpression(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerColorExpression colorTextureExpression) { builder.AddUint(97, (uint)colorTextureExpression, 0); }
  public static void AddColorPrimitiveExpression(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation colorPrimitiveExpression) { builder.AddUint(98, (uint)colorPrimitiveExpression, 0); }
  public static void AddColorPrimitiveChannel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel colorPrimitiveChannel) { builder.AddUint(99, (uint)colorPrimitiveChannel, 0); }
  public static void AddAlphaTexture0BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation alphaTexture0BlendType) { builder.AddUint(100, (uint)alphaTexture0BlendType, 0); }
  public static void AddAlphaTexture0Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel alphaTexture0Channel) { builder.AddUint(101, (uint)alphaTexture0Channel, 0); }
  public static void AddAlphaTexture1BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation alphaTexture1BlendType) { builder.AddUint(102, (uint)alphaTexture1BlendType, 0); }
  public static void AddAlphaTexture1Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel alphaTexture1Channel) { builder.AddUint(103, (uint)alphaTexture1Channel, 0); }
  public static void AddAlphaTexture2BlendType(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation alphaTexture2BlendType) { builder.AddUint(104, (uint)alphaTexture2BlendType, 0); }
  public static void AddAlphaTexture2Channel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel alphaTexture2Channel) { builder.AddUint(105, (uint)alphaTexture2Channel, 0); }
  public static void AddAlphaPrimitiveExpression(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerOperation alphaPrimitiveExpression) { builder.AddUint(106, (uint)alphaPrimitiveExpression, 0); }
  public static void AddAlphaPrimitiveChannel(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerChannel alphaPrimitiveChannel) { builder.AddUint(107, (uint)alphaPrimitiveChannel, 0); }
  public static void AddAlphaExpression(FlatBufferBuilder builder, gfl.gnpt.fb.CombinerAlphaExpression alphaExpression) { builder.AddUint(108, (uint)alphaExpression, 0); }
  public static void AddShaderType(FlatBufferBuilder builder, gfl.gnpt.fb.ShaderKind shaderType) { builder.AddUint(109, (uint)shaderType, 0); }
  public static void AddCoefficient(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector2f> coefficientOffset) { builder.AddStruct(110, coefficientOffset.Value, 0); }
  public static void AddCoefficientAnimationTable(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation2f> coefficientAnimationTableOffset) { builder.AddOffset(111, coefficientAnimationTableOffset.Value, 0); }
  public static void AddParticleApplyAlphaValue(FlatBufferBuilder builder, bool particleApplyAlphaValue) { builder.AddBool(112, particleApplyAlphaValue, false); }
  public static void AddIsDistortionByCameraDistance(FlatBufferBuilder builder, bool isDistortionByCameraDistance) { builder.AddBool(113, isDistortionByCameraDistance, false); }
  public static void AddCombinerEditorProjectPath(FlatBufferBuilder builder, StringOffset combinerEditorProjectPathOffset) { builder.AddOffset(114, combinerEditorProjectPathOffset.Value, 0); }
  public static void AddCombinerEditorAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation4f> combinerEditorAnimationOffset) { builder.AddOffset(115, combinerEditorAnimationOffset.Value, 0); }
  public static void AddCombinerEditorAnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> combinerEditorAnimationLoopSettingOffset) { builder.AddOffset(116, combinerEditorAnimationLoopSettingOffset.Value, 0); }
  public static void AddTexture0(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Texture> texture0Offset) { builder.AddOffset(117, texture0Offset.Value, 0); }
  public static void AddTexture1(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Texture> texture1Offset) { builder.AddOffset(118, texture1Offset.Value, 0); }
  public static void AddTexture2(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Texture> texture2Offset) { builder.AddOffset(119, texture2Offset.Value, 0); }
  public static void AddFixedUvAnim(FlatBufferBuilder builder, bool fixedUvAnim) { builder.AddBool(120, fixedUvAnim, false); }
  public static void AddColorScale(FlatBufferBuilder builder, float colorScale) { builder.AddFloat(121, colorScale, 0.0f); }
  public static void AddColor0BehaviorType(FlatBufferBuilder builder, gfl.gnpt.fb.ColorBehaviorType color0BehaviorType) { builder.AddUint(122, (uint)color0BehaviorType, 0); }
  public static void AddColor1BehaviorType(FlatBufferBuilder builder, gfl.gnpt.fb.ColorBehaviorType color1BehaviorType) { builder.AddUint(123, (uint)color1BehaviorType, 0); }
  public static void AddAlpha0BehaviorType(FlatBufferBuilder builder, gfl.gnpt.fb.AlphaBehaviorType alpha0BehaviorType) { builder.AddUint(124, (uint)alpha0BehaviorType, 0); }
  public static void AddAlpha1BehaviorType(FlatBufferBuilder builder, gfl.gnpt.fb.AlphaBehaviorType alpha1BehaviorType) { builder.AddUint(125, (uint)alpha1BehaviorType, 0); }
  public static void AddColor0Value(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> color0ValueOffset) { builder.AddStruct(126, color0ValueOffset.Value, 0); }
  public static void AddColor1Value(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> color1ValueOffset) { builder.AddStruct(127, color1ValueOffset.Value, 0); }
  public static void AddAlpha0Value(FlatBufferBuilder builder, float alpha0Value) { builder.AddFloat(128, alpha0Value, 0.0f); }
  public static void AddAlpha1Value(FlatBufferBuilder builder, float alpha1Value) { builder.AddFloat(129, alpha1Value, 0.0f); }
  public static void AddColor0Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation3f> color0AnimationOffset) { builder.AddOffset(130, color0AnimationOffset.Value, 0); }
  public static void AddColor0AnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> color0AnimationLoopSettingOffset) { builder.AddOffset(131, color0AnimationLoopSettingOffset.Value, 0); }
  public static void AddColor1Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation3f> color1AnimationOffset) { builder.AddOffset(132, color1AnimationOffset.Value, 0); }
  public static void AddColor1AnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> color1AnimationLoopSettingOffset) { builder.AddOffset(133, color1AnimationLoopSettingOffset.Value, 0); }
  public static void AddAlpha0Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> alpha0AnimationOffset) { builder.AddOffset(134, alpha0AnimationOffset.Value, 0); }
  public static void AddAlpha0AnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> alpha0AnimationLoopSettingOffset) { builder.AddOffset(135, alpha0AnimationLoopSettingOffset.Value, 0); }
  public static void AddAlpha1Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f> alpha1AnimationOffset) { builder.AddOffset(136, alpha1AnimationOffset.Value, 0); }
  public static void AddAlpha1AnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> alpha1AnimationLoopSettingOffset) { builder.AddOffset(137, alpha1AnimationLoopSettingOffset.Value, 0); }
  public static void AddColor0Random(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.RandomColorTable> color0RandomOffset) { builder.AddOffset(138, color0RandomOffset.Value, 0); }
  public static void AddColor1Random(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.RandomColorTable> color1RandomOffset) { builder.AddOffset(139, color1RandomOffset.Value, 0); }
  public static void AddSoftParticleProcessType(FlatBufferBuilder builder, gfl.gnpt.fb.SoftParticleProcessKind softParticleProcessType) { builder.AddUint(140, (uint)softParticleProcessType, 0); }
  public static void AddAlphaFadeStartAlphaOffset(FlatBufferBuilder builder, float alphaFadeStartAlphaOffset) { builder.AddFloat(141, alphaFadeStartAlphaOffset, 0.0f); }
  public static void AddAlphaSamplingRadius(FlatBufferBuilder builder, float alphaSamplingRadius) { builder.AddFloat(142, alphaSamplingRadius, 0.0f); }
  public static void AddFresnelAlphaProcessType(FlatBufferBuilder builder, gfl.gnpt.fb.AlphaProcessKind fresnelAlphaProcessType) { builder.AddUint(143, (uint)fresnelAlphaProcessType, 0); }
  public static void AddMinimumAlphaAngle(FlatBufferBuilder builder, float minimumAlphaAngle) { builder.AddFloat(144, minimumAlphaAngle, 0.0f); }
  public static void AddMaximumAlphaAngle(FlatBufferBuilder builder, float maximumAlphaAngle) { builder.AddFloat(145, maximumAlphaAngle, 0.0f); }
  public static void AddEnableNearAlpha(FlatBufferBuilder builder, bool enableNearAlpha) { builder.AddBool(146, enableNearAlpha, false); }
  public static void AddNearAlphaZeroDistance(FlatBufferBuilder builder, float nearAlphaZeroDistance) { builder.AddFloat(147, nearAlphaZeroDistance, 0.0f); }
  public static void AddNearAlphaOneDistance(FlatBufferBuilder builder, float nearAlphaOneDistance) { builder.AddFloat(148, nearAlphaOneDistance, 0.0f); }
  public static void AddEnableFarAlpha(FlatBufferBuilder builder, bool enableFarAlpha) { builder.AddBool(149, enableFarAlpha, false); }
  public static void AddFarAlphaOneDistance(FlatBufferBuilder builder, float farAlphaOneDistance) { builder.AddFloat(150, farAlphaOneDistance, 0.0f); }
  public static void AddFarAlphaZeroDistance(FlatBufferBuilder builder, float farAlphaZeroDistance) { builder.AddFloat(151, farAlphaZeroDistance, 0.0f); }
  public static void AddEnableDecal(FlatBufferBuilder builder, bool enableDecal) { builder.AddBool(152, enableDecal, false); }
  public static void AddDecalAlphaOneDistance(FlatBufferBuilder builder, float decalAlphaOneDistance) { builder.AddFloat(153, decalAlphaOneDistance, 0.0f); }
  public static void AddFeedStartDistance(FlatBufferBuilder builder, float feedStartDistance) { builder.AddFloat(154, feedStartDistance, 0.0f); }
  public static void AddVolumeValue(FlatBufferBuilder builder, float volumeValue) { builder.AddFloat(155, volumeValue, 0.0f); }
  public static void AddEmitterColor0Value(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterColor0ValueOffset) { builder.AddStruct(156, emitterColor0ValueOffset.Value, 0); }
  public static void AddEmitterColor1Value(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> emitterColor1ValueOffset) { builder.AddStruct(157, emitterColor1ValueOffset.Value, 0); }
  public static void AddEmitterAlpha0Value(FlatBufferBuilder builder, float emitterAlpha0Value) { builder.AddFloat(158, emitterAlpha0Value, 0.0f); }
  public static void AddEmitterAlpha1Value(FlatBufferBuilder builder, float emitterAlpha1Value) { builder.AddFloat(159, emitterAlpha1Value, 0.0f); }
  public static void AddEmitterColor0Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> emitterColor0AnimationOffset) { builder.AddOffset(160, emitterColor0AnimationOffset.Value, 0); }
  public static void AddEmitterColor1Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> emitterColor1AnimationOffset) { builder.AddOffset(161, emitterColor1AnimationOffset.Value, 0); }
  public static void AddEmitterAlpha0Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> emitterAlpha0AnimationOffset) { builder.AddOffset(162, emitterAlpha0AnimationOffset.Value, 0); }
  public static void AddEmitterAlpha1Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation1f> emitterAlpha1AnimationOffset) { builder.AddOffset(163, emitterAlpha1AnimationOffset.Value, 0); }
  public static void AddScaleBasicValue(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> scaleBasicValueOffset) { builder.AddStruct(164, scaleBasicValueOffset.Value, 0); }
  public static void AddScaleBasicRandom(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> scaleBasicRandomOffset) { builder.AddStruct(165, scaleBasicRandomOffset.Value, 0); }
  public static void AddScaleBasicAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterTimeAnimation3f> scaleBasicAnimationOffset) { builder.AddOffset(166, scaleBasicAnimationOffset.Value, 0); }
  public static void AddEnableScaleVelAddY(FlatBufferBuilder builder, bool enableScaleVelAddY) { builder.AddBool(167, enableScaleVelAddY, false); }
  public static void AddScaleVelAddY(FlatBufferBuilder builder, float scaleVelAddY) { builder.AddFloat(168, scaleVelAddY, 0.0f); }
  public static void AddEnableScalingByCameraDistNear(FlatBufferBuilder builder, bool enableScalingByCameraDistNear) { builder.AddBool(169, enableScalingByCameraDistNear, false); }
  public static void AddEnableScalingByCameraDistFar(FlatBufferBuilder builder, bool enableScalingByCameraDistFar) { builder.AddBool(170, enableScalingByCameraDistFar, false); }
  public static void AddScaleLimitDistNear(FlatBufferBuilder builder, float scaleLimitDistNear) { builder.AddFloat(171, scaleLimitDistNear, 0.0f); }
  public static void AddScaleLimitDistFar(FlatBufferBuilder builder, float scaleLimitDistFar) { builder.AddFloat(172, scaleLimitDistFar, 0.0f); }
  public static void AddEnableLinkFovyToScaleValue(FlatBufferBuilder builder, bool enableLinkFovyToScaleValue) { builder.AddBool(173, enableLinkFovyToScaleValue, false); }
  public static void AddScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation3f> scaleAnimationOffset) { builder.AddOffset(174, scaleAnimationOffset.Value, 0); }
  public static void AddScaleAnimationLoopSetting(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AnimationLoopSetting> scaleAnimationLoopSettingOffset) { builder.AddOffset(175, scaleAnimationLoopSettingOffset.Value, 0); }
  public static void AddRotationType(FlatBufferBuilder builder, gfl.gnpt.fb.RotationOrder rotationType) { builder.AddUint(176, (uint)rotationType, 0); }
  public static void AddRotationAttenuation(FlatBufferBuilder builder, float rotationAttenuation) { builder.AddFloat(177, rotationAttenuation, 0.0f); }
  public static void AddEnableRotationAxisX(FlatBufferBuilder builder, bool enableRotationAxisX) { builder.AddBool(178, enableRotationAxisX, false); }
  public static void AddEnableRotationAxisY(FlatBufferBuilder builder, bool enableRotationAxisY) { builder.AddBool(179, enableRotationAxisY, false); }
  public static void AddEnableRotationAxisZ(FlatBufferBuilder builder, bool enableRotationAxisZ) { builder.AddBool(180, enableRotationAxisZ, false); }
  public static void AddRotationX(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Rotation> rotationXOffset) { builder.AddOffset(181, rotationXOffset.Value, 0); }
  public static void AddRotationY(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Rotation> rotationYOffset) { builder.AddOffset(182, rotationYOffset.Value, 0); }
  public static void AddRotationZ(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Rotation> rotationZOffset) { builder.AddOffset(183, rotationZOffset.Value, 0); }
  public static void AddCustomShaderSelectShaderName(FlatBufferBuilder builder, StringOffset customShaderSelectShaderNameOffset) { builder.AddOffset(184, customShaderSelectShaderNameOffset.Value, 0); }
  public static void AddCustomShaderParameters(FlatBufferBuilder builder, VectorOffset customShaderParametersOffset) { builder.AddOffset(185, customShaderParametersOffset.Value, 0); }
  public static VectorOffset CreateCustomShaderParametersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderParameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCustomShaderParametersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderParameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomShaderParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChildEmitters(FlatBufferBuilder builder, VectorOffset childEmittersOffset) { builder.AddOffset(186, childEmittersOffset.Value, 0); }
  public static VectorOffset CreateChildEmittersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Emitter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildEmittersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Emitter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildEmittersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRandomField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.RandomField> randomFieldOffset) { builder.AddOffset(187, randomFieldOffset.Value, 0); }
  public static void AddGpuNoiseField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.GpuNoiseField> gpuNoiseFieldOffset) { builder.AddOffset(188, gpuNoiseFieldOffset.Value, 0); }
  public static void AddMagneticForceField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.MagneticForceField> magneticForceFieldOffset) { builder.AddOffset(189, magneticForceFieldOffset.Value, 0); }
  public static void AddSpinField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.SpinField> spinFieldOffset) { builder.AddOffset(190, spinFieldOffset.Value, 0); }
  public static void AddConvergenceField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ConvergenceField> convergenceFieldOffset) { builder.AddOffset(191, convergenceFieldOffset.Value, 0); }
  public static void AddOffsetField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.OffsetField> offsetFieldOffset) { builder.AddOffset(192, offsetFieldOffset.Value, 0); }
  public static void AddSimpleCollisionField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.SimpleCollisionField> simpleCollisionFieldOffset) { builder.AddOffset(193, simpleCollisionFieldOffset.Value, 0); }
  public static void AddCurlNoiseField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CurlNoiseField> curlNoiseFieldOffset) { builder.AddOffset(194, curlNoiseFieldOffset.Value, 0); }
  public static void AddCustomField(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomField> customFieldOffset) { builder.AddOffset(195, customFieldOffset.Value, 0); }
  public static void AddEmitterPluginType(FlatBufferBuilder builder, gfl.gnpt.fb.EmitterPlugin emitterPluginType) { builder.AddByte(196, (byte)emitterPluginType, 0); }
  public static void AddEmitterPlugin(FlatBufferBuilder builder, int emitterPluginOffset) { builder.AddOffset(197, emitterPluginOffset, 0); }
  public static void AddCustomAction(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomAction> customActionOffset) { builder.AddOffset(198, customActionOffset.Value, 0); }
  public static void AddEmitterExpansionParameters(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterExpansionParameters> emitterExpansionParametersOffset) { builder.AddOffset(199, emitterExpansionParametersOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.Emitter> EndEmitter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Emitter>(o);
  }
  public EmitterT UnPack() {
    var _o = new EmitterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmitterT _o) {
    _o.Name = this.Name;
    _o.FollowMode = this.FollowMode;
    _o.EnableStopOnEnd = this.EnableStopOnEnd;
    _o.EnableAlphaFadeOut = this.EnableAlphaFadeOut;
    _o.EnableScaleFadeOut = this.EnableScaleFadeOut;
    _o.FadeOutTime = this.FadeOutTime;
    _o.EnableAlphaFadeIn = this.EnableAlphaFadeIn;
    _o.EnableScaleFadeIn = this.EnableScaleFadeIn;
    _o.FadeInTime = this.FadeInTime;
    _o.RenderState = this.RenderState.HasValue ? this.RenderState.Value.UnPack() : null;
    _o.Random = this.Random.HasValue ? this.Random.Value.UnPack() : null;
    _o.Lod = this.Lod.HasValue ? this.Lod.Value.UnPack() : null;
    _o.Inheritance = this.Inheritance.HasValue ? this.Inheritance.Value.UnPack() : null;
    _o.EmitterType = this.EmitterType;
    _o.EmitterTypeEmitterRadius = this.EmitterTypeEmitterRadius.HasValue ? this.EmitterTypeEmitterRadius.Value.UnPack() : null;
    _o.EmitterShapeLongitudeArcLength = this.EmitterShapeLongitudeArcLength;
    _o.EmitterShapeLatitudeArcLength = this.EmitterShapeLatitudeArcLength;
    _o.EmitterShapeStartArc = this.EmitterShapeStartArc;
    _o.EmitterShapeStartArcRandom = this.EmitterShapeStartArcRandom;
    _o.EmitterShapeRandomPos = this.EmitterShapeRandomPos;
    _o.EmitterShapeHollowRatio = this.EmitterShapeHollowRatio;
    _o.EmitterShapeArcType = this.EmitterShapeArcType;
    _o.EmitterShapeLineCenter = this.EmitterShapeLineCenter;
    _o.EmitterShapeLineLength = this.EmitterShapeLineLength;
    _o.EmitterShapeEmissionType = this.EmitterShapeEmissionType;
    _o.EmitterShapeSphereAxis = this.EmitterShapeSphereAxis;
    _o.EmitterShapeSphereAndDivisionDivision = this.EmitterShapeSphereAndDivisionDivision;
    _o.EmitterShapeSphereAndDivision64Division = this.EmitterShapeSphereAndDivision64Division;
    _o.EmitterShapeCircleDivision = this.EmitterShapeCircleDivision;
    _o.EmitterShapeCircleDivisionRandom = this.EmitterShapeCircleDivisionRandom;
    _o.EmitterShapeLineDivision = this.EmitterShapeLineDivision;
    _o.EmitterShapeLineDivisionRandom = this.EmitterShapeLineDivisionRandom;
    _o.EmitterShapeScale = this.EmitterShapeScale.HasValue ? this.EmitterShapeScale.Value.UnPack() : null;
    _o.EmitterShapePrimitiveFilePath = this.EmitterShapePrimitiveFilePath.HasValue ? this.EmitterShapePrimitiveFilePath.Value.UnPack() : null;
    _o.RandomPosition = this.RandomPosition;
    _o.ShapeScaleAnimation = this.ShapeScaleAnimation.HasValue ? this.ShapeScaleAnimation.Value.UnPack() : null;
    _o.EmitterScale = this.EmitterScale.HasValue ? this.EmitterScale.Value.UnPack() : null;
    _o.EmitterScaleAnimation = this.EmitterScaleAnimation.HasValue ? this.EmitterScaleAnimation.Value.UnPack() : null;
    _o.EmitterRotation = this.EmitterRotation.HasValue ? this.EmitterRotation.Value.UnPack() : null;
    _o.EmitterRotationRandom = this.EmitterRotationRandom.HasValue ? this.EmitterRotationRandom.Value.UnPack() : null;
    _o.EmitterRotationAnimation = this.EmitterRotationAnimation.HasValue ? this.EmitterRotationAnimation.Value.UnPack() : null;
    _o.EmitterPosition = this.EmitterPosition.HasValue ? this.EmitterPosition.Value.UnPack() : null;
    _o.EmitterPositionRandom = this.EmitterPositionRandom.HasValue ? this.EmitterPositionRandom.Value.UnPack() : null;
    _o.EmitterPositionAnimation = this.EmitterPositionAnimation.HasValue ? this.EmitterPositionAnimation.Value.UnPack() : null;
    _o.EnableUpdateRandom = this.EnableUpdateRandom;
    _o.EnableOneShot = this.EnableOneShot;
    _o.OneShotDuration = this.OneShotDuration;
    _o.EmitStartFrame = this.EmitStartFrame;
    _o.EmitTimingRate = this.EmitTimingRate;
    _o.EmitProcMode = this.EmitProcMode;
    _o.EmitTimeEmissionRate = this.EmitTimeEmissionRate;
    _o.EmitTimeEmissionRateRandom = this.EmitTimeEmissionRateRandom;
    _o.EmitTimeEmissionRateAnimation = this.EmitTimeEmissionRateAnimation.HasValue ? this.EmitTimeEmissionRateAnimation.Value.UnPack() : null;
    _o.EmitTimeDistUnit = this.EmitTimeDistUnit;
    _o.EmitTimeDistUnitRandom = this.EmitTimeDistUnitRandom;
    _o.EmitDistDistUnit = this.EmitDistDistUnit;
    _o.EmitDistParticleMax = this.EmitDistParticleMax;
    _o.EmitDistMaxDistPerFrame = this.EmitDistMaxDistPerFrame;
    _o.EmitDistMinDistPerFrame = this.EmitDistMinDistPerFrame;
    _o.EmitDistMargin = this.EmitDistMargin;
    _o.OmnidirectionalVelocity = this.OmnidirectionalVelocity;
    _o.OmnidirectionalVelocityAnimation = this.OmnidirectionalVelocityAnimation.HasValue ? this.OmnidirectionalVelocityAnimation.Value.UnPack() : null;
    _o.OrientedVelocity = this.OrientedVelocity;
    _o.OrientedVelocityAnimation = this.OrientedVelocityAnimation.HasValue ? this.OrientedVelocityAnimation.Value.UnPack() : null;
    _o.EnableOrientedVelocityOnWorldCoordinate = this.EnableOrientedVelocityOnWorldCoordinate;
    _o.OrientedDirection = this.OrientedDirection.HasValue ? this.OrientedDirection.Value.UnPack() : null;
    _o.OrientedDirectionalDiffusionAngle = this.OrientedDirectionalDiffusionAngle;
    _o.YaxisDiffusionVelocity = this.YaxisDiffusionVelocity;
    _o.DiffusionVelocity = this.DiffusionVelocity.HasValue ? this.DiffusionVelocity.Value.UnPack() : null;
    _o.VelocityRandom = this.VelocityRandom;
    _o.AirRegist = this.AirRegist;
    _o.GravityVolume = this.GravityVolume;
    _o.GravityVolumeAnimation = this.GravityVolumeAnimation.HasValue ? this.GravityVolumeAnimation.Value.UnPack() : null;
    _o.EnableWorldCoordinate = this.EnableWorldCoordinate;
    _o.GravityDir = this.GravityDir.HasValue ? this.GravityDir.Value.UnPack() : null;
    _o.VelocityInheritRate = this.VelocityInheritRate;
    _o.MomentumRandom = this.MomentumRandom;
    _o.EnableInfinityLife = this.EnableInfinityLife;
    _o.Life = this.Life;
    _o.LifeRandom = this.LifeRandom;
    _o.LifeAnimation = this.LifeAnimation.HasValue ? this.LifeAnimation.Value.UnPack() : null;
    _o.ShapeType = this.ShapeType;
    _o.EnableTrimming = this.EnableTrimming;
    _o.ConnectPtclScaleToZOffset = this.ConnectPtclScaleToZOffset;
    _o.ParticleType = this.ParticleType;
    _o.ParticleOffset = this.ParticleOffset.HasValue ? this.ParticleOffset.Value.UnPack() : null;
    _o.CameraOffsetProcessType = this.CameraOffsetProcessType;
    _o.CameraOffsetValue = this.CameraOffsetValue;
    _o.PrimitiveFilePath = this.PrimitiveFilePath.HasValue ? this.PrimitiveFilePath.Value.UnPack() : null;
    _o.EnableAvoidZFighting = this.EnableAvoidZFighting;
    _o.Fluctutation = this.Fluctutation.HasValue ? this.Fluctutation.Value.UnPack() : null;
    _o.ColorTexture0BlendType = this.ColorTexture0BlendType;
    _o.ColorTexture0Channel = this.ColorTexture0Channel;
    _o.ColorTexture1BlendType = this.ColorTexture1BlendType;
    _o.ColorTexture1Channel = this.ColorTexture1Channel;
    _o.ColorTexture2BlendType = this.ColorTexture2BlendType;
    _o.ColorTexture2Channel = this.ColorTexture2Channel;
    _o.ColorTextureExpression = this.ColorTextureExpression;
    _o.ColorPrimitiveExpression = this.ColorPrimitiveExpression;
    _o.ColorPrimitiveChannel = this.ColorPrimitiveChannel;
    _o.AlphaTexture0BlendType = this.AlphaTexture0BlendType;
    _o.AlphaTexture0Channel = this.AlphaTexture0Channel;
    _o.AlphaTexture1BlendType = this.AlphaTexture1BlendType;
    _o.AlphaTexture1Channel = this.AlphaTexture1Channel;
    _o.AlphaTexture2BlendType = this.AlphaTexture2BlendType;
    _o.AlphaTexture2Channel = this.AlphaTexture2Channel;
    _o.AlphaPrimitiveExpression = this.AlphaPrimitiveExpression;
    _o.AlphaPrimitiveChannel = this.AlphaPrimitiveChannel;
    _o.AlphaExpression = this.AlphaExpression;
    _o.ShaderType = this.ShaderType;
    _o.Coefficient = this.Coefficient.HasValue ? this.Coefficient.Value.UnPack() : null;
    _o.CoefficientAnimationTable = this.CoefficientAnimationTable.HasValue ? this.CoefficientAnimationTable.Value.UnPack() : null;
    _o.ParticleApplyAlphaValue = this.ParticleApplyAlphaValue;
    _o.IsDistortionByCameraDistance = this.IsDistortionByCameraDistance;
    _o.CombinerEditorProjectPath = this.CombinerEditorProjectPath;
    _o.CombinerEditorAnimation = this.CombinerEditorAnimation.HasValue ? this.CombinerEditorAnimation.Value.UnPack() : null;
    _o.CombinerEditorAnimationLoopSetting = this.CombinerEditorAnimationLoopSetting.HasValue ? this.CombinerEditorAnimationLoopSetting.Value.UnPack() : null;
    _o.Texture0 = this.Texture0.HasValue ? this.Texture0.Value.UnPack() : null;
    _o.Texture1 = this.Texture1.HasValue ? this.Texture1.Value.UnPack() : null;
    _o.Texture2 = this.Texture2.HasValue ? this.Texture2.Value.UnPack() : null;
    _o.FixedUvAnim = this.FixedUvAnim;
    _o.ColorScale = this.ColorScale;
    _o.Color0BehaviorType = this.Color0BehaviorType;
    _o.Color1BehaviorType = this.Color1BehaviorType;
    _o.Alpha0BehaviorType = this.Alpha0BehaviorType;
    _o.Alpha1BehaviorType = this.Alpha1BehaviorType;
    _o.Color0Value = this.Color0Value.HasValue ? this.Color0Value.Value.UnPack() : null;
    _o.Color1Value = this.Color1Value.HasValue ? this.Color1Value.Value.UnPack() : null;
    _o.Alpha0Value = this.Alpha0Value;
    _o.Alpha1Value = this.Alpha1Value;
    _o.Color0Animation = this.Color0Animation.HasValue ? this.Color0Animation.Value.UnPack() : null;
    _o.Color0AnimationLoopSetting = this.Color0AnimationLoopSetting.HasValue ? this.Color0AnimationLoopSetting.Value.UnPack() : null;
    _o.Color1Animation = this.Color1Animation.HasValue ? this.Color1Animation.Value.UnPack() : null;
    _o.Color1AnimationLoopSetting = this.Color1AnimationLoopSetting.HasValue ? this.Color1AnimationLoopSetting.Value.UnPack() : null;
    _o.Alpha0Animation = this.Alpha0Animation.HasValue ? this.Alpha0Animation.Value.UnPack() : null;
    _o.Alpha0AnimationLoopSetting = this.Alpha0AnimationLoopSetting.HasValue ? this.Alpha0AnimationLoopSetting.Value.UnPack() : null;
    _o.Alpha1Animation = this.Alpha1Animation.HasValue ? this.Alpha1Animation.Value.UnPack() : null;
    _o.Alpha1AnimationLoopSetting = this.Alpha1AnimationLoopSetting.HasValue ? this.Alpha1AnimationLoopSetting.Value.UnPack() : null;
    _o.Color0Random = this.Color0Random.HasValue ? this.Color0Random.Value.UnPack() : null;
    _o.Color1Random = this.Color1Random.HasValue ? this.Color1Random.Value.UnPack() : null;
    _o.SoftParticleProcessType = this.SoftParticleProcessType;
    _o.AlphaFadeStartAlphaOffset = this.AlphaFadeStartAlphaOffset;
    _o.AlphaSamplingRadius = this.AlphaSamplingRadius;
    _o.FresnelAlphaProcessType = this.FresnelAlphaProcessType;
    _o.MinimumAlphaAngle = this.MinimumAlphaAngle;
    _o.MaximumAlphaAngle = this.MaximumAlphaAngle;
    _o.EnableNearAlpha = this.EnableNearAlpha;
    _o.NearAlphaZeroDistance = this.NearAlphaZeroDistance;
    _o.NearAlphaOneDistance = this.NearAlphaOneDistance;
    _o.EnableFarAlpha = this.EnableFarAlpha;
    _o.FarAlphaOneDistance = this.FarAlphaOneDistance;
    _o.FarAlphaZeroDistance = this.FarAlphaZeroDistance;
    _o.EnableDecal = this.EnableDecal;
    _o.DecalAlphaOneDistance = this.DecalAlphaOneDistance;
    _o.FeedStartDistance = this.FeedStartDistance;
    _o.VolumeValue = this.VolumeValue;
    _o.EmitterColor0Value = this.EmitterColor0Value.HasValue ? this.EmitterColor0Value.Value.UnPack() : null;
    _o.EmitterColor1Value = this.EmitterColor1Value.HasValue ? this.EmitterColor1Value.Value.UnPack() : null;
    _o.EmitterAlpha0Value = this.EmitterAlpha0Value;
    _o.EmitterAlpha1Value = this.EmitterAlpha1Value;
    _o.EmitterColor0Animation = this.EmitterColor0Animation.HasValue ? this.EmitterColor0Animation.Value.UnPack() : null;
    _o.EmitterColor1Animation = this.EmitterColor1Animation.HasValue ? this.EmitterColor1Animation.Value.UnPack() : null;
    _o.EmitterAlpha0Animation = this.EmitterAlpha0Animation.HasValue ? this.EmitterAlpha0Animation.Value.UnPack() : null;
    _o.EmitterAlpha1Animation = this.EmitterAlpha1Animation.HasValue ? this.EmitterAlpha1Animation.Value.UnPack() : null;
    _o.ScaleBasicValue = this.ScaleBasicValue.HasValue ? this.ScaleBasicValue.Value.UnPack() : null;
    _o.ScaleBasicRandom = this.ScaleBasicRandom.HasValue ? this.ScaleBasicRandom.Value.UnPack() : null;
    _o.ScaleBasicAnimation = this.ScaleBasicAnimation.HasValue ? this.ScaleBasicAnimation.Value.UnPack() : null;
    _o.EnableScaleVelAddY = this.EnableScaleVelAddY;
    _o.ScaleVelAddY = this.ScaleVelAddY;
    _o.EnableScalingByCameraDistNear = this.EnableScalingByCameraDistNear;
    _o.EnableScalingByCameraDistFar = this.EnableScalingByCameraDistFar;
    _o.ScaleLimitDistNear = this.ScaleLimitDistNear;
    _o.ScaleLimitDistFar = this.ScaleLimitDistFar;
    _o.EnableLinkFovyToScaleValue = this.EnableLinkFovyToScaleValue;
    _o.ScaleAnimation = this.ScaleAnimation.HasValue ? this.ScaleAnimation.Value.UnPack() : null;
    _o.ScaleAnimationLoopSetting = this.ScaleAnimationLoopSetting.HasValue ? this.ScaleAnimationLoopSetting.Value.UnPack() : null;
    _o.RotationType = this.RotationType;
    _o.RotationAttenuation = this.RotationAttenuation;
    _o.EnableRotationAxisX = this.EnableRotationAxisX;
    _o.EnableRotationAxisY = this.EnableRotationAxisY;
    _o.EnableRotationAxisZ = this.EnableRotationAxisZ;
    _o.RotationX = this.RotationX.HasValue ? this.RotationX.Value.UnPack() : null;
    _o.RotationY = this.RotationY.HasValue ? this.RotationY.Value.UnPack() : null;
    _o.RotationZ = this.RotationZ.HasValue ? this.RotationZ.Value.UnPack() : null;
    _o.CustomShaderSelectShaderName = this.CustomShaderSelectShaderName;
    _o.CustomShaderParameters = new List<gfl.gnpt.fb.CustomShaderParameterT>();
    for (var _j = 0; _j < this.CustomShaderParametersLength; ++_j) {_o.CustomShaderParameters.Add(this.CustomShaderParameters(_j).HasValue ? this.CustomShaderParameters(_j).Value.UnPack() : null);}
    _o.ChildEmitters = new List<gfl.gnpt.fb.EmitterT>();
    for (var _j = 0; _j < this.ChildEmittersLength; ++_j) {_o.ChildEmitters.Add(this.ChildEmitters(_j).HasValue ? this.ChildEmitters(_j).Value.UnPack() : null);}
    _o.RandomField = this.RandomField.HasValue ? this.RandomField.Value.UnPack() : null;
    _o.GpuNoiseField = this.GpuNoiseField.HasValue ? this.GpuNoiseField.Value.UnPack() : null;
    _o.MagneticForceField = this.MagneticForceField.HasValue ? this.MagneticForceField.Value.UnPack() : null;
    _o.SpinField = this.SpinField.HasValue ? this.SpinField.Value.UnPack() : null;
    _o.ConvergenceField = this.ConvergenceField.HasValue ? this.ConvergenceField.Value.UnPack() : null;
    _o.OffsetField = this.OffsetField.HasValue ? this.OffsetField.Value.UnPack() : null;
    _o.SimpleCollisionField = this.SimpleCollisionField.HasValue ? this.SimpleCollisionField.Value.UnPack() : null;
    _o.CurlNoiseField = this.CurlNoiseField.HasValue ? this.CurlNoiseField.Value.UnPack() : null;
    _o.CustomField = this.CustomField.HasValue ? this.CustomField.Value.UnPack() : null;
    _o.EmitterPlugin = new gfl.gnpt.fb.EmitterPluginUnion();
    _o.EmitterPlugin.Type = this.EmitterPluginType;
    switch (this.EmitterPluginType) {
      default: break;
      case gfl.gnpt.fb.EmitterPlugin.ConnectableStripesEmitterPlugin:
        _o.EmitterPlugin.Value = this.EmitterPlugin<gfl.gnpt.fb.ConnectableStripesEmitterPlugin>().HasValue ? this.EmitterPlugin<gfl.gnpt.fb.ConnectableStripesEmitterPlugin>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.EmitterPlugin.HistoricalStripesEmitterPlugin:
        _o.EmitterPlugin.Value = this.EmitterPlugin<gfl.gnpt.fb.HistoricalStripesEmitterPlugin>().HasValue ? this.EmitterPlugin<gfl.gnpt.fb.HistoricalStripesEmitterPlugin>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.EmitterPlugin.HistoricalStripes2EmitterPlugin:
        _o.EmitterPlugin.Value = this.EmitterPlugin<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin>().HasValue ? this.EmitterPlugin<gfl.gnpt.fb.HistoricalStripes2EmitterPlugin>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.EmitterPlugin.IntraRangeLoopEmitterPlugin:
        _o.EmitterPlugin.Value = this.EmitterPlugin<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin>().HasValue ? this.EmitterPlugin<gfl.gnpt.fb.IntraRangeLoopEmitterPlugin>().Value.UnPack() : null;
        break;
    }
    _o.CustomAction = this.CustomAction.HasValue ? this.CustomAction.Value.UnPack() : null;
    _o.EmitterExpansionParameters = this.EmitterExpansionParameters.HasValue ? this.EmitterExpansionParameters.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.Emitter> Pack(FlatBufferBuilder builder, EmitterT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Emitter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _renderState = _o.RenderState == null ? default(Offset<gfl.gnpt.fb.RenderState>) : gfl.gnpt.fb.RenderState.Pack(builder, _o.RenderState);
    var _random = _o.Random == null ? default(Offset<gfl.gnpt.fb.Random>) : gfl.gnpt.fb.Random.Pack(builder, _o.Random);
    var _lod = _o.Lod == null ? default(Offset<gfl.gnpt.fb.Lod>) : gfl.gnpt.fb.Lod.Pack(builder, _o.Lod);
    var _inheritance = _o.Inheritance == null ? default(Offset<gfl.gnpt.fb.Inheritance>) : gfl.gnpt.fb.Inheritance.Pack(builder, _o.Inheritance);
    var _emitterShapePrimitiveFilePath = _o.EmitterShapePrimitiveFilePath == null ? default(Offset<gfl.gnpt.fb.AssetPath>) : gfl.gnpt.fb.AssetPath.Pack(builder, _o.EmitterShapePrimitiveFilePath);
    var _shapeScaleAnimation = _o.ShapeScaleAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.ShapeScaleAnimation);
    var _emitterScaleAnimation = _o.EmitterScaleAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.EmitterScaleAnimation);
    var _emitterRotationAnimation = _o.EmitterRotationAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.EmitterRotationAnimation);
    var _emitterPositionAnimation = _o.EmitterPositionAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.EmitterPositionAnimation);
    var _emitTimeEmissionRateAnimation = _o.EmitTimeEmissionRateAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.EmitTimeEmissionRateAnimation);
    var _omnidirectionalVelocityAnimation = _o.OmnidirectionalVelocityAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.OmnidirectionalVelocityAnimation);
    var _orientedVelocityAnimation = _o.OrientedVelocityAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.OrientedVelocityAnimation);
    var _gravityVolumeAnimation = _o.GravityVolumeAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.GravityVolumeAnimation);
    var _lifeAnimation = _o.LifeAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.LifeAnimation);
    var _primitiveFilePath = _o.PrimitiveFilePath == null ? default(Offset<gfl.gnpt.fb.AssetPath>) : gfl.gnpt.fb.AssetPath.Pack(builder, _o.PrimitiveFilePath);
    var _fluctutation = _o.Fluctutation == null ? default(Offset<gfl.gnpt.fb.Fluctutaion>) : gfl.gnpt.fb.Fluctutaion.Pack(builder, _o.Fluctutation);
    var _coefficientAnimationTable = _o.CoefficientAnimationTable == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation2f>) : gfl.gnpt.fb.KeyframeAnimation2f.Pack(builder, _o.CoefficientAnimationTable);
    var _combinerEditorProjectPath = _o.CombinerEditorProjectPath == null ? default(StringOffset) : builder.CreateString(_o.CombinerEditorProjectPath);
    var _combinerEditorAnimation = _o.CombinerEditorAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation4f>) : gfl.gnpt.fb.KeyframeAnimation4f.Pack(builder, _o.CombinerEditorAnimation);
    var _combinerEditorAnimationLoopSetting = _o.CombinerEditorAnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.CombinerEditorAnimationLoopSetting);
    var _texture0 = _o.Texture0 == null ? default(Offset<gfl.gnpt.fb.Texture>) : gfl.gnpt.fb.Texture.Pack(builder, _o.Texture0);
    var _texture1 = _o.Texture1 == null ? default(Offset<gfl.gnpt.fb.Texture>) : gfl.gnpt.fb.Texture.Pack(builder, _o.Texture1);
    var _texture2 = _o.Texture2 == null ? default(Offset<gfl.gnpt.fb.Texture>) : gfl.gnpt.fb.Texture.Pack(builder, _o.Texture2);
    var _color0Animation = _o.Color0Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>) : gfl.gnpt.fb.KeyframeAnimation3f.Pack(builder, _o.Color0Animation);
    var _color0AnimationLoopSetting = _o.Color0AnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.Color0AnimationLoopSetting);
    var _color1Animation = _o.Color1Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>) : gfl.gnpt.fb.KeyframeAnimation3f.Pack(builder, _o.Color1Animation);
    var _color1AnimationLoopSetting = _o.Color1AnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.Color1AnimationLoopSetting);
    var _alpha0Animation = _o.Alpha0Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.Alpha0Animation);
    var _alpha0AnimationLoopSetting = _o.Alpha0AnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.Alpha0AnimationLoopSetting);
    var _alpha1Animation = _o.Alpha1Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f>) : gfl.gnpt.fb.KeyframeAnimation1f.Pack(builder, _o.Alpha1Animation);
    var _alpha1AnimationLoopSetting = _o.Alpha1AnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.Alpha1AnimationLoopSetting);
    var _color0Random = _o.Color0Random == null ? default(Offset<gfl.gnpt.fb.RandomColorTable>) : gfl.gnpt.fb.RandomColorTable.Pack(builder, _o.Color0Random);
    var _color1Random = _o.Color1Random == null ? default(Offset<gfl.gnpt.fb.RandomColorTable>) : gfl.gnpt.fb.RandomColorTable.Pack(builder, _o.Color1Random);
    var _emitterColor0Animation = _o.EmitterColor0Animation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.EmitterColor0Animation);
    var _emitterColor1Animation = _o.EmitterColor1Animation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.EmitterColor1Animation);
    var _emitterAlpha0Animation = _o.EmitterAlpha0Animation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.EmitterAlpha0Animation);
    var _emitterAlpha1Animation = _o.EmitterAlpha1Animation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation1f>) : gfl.gnpt.fb.EmitterTimeAnimation1f.Pack(builder, _o.EmitterAlpha1Animation);
    var _scaleBasicAnimation = _o.ScaleBasicAnimation == null ? default(Offset<gfl.gnpt.fb.EmitterTimeAnimation3f>) : gfl.gnpt.fb.EmitterTimeAnimation3f.Pack(builder, _o.ScaleBasicAnimation);
    var _scaleAnimation = _o.ScaleAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation3f>) : gfl.gnpt.fb.KeyframeAnimation3f.Pack(builder, _o.ScaleAnimation);
    var _scaleAnimationLoopSetting = _o.ScaleAnimationLoopSetting == null ? default(Offset<gfl.gnpt.fb.AnimationLoopSetting>) : gfl.gnpt.fb.AnimationLoopSetting.Pack(builder, _o.ScaleAnimationLoopSetting);
    var _rotationX = _o.RotationX == null ? default(Offset<gfl.gnpt.fb.Rotation>) : gfl.gnpt.fb.Rotation.Pack(builder, _o.RotationX);
    var _rotationY = _o.RotationY == null ? default(Offset<gfl.gnpt.fb.Rotation>) : gfl.gnpt.fb.Rotation.Pack(builder, _o.RotationY);
    var _rotationZ = _o.RotationZ == null ? default(Offset<gfl.gnpt.fb.Rotation>) : gfl.gnpt.fb.Rotation.Pack(builder, _o.RotationZ);
    var _customShaderSelectShaderName = _o.CustomShaderSelectShaderName == null ? default(StringOffset) : builder.CreateString(_o.CustomShaderSelectShaderName);
    var _customShaderParameters = default(VectorOffset);
    if (_o.CustomShaderParameters != null) {
      var __customShaderParameters = new Offset<gfl.gnpt.fb.CustomShaderParameter>[_o.CustomShaderParameters.Count];
      for (var _j = 0; _j < __customShaderParameters.Length; ++_j) { __customShaderParameters[_j] = gfl.gnpt.fb.CustomShaderParameter.Pack(builder, _o.CustomShaderParameters[_j]); }
      _customShaderParameters = CreateCustomShaderParametersVector(builder, __customShaderParameters);
    }
    var _childEmitters = default(VectorOffset);
    if (_o.ChildEmitters != null) {
      var __childEmitters = new Offset<gfl.gnpt.fb.Emitter>[_o.ChildEmitters.Count];
      for (var _j = 0; _j < __childEmitters.Length; ++_j) { __childEmitters[_j] = gfl.gnpt.fb.Emitter.Pack(builder, _o.ChildEmitters[_j]); }
      _childEmitters = CreateChildEmittersVector(builder, __childEmitters);
    }
    var _randomField = _o.RandomField == null ? default(Offset<gfl.gnpt.fb.RandomField>) : gfl.gnpt.fb.RandomField.Pack(builder, _o.RandomField);
    var _gpuNoiseField = _o.GpuNoiseField == null ? default(Offset<gfl.gnpt.fb.GpuNoiseField>) : gfl.gnpt.fb.GpuNoiseField.Pack(builder, _o.GpuNoiseField);
    var _magneticForceField = _o.MagneticForceField == null ? default(Offset<gfl.gnpt.fb.MagneticForceField>) : gfl.gnpt.fb.MagneticForceField.Pack(builder, _o.MagneticForceField);
    var _spinField = _o.SpinField == null ? default(Offset<gfl.gnpt.fb.SpinField>) : gfl.gnpt.fb.SpinField.Pack(builder, _o.SpinField);
    var _convergenceField = _o.ConvergenceField == null ? default(Offset<gfl.gnpt.fb.ConvergenceField>) : gfl.gnpt.fb.ConvergenceField.Pack(builder, _o.ConvergenceField);
    var _offsetField = _o.OffsetField == null ? default(Offset<gfl.gnpt.fb.OffsetField>) : gfl.gnpt.fb.OffsetField.Pack(builder, _o.OffsetField);
    var _simpleCollisionField = _o.SimpleCollisionField == null ? default(Offset<gfl.gnpt.fb.SimpleCollisionField>) : gfl.gnpt.fb.SimpleCollisionField.Pack(builder, _o.SimpleCollisionField);
    var _curlNoiseField = _o.CurlNoiseField == null ? default(Offset<gfl.gnpt.fb.CurlNoiseField>) : gfl.gnpt.fb.CurlNoiseField.Pack(builder, _o.CurlNoiseField);
    var _customField = _o.CustomField == null ? default(Offset<gfl.gnpt.fb.CustomField>) : gfl.gnpt.fb.CustomField.Pack(builder, _o.CustomField);
    var _emitterPlugin_type = _o.EmitterPlugin == null ? gfl.gnpt.fb.EmitterPlugin.NONE : _o.EmitterPlugin.Type;
    var _emitterPlugin = _o.EmitterPlugin == null ? 0 : gfl.gnpt.fb.EmitterPluginUnion.Pack(builder, _o.EmitterPlugin);
    var _customAction = _o.CustomAction == null ? default(Offset<gfl.gnpt.fb.CustomAction>) : gfl.gnpt.fb.CustomAction.Pack(builder, _o.CustomAction);
    var _emitterExpansionParameters = _o.EmitterExpansionParameters == null ? default(Offset<gfl.gnpt.fb.EmitterExpansionParameters>) : gfl.gnpt.fb.EmitterExpansionParameters.Pack(builder, _o.EmitterExpansionParameters);
    StartEmitter(builder);
    AddName(builder, _name);
    AddFollowMode(builder, _o.FollowMode);
    AddEnableStopOnEnd(builder, _o.EnableStopOnEnd);
    AddEnableAlphaFadeOut(builder, _o.EnableAlphaFadeOut);
    AddEnableScaleFadeOut(builder, _o.EnableScaleFadeOut);
    AddFadeOutTime(builder, _o.FadeOutTime);
    AddEnableAlphaFadeIn(builder, _o.EnableAlphaFadeIn);
    AddEnableScaleFadeIn(builder, _o.EnableScaleFadeIn);
    AddFadeInTime(builder, _o.FadeInTime);
    AddRenderState(builder, _renderState);
    AddRandom(builder, _random);
    AddLod(builder, _lod);
    AddInheritance(builder, _inheritance);
    AddEmitterType(builder, _o.EmitterType);
    AddEmitterTypeEmitterRadius(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterTypeEmitterRadius));
    AddEmitterShapeLongitudeArcLength(builder, _o.EmitterShapeLongitudeArcLength);
    AddEmitterShapeLatitudeArcLength(builder, _o.EmitterShapeLatitudeArcLength);
    AddEmitterShapeStartArc(builder, _o.EmitterShapeStartArc);
    AddEmitterShapeStartArcRandom(builder, _o.EmitterShapeStartArcRandom);
    AddEmitterShapeRandomPos(builder, _o.EmitterShapeRandomPos);
    AddEmitterShapeHollowRatio(builder, _o.EmitterShapeHollowRatio);
    AddEmitterShapeArcType(builder, _o.EmitterShapeArcType);
    AddEmitterShapeLineCenter(builder, _o.EmitterShapeLineCenter);
    AddEmitterShapeLineLength(builder, _o.EmitterShapeLineLength);
    AddEmitterShapeEmissionType(builder, _o.EmitterShapeEmissionType);
    AddEmitterShapeSphereAxis(builder, _o.EmitterShapeSphereAxis);
    AddEmitterShapeSphereAndDivisionDivision(builder, _o.EmitterShapeSphereAndDivisionDivision);
    AddEmitterShapeSphereAndDivision64Division(builder, _o.EmitterShapeSphereAndDivision64Division);
    AddEmitterShapeCircleDivision(builder, _o.EmitterShapeCircleDivision);
    AddEmitterShapeCircleDivisionRandom(builder, _o.EmitterShapeCircleDivisionRandom);
    AddEmitterShapeLineDivision(builder, _o.EmitterShapeLineDivision);
    AddEmitterShapeLineDivisionRandom(builder, _o.EmitterShapeLineDivisionRandom);
    AddEmitterShapeScale(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterShapeScale));
    AddEmitterShapePrimitiveFilePath(builder, _emitterShapePrimitiveFilePath);
    AddRandomPosition(builder, _o.RandomPosition);
    AddShapeScaleAnimation(builder, _shapeScaleAnimation);
    AddEmitterScale(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterScale));
    AddEmitterScaleAnimation(builder, _emitterScaleAnimation);
    AddEmitterRotation(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterRotation));
    AddEmitterRotationRandom(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterRotationRandom));
    AddEmitterRotationAnimation(builder, _emitterRotationAnimation);
    AddEmitterPosition(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterPosition));
    AddEmitterPositionRandom(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterPositionRandom));
    AddEmitterPositionAnimation(builder, _emitterPositionAnimation);
    AddEnableUpdateRandom(builder, _o.EnableUpdateRandom);
    AddEnableOneShot(builder, _o.EnableOneShot);
    AddOneShotDuration(builder, _o.OneShotDuration);
    AddEmitStartFrame(builder, _o.EmitStartFrame);
    AddEmitTimingRate(builder, _o.EmitTimingRate);
    AddEmitProcMode(builder, _o.EmitProcMode);
    AddEmitTimeEmissionRate(builder, _o.EmitTimeEmissionRate);
    AddEmitTimeEmissionRateRandom(builder, _o.EmitTimeEmissionRateRandom);
    AddEmitTimeEmissionRateAnimation(builder, _emitTimeEmissionRateAnimation);
    AddEmitTimeDistUnit(builder, _o.EmitTimeDistUnit);
    AddEmitTimeDistUnitRandom(builder, _o.EmitTimeDistUnitRandom);
    AddEmitDistDistUnit(builder, _o.EmitDistDistUnit);
    AddEmitDistParticleMax(builder, _o.EmitDistParticleMax);
    AddEmitDistMaxDistPerFrame(builder, _o.EmitDistMaxDistPerFrame);
    AddEmitDistMinDistPerFrame(builder, _o.EmitDistMinDistPerFrame);
    AddEmitDistMargin(builder, _o.EmitDistMargin);
    AddOmnidirectionalVelocity(builder, _o.OmnidirectionalVelocity);
    AddOmnidirectionalVelocityAnimation(builder, _omnidirectionalVelocityAnimation);
    AddOrientedVelocity(builder, _o.OrientedVelocity);
    AddOrientedVelocityAnimation(builder, _orientedVelocityAnimation);
    AddEnableOrientedVelocityOnWorldCoordinate(builder, _o.EnableOrientedVelocityOnWorldCoordinate);
    AddOrientedDirection(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.OrientedDirection));
    AddOrientedDirectionalDiffusionAngle(builder, _o.OrientedDirectionalDiffusionAngle);
    AddYaxisDiffusionVelocity(builder, _o.YaxisDiffusionVelocity);
    AddDiffusionVelocity(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.DiffusionVelocity));
    AddVelocityRandom(builder, _o.VelocityRandom);
    AddAirRegist(builder, _o.AirRegist);
    AddGravityVolume(builder, _o.GravityVolume);
    AddGravityVolumeAnimation(builder, _gravityVolumeAnimation);
    AddEnableWorldCoordinate(builder, _o.EnableWorldCoordinate);
    AddGravityDir(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.GravityDir));
    AddVelocityInheritRate(builder, _o.VelocityInheritRate);
    AddMomentumRandom(builder, _o.MomentumRandom);
    AddEnableInfinityLife(builder, _o.EnableInfinityLife);
    AddLife(builder, _o.Life);
    AddLifeRandom(builder, _o.LifeRandom);
    AddLifeAnimation(builder, _lifeAnimation);
    AddShapeType(builder, _o.ShapeType);
    AddEnableTrimming(builder, _o.EnableTrimming);
    AddConnectPtclScaleToZOffset(builder, _o.ConnectPtclScaleToZOffset);
    AddParticleType(builder, _o.ParticleType);
    AddParticleOffset(builder, gfl.gnpt.fb.Vector2f.Pack(builder, _o.ParticleOffset));
    AddCameraOffsetProcessType(builder, _o.CameraOffsetProcessType);
    AddCameraOffsetValue(builder, _o.CameraOffsetValue);
    AddPrimitiveFilePath(builder, _primitiveFilePath);
    AddEnableAvoidZFighting(builder, _o.EnableAvoidZFighting);
    AddFluctutation(builder, _fluctutation);
    AddColorTexture0BlendType(builder, _o.ColorTexture0BlendType);
    AddColorTexture0Channel(builder, _o.ColorTexture0Channel);
    AddColorTexture1BlendType(builder, _o.ColorTexture1BlendType);
    AddColorTexture1Channel(builder, _o.ColorTexture1Channel);
    AddColorTexture2BlendType(builder, _o.ColorTexture2BlendType);
    AddColorTexture2Channel(builder, _o.ColorTexture2Channel);
    AddColorTextureExpression(builder, _o.ColorTextureExpression);
    AddColorPrimitiveExpression(builder, _o.ColorPrimitiveExpression);
    AddColorPrimitiveChannel(builder, _o.ColorPrimitiveChannel);
    AddAlphaTexture0BlendType(builder, _o.AlphaTexture0BlendType);
    AddAlphaTexture0Channel(builder, _o.AlphaTexture0Channel);
    AddAlphaTexture1BlendType(builder, _o.AlphaTexture1BlendType);
    AddAlphaTexture1Channel(builder, _o.AlphaTexture1Channel);
    AddAlphaTexture2BlendType(builder, _o.AlphaTexture2BlendType);
    AddAlphaTexture2Channel(builder, _o.AlphaTexture2Channel);
    AddAlphaPrimitiveExpression(builder, _o.AlphaPrimitiveExpression);
    AddAlphaPrimitiveChannel(builder, _o.AlphaPrimitiveChannel);
    AddAlphaExpression(builder, _o.AlphaExpression);
    AddShaderType(builder, _o.ShaderType);
    AddCoefficient(builder, gfl.gnpt.fb.Vector2f.Pack(builder, _o.Coefficient));
    AddCoefficientAnimationTable(builder, _coefficientAnimationTable);
    AddParticleApplyAlphaValue(builder, _o.ParticleApplyAlphaValue);
    AddIsDistortionByCameraDistance(builder, _o.IsDistortionByCameraDistance);
    AddCombinerEditorProjectPath(builder, _combinerEditorProjectPath);
    AddCombinerEditorAnimation(builder, _combinerEditorAnimation);
    AddCombinerEditorAnimationLoopSetting(builder, _combinerEditorAnimationLoopSetting);
    AddTexture0(builder, _texture0);
    AddTexture1(builder, _texture1);
    AddTexture2(builder, _texture2);
    AddFixedUvAnim(builder, _o.FixedUvAnim);
    AddColorScale(builder, _o.ColorScale);
    AddColor0BehaviorType(builder, _o.Color0BehaviorType);
    AddColor1BehaviorType(builder, _o.Color1BehaviorType);
    AddAlpha0BehaviorType(builder, _o.Alpha0BehaviorType);
    AddAlpha1BehaviorType(builder, _o.Alpha1BehaviorType);
    AddColor0Value(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Color0Value));
    AddColor1Value(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Color1Value));
    AddAlpha0Value(builder, _o.Alpha0Value);
    AddAlpha1Value(builder, _o.Alpha1Value);
    AddColor0Animation(builder, _color0Animation);
    AddColor0AnimationLoopSetting(builder, _color0AnimationLoopSetting);
    AddColor1Animation(builder, _color1Animation);
    AddColor1AnimationLoopSetting(builder, _color1AnimationLoopSetting);
    AddAlpha0Animation(builder, _alpha0Animation);
    AddAlpha0AnimationLoopSetting(builder, _alpha0AnimationLoopSetting);
    AddAlpha1Animation(builder, _alpha1Animation);
    AddAlpha1AnimationLoopSetting(builder, _alpha1AnimationLoopSetting);
    AddColor0Random(builder, _color0Random);
    AddColor1Random(builder, _color1Random);
    AddSoftParticleProcessType(builder, _o.SoftParticleProcessType);
    AddAlphaFadeStartAlphaOffset(builder, _o.AlphaFadeStartAlphaOffset);
    AddAlphaSamplingRadius(builder, _o.AlphaSamplingRadius);
    AddFresnelAlphaProcessType(builder, _o.FresnelAlphaProcessType);
    AddMinimumAlphaAngle(builder, _o.MinimumAlphaAngle);
    AddMaximumAlphaAngle(builder, _o.MaximumAlphaAngle);
    AddEnableNearAlpha(builder, _o.EnableNearAlpha);
    AddNearAlphaZeroDistance(builder, _o.NearAlphaZeroDistance);
    AddNearAlphaOneDistance(builder, _o.NearAlphaOneDistance);
    AddEnableFarAlpha(builder, _o.EnableFarAlpha);
    AddFarAlphaOneDistance(builder, _o.FarAlphaOneDistance);
    AddFarAlphaZeroDistance(builder, _o.FarAlphaZeroDistance);
    AddEnableDecal(builder, _o.EnableDecal);
    AddDecalAlphaOneDistance(builder, _o.DecalAlphaOneDistance);
    AddFeedStartDistance(builder, _o.FeedStartDistance);
    AddVolumeValue(builder, _o.VolumeValue);
    AddEmitterColor0Value(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterColor0Value));
    AddEmitterColor1Value(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.EmitterColor1Value));
    AddEmitterAlpha0Value(builder, _o.EmitterAlpha0Value);
    AddEmitterAlpha1Value(builder, _o.EmitterAlpha1Value);
    AddEmitterColor0Animation(builder, _emitterColor0Animation);
    AddEmitterColor1Animation(builder, _emitterColor1Animation);
    AddEmitterAlpha0Animation(builder, _emitterAlpha0Animation);
    AddEmitterAlpha1Animation(builder, _emitterAlpha1Animation);
    AddScaleBasicValue(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.ScaleBasicValue));
    AddScaleBasicRandom(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.ScaleBasicRandom));
    AddScaleBasicAnimation(builder, _scaleBasicAnimation);
    AddEnableScaleVelAddY(builder, _o.EnableScaleVelAddY);
    AddScaleVelAddY(builder, _o.ScaleVelAddY);
    AddEnableScalingByCameraDistNear(builder, _o.EnableScalingByCameraDistNear);
    AddEnableScalingByCameraDistFar(builder, _o.EnableScalingByCameraDistFar);
    AddScaleLimitDistNear(builder, _o.ScaleLimitDistNear);
    AddScaleLimitDistFar(builder, _o.ScaleLimitDistFar);
    AddEnableLinkFovyToScaleValue(builder, _o.EnableLinkFovyToScaleValue);
    AddScaleAnimation(builder, _scaleAnimation);
    AddScaleAnimationLoopSetting(builder, _scaleAnimationLoopSetting);
    AddRotationType(builder, _o.RotationType);
    AddRotationAttenuation(builder, _o.RotationAttenuation);
    AddEnableRotationAxisX(builder, _o.EnableRotationAxisX);
    AddEnableRotationAxisY(builder, _o.EnableRotationAxisY);
    AddEnableRotationAxisZ(builder, _o.EnableRotationAxisZ);
    AddRotationX(builder, _rotationX);
    AddRotationY(builder, _rotationY);
    AddRotationZ(builder, _rotationZ);
    AddCustomShaderSelectShaderName(builder, _customShaderSelectShaderName);
    AddCustomShaderParameters(builder, _customShaderParameters);
    AddChildEmitters(builder, _childEmitters);
    AddRandomField(builder, _randomField);
    AddGpuNoiseField(builder, _gpuNoiseField);
    AddMagneticForceField(builder, _magneticForceField);
    AddSpinField(builder, _spinField);
    AddConvergenceField(builder, _convergenceField);
    AddOffsetField(builder, _offsetField);
    AddSimpleCollisionField(builder, _simpleCollisionField);
    AddCurlNoiseField(builder, _curlNoiseField);
    AddCustomField(builder, _customField);
    AddEmitterPluginType(builder, _emitterPlugin_type);
    AddEmitterPlugin(builder, _emitterPlugin);
    AddCustomAction(builder, _customAction);
    AddEmitterExpansionParameters(builder, _emitterExpansionParameters);
    return EndEmitter(builder);
  }
};

public class EmitterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("followMode")]
  public gfl.gnpt.fb.ParticleFollowMode FollowMode { get; set; }
  [Newtonsoft.Json.JsonProperty("enableStopOnEnd")]
  public bool EnableStopOnEnd { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlphaFadeOut")]
  public bool EnableAlphaFadeOut { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScaleFadeOut")]
  public bool EnableScaleFadeOut { get; set; }
  [Newtonsoft.Json.JsonProperty("fadeOutTime")]
  public int FadeOutTime { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAlphaFadeIn")]
  public bool EnableAlphaFadeIn { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScaleFadeIn")]
  public bool EnableScaleFadeIn { get; set; }
  [Newtonsoft.Json.JsonProperty("fadeInTime")]
  public int FadeInTime { get; set; }
  [Newtonsoft.Json.JsonProperty("renderState")]
  public gfl.gnpt.fb.RenderStateT RenderState { get; set; }
  [Newtonsoft.Json.JsonProperty("random")]
  public gfl.gnpt.fb.RandomT Random { get; set; }
  [Newtonsoft.Json.JsonProperty("lod")]
  public gfl.gnpt.fb.LodT Lod { get; set; }
  [Newtonsoft.Json.JsonProperty("inheritance")]
  public gfl.gnpt.fb.InheritanceT Inheritance { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterType")]
  public gfl.gnpt.fb.EmitterTypeKind EmitterType { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterTypeEmitterRadius")]
  public gfl.gnpt.fb.Vector3fT EmitterTypeEmitterRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLongitudeArcLength")]
  public float EmitterShapeLongitudeArcLength { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLatitudeArcLength")]
  public float EmitterShapeLatitudeArcLength { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeStartArc")]
  public float EmitterShapeStartArc { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeStartArcRandom")]
  public bool EmitterShapeStartArcRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeRandomPos")]
  public float EmitterShapeRandomPos { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeHollowRatio")]
  public float EmitterShapeHollowRatio { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeArcType")]
  public gfl.gnpt.fb.EmitterShapeArcTypeKind EmitterShapeArcType { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLineCenter")]
  public float EmitterShapeLineCenter { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLineLength")]
  public float EmitterShapeLineLength { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeEmissionType")]
  public gfl.gnpt.fb.EmitterShapeEmissionTypeKind EmitterShapeEmissionType { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeSphereAxis")]
  public gfl.gnpt.fb.EmitterShapeSphereAxisKind EmitterShapeSphereAxis { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeSphereAndDivisionDivision")]
  public gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind EmitterShapeSphereAndDivisionDivision { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeSphereAndDivision64Division")]
  public int EmitterShapeSphereAndDivision64Division { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeCircleDivision")]
  public int EmitterShapeCircleDivision { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeCircleDivisionRandom")]
  public int EmitterShapeCircleDivisionRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLineDivision")]
  public int EmitterShapeLineDivision { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeLineDivisionRandom")]
  public int EmitterShapeLineDivisionRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapeScale")]
  public gfl.gnpt.fb.Vector3fT EmitterShapeScale { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterShapePrimitiveFilePath")]
  public gfl.gnpt.fb.AssetPathT EmitterShapePrimitiveFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("randomPosition")]
  public float RandomPosition { get; set; }
  [Newtonsoft.Json.JsonProperty("shapeScaleAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT ShapeScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterScale")]
  public gfl.gnpt.fb.Vector3fT EmitterScale { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterScaleAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT EmitterScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterRotation")]
  public gfl.gnpt.fb.Vector3fT EmitterRotation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterRotationRandom")]
  public gfl.gnpt.fb.Vector3fT EmitterRotationRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterRotationAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT EmitterRotationAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterPosition")]
  public gfl.gnpt.fb.Vector3fT EmitterPosition { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterPositionRandom")]
  public gfl.gnpt.fb.Vector3fT EmitterPositionRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterPositionAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT EmitterPositionAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableUpdateRandom")]
  public bool EnableUpdateRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("enableOneShot")]
  public bool EnableOneShot { get; set; }
  [Newtonsoft.Json.JsonProperty("oneShotDuration")]
  public int OneShotDuration { get; set; }
  [Newtonsoft.Json.JsonProperty("emitStartFrame")]
  public int EmitStartFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimingRate")]
  public float EmitTimingRate { get; set; }
  [Newtonsoft.Json.JsonProperty("emitProcMode")]
  public gfl.gnpt.fb.EmitProcMode EmitProcMode { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimeEmissionRate")]
  public float EmitTimeEmissionRate { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimeEmissionRateRandom")]
  public int EmitTimeEmissionRateRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimeEmissionRateAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT EmitTimeEmissionRateAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimeDistUnit")]
  public int EmitTimeDistUnit { get; set; }
  [Newtonsoft.Json.JsonProperty("emitTimeDistUnitRandom")]
  public int EmitTimeDistUnitRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("emitDistDistUnit")]
  public float EmitDistDistUnit { get; set; }
  [Newtonsoft.Json.JsonProperty("emitDistParticleMax")]
  public int EmitDistParticleMax { get; set; }
  [Newtonsoft.Json.JsonProperty("emitDistMaxDistPerFrame")]
  public float EmitDistMaxDistPerFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("emitDistMinDistPerFrame")]
  public float EmitDistMinDistPerFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("emitDistMargin")]
  public float EmitDistMargin { get; set; }
  [Newtonsoft.Json.JsonProperty("omnidirectionalVelocity")]
  public float OmnidirectionalVelocity { get; set; }
  [Newtonsoft.Json.JsonProperty("omnidirectionalVelocityAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT OmnidirectionalVelocityAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("orientedVelocity")]
  public float OrientedVelocity { get; set; }
  [Newtonsoft.Json.JsonProperty("orientedVelocityAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT OrientedVelocityAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableOrientedVelocityOnWorldCoordinate")]
  public bool EnableOrientedVelocityOnWorldCoordinate { get; set; }
  [Newtonsoft.Json.JsonProperty("orientedDirection")]
  public gfl.gnpt.fb.Vector3fT OrientedDirection { get; set; }
  [Newtonsoft.Json.JsonProperty("orientedDirectionalDiffusionAngle")]
  public float OrientedDirectionalDiffusionAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("yaxisDiffusionVelocity")]
  public float YaxisDiffusionVelocity { get; set; }
  [Newtonsoft.Json.JsonProperty("diffusionVelocity")]
  public gfl.gnpt.fb.Vector3fT DiffusionVelocity { get; set; }
  [Newtonsoft.Json.JsonProperty("velocityRandom")]
  public float VelocityRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("airRegist")]
  public float AirRegist { get; set; }
  [Newtonsoft.Json.JsonProperty("gravityVolume")]
  public float GravityVolume { get; set; }
  [Newtonsoft.Json.JsonProperty("gravityVolumeAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT GravityVolumeAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableWorldCoordinate")]
  public bool EnableWorldCoordinate { get; set; }
  [Newtonsoft.Json.JsonProperty("gravityDir")]
  public gfl.gnpt.fb.Vector3fT GravityDir { get; set; }
  [Newtonsoft.Json.JsonProperty("velocityInheritRate")]
  public float VelocityInheritRate { get; set; }
  [Newtonsoft.Json.JsonProperty("momentumRandom")]
  public float MomentumRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("enableInfinityLife")]
  public bool EnableInfinityLife { get; set; }
  [Newtonsoft.Json.JsonProperty("life")]
  public float Life { get; set; }
  [Newtonsoft.Json.JsonProperty("lifeRandom")]
  public float LifeRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("lifeAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT LifeAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("shapeType")]
  public gfl.gnpt.fb.ShapeKind ShapeType { get; set; }
  [Newtonsoft.Json.JsonProperty("enableTrimming")]
  public bool EnableTrimming { get; set; }
  [Newtonsoft.Json.JsonProperty("connectPtclScaleToZOffset")]
  public bool ConnectPtclScaleToZOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("particleType")]
  public gfl.gnpt.fb.ParticleBehaviorKind ParticleType { get; set; }
  [Newtonsoft.Json.JsonProperty("particleOffset")]
  public gfl.gnpt.fb.Vector2fT ParticleOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("cameraOffsetProcessType")]
  public gfl.gnpt.fb.ParticleOffsetKind CameraOffsetProcessType { get; set; }
  [Newtonsoft.Json.JsonProperty("cameraOffsetValue")]
  public float CameraOffsetValue { get; set; }
  [Newtonsoft.Json.JsonProperty("primitiveFilePath")]
  public gfl.gnpt.fb.AssetPathT PrimitiveFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("enableAvoidZFighting")]
  public bool EnableAvoidZFighting { get; set; }
  [Newtonsoft.Json.JsonProperty("fluctutation")]
  public gfl.gnpt.fb.FluctutaionT Fluctutation { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture0BlendType")]
  public gfl.gnpt.fb.CombinerOperation ColorTexture0BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture0Channel")]
  public gfl.gnpt.fb.CombinerChannel ColorTexture0Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture1BlendType")]
  public gfl.gnpt.fb.CombinerOperation ColorTexture1BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture1Channel")]
  public gfl.gnpt.fb.CombinerChannel ColorTexture1Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture2BlendType")]
  public gfl.gnpt.fb.CombinerOperation ColorTexture2BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTexture2Channel")]
  public gfl.gnpt.fb.CombinerChannel ColorTexture2Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("colorTextureExpression")]
  public gfl.gnpt.fb.CombinerColorExpression ColorTextureExpression { get; set; }
  [Newtonsoft.Json.JsonProperty("colorPrimitiveExpression")]
  public gfl.gnpt.fb.CombinerOperation ColorPrimitiveExpression { get; set; }
  [Newtonsoft.Json.JsonProperty("colorPrimitiveChannel")]
  public gfl.gnpt.fb.CombinerChannel ColorPrimitiveChannel { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture0BlendType")]
  public gfl.gnpt.fb.CombinerOperation AlphaTexture0BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture0Channel")]
  public gfl.gnpt.fb.CombinerChannel AlphaTexture0Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture1BlendType")]
  public gfl.gnpt.fb.CombinerOperation AlphaTexture1BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture1Channel")]
  public gfl.gnpt.fb.CombinerChannel AlphaTexture1Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture2BlendType")]
  public gfl.gnpt.fb.CombinerOperation AlphaTexture2BlendType { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaTexture2Channel")]
  public gfl.gnpt.fb.CombinerChannel AlphaTexture2Channel { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaPrimitiveExpression")]
  public gfl.gnpt.fb.CombinerOperation AlphaPrimitiveExpression { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaPrimitiveChannel")]
  public gfl.gnpt.fb.CombinerChannel AlphaPrimitiveChannel { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaExpression")]
  public gfl.gnpt.fb.CombinerAlphaExpression AlphaExpression { get; set; }
  [Newtonsoft.Json.JsonProperty("shaderType")]
  public gfl.gnpt.fb.ShaderKind ShaderType { get; set; }
  [Newtonsoft.Json.JsonProperty("coefficient")]
  public gfl.gnpt.fb.Vector2fT Coefficient { get; set; }
  [Newtonsoft.Json.JsonProperty("coefficientAnimationTable")]
  public gfl.gnpt.fb.KeyframeAnimation2fT CoefficientAnimationTable { get; set; }
  [Newtonsoft.Json.JsonProperty("particleApplyAlphaValue")]
  public bool ParticleApplyAlphaValue { get; set; }
  [Newtonsoft.Json.JsonProperty("isDistortionByCameraDistance")]
  public bool IsDistortionByCameraDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("combinerEditorProjectPath")]
  public string CombinerEditorProjectPath { get; set; }
  [Newtonsoft.Json.JsonProperty("combinerEditorAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation4fT CombinerEditorAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("combinerEditorAnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT CombinerEditorAnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("texture0")]
  public gfl.gnpt.fb.TextureT Texture0 { get; set; }
  [Newtonsoft.Json.JsonProperty("texture1")]
  public gfl.gnpt.fb.TextureT Texture1 { get; set; }
  [Newtonsoft.Json.JsonProperty("texture2")]
  public gfl.gnpt.fb.TextureT Texture2 { get; set; }
  [Newtonsoft.Json.JsonProperty("fixedUvAnim")]
  public bool FixedUvAnim { get; set; }
  [Newtonsoft.Json.JsonProperty("colorScale")]
  public float ColorScale { get; set; }
  [Newtonsoft.Json.JsonProperty("color0BehaviorType")]
  public gfl.gnpt.fb.ColorBehaviorType Color0BehaviorType { get; set; }
  [Newtonsoft.Json.JsonProperty("color1BehaviorType")]
  public gfl.gnpt.fb.ColorBehaviorType Color1BehaviorType { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha0BehaviorType")]
  public gfl.gnpt.fb.AlphaBehaviorType Alpha0BehaviorType { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha1BehaviorType")]
  public gfl.gnpt.fb.AlphaBehaviorType Alpha1BehaviorType { get; set; }
  [Newtonsoft.Json.JsonProperty("color0Value")]
  public gfl.gnpt.fb.Vector3fT Color0Value { get; set; }
  [Newtonsoft.Json.JsonProperty("color1Value")]
  public gfl.gnpt.fb.Vector3fT Color1Value { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha0Value")]
  public float Alpha0Value { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha1Value")]
  public float Alpha1Value { get; set; }
  [Newtonsoft.Json.JsonProperty("color0Animation")]
  public gfl.gnpt.fb.KeyframeAnimation3fT Color0Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("color0AnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT Color0AnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("color1Animation")]
  public gfl.gnpt.fb.KeyframeAnimation3fT Color1Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("color1AnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT Color1AnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha0Animation")]
  public gfl.gnpt.fb.KeyframeAnimation1fT Alpha0Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha0AnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT Alpha0AnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha1Animation")]
  public gfl.gnpt.fb.KeyframeAnimation1fT Alpha1Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("alpha1AnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT Alpha1AnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("color0Random")]
  public gfl.gnpt.fb.RandomColorTableT Color0Random { get; set; }
  [Newtonsoft.Json.JsonProperty("color1Random")]
  public gfl.gnpt.fb.RandomColorTableT Color1Random { get; set; }
  [Newtonsoft.Json.JsonProperty("softParticleProcessType")]
  public gfl.gnpt.fb.SoftParticleProcessKind SoftParticleProcessType { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaFadeStartAlphaOffset")]
  public float AlphaFadeStartAlphaOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("alphaSamplingRadius")]
  public float AlphaSamplingRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("fresnelAlphaProcessType")]
  public gfl.gnpt.fb.AlphaProcessKind FresnelAlphaProcessType { get; set; }
  [Newtonsoft.Json.JsonProperty("minimumAlphaAngle")]
  public float MinimumAlphaAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("maximumAlphaAngle")]
  public float MaximumAlphaAngle { get; set; }
  [Newtonsoft.Json.JsonProperty("enableNearAlpha")]
  public bool EnableNearAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("nearAlphaZeroDistance")]
  public float NearAlphaZeroDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("nearAlphaOneDistance")]
  public float NearAlphaOneDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("enableFarAlpha")]
  public bool EnableFarAlpha { get; set; }
  [Newtonsoft.Json.JsonProperty("farAlphaOneDistance")]
  public float FarAlphaOneDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("farAlphaZeroDistance")]
  public float FarAlphaZeroDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("enableDecal")]
  public bool EnableDecal { get; set; }
  [Newtonsoft.Json.JsonProperty("decalAlphaOneDistance")]
  public float DecalAlphaOneDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("feedStartDistance")]
  public float FeedStartDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("volumeValue")]
  public float VolumeValue { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterColor0Value")]
  public gfl.gnpt.fb.Vector3fT EmitterColor0Value { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterColor1Value")]
  public gfl.gnpt.fb.Vector3fT EmitterColor1Value { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterAlpha0Value")]
  public float EmitterAlpha0Value { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterAlpha1Value")]
  public float EmitterAlpha1Value { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterColor0Animation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT EmitterColor0Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterColor1Animation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT EmitterColor1Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterAlpha0Animation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT EmitterAlpha0Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterAlpha1Animation")]
  public gfl.gnpt.fb.EmitterTimeAnimation1fT EmitterAlpha1Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleBasicValue")]
  public gfl.gnpt.fb.Vector3fT ScaleBasicValue { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleBasicRandom")]
  public gfl.gnpt.fb.Vector3fT ScaleBasicRandom { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleBasicAnimation")]
  public gfl.gnpt.fb.EmitterTimeAnimation3fT ScaleBasicAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScaleVelAddY")]
  public bool EnableScaleVelAddY { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleVelAddY")]
  public float ScaleVelAddY { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScalingByCameraDistNear")]
  public bool EnableScalingByCameraDistNear { get; set; }
  [Newtonsoft.Json.JsonProperty("enableScalingByCameraDistFar")]
  public bool EnableScalingByCameraDistFar { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleLimitDistNear")]
  public float ScaleLimitDistNear { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleLimitDistFar")]
  public float ScaleLimitDistFar { get; set; }
  [Newtonsoft.Json.JsonProperty("enableLinkFovyToScaleValue")]
  public bool EnableLinkFovyToScaleValue { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation3fT ScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleAnimationLoopSetting")]
  public gfl.gnpt.fb.AnimationLoopSettingT ScaleAnimationLoopSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationType")]
  public gfl.gnpt.fb.RotationOrder RotationType { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationAttenuation")]
  public float RotationAttenuation { get; set; }
  [Newtonsoft.Json.JsonProperty("enableRotationAxisX")]
  public bool EnableRotationAxisX { get; set; }
  [Newtonsoft.Json.JsonProperty("enableRotationAxisY")]
  public bool EnableRotationAxisY { get; set; }
  [Newtonsoft.Json.JsonProperty("enableRotationAxisZ")]
  public bool EnableRotationAxisZ { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationX")]
  public gfl.gnpt.fb.RotationT RotationX { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationY")]
  public gfl.gnpt.fb.RotationT RotationY { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationZ")]
  public gfl.gnpt.fb.RotationT RotationZ { get; set; }
  [Newtonsoft.Json.JsonProperty("customShaderSelectShaderName")]
  public string CustomShaderSelectShaderName { get; set; }
  [Newtonsoft.Json.JsonProperty("customShaderParameters")]
  public List<gfl.gnpt.fb.CustomShaderParameterT> CustomShaderParameters { get; set; }
  [Newtonsoft.Json.JsonProperty("childEmitters")]
  public List<gfl.gnpt.fb.EmitterT> ChildEmitters { get; set; }
  [Newtonsoft.Json.JsonProperty("randomField")]
  public gfl.gnpt.fb.RandomFieldT RandomField { get; set; }
  [Newtonsoft.Json.JsonProperty("gpuNoiseField")]
  public gfl.gnpt.fb.GpuNoiseFieldT GpuNoiseField { get; set; }
  [Newtonsoft.Json.JsonProperty("magneticForceField")]
  public gfl.gnpt.fb.MagneticForceFieldT MagneticForceField { get; set; }
  [Newtonsoft.Json.JsonProperty("spinField")]
  public gfl.gnpt.fb.SpinFieldT SpinField { get; set; }
  [Newtonsoft.Json.JsonProperty("convergenceField")]
  public gfl.gnpt.fb.ConvergenceFieldT ConvergenceField { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetField")]
  public gfl.gnpt.fb.OffsetFieldT OffsetField { get; set; }
  [Newtonsoft.Json.JsonProperty("simpleCollisionField")]
  public gfl.gnpt.fb.SimpleCollisionFieldT SimpleCollisionField { get; set; }
  [Newtonsoft.Json.JsonProperty("curlNoiseField")]
  public gfl.gnpt.fb.CurlNoiseFieldT CurlNoiseField { get; set; }
  [Newtonsoft.Json.JsonProperty("customField")]
  public gfl.gnpt.fb.CustomFieldT CustomField { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterPlugin_type")]
  private gfl.gnpt.fb.EmitterPlugin EmitterPluginType {
    get {
      return this.EmitterPlugin != null ? this.EmitterPlugin.Type : gfl.gnpt.fb.EmitterPlugin.NONE;
    }
    set {
      this.EmitterPlugin = new gfl.gnpt.fb.EmitterPluginUnion();
      this.EmitterPlugin.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("emitterPlugin")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.gnpt.fb.EmitterPluginUnion_JsonConverter))]
  public gfl.gnpt.fb.EmitterPluginUnion EmitterPlugin { get; set; }
  [Newtonsoft.Json.JsonProperty("customAction")]
  public gfl.gnpt.fb.CustomActionT CustomAction { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterExpansionParameters")]
  public gfl.gnpt.fb.EmitterExpansionParametersT EmitterExpansionParameters { get; set; }

  public EmitterT() {
    this.Name = null;
    this.FollowMode = gfl.gnpt.fb.ParticleFollowMode.None;
    this.EnableStopOnEnd = false;
    this.EnableAlphaFadeOut = false;
    this.EnableScaleFadeOut = false;
    this.FadeOutTime = 0;
    this.EnableAlphaFadeIn = false;
    this.EnableScaleFadeIn = false;
    this.FadeInTime = 0;
    this.RenderState = null;
    this.Random = null;
    this.Lod = null;
    this.Inheritance = null;
    this.EmitterType = gfl.gnpt.fb.EmitterTypeKind.Point;
    this.EmitterTypeEmitterRadius = new gfl.gnpt.fb.Vector3fT();
    this.EmitterShapeLongitudeArcLength = 0.0f;
    this.EmitterShapeLatitudeArcLength = 0.0f;
    this.EmitterShapeStartArc = 0.0f;
    this.EmitterShapeStartArcRandom = false;
    this.EmitterShapeRandomPos = 0.0f;
    this.EmitterShapeHollowRatio = 0.0f;
    this.EmitterShapeArcType = gfl.gnpt.fb.EmitterShapeArcTypeKind.Longitude;
    this.EmitterShapeLineCenter = 0.0f;
    this.EmitterShapeLineLength = 0.0f;
    this.EmitterShapeEmissionType = gfl.gnpt.fb.EmitterShapeEmissionTypeKind.AllAtOnce;
    this.EmitterShapeSphereAxis = gfl.gnpt.fb.EmitterShapeSphereAxisKind.PlusX;
    this.EmitterShapeSphereAndDivisionDivision = gfl.gnpt.fb.EmitterShapeSphereAndDivisionDivisionKind.Division2;
    this.EmitterShapeSphereAndDivision64Division = 0;
    this.EmitterShapeCircleDivision = 0;
    this.EmitterShapeCircleDivisionRandom = 0;
    this.EmitterShapeLineDivision = 0;
    this.EmitterShapeLineDivisionRandom = 0;
    this.EmitterShapeScale = new gfl.gnpt.fb.Vector3fT();
    this.EmitterShapePrimitiveFilePath = null;
    this.RandomPosition = 0.0f;
    this.ShapeScaleAnimation = null;
    this.EmitterScale = new gfl.gnpt.fb.Vector3fT();
    this.EmitterScaleAnimation = null;
    this.EmitterRotation = new gfl.gnpt.fb.Vector3fT();
    this.EmitterRotationRandom = new gfl.gnpt.fb.Vector3fT();
    this.EmitterRotationAnimation = null;
    this.EmitterPosition = new gfl.gnpt.fb.Vector3fT();
    this.EmitterPositionRandom = new gfl.gnpt.fb.Vector3fT();
    this.EmitterPositionAnimation = null;
    this.EnableUpdateRandom = false;
    this.EnableOneShot = false;
    this.OneShotDuration = 0;
    this.EmitStartFrame = 0;
    this.EmitTimingRate = 0.0f;
    this.EmitProcMode = gfl.gnpt.fb.EmitProcMode.Time;
    this.EmitTimeEmissionRate = 0.0f;
    this.EmitTimeEmissionRateRandom = 0;
    this.EmitTimeEmissionRateAnimation = null;
    this.EmitTimeDistUnit = 0;
    this.EmitTimeDistUnitRandom = 0;
    this.EmitDistDistUnit = 0.0f;
    this.EmitDistParticleMax = 0;
    this.EmitDistMaxDistPerFrame = 0.0f;
    this.EmitDistMinDistPerFrame = 0.0f;
    this.EmitDistMargin = 0.0f;
    this.OmnidirectionalVelocity = 0.0f;
    this.OmnidirectionalVelocityAnimation = null;
    this.OrientedVelocity = 0.0f;
    this.OrientedVelocityAnimation = null;
    this.EnableOrientedVelocityOnWorldCoordinate = false;
    this.OrientedDirection = new gfl.gnpt.fb.Vector3fT();
    this.OrientedDirectionalDiffusionAngle = 0.0f;
    this.YaxisDiffusionVelocity = 0.0f;
    this.DiffusionVelocity = new gfl.gnpt.fb.Vector3fT();
    this.VelocityRandom = 0.0f;
    this.AirRegist = 0.0f;
    this.GravityVolume = 0.0f;
    this.GravityVolumeAnimation = null;
    this.EnableWorldCoordinate = false;
    this.GravityDir = new gfl.gnpt.fb.Vector3fT();
    this.VelocityInheritRate = 0.0f;
    this.MomentumRandom = 0.0f;
    this.EnableInfinityLife = false;
    this.Life = 0.0f;
    this.LifeRandom = 0.0f;
    this.LifeAnimation = null;
    this.ShapeType = gfl.gnpt.fb.ShapeKind.Quad;
    this.EnableTrimming = false;
    this.ConnectPtclScaleToZOffset = false;
    this.ParticleType = gfl.gnpt.fb.ParticleBehaviorKind.BillboardParallel;
    this.ParticleOffset = new gfl.gnpt.fb.Vector2fT();
    this.CameraOffsetProcessType = gfl.gnpt.fb.ParticleOffsetKind.None;
    this.CameraOffsetValue = 0.0f;
    this.PrimitiveFilePath = null;
    this.EnableAvoidZFighting = false;
    this.Fluctutation = null;
    this.ColorTexture0BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.ColorTexture0Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.ColorTexture1BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.ColorTexture1Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.ColorTexture2BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.ColorTexture2Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.ColorTextureExpression = gfl.gnpt.fb.CombinerColorExpression.C0;
    this.ColorPrimitiveExpression = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.ColorPrimitiveChannel = gfl.gnpt.fb.CombinerChannel.C1;
    this.AlphaTexture0BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.AlphaTexture0Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.AlphaTexture1BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.AlphaTexture1Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.AlphaTexture2BlendType = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.AlphaTexture2Channel = gfl.gnpt.fb.CombinerChannel.C1;
    this.AlphaPrimitiveExpression = gfl.gnpt.fb.CombinerOperation.Multiply;
    this.AlphaPrimitiveChannel = gfl.gnpt.fb.CombinerChannel.C1;
    this.AlphaExpression = gfl.gnpt.fb.CombinerAlphaExpression.R_Mul_A0;
    this.ShaderType = gfl.gnpt.fb.ShaderKind.Basic;
    this.Coefficient = new gfl.gnpt.fb.Vector2fT();
    this.CoefficientAnimationTable = null;
    this.ParticleApplyAlphaValue = false;
    this.IsDistortionByCameraDistance = false;
    this.CombinerEditorProjectPath = null;
    this.CombinerEditorAnimation = null;
    this.CombinerEditorAnimationLoopSetting = null;
    this.Texture0 = null;
    this.Texture1 = null;
    this.Texture2 = null;
    this.FixedUvAnim = false;
    this.ColorScale = 0.0f;
    this.Color0BehaviorType = gfl.gnpt.fb.ColorBehaviorType.Fixed;
    this.Color1BehaviorType = gfl.gnpt.fb.ColorBehaviorType.Fixed;
    this.Alpha0BehaviorType = gfl.gnpt.fb.AlphaBehaviorType.Fixed;
    this.Alpha1BehaviorType = gfl.gnpt.fb.AlphaBehaviorType.Fixed;
    this.Color0Value = new gfl.gnpt.fb.Vector3fT();
    this.Color1Value = new gfl.gnpt.fb.Vector3fT();
    this.Alpha0Value = 0.0f;
    this.Alpha1Value = 0.0f;
    this.Color0Animation = null;
    this.Color0AnimationLoopSetting = null;
    this.Color1Animation = null;
    this.Color1AnimationLoopSetting = null;
    this.Alpha0Animation = null;
    this.Alpha0AnimationLoopSetting = null;
    this.Alpha1Animation = null;
    this.Alpha1AnimationLoopSetting = null;
    this.Color0Random = null;
    this.Color1Random = null;
    this.SoftParticleProcessType = gfl.gnpt.fb.SoftParticleProcessKind.None;
    this.AlphaFadeStartAlphaOffset = 0.0f;
    this.AlphaSamplingRadius = 0.0f;
    this.FresnelAlphaProcessType = gfl.gnpt.fb.AlphaProcessKind.None;
    this.MinimumAlphaAngle = 0.0f;
    this.MaximumAlphaAngle = 0.0f;
    this.EnableNearAlpha = false;
    this.NearAlphaZeroDistance = 0.0f;
    this.NearAlphaOneDistance = 0.0f;
    this.EnableFarAlpha = false;
    this.FarAlphaOneDistance = 0.0f;
    this.FarAlphaZeroDistance = 0.0f;
    this.EnableDecal = false;
    this.DecalAlphaOneDistance = 0.0f;
    this.FeedStartDistance = 0.0f;
    this.VolumeValue = 0.0f;
    this.EmitterColor0Value = new gfl.gnpt.fb.Vector3fT();
    this.EmitterColor1Value = new gfl.gnpt.fb.Vector3fT();
    this.EmitterAlpha0Value = 0.0f;
    this.EmitterAlpha1Value = 0.0f;
    this.EmitterColor0Animation = null;
    this.EmitterColor1Animation = null;
    this.EmitterAlpha0Animation = null;
    this.EmitterAlpha1Animation = null;
    this.ScaleBasicValue = new gfl.gnpt.fb.Vector3fT();
    this.ScaleBasicRandom = new gfl.gnpt.fb.Vector3fT();
    this.ScaleBasicAnimation = null;
    this.EnableScaleVelAddY = false;
    this.ScaleVelAddY = 0.0f;
    this.EnableScalingByCameraDistNear = false;
    this.EnableScalingByCameraDistFar = false;
    this.ScaleLimitDistNear = 0.0f;
    this.ScaleLimitDistFar = 0.0f;
    this.EnableLinkFovyToScaleValue = false;
    this.ScaleAnimation = null;
    this.ScaleAnimationLoopSetting = null;
    this.RotationType = gfl.gnpt.fb.RotationOrder.Y_Z_X;
    this.RotationAttenuation = 0.0f;
    this.EnableRotationAxisX = false;
    this.EnableRotationAxisY = false;
    this.EnableRotationAxisZ = false;
    this.RotationX = null;
    this.RotationY = null;
    this.RotationZ = null;
    this.CustomShaderSelectShaderName = null;
    this.CustomShaderParameters = null;
    this.ChildEmitters = null;
    this.RandomField = null;
    this.GpuNoiseField = null;
    this.MagneticForceField = null;
    this.SpinField = null;
    this.ConvergenceField = null;
    this.OffsetField = null;
    this.SimpleCollisionField = null;
    this.CurlNoiseField = null;
    this.CustomField = null;
    this.EmitterPlugin = null;
    this.CustomAction = null;
    this.EmitterExpansionParameters = null;
  }
}

public struct ToolEmitter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ToolEmitter GetRootAsToolEmitter(ByteBuffer _bb) { return GetRootAsToolEmitter(_bb, new ToolEmitter()); }
  public static ToolEmitter GetRootAsToolEmitter(ByteBuffer _bb, ToolEmitter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ToolEmitter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Emitter? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Emitter?)(new gfl.gnpt.fb.Emitter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ToolEmitter? ChildToolEmitters(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ToolEmitter?)(new gfl.gnpt.fb.ToolEmitter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildToolEmittersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? ShapeScaleAnimation { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? EmitterPositionAnimation { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? EmitterRotationAnimation { get { int o = __p.__offset(12); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? EmitterScaleAnimation { get { int o = __p.__offset(14); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? ScaleBasicAnimation { get { int o = __p.__offset(16); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? ScaleAnimation { get { int o = __p.__offset(18); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f2? CoefficientAnimationTable { get { int o = __p.__offset(20); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f2?)(new gfl.gnpt.fb.KeyframeAnimation1f2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? Color0Animation { get { int o = __p.__offset(22); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.KeyframeAnimation1f3? Color1Animation { get { int o = __p.__offset(24); return o != 0 ? (gfl.gnpt.fb.KeyframeAnimation1f3?)(new gfl.gnpt.fb.KeyframeAnimation1f3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.ToolEmitter> CreateToolEmitter(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.Emitter> baseOffset = default(Offset<gfl.gnpt.fb.Emitter>),
      VectorOffset childToolEmittersOffset = default(VectorOffset),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> shapeScaleAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterPositionAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterRotationAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterScaleAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> scaleBasicAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> scaleAnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f2> coefficientAnimationTableOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f2>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> color0AnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>),
      Offset<gfl.gnpt.fb.KeyframeAnimation1f3> color1AnimationOffset = default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>)) {
    builder.StartTable(11);
    ToolEmitter.AddColor1Animation(builder, color1AnimationOffset);
    ToolEmitter.AddColor0Animation(builder, color0AnimationOffset);
    ToolEmitter.AddCoefficientAnimationTable(builder, coefficientAnimationTableOffset);
    ToolEmitter.AddScaleAnimation(builder, scaleAnimationOffset);
    ToolEmitter.AddScaleBasicAnimation(builder, scaleBasicAnimationOffset);
    ToolEmitter.AddEmitterScaleAnimation(builder, emitterScaleAnimationOffset);
    ToolEmitter.AddEmitterRotationAnimation(builder, emitterRotationAnimationOffset);
    ToolEmitter.AddEmitterPositionAnimation(builder, emitterPositionAnimationOffset);
    ToolEmitter.AddShapeScaleAnimation(builder, shapeScaleAnimationOffset);
    ToolEmitter.AddChildToolEmitters(builder, childToolEmittersOffset);
    ToolEmitter.AddBase(builder, baseOffset);
    return ToolEmitter.EndToolEmitter(builder);
  }

  public static void StartToolEmitter(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Emitter> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddChildToolEmitters(FlatBufferBuilder builder, VectorOffset childToolEmittersOffset) { builder.AddOffset(1, childToolEmittersOffset.Value, 0); }
  public static VectorOffset CreateChildToolEmittersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ToolEmitter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildToolEmittersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ToolEmitter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildToolEmittersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddShapeScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> shapeScaleAnimationOffset) { builder.AddOffset(2, shapeScaleAnimationOffset.Value, 0); }
  public static void AddEmitterPositionAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterPositionAnimationOffset) { builder.AddOffset(3, emitterPositionAnimationOffset.Value, 0); }
  public static void AddEmitterRotationAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterRotationAnimationOffset) { builder.AddOffset(4, emitterRotationAnimationOffset.Value, 0); }
  public static void AddEmitterScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> emitterScaleAnimationOffset) { builder.AddOffset(5, emitterScaleAnimationOffset.Value, 0); }
  public static void AddScaleBasicAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> scaleBasicAnimationOffset) { builder.AddOffset(6, scaleBasicAnimationOffset.Value, 0); }
  public static void AddScaleAnimation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> scaleAnimationOffset) { builder.AddOffset(7, scaleAnimationOffset.Value, 0); }
  public static void AddCoefficientAnimationTable(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f2> coefficientAnimationTableOffset) { builder.AddOffset(8, coefficientAnimationTableOffset.Value, 0); }
  public static void AddColor0Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> color0AnimationOffset) { builder.AddOffset(9, color0AnimationOffset.Value, 0); }
  public static void AddColor1Animation(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.KeyframeAnimation1f3> color1AnimationOffset) { builder.AddOffset(10, color1AnimationOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.ToolEmitter> EndToolEmitter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ToolEmitter>(o);
  }
  public ToolEmitterT UnPack() {
    var _o = new ToolEmitterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ToolEmitterT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.ChildToolEmitters = new List<gfl.gnpt.fb.ToolEmitterT>();
    for (var _j = 0; _j < this.ChildToolEmittersLength; ++_j) {_o.ChildToolEmitters.Add(this.ChildToolEmitters(_j).HasValue ? this.ChildToolEmitters(_j).Value.UnPack() : null);}
    _o.ShapeScaleAnimation = this.ShapeScaleAnimation.HasValue ? this.ShapeScaleAnimation.Value.UnPack() : null;
    _o.EmitterPositionAnimation = this.EmitterPositionAnimation.HasValue ? this.EmitterPositionAnimation.Value.UnPack() : null;
    _o.EmitterRotationAnimation = this.EmitterRotationAnimation.HasValue ? this.EmitterRotationAnimation.Value.UnPack() : null;
    _o.EmitterScaleAnimation = this.EmitterScaleAnimation.HasValue ? this.EmitterScaleAnimation.Value.UnPack() : null;
    _o.ScaleBasicAnimation = this.ScaleBasicAnimation.HasValue ? this.ScaleBasicAnimation.Value.UnPack() : null;
    _o.ScaleAnimation = this.ScaleAnimation.HasValue ? this.ScaleAnimation.Value.UnPack() : null;
    _o.CoefficientAnimationTable = this.CoefficientAnimationTable.HasValue ? this.CoefficientAnimationTable.Value.UnPack() : null;
    _o.Color0Animation = this.Color0Animation.HasValue ? this.Color0Animation.Value.UnPack() : null;
    _o.Color1Animation = this.Color1Animation.HasValue ? this.Color1Animation.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.ToolEmitter> Pack(FlatBufferBuilder builder, ToolEmitterT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ToolEmitter>);
    var _base = _o.Base == null ? default(Offset<gfl.gnpt.fb.Emitter>) : gfl.gnpt.fb.Emitter.Pack(builder, _o.Base);
    var _childToolEmitters = default(VectorOffset);
    if (_o.ChildToolEmitters != null) {
      var __childToolEmitters = new Offset<gfl.gnpt.fb.ToolEmitter>[_o.ChildToolEmitters.Count];
      for (var _j = 0; _j < __childToolEmitters.Length; ++_j) { __childToolEmitters[_j] = gfl.gnpt.fb.ToolEmitter.Pack(builder, _o.ChildToolEmitters[_j]); }
      _childToolEmitters = CreateChildToolEmittersVector(builder, __childToolEmitters);
    }
    var _shapeScaleAnimation = _o.ShapeScaleAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.ShapeScaleAnimation);
    var _emitterPositionAnimation = _o.EmitterPositionAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.EmitterPositionAnimation);
    var _emitterRotationAnimation = _o.EmitterRotationAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.EmitterRotationAnimation);
    var _emitterScaleAnimation = _o.EmitterScaleAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.EmitterScaleAnimation);
    var _scaleBasicAnimation = _o.ScaleBasicAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.ScaleBasicAnimation);
    var _scaleAnimation = _o.ScaleAnimation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.ScaleAnimation);
    var _coefficientAnimationTable = _o.CoefficientAnimationTable == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f2>) : gfl.gnpt.fb.KeyframeAnimation1f2.Pack(builder, _o.CoefficientAnimationTable);
    var _color0Animation = _o.Color0Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.Color0Animation);
    var _color1Animation = _o.Color1Animation == null ? default(Offset<gfl.gnpt.fb.KeyframeAnimation1f3>) : gfl.gnpt.fb.KeyframeAnimation1f3.Pack(builder, _o.Color1Animation);
    return CreateToolEmitter(
      builder,
      _base,
      _childToolEmitters,
      _shapeScaleAnimation,
      _emitterPositionAnimation,
      _emitterRotationAnimation,
      _emitterScaleAnimation,
      _scaleBasicAnimation,
      _scaleAnimation,
      _coefficientAnimationTable,
      _color0Animation,
      _color1Animation);
  }
};

public class ToolEmitterT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.gnpt.fb.EmitterT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("childToolEmitters")]
  public List<gfl.gnpt.fb.ToolEmitterT> ChildToolEmitters { get; set; }
  [Newtonsoft.Json.JsonProperty("shapeScaleAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T ShapeScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterPositionAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T EmitterPositionAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterRotationAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T EmitterRotationAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterScaleAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T EmitterScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleBasicAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T ScaleBasicAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleAnimation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T ScaleAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("coefficientAnimationTable")]
  public gfl.gnpt.fb.KeyframeAnimation1f2T CoefficientAnimationTable { get; set; }
  [Newtonsoft.Json.JsonProperty("color0Animation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T Color0Animation { get; set; }
  [Newtonsoft.Json.JsonProperty("color1Animation")]
  public gfl.gnpt.fb.KeyframeAnimation1f3T Color1Animation { get; set; }

  public ToolEmitterT() {
    this.Base = null;
    this.ChildToolEmitters = null;
    this.ShapeScaleAnimation = null;
    this.EmitterPositionAnimation = null;
    this.EmitterRotationAnimation = null;
    this.EmitterScaleAnimation = null;
    this.ScaleBasicAnimation = null;
    this.ScaleAnimation = null;
    this.CoefficientAnimationTable = null;
    this.Color0Animation = null;
    this.Color1Animation = null;
  }
}

public struct EmitterSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmitterSet GetRootAsEmitterSet(ByteBuffer _bb) { return GetRootAsEmitterSet(_bb, new EmitterSet()); }
  public static EmitterSet GetRootAsEmitterSet(ByteBuffer _bb, EmitterSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmitterSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.Emitter? Emitters(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Emitter?)(new gfl.gnpt.fb.Emitter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EmittersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.EmitterSet> CreateEmitterSet(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset emittersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    EmitterSet.AddEmitters(builder, emittersOffset);
    EmitterSet.AddName(builder, nameOffset);
    return EmitterSet.EndEmitterSet(builder);
  }

  public static void StartEmitterSet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEmitters(FlatBufferBuilder builder, VectorOffset emittersOffset) { builder.AddOffset(1, emittersOffset.Value, 0); }
  public static VectorOffset CreateEmittersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Emitter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEmittersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Emitter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEmittersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.EmitterSet> EndEmitterSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.EmitterSet>(o);
  }
  public EmitterSetT UnPack() {
    var _o = new EmitterSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmitterSetT _o) {
    _o.Name = this.Name;
    _o.Emitters = new List<gfl.gnpt.fb.EmitterT>();
    for (var _j = 0; _j < this.EmittersLength; ++_j) {_o.Emitters.Add(this.Emitters(_j).HasValue ? this.Emitters(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.EmitterSet> Pack(FlatBufferBuilder builder, EmitterSetT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.EmitterSet>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _emitters = default(VectorOffset);
    if (_o.Emitters != null) {
      var __emitters = new Offset<gfl.gnpt.fb.Emitter>[_o.Emitters.Count];
      for (var _j = 0; _j < __emitters.Length; ++_j) { __emitters[_j] = gfl.gnpt.fb.Emitter.Pack(builder, _o.Emitters[_j]); }
      _emitters = CreateEmittersVector(builder, __emitters);
    }
    return CreateEmitterSet(
      builder,
      _name,
      _emitters);
  }
};

public class EmitterSetT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("emitters")]
  public List<gfl.gnpt.fb.EmitterT> Emitters { get; set; }

  public EmitterSetT() {
    this.Name = null;
    this.Emitters = null;
  }
}

public struct ToolEmitterSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ToolEmitterSet GetRootAsToolEmitterSet(ByteBuffer _bb) { return GetRootAsToolEmitterSet(_bb, new ToolEmitterSet()); }
  public static ToolEmitterSet GetRootAsToolEmitterSet(ByteBuffer _bb, ToolEmitterSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ToolEmitterSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.EmitterSet? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.EmitterSet?)(new gfl.gnpt.fb.EmitterSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ToolEmitter? ToolEmitters(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ToolEmitter?)(new gfl.gnpt.fb.ToolEmitter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ToolEmittersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.ToolEmitterSet> CreateToolEmitterSet(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.EmitterSet> baseOffset = default(Offset<gfl.gnpt.fb.EmitterSet>),
      VectorOffset toolEmittersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ToolEmitterSet.AddToolEmitters(builder, toolEmittersOffset);
    ToolEmitterSet.AddBase(builder, baseOffset);
    return ToolEmitterSet.EndToolEmitterSet(builder);
  }

  public static void StartToolEmitterSet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.EmitterSet> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddToolEmitters(FlatBufferBuilder builder, VectorOffset toolEmittersOffset) { builder.AddOffset(1, toolEmittersOffset.Value, 0); }
  public static VectorOffset CreateToolEmittersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ToolEmitter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateToolEmittersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ToolEmitter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartToolEmittersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.ToolEmitterSet> EndToolEmitterSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ToolEmitterSet>(o);
  }
  public ToolEmitterSetT UnPack() {
    var _o = new ToolEmitterSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ToolEmitterSetT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.ToolEmitters = new List<gfl.gnpt.fb.ToolEmitterT>();
    for (var _j = 0; _j < this.ToolEmittersLength; ++_j) {_o.ToolEmitters.Add(this.ToolEmitters(_j).HasValue ? this.ToolEmitters(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.ToolEmitterSet> Pack(FlatBufferBuilder builder, ToolEmitterSetT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ToolEmitterSet>);
    var _base = _o.Base == null ? default(Offset<gfl.gnpt.fb.EmitterSet>) : gfl.gnpt.fb.EmitterSet.Pack(builder, _o.Base);
    var _toolEmitters = default(VectorOffset);
    if (_o.ToolEmitters != null) {
      var __toolEmitters = new Offset<gfl.gnpt.fb.ToolEmitter>[_o.ToolEmitters.Count];
      for (var _j = 0; _j < __toolEmitters.Length; ++_j) { __toolEmitters[_j] = gfl.gnpt.fb.ToolEmitter.Pack(builder, _o.ToolEmitters[_j]); }
      _toolEmitters = CreateToolEmittersVector(builder, __toolEmitters);
    }
    return CreateToolEmitterSet(
      builder,
      _base,
      _toolEmitters);
  }
};

public class ToolEmitterSetT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.gnpt.fb.EmitterSetT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("toolEmitters")]
  public List<gfl.gnpt.fb.ToolEmitterT> ToolEmitters { get; set; }

  public ToolEmitterSetT() {
    this.Base = null;
    this.ToolEmitters = null;
  }
}

public struct PreviewNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PreviewNode GetRootAsPreviewNode(ByteBuffer _bb) { return GetRootAsPreviewNode(_bb, new PreviewNode()); }
  public static PreviewNode GetRootAsPreviewNode(ByteBuffer _bb, PreviewNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreviewNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartPreviewNode(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<gfl.gnpt.fb.PreviewNode> EndPreviewNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.PreviewNode>(o);
  }
  public PreviewNodeT UnPack() {
    var _o = new PreviewNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreviewNodeT _o) {
  }
  public static Offset<gfl.gnpt.fb.PreviewNode> Pack(FlatBufferBuilder builder, PreviewNodeT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.PreviewNode>);
    StartPreviewNode(builder);
    return EndPreviewNode(builder);
  }
};

public class PreviewNodeT
{

  public PreviewNodeT() {
  }
}

public struct ViewerNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ViewerNode GetRootAsViewerNode(ByteBuffer _bb) { return GetRootAsViewerNode(_bb, new ViewerNode()); }
  public static ViewerNode GetRootAsViewerNode(ByteBuffer _bb, ViewerNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ViewerNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartViewerNode(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<gfl.gnpt.fb.ViewerNode> EndViewerNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ViewerNode>(o);
  }
  public ViewerNodeT UnPack() {
    var _o = new ViewerNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ViewerNodeT _o) {
  }
  public static Offset<gfl.gnpt.fb.ViewerNode> Pack(FlatBufferBuilder builder, ViewerNodeT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ViewerNode>);
    StartViewerNode(builder);
    return EndViewerNode(builder);
  }
};

public class ViewerNodeT
{

  public ViewerNodeT() {
  }
}

public struct ModelSettingNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelSettingNode GetRootAsModelSettingNode(ByteBuffer _bb) { return GetRootAsModelSettingNode(_bb, new ModelSettingNode()); }
  public static ModelSettingNode GetRootAsModelSettingNode(ByteBuffer _bb, ModelSettingNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelSettingNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartModelSettingNode(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<gfl.gnpt.fb.ModelSettingNode> EndModelSettingNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ModelSettingNode>(o);
  }
  public ModelSettingNodeT UnPack() {
    var _o = new ModelSettingNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelSettingNodeT _o) {
  }
  public static Offset<gfl.gnpt.fb.ModelSettingNode> Pack(FlatBufferBuilder builder, ModelSettingNodeT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ModelSettingNode>);
    StartModelSettingNode(builder);
    return EndModelSettingNode(builder);
  }
};

public class ModelSettingNodeT
{

  public ModelSettingNodeT() {
  }
}

public struct Workspace : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Workspace GetRootAsWorkspace(ByteBuffer _bb) { return GetRootAsWorkspace(_bb, new Workspace()); }
  public static Workspace GetRootAsWorkspace(ByteBuffer _bb, Workspace obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Workspace __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.PreviewNode? PreviewNode { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.PreviewNode?)(new gfl.gnpt.fb.PreviewNode()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ViewerNode? ViewerNode { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.ViewerNode?)(new gfl.gnpt.fb.ViewerNode()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.ModelSettingNode? ModelSettingNode { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.ModelSettingNode?)(new gfl.gnpt.fb.ModelSettingNode()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string EmitterSets(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EmitterSetsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.Workspace> CreateWorkspace(FlatBufferBuilder builder,
      Offset<gfl.gnpt.fb.PreviewNode> previewNodeOffset = default(Offset<gfl.gnpt.fb.PreviewNode>),
      Offset<gfl.gnpt.fb.ViewerNode> viewerNodeOffset = default(Offset<gfl.gnpt.fb.ViewerNode>),
      Offset<gfl.gnpt.fb.ModelSettingNode> modelSettingNodeOffset = default(Offset<gfl.gnpt.fb.ModelSettingNode>),
      VectorOffset emitterSetsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Workspace.AddEmitterSets(builder, emitterSetsOffset);
    Workspace.AddModelSettingNode(builder, modelSettingNodeOffset);
    Workspace.AddViewerNode(builder, viewerNodeOffset);
    Workspace.AddPreviewNode(builder, previewNodeOffset);
    return Workspace.EndWorkspace(builder);
  }

  public static void StartWorkspace(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPreviewNode(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.PreviewNode> previewNodeOffset) { builder.AddOffset(0, previewNodeOffset.Value, 0); }
  public static void AddViewerNode(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ViewerNode> viewerNodeOffset) { builder.AddOffset(1, viewerNodeOffset.Value, 0); }
  public static void AddModelSettingNode(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ModelSettingNode> modelSettingNodeOffset) { builder.AddOffset(2, modelSettingNodeOffset.Value, 0); }
  public static void AddEmitterSets(FlatBufferBuilder builder, VectorOffset emitterSetsOffset) { builder.AddOffset(3, emitterSetsOffset.Value, 0); }
  public static VectorOffset CreateEmitterSetsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEmitterSetsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEmitterSetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.Workspace> EndWorkspace(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Workspace>(o);
  }
  public WorkspaceT UnPack() {
    var _o = new WorkspaceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WorkspaceT _o) {
    _o.PreviewNode = this.PreviewNode.HasValue ? this.PreviewNode.Value.UnPack() : null;
    _o.ViewerNode = this.ViewerNode.HasValue ? this.ViewerNode.Value.UnPack() : null;
    _o.ModelSettingNode = this.ModelSettingNode.HasValue ? this.ModelSettingNode.Value.UnPack() : null;
    _o.EmitterSets = new List<string>();
    for (var _j = 0; _j < this.EmitterSetsLength; ++_j) {_o.EmitterSets.Add(this.EmitterSets(_j));}
  }
  public static Offset<gfl.gnpt.fb.Workspace> Pack(FlatBufferBuilder builder, WorkspaceT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Workspace>);
    var _previewNode = _o.PreviewNode == null ? default(Offset<gfl.gnpt.fb.PreviewNode>) : gfl.gnpt.fb.PreviewNode.Pack(builder, _o.PreviewNode);
    var _viewerNode = _o.ViewerNode == null ? default(Offset<gfl.gnpt.fb.ViewerNode>) : gfl.gnpt.fb.ViewerNode.Pack(builder, _o.ViewerNode);
    var _modelSettingNode = _o.ModelSettingNode == null ? default(Offset<gfl.gnpt.fb.ModelSettingNode>) : gfl.gnpt.fb.ModelSettingNode.Pack(builder, _o.ModelSettingNode);
    var _emitterSets = default(VectorOffset);
    if (_o.EmitterSets != null) {
      var __emitterSets = new StringOffset[_o.EmitterSets.Count];
      for (var _j = 0; _j < __emitterSets.Length; ++_j) { __emitterSets[_j] = builder.CreateString(_o.EmitterSets[_j]); }
      _emitterSets = CreateEmitterSetsVector(builder, __emitterSets);
    }
    return CreateWorkspace(
      builder,
      _previewNode,
      _viewerNode,
      _modelSettingNode,
      _emitterSets);
  }
};

public class WorkspaceT
{
  [Newtonsoft.Json.JsonProperty("previewNode")]
  public gfl.gnpt.fb.PreviewNodeT PreviewNode { get; set; }
  [Newtonsoft.Json.JsonProperty("viewerNode")]
  public gfl.gnpt.fb.ViewerNodeT ViewerNode { get; set; }
  [Newtonsoft.Json.JsonProperty("modelSettingNode")]
  public gfl.gnpt.fb.ModelSettingNodeT ModelSettingNode { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterSets")]
  public List<string> EmitterSets { get; set; }

  public WorkspaceT() {
    this.PreviewNode = null;
    this.ViewerNode = null;
    this.ModelSettingNode = null;
    this.EmitterSets = null;
  }
}

public struct DrawPath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DrawPath GetRootAsDrawPath(ByteBuffer _bb) { return GetRootAsDrawPath(_bb, new DrawPath()); }
  public static DrawPath GetRootAsDrawPath(ByteBuffer _bb, DrawPath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DrawPath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.gnpt.fb.DrawPath> CreateDrawPath(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(2);
    DrawPath.AddName(builder, nameOffset);
    DrawPath.AddId(builder, id);
    return DrawPath.EndDrawPath(builder);
  }

  public static void StartDrawPath(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.DrawPath> EndDrawPath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.DrawPath>(o);
  }
  public DrawPathT UnPack() {
    var _o = new DrawPathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DrawPathT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
  }
  public static Offset<gfl.gnpt.fb.DrawPath> Pack(FlatBufferBuilder builder, DrawPathT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.DrawPath>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateDrawPath(
      builder,
      _o.Id,
      _name);
  }
};

public class DrawPathT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }

  public DrawPathT() {
    this.Id = 0;
    this.Name = null;
  }
}

public struct CustomShaderParameterDefine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CustomShaderParameterDefine GetRootAsCustomShaderParameterDefine(ByteBuffer _bb) { return GetRootAsCustomShaderParameterDefine(_bb, new CustomShaderParameterDefine()); }
  public static CustomShaderParameterDefine GetRootAsCustomShaderParameterDefine(ByteBuffer _bb, CustomShaderParameterDefine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomShaderParameterDefine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.CustomShaderParameterDefineType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.CustomShaderParameterDefineType)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.CustomShaderParameterDefineType.Int; } }

  public static Offset<gfl.gnpt.fb.CustomShaderParameterDefine> CreateCustomShaderParameterDefine(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.gnpt.fb.CustomShaderParameterDefineType type = gfl.gnpt.fb.CustomShaderParameterDefineType.Int) {
    builder.StartTable(2);
    CustomShaderParameterDefine.AddType(builder, type);
    CustomShaderParameterDefine.AddName(builder, nameOffset);
    return CustomShaderParameterDefine.EndCustomShaderParameterDefine(builder);
  }

  public static void StartCustomShaderParameterDefine(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.gnpt.fb.CustomShaderParameterDefineType type) { builder.AddUint(1, (uint)type, 0); }
  public static Offset<gfl.gnpt.fb.CustomShaderParameterDefine> EndCustomShaderParameterDefine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CustomShaderParameterDefine>(o);
  }
  public CustomShaderParameterDefineT UnPack() {
    var _o = new CustomShaderParameterDefineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderParameterDefineT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
  }
  public static Offset<gfl.gnpt.fb.CustomShaderParameterDefine> Pack(FlatBufferBuilder builder, CustomShaderParameterDefineT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderParameterDefine>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCustomShaderParameterDefine(
      builder,
      _name,
      _o.Type);
  }
};

public class CustomShaderParameterDefineT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.gnpt.fb.CustomShaderParameterDefineType Type { get; set; }

  public CustomShaderParameterDefineT() {
    this.Name = null;
    this.Type = gfl.gnpt.fb.CustomShaderParameterDefineType.Int;
  }
}

public struct CustomShaderDefine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CustomShaderDefine GetRootAsCustomShaderDefine(ByteBuffer _bb) { return GetRootAsCustomShaderDefine(_bb, new CustomShaderDefine()); }
  public static CustomShaderDefine GetRootAsCustomShaderDefine(ByteBuffer _bb, CustomShaderDefine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CustomShaderDefine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.CustomShaderParameterDefine? Parameters(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.CustomShaderParameterDefine?)(new gfl.gnpt.fb.CustomShaderParameterDefine()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.CustomShaderDefine> CreateCustomShaderDefine(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CustomShaderDefine.AddParameters(builder, parametersOffset);
    CustomShaderDefine.AddName(builder, nameOffset);
    return CustomShaderDefine.EndCustomShaderDefine(builder);
  }

  public static void StartCustomShaderDefine(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(1, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderParameterDefine>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderParameterDefine>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.CustomShaderDefine> EndCustomShaderDefine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.CustomShaderDefine>(o);
  }
  public CustomShaderDefineT UnPack() {
    var _o = new CustomShaderDefineT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CustomShaderDefineT _o) {
    _o.Name = this.Name;
    _o.Parameters = new List<gfl.gnpt.fb.CustomShaderParameterDefineT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.CustomShaderDefine> Pack(FlatBufferBuilder builder, CustomShaderDefineT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.CustomShaderDefine>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<gfl.gnpt.fb.CustomShaderParameterDefine>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = gfl.gnpt.fb.CustomShaderParameterDefine.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    return CreateCustomShaderDefine(
      builder,
      _name,
      _parameters);
  }
};

public class CustomShaderDefineT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<gfl.gnpt.fb.CustomShaderParameterDefineT> Parameters { get; set; }

  public CustomShaderDefineT() {
    this.Name = null;
    this.Parameters = null;
  }
}

public struct ProjectConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ProjectConfig GetRootAsProjectConfig(ByteBuffer _bb) { return GetRootAsProjectConfig(_bb, new ProjectConfig()); }
  public static ProjectConfig GetRootAsProjectConfig(ByteBuffer _bb, ProjectConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProjectConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.AssetTag? AssetTags(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.AssetTag?)(new gfl.gnpt.fb.AssetTag()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AssetTagsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.DrawPath? DrawPaths(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.DrawPath?)(new gfl.gnpt.fb.DrawPath()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DrawPathsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.CustomShaderDefine? CustomShaderDefines(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.CustomShaderDefine?)(new gfl.gnpt.fb.CustomShaderDefine()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CustomShaderDefinesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gnpt.fb.ProjectConfig> CreateProjectConfig(FlatBufferBuilder builder,
      VectorOffset assetTagsOffset = default(VectorOffset),
      VectorOffset drawPathsOffset = default(VectorOffset),
      VectorOffset customShaderDefinesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ProjectConfig.AddCustomShaderDefines(builder, customShaderDefinesOffset);
    ProjectConfig.AddDrawPaths(builder, drawPathsOffset);
    ProjectConfig.AddAssetTags(builder, assetTagsOffset);
    return ProjectConfig.EndProjectConfig(builder);
  }

  public static void StartProjectConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddAssetTags(FlatBufferBuilder builder, VectorOffset assetTagsOffset) { builder.AddOffset(0, assetTagsOffset.Value, 0); }
  public static VectorOffset CreateAssetTagsVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AssetTag>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAssetTagsVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.AssetTag>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAssetTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDrawPaths(FlatBufferBuilder builder, VectorOffset drawPathsOffset) { builder.AddOffset(1, drawPathsOffset.Value, 0); }
  public static VectorOffset CreateDrawPathsVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.DrawPath>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDrawPathsVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.DrawPath>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDrawPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomShaderDefines(FlatBufferBuilder builder, VectorOffset customShaderDefinesOffset) { builder.AddOffset(2, customShaderDefinesOffset.Value, 0); }
  public static VectorOffset CreateCustomShaderDefinesVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderDefine>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCustomShaderDefinesVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.CustomShaderDefine>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomShaderDefinesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gnpt.fb.ProjectConfig> EndProjectConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.ProjectConfig>(o);
  }
  public ProjectConfigT UnPack() {
    var _o = new ProjectConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProjectConfigT _o) {
    _o.AssetTags = new List<gfl.gnpt.fb.AssetTagT>();
    for (var _j = 0; _j < this.AssetTagsLength; ++_j) {_o.AssetTags.Add(this.AssetTags(_j).HasValue ? this.AssetTags(_j).Value.UnPack() : null);}
    _o.DrawPaths = new List<gfl.gnpt.fb.DrawPathT>();
    for (var _j = 0; _j < this.DrawPathsLength; ++_j) {_o.DrawPaths.Add(this.DrawPaths(_j).HasValue ? this.DrawPaths(_j).Value.UnPack() : null);}
    _o.CustomShaderDefines = new List<gfl.gnpt.fb.CustomShaderDefineT>();
    for (var _j = 0; _j < this.CustomShaderDefinesLength; ++_j) {_o.CustomShaderDefines.Add(this.CustomShaderDefines(_j).HasValue ? this.CustomShaderDefines(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gnpt.fb.ProjectConfig> Pack(FlatBufferBuilder builder, ProjectConfigT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ProjectConfig>);
    var _assetTags = default(VectorOffset);
    if (_o.AssetTags != null) {
      var __assetTags = new Offset<gfl.gnpt.fb.AssetTag>[_o.AssetTags.Count];
      for (var _j = 0; _j < __assetTags.Length; ++_j) { __assetTags[_j] = gfl.gnpt.fb.AssetTag.Pack(builder, _o.AssetTags[_j]); }
      _assetTags = CreateAssetTagsVector(builder, __assetTags);
    }
    var _drawPaths = default(VectorOffset);
    if (_o.DrawPaths != null) {
      var __drawPaths = new Offset<gfl.gnpt.fb.DrawPath>[_o.DrawPaths.Count];
      for (var _j = 0; _j < __drawPaths.Length; ++_j) { __drawPaths[_j] = gfl.gnpt.fb.DrawPath.Pack(builder, _o.DrawPaths[_j]); }
      _drawPaths = CreateDrawPathsVector(builder, __drawPaths);
    }
    var _customShaderDefines = default(VectorOffset);
    if (_o.CustomShaderDefines != null) {
      var __customShaderDefines = new Offset<gfl.gnpt.fb.CustomShaderDefine>[_o.CustomShaderDefines.Count];
      for (var _j = 0; _j < __customShaderDefines.Length; ++_j) { __customShaderDefines[_j] = gfl.gnpt.fb.CustomShaderDefine.Pack(builder, _o.CustomShaderDefines[_j]); }
      _customShaderDefines = CreateCustomShaderDefinesVector(builder, __customShaderDefines);
    }
    return CreateProjectConfig(
      builder,
      _assetTags,
      _drawPaths,
      _customShaderDefines);
  }
};

public class ProjectConfigT
{
  [Newtonsoft.Json.JsonProperty("assetTags")]
  public List<gfl.gnpt.fb.AssetTagT> AssetTags { get; set; }
  [Newtonsoft.Json.JsonProperty("drawPaths")]
  public List<gfl.gnpt.fb.DrawPathT> DrawPaths { get; set; }
  [Newtonsoft.Json.JsonProperty("customShaderDefines")]
  public List<gfl.gnpt.fb.CustomShaderDefineT> CustomShaderDefines { get; set; }

  public ProjectConfigT() {
    this.AssetTags = null;
    this.DrawPaths = null;
    this.CustomShaderDefines = null;
  }
}

public struct Preview : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Preview GetRootAsPreview(ByteBuffer _bb) { return GetRootAsPreview(_bb, new Preview()); }
  public static Preview GetRootAsPreview(ByteBuffer _bb, Preview obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Preview __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.PreviewMode Mode { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.PreviewMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.PreviewMode.Restart; } }
  public int LoopFrame { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.gnpt.fb.Preview> CreatePreview(FlatBufferBuilder builder,
      gfl.gnpt.fb.PreviewMode mode = gfl.gnpt.fb.PreviewMode.Restart,
      int loopFrame = 0) {
    builder.StartTable(2);
    Preview.AddLoopFrame(builder, loopFrame);
    Preview.AddMode(builder, mode);
    return Preview.EndPreview(builder);
  }

  public static void StartPreview(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMode(FlatBufferBuilder builder, gfl.gnpt.fb.PreviewMode mode) { builder.AddUint(0, (uint)mode, 0); }
  public static void AddLoopFrame(FlatBufferBuilder builder, int loopFrame) { builder.AddInt(1, loopFrame, 0); }
  public static Offset<gfl.gnpt.fb.Preview> EndPreview(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Preview>(o);
  }
  public PreviewT UnPack() {
    var _o = new PreviewT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreviewT _o) {
    _o.Mode = this.Mode;
    _o.LoopFrame = this.LoopFrame;
  }
  public static Offset<gfl.gnpt.fb.Preview> Pack(FlatBufferBuilder builder, PreviewT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Preview>);
    return CreatePreview(
      builder,
      _o.Mode,
      _o.LoopFrame);
  }
};

public class PreviewT
{
  [Newtonsoft.Json.JsonProperty("mode")]
  public gfl.gnpt.fb.PreviewMode Mode { get; set; }
  [Newtonsoft.Json.JsonProperty("loopFrame")]
  public int LoopFrame { get; set; }

  public PreviewT() {
    this.Mode = gfl.gnpt.fb.PreviewMode.Restart;
    this.LoopFrame = 0;
  }
}

public struct LiveEditItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LiveEditItem GetRootAsLiveEditItem(ByteBuffer _bb) { return GetRootAsLiveEditItem(_bb, new LiveEditItem()); }
  public static LiveEditItem GetRootAsLiveEditItem(ByteBuffer _bb, LiveEditItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LiveEditItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gnpt.fb.LiveEditMode Mode { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.LiveEditMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.gnpt.fb.LiveEditMode.Reload; } }
  public gfl.gnpt.fb.LiveEditNode NodeType { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.LiveEditNode)__p.bb.Get(o + __p.bb_pos) : gfl.gnpt.fb.LiveEditNode.NONE; } }
  public TTable? Node<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public string AssetBasePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetBasePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAssetBasePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAssetBasePathArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<gfl.gnpt.fb.LiveEditItem> CreateLiveEditItem(FlatBufferBuilder builder,
      VectorOffset pathOffset = default(VectorOffset),
      gfl.gnpt.fb.LiveEditMode mode = gfl.gnpt.fb.LiveEditMode.Reload,
      gfl.gnpt.fb.LiveEditNode node_type = gfl.gnpt.fb.LiveEditNode.NONE,
      int nodeOffset = 0,
      StringOffset assetBasePathOffset = default(StringOffset)) {
    builder.StartTable(5);
    LiveEditItem.AddAssetBasePath(builder, assetBasePathOffset);
    LiveEditItem.AddNode(builder, nodeOffset);
    LiveEditItem.AddMode(builder, mode);
    LiveEditItem.AddPath(builder, pathOffset);
    LiveEditItem.AddNodeType(builder, node_type);
    return LiveEditItem.EndLiveEditItem(builder);
  }

  public static void StartLiveEditItem(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPath(FlatBufferBuilder builder, VectorOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static VectorOffset CreatePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMode(FlatBufferBuilder builder, gfl.gnpt.fb.LiveEditMode mode) { builder.AddUint(1, (uint)mode, 0); }
  public static void AddNodeType(FlatBufferBuilder builder, gfl.gnpt.fb.LiveEditNode nodeType) { builder.AddByte(2, (byte)nodeType, 0); }
  public static void AddNode(FlatBufferBuilder builder, int nodeOffset) { builder.AddOffset(3, nodeOffset, 0); }
  public static void AddAssetBasePath(FlatBufferBuilder builder, StringOffset assetBasePathOffset) { builder.AddOffset(4, assetBasePathOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.LiveEditItem> EndLiveEditItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.LiveEditItem>(o);
  }
  public LiveEditItemT UnPack() {
    var _o = new LiveEditItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LiveEditItemT _o) {
    _o.Path = new List<string>();
    for (var _j = 0; _j < this.PathLength; ++_j) {_o.Path.Add(this.Path(_j));}
    _o.Mode = this.Mode;
    _o.Node = new gfl.gnpt.fb.LiveEditNodeUnion();
    _o.Node.Type = this.NodeType;
    switch (this.NodeType) {
      default: break;
      case gfl.gnpt.fb.LiveEditNode.Workspace:
        _o.Node.Value = this.Node<gfl.gnpt.fb.Workspace>().HasValue ? this.Node<gfl.gnpt.fb.Workspace>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.LiveEditNode.EmitterSet:
        _o.Node.Value = this.Node<gfl.gnpt.fb.EmitterSet>().HasValue ? this.Node<gfl.gnpt.fb.EmitterSet>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.LiveEditNode.Emitter:
        _o.Node.Value = this.Node<gfl.gnpt.fb.Emitter>().HasValue ? this.Node<gfl.gnpt.fb.Emitter>().Value.UnPack() : null;
        break;
      case gfl.gnpt.fb.LiveEditNode.Preview:
        _o.Node.Value = this.Node<gfl.gnpt.fb.Preview>().HasValue ? this.Node<gfl.gnpt.fb.Preview>().Value.UnPack() : null;
        break;
    }
    _o.AssetBasePath = this.AssetBasePath;
  }
  public static Offset<gfl.gnpt.fb.LiveEditItem> Pack(FlatBufferBuilder builder, LiveEditItemT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.LiveEditItem>);
    var _path = default(VectorOffset);
    if (_o.Path != null) {
      var __path = new StringOffset[_o.Path.Count];
      for (var _j = 0; _j < __path.Length; ++_j) { __path[_j] = builder.CreateString(_o.Path[_j]); }
      _path = CreatePathVector(builder, __path);
    }
    var _node_type = _o.Node == null ? gfl.gnpt.fb.LiveEditNode.NONE : _o.Node.Type;
    var _node = _o.Node == null ? 0 : gfl.gnpt.fb.LiveEditNodeUnion.Pack(builder, _o.Node);
    var _assetBasePath = _o.AssetBasePath == null ? default(StringOffset) : builder.CreateString(_o.AssetBasePath);
    return CreateLiveEditItem(
      builder,
      _path,
      _o.Mode,
      _node_type,
      _node,
      _assetBasePath);
  }
};

public class LiveEditItemT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public List<string> Path { get; set; }
  [Newtonsoft.Json.JsonProperty("mode")]
  public gfl.gnpt.fb.LiveEditMode Mode { get; set; }
  [Newtonsoft.Json.JsonProperty("node_type")]
  private gfl.gnpt.fb.LiveEditNode NodeType {
    get {
      return this.Node != null ? this.Node.Type : gfl.gnpt.fb.LiveEditNode.NONE;
    }
    set {
      this.Node = new gfl.gnpt.fb.LiveEditNodeUnion();
      this.Node.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("node")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.gnpt.fb.LiveEditNodeUnion_JsonConverter))]
  public gfl.gnpt.fb.LiveEditNodeUnion Node { get; set; }
  [Newtonsoft.Json.JsonProperty("assetBasePath")]
  public string AssetBasePath { get; set; }

  public LiveEditItemT() {
    this.Path = null;
    this.Mode = gfl.gnpt.fb.LiveEditMode.Reload;
    this.Node = null;
    this.AssetBasePath = null;
  }
}

public struct LiveEdit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LiveEdit GetRootAsLiveEdit(ByteBuffer _bb) { return GetRootAsLiveEdit(_bb, new LiveEdit()); }
  public static LiveEdit GetRootAsLiveEdit(ByteBuffer _bb, LiveEdit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LiveEdit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.LiveEditItem? Items(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.LiveEditItem?)(new gfl.gnpt.fb.LiveEditItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ProjectConfigPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProjectConfigPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetProjectConfigPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetProjectConfigPathArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.gnpt.fb.ProjectConfig? ProjectConfig { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.ProjectConfig?)(new gfl.gnpt.fb.ProjectConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gnpt.fb.LiveEdit> CreateLiveEdit(FlatBufferBuilder builder,
      VectorOffset itemsOffset = default(VectorOffset),
      StringOffset projectConfigPathOffset = default(StringOffset),
      Offset<gfl.gnpt.fb.ProjectConfig> projectConfigOffset = default(Offset<gfl.gnpt.fb.ProjectConfig>)) {
    builder.StartTable(3);
    LiveEdit.AddProjectConfig(builder, projectConfigOffset);
    LiveEdit.AddProjectConfigPath(builder, projectConfigPathOffset);
    LiveEdit.AddItems(builder, itemsOffset);
    return LiveEdit.EndLiveEdit(builder);
  }

  public static void StartLiveEdit(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(0, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.LiveEditItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemsVectorBlock(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.LiveEditItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProjectConfigPath(FlatBufferBuilder builder, StringOffset projectConfigPathOffset) { builder.AddOffset(1, projectConfigPathOffset.Value, 0); }
  public static void AddProjectConfig(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.ProjectConfig> projectConfigOffset) { builder.AddOffset(2, projectConfigOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.LiveEdit> EndLiveEdit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.LiveEdit>(o);
  }
  public LiveEditT UnPack() {
    var _o = new LiveEditT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LiveEditT _o) {
    _o.Items = new List<gfl.gnpt.fb.LiveEditItemT>();
    for (var _j = 0; _j < this.ItemsLength; ++_j) {_o.Items.Add(this.Items(_j).HasValue ? this.Items(_j).Value.UnPack() : null);}
    _o.ProjectConfigPath = this.ProjectConfigPath;
    _o.ProjectConfig = this.ProjectConfig.HasValue ? this.ProjectConfig.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.LiveEdit> Pack(FlatBufferBuilder builder, LiveEditT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.LiveEdit>);
    var _items = default(VectorOffset);
    if (_o.Items != null) {
      var __items = new Offset<gfl.gnpt.fb.LiveEditItem>[_o.Items.Count];
      for (var _j = 0; _j < __items.Length; ++_j) { __items[_j] = gfl.gnpt.fb.LiveEditItem.Pack(builder, _o.Items[_j]); }
      _items = CreateItemsVector(builder, __items);
    }
    var _projectConfigPath = _o.ProjectConfigPath == null ? default(StringOffset) : builder.CreateString(_o.ProjectConfigPath);
    var _projectConfig = _o.ProjectConfig == null ? default(Offset<gfl.gnpt.fb.ProjectConfig>) : gfl.gnpt.fb.ProjectConfig.Pack(builder, _o.ProjectConfig);
    return CreateLiveEdit(
      builder,
      _items,
      _projectConfigPath,
      _projectConfig);
  }
};

public class LiveEditT
{
  [Newtonsoft.Json.JsonProperty("items")]
  public List<gfl.gnpt.fb.LiveEditItemT> Items { get; set; }
  [Newtonsoft.Json.JsonProperty("projectConfigPath")]
  public string ProjectConfigPath { get; set; }
  [Newtonsoft.Json.JsonProperty("projectConfig")]
  public gfl.gnpt.fb.ProjectConfigT ProjectConfig { get; set; }

  public LiveEditT() {
    this.Items = null;
    this.ProjectConfigPath = null;
    this.ProjectConfig = null;
  }
}


}
