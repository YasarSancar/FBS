// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.gnpt.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vector2f : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector2f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<gfl.gnpt.fb.Vector2f> CreateVector2f(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.gnpt.fb.Vector2f>(builder.Offset);
  }
  public Vector2fT UnPack() {
    var _o = new Vector2fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector2fT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<gfl.gnpt.fb.Vector2f> Pack(FlatBufferBuilder builder, Vector2fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector2f>);
    return CreateVector2f(
      builder,
      _o.X,
      _o.Y);
  }
};

public class Vector2fT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }

  public Vector2fT() {
    this.X = 0.0f;
    this.Y = 0.0f;
  }
}

public struct Vector3f : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<gfl.gnpt.fb.Vector3f> CreateVector3f(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.gnpt.fb.Vector3f>(builder.Offset);
  }
  public Vector3fT UnPack() {
    var _o = new Vector3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3fT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<gfl.gnpt.fb.Vector3f> Pack(FlatBufferBuilder builder, Vector3fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector3f>);
    return CreateVector3f(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3fT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vector3fT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct Vector4f : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<gfl.gnpt.fb.Vector4f> CreateVector4f(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.gnpt.fb.Vector4f>(builder.Offset);
  }
  public Vector4fT UnPack() {
    var _o = new Vector4fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector4fT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<gfl.gnpt.fb.Vector4f> Pack(FlatBufferBuilder builder, Vector4fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector4f>);
    return CreateVector4f(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class Vector4fT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public float W { get; set; }

  public Vector4fT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

public struct Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<gfl.gnpt.fb.Quaternion> CreateQuaternion(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.gnpt.fb.Quaternion>(builder.Offset);
  }
  public QuaternionT UnPack() {
    var _o = new QuaternionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuaternionT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<gfl.gnpt.fb.Quaternion> Pack(FlatBufferBuilder builder, QuaternionT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Quaternion>);
    return CreateQuaternion(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class QuaternionT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public float W { get; set; }

  public QuaternionT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

public struct Vector2i : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector2i __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<gfl.gnpt.fb.Vector2i> CreateVector2i(FlatBufferBuilder builder, int X, int Y) {
    builder.Prep(4, 8);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<gfl.gnpt.fb.Vector2i>(builder.Offset);
  }
  public Vector2iT UnPack() {
    var _o = new Vector2iT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector2iT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<gfl.gnpt.fb.Vector2i> Pack(FlatBufferBuilder builder, Vector2iT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector2i>);
    return CreateVector2i(
      builder,
      _o.X,
      _o.Y);
  }
};

public class Vector2iT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public int X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public int Y { get; set; }

  public Vector2iT() {
    this.X = 0;
    this.Y = 0;
  }
}

public struct Vector3i : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3i __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Z { get { return __p.bb.GetInt(__p.bb_pos + 8); } }

  public static Offset<gfl.gnpt.fb.Vector3i> CreateVector3i(FlatBufferBuilder builder, int X, int Y, int Z) {
    builder.Prep(4, 12);
    builder.PutInt(Z);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<gfl.gnpt.fb.Vector3i>(builder.Offset);
  }
  public Vector3iT UnPack() {
    var _o = new Vector3iT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3iT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<gfl.gnpt.fb.Vector3i> Pack(FlatBufferBuilder builder, Vector3iT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector3i>);
    return CreateVector3i(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3iT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public int X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public int Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public int Z { get; set; }

  public Vector3iT() {
    this.X = 0;
    this.Y = 0;
    this.Z = 0;
  }
}

public struct Vector4i : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector4i __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Z { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int W { get { return __p.bb.GetInt(__p.bb_pos + 12); } }

  public static Offset<gfl.gnpt.fb.Vector4i> CreateVector4i(FlatBufferBuilder builder, int X, int Y, int Z, int W) {
    builder.Prep(4, 16);
    builder.PutInt(W);
    builder.PutInt(Z);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<gfl.gnpt.fb.Vector4i>(builder.Offset);
  }
  public Vector4iT UnPack() {
    var _o = new Vector4iT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector4iT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<gfl.gnpt.fb.Vector4i> Pack(FlatBufferBuilder builder, Vector4iT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Vector4i>);
    return CreateVector4i(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class Vector4iT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public int X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public int Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public int Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public int W { get; set; }

  public Vector4iT() {
    this.X = 0;
    this.Y = 0;
    this.Z = 0;
    this.W = 0;
  }
}

public struct Matrix4x3f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Matrix4x3f GetRootAsMatrix4x3f(ByteBuffer _bb) { return GetRootAsMatrix4x3f(_bb, new Matrix4x3f()); }
  public static Matrix4x3f GetRootAsMatrix4x3f(ByteBuffer _bb, Matrix4x3f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Matrix4x3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? AxisX { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? AxisY { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? AxisZ { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? AxisW { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMatrix4x3f(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddAxisX(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> axisXOffset) { builder.AddStruct(0, axisXOffset.Value, 0); }
  public static void AddAxisY(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> axisYOffset) { builder.AddStruct(1, axisYOffset.Value, 0); }
  public static void AddAxisZ(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> axisZOffset) { builder.AddStruct(2, axisZOffset.Value, 0); }
  public static void AddAxisW(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> axisWOffset) { builder.AddStruct(3, axisWOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.Matrix4x3f> EndMatrix4x3f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Matrix4x3f>(o);
  }
  public Matrix4x3fT UnPack() {
    var _o = new Matrix4x3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Matrix4x3fT _o) {
    _o.AxisX = this.AxisX.HasValue ? this.AxisX.Value.UnPack() : null;
    _o.AxisY = this.AxisY.HasValue ? this.AxisY.Value.UnPack() : null;
    _o.AxisZ = this.AxisZ.HasValue ? this.AxisZ.Value.UnPack() : null;
    _o.AxisW = this.AxisW.HasValue ? this.AxisW.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.Matrix4x3f> Pack(FlatBufferBuilder builder, Matrix4x3fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Matrix4x3f>);
    StartMatrix4x3f(builder);
    AddAxisX(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.AxisX));
    AddAxisY(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.AxisY));
    AddAxisZ(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.AxisZ));
    AddAxisW(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.AxisW));
    return EndMatrix4x3f(builder);
  }
};

public class Matrix4x3fT
{
  [Newtonsoft.Json.JsonProperty("axis_x")]
  public gfl.gnpt.fb.Vector3fT AxisX { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_y")]
  public gfl.gnpt.fb.Vector3fT AxisY { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_z")]
  public gfl.gnpt.fb.Vector3fT AxisZ { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_w")]
  public gfl.gnpt.fb.Vector3fT AxisW { get; set; }

  public Matrix4x3fT() {
    this.AxisX = new gfl.gnpt.fb.Vector3fT();
    this.AxisY = new gfl.gnpt.fb.Vector3fT();
    this.AxisZ = new gfl.gnpt.fb.Vector3fT();
    this.AxisW = new gfl.gnpt.fb.Vector3fT();
  }
}

public struct Matrix4x4f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Matrix4x4f GetRootAsMatrix4x4f(ByteBuffer _bb) { return GetRootAsMatrix4x4f(_bb, new Matrix4x4f()); }
  public static Matrix4x4f GetRootAsMatrix4x4f(ByteBuffer _bb, Matrix4x4f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Matrix4x4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector4f? AxisX { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector4f?)(new gfl.gnpt.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector4f? AxisY { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Vector4f?)(new gfl.gnpt.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector4f? AxisZ { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector4f?)(new gfl.gnpt.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector4f? AxisW { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.Vector4f?)(new gfl.gnpt.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMatrix4x4f(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddAxisX(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector4f> axisXOffset) { builder.AddStruct(0, axisXOffset.Value, 0); }
  public static void AddAxisY(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector4f> axisYOffset) { builder.AddStruct(1, axisYOffset.Value, 0); }
  public static void AddAxisZ(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector4f> axisZOffset) { builder.AddStruct(2, axisZOffset.Value, 0); }
  public static void AddAxisW(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector4f> axisWOffset) { builder.AddStruct(3, axisWOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.Matrix4x4f> EndMatrix4x4f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Matrix4x4f>(o);
  }
  public Matrix4x4fT UnPack() {
    var _o = new Matrix4x4fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Matrix4x4fT _o) {
    _o.AxisX = this.AxisX.HasValue ? this.AxisX.Value.UnPack() : null;
    _o.AxisY = this.AxisY.HasValue ? this.AxisY.Value.UnPack() : null;
    _o.AxisZ = this.AxisZ.HasValue ? this.AxisZ.Value.UnPack() : null;
    _o.AxisW = this.AxisW.HasValue ? this.AxisW.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.Matrix4x4f> Pack(FlatBufferBuilder builder, Matrix4x4fT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Matrix4x4f>);
    StartMatrix4x4f(builder);
    AddAxisX(builder, gfl.gnpt.fb.Vector4f.Pack(builder, _o.AxisX));
    AddAxisY(builder, gfl.gnpt.fb.Vector4f.Pack(builder, _o.AxisY));
    AddAxisZ(builder, gfl.gnpt.fb.Vector4f.Pack(builder, _o.AxisZ));
    AddAxisW(builder, gfl.gnpt.fb.Vector4f.Pack(builder, _o.AxisW));
    return EndMatrix4x4f(builder);
  }
};

public class Matrix4x4fT
{
  [Newtonsoft.Json.JsonProperty("axis_x")]
  public gfl.gnpt.fb.Vector4fT AxisX { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_y")]
  public gfl.gnpt.fb.Vector4fT AxisY { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_z")]
  public gfl.gnpt.fb.Vector4fT AxisZ { get; set; }
  [Newtonsoft.Json.JsonProperty("axis_w")]
  public gfl.gnpt.fb.Vector4fT AxisW { get; set; }

  public Matrix4x4fT() {
    this.AxisX = new gfl.gnpt.fb.Vector4fT();
    this.AxisY = new gfl.gnpt.fb.Vector4fT();
    this.AxisZ = new gfl.gnpt.fb.Vector4fT();
    this.AxisW = new gfl.gnpt.fb.Vector4fT();
  }
}

public struct SRT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SRT GetRootAsSRT(ByteBuffer _bb) { return GetRootAsSRT(_bb, new SRT()); }
  public static SRT GetRootAsSRT(ByteBuffer _bb, SRT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Scale { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? Rotate { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? Translate { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartSRT(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddScale(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> scaleOffset) { builder.AddStruct(0, scaleOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> rotateOffset) { builder.AddStruct(1, rotateOffset.Value, 0); }
  public static void AddTranslate(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> translateOffset) { builder.AddStruct(2, translateOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.SRT> EndSRT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.SRT>(o);
  }
  public SRTT UnPack() {
    var _o = new SRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SRTT _o) {
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotate = this.Rotate.HasValue ? this.Rotate.Value.UnPack() : null;
    _o.Translate = this.Translate.HasValue ? this.Translate.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.SRT> Pack(FlatBufferBuilder builder, SRTT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.SRT>);
    StartSRT(builder);
    AddScale(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Scale));
    AddRotate(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Rotate));
    AddTranslate(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Translate));
    return EndSRT(builder);
  }
};

public class SRTT
{
  [Newtonsoft.Json.JsonProperty("scale")]
  public gfl.gnpt.fb.Vector3fT Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotate")]
  public gfl.gnpt.fb.Vector3fT Rotate { get; set; }
  [Newtonsoft.Json.JsonProperty("translate")]
  public gfl.gnpt.fb.Vector3fT Translate { get; set; }

  public SRTT() {
    this.Scale = new gfl.gnpt.fb.Vector3fT();
    this.Rotate = new gfl.gnpt.fb.Vector3fT();
    this.Translate = new gfl.gnpt.fb.Vector3fT();
  }
}

public struct AABB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AABB GetRootAsAABB(ByteBuffer _bb) { return GetRootAsAABB(_bb, new AABB()); }
  public static AABB GetRootAsAABB(ByteBuffer _bb, AABB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AABB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Min { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? Max { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartAABB(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMin(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> minOffset) { builder.AddStruct(0, minOffset.Value, 0); }
  public static void AddMax(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> maxOffset) { builder.AddStruct(1, maxOffset.Value, 0); }
  public static Offset<gfl.gnpt.fb.AABB> EndAABB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.AABB>(o);
  }
  public AABBT UnPack() {
    var _o = new AABBT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AABBT _o) {
    _o.Min = this.Min.HasValue ? this.Min.Value.UnPack() : null;
    _o.Max = this.Max.HasValue ? this.Max.Value.UnPack() : null;
  }
  public static Offset<gfl.gnpt.fb.AABB> Pack(FlatBufferBuilder builder, AABBT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.AABB>);
    StartAABB(builder);
    AddMin(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Min));
    AddMax(builder, gfl.gnpt.fb.Vector3f.Pack(builder, _o.Max));
    return EndAABB(builder);
  }
};

public class AABBT
{
  [Newtonsoft.Json.JsonProperty("min")]
  public gfl.gnpt.fb.Vector3fT Min { get; set; }
  [Newtonsoft.Json.JsonProperty("max")]
  public gfl.gnpt.fb.Vector3fT Max { get; set; }

  public AABBT() {
    this.Min = new gfl.gnpt.fb.Vector3fT();
    this.Max = new gfl.gnpt.fb.Vector3fT();
  }
}

public struct Sphere : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Sphere GetRootAsSphere(ByteBuffer _bb) { return GetRootAsSphere(_bb, new Sphere()); }
  public static Sphere GetRootAsSphere(ByteBuffer _bb, Sphere obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sphere __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gnpt.fb.Vector3f? Center { get { int o = __p.__offset(4); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Radius { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.gnpt.fb.Sphere> CreateSphere(FlatBufferBuilder builder,
      gfl.gnpt.fb.Vector3fT center = null,
      float radius = 0.0f) {
    builder.StartTable(2);
    Sphere.AddRadius(builder, radius);
    Sphere.AddCenter(builder, gfl.gnpt.fb.Vector3f.Pack(builder, center));
    return Sphere.EndSphere(builder);
  }

  public static void StartSphere(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCenter(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> centerOffset) { builder.AddStruct(0, centerOffset.Value, 0); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(1, radius, 0.0f); }
  public static Offset<gfl.gnpt.fb.Sphere> EndSphere(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Sphere>(o);
  }
  public SphereT UnPack() {
    var _o = new SphereT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SphereT _o) {
    _o.Center = this.Center.HasValue ? this.Center.Value.UnPack() : null;
    _o.Radius = this.Radius;
  }
  public static Offset<gfl.gnpt.fb.Sphere> Pack(FlatBufferBuilder builder, SphereT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Sphere>);
    return CreateSphere(
      builder,
      _o.Center,
      _o.Radius);
  }
};

public class SphereT
{
  [Newtonsoft.Json.JsonProperty("center")]
  public gfl.gnpt.fb.Vector3fT Center { get; set; }
  [Newtonsoft.Json.JsonProperty("radius")]
  public float Radius { get; set; }

  public SphereT() {
    this.Center = new gfl.gnpt.fb.Vector3fT();
    this.Radius = 0.0f;
  }
}

public struct TransformNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TransformNode GetRootAsTransformNode(ByteBuffer _bb) { return GetRootAsTransformNode(_bb, new TransformNode()); }
  public static TransformNode GetRootAsTransformNode(ByteBuffer _bb, TransformNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransformNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gnpt.fb.SRT? Transform { get { int o = __p.__offset(6); return o != 0 ? (gfl.gnpt.fb.SRT?)(new gfl.gnpt.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? ScalePivot { get { int o = __p.__offset(8); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gnpt.fb.Vector3f? RotatePivot { get { int o = __p.__offset(10); return o != 0 ? (gfl.gnpt.fb.Vector3f?)(new gfl.gnpt.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int ParentNodeId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public int JointInfoId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public string ParentNodeName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParentNodeNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetParentNodeNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetParentNodeNameArray() { return __p.__vector_as_array<byte>(16); }
  public uint Priority { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<gfl.gnpt.fb.TransformNode> CreateTransformNode(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.gnpt.fb.SRT> transformOffset = default(Offset<gfl.gnpt.fb.SRT>),
      gfl.gnpt.fb.Vector3fT scale_pivot = null,
      gfl.gnpt.fb.Vector3fT rotate_pivot = null,
      int parent_node_id = -1,
      int joint_info_id = -1,
      StringOffset parent_node_nameOffset = default(StringOffset),
      uint priority = 0) {
    builder.StartTable(8);
    TransformNode.AddPriority(builder, priority);
    TransformNode.AddParentNodeName(builder, parent_node_nameOffset);
    TransformNode.AddJointInfoId(builder, joint_info_id);
    TransformNode.AddParentNodeId(builder, parent_node_id);
    TransformNode.AddRotatePivot(builder, gfl.gnpt.fb.Vector3f.Pack(builder, rotate_pivot));
    TransformNode.AddScalePivot(builder, gfl.gnpt.fb.Vector3f.Pack(builder, scale_pivot));
    TransformNode.AddTransform(builder, transformOffset);
    TransformNode.AddName(builder, nameOffset);
    return TransformNode.EndTransformNode(builder);
  }

  public static void StartTransformNode(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.SRT> transformOffset) { builder.AddOffset(1, transformOffset.Value, 0); }
  public static void AddScalePivot(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> scalePivotOffset) { builder.AddStruct(2, scalePivotOffset.Value, 0); }
  public static void AddRotatePivot(FlatBufferBuilder builder, Offset<gfl.gnpt.fb.Vector3f> rotatePivotOffset) { builder.AddStruct(3, rotatePivotOffset.Value, 0); }
  public static void AddParentNodeId(FlatBufferBuilder builder, int parentNodeId) { builder.AddInt(4, parentNodeId, -1); }
  public static void AddJointInfoId(FlatBufferBuilder builder, int jointInfoId) { builder.AddInt(5, jointInfoId, -1); }
  public static void AddParentNodeName(FlatBufferBuilder builder, StringOffset parentNodeNameOffset) { builder.AddOffset(6, parentNodeNameOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, uint priority) { builder.AddUint(7, priority, 0); }
  public static Offset<gfl.gnpt.fb.TransformNode> EndTransformNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.TransformNode>(o);
  }
  public TransformNodeT UnPack() {
    var _o = new TransformNodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TransformNodeT _o) {
    _o.Name = this.Name;
    _o.Transform = this.Transform.HasValue ? this.Transform.Value.UnPack() : null;
    _o.ScalePivot = this.ScalePivot.HasValue ? this.ScalePivot.Value.UnPack() : null;
    _o.RotatePivot = this.RotatePivot.HasValue ? this.RotatePivot.Value.UnPack() : null;
    _o.ParentNodeId = this.ParentNodeId;
    _o.JointInfoId = this.JointInfoId;
    _o.ParentNodeName = this.ParentNodeName;
    _o.Priority = this.Priority;
  }
  public static Offset<gfl.gnpt.fb.TransformNode> Pack(FlatBufferBuilder builder, TransformNodeT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.TransformNode>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _transform = _o.Transform == null ? default(Offset<gfl.gnpt.fb.SRT>) : gfl.gnpt.fb.SRT.Pack(builder, _o.Transform);
    var _parent_node_name = _o.ParentNodeName == null ? default(StringOffset) : builder.CreateString(_o.ParentNodeName);
    return CreateTransformNode(
      builder,
      _name,
      _transform,
      _o.ScalePivot,
      _o.RotatePivot,
      _o.ParentNodeId,
      _o.JointInfoId,
      _parent_node_name,
      _o.Priority);
  }
};

public class TransformNodeT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public gfl.gnpt.fb.SRTT Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("scale_pivot")]
  public gfl.gnpt.fb.Vector3fT ScalePivot { get; set; }
  [Newtonsoft.Json.JsonProperty("rotate_pivot")]
  public gfl.gnpt.fb.Vector3fT RotatePivot { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_node_id")]
  public int ParentNodeId { get; set; }
  [Newtonsoft.Json.JsonProperty("joint_info_id")]
  public int JointInfoId { get; set; }
  [Newtonsoft.Json.JsonProperty("parent_node_name")]
  public string ParentNodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public uint Priority { get; set; }

  public TransformNodeT() {
    this.Name = null;
    this.Transform = null;
    this.ScalePivot = new gfl.gnpt.fb.Vector3fT();
    this.RotatePivot = new gfl.gnpt.fb.Vector3fT();
    this.ParentNodeId = -1;
    this.JointInfoId = -1;
    this.ParentNodeName = null;
    this.Priority = 0;
  }
}

public struct Blob : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blob GetRootAsBlob(ByteBuffer _bb) { return GetRootAsBlob(_bb, new Blob()); }
  public static Blob GetRootAsBlob(ByteBuffer _bb, Blob obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blob __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.gnpt.fb.Blob> CreateBlob(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Blob.AddData(builder, dataOffset);
    return Blob.EndBlob(builder);
  }

  public static void StartBlob(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.gnpt.fb.Blob> EndBlob(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gnpt.fb.Blob>(o);
  }
  public BlobT UnPack() {
    var _o = new BlobT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlobT _o) {
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.gnpt.fb.Blob> Pack(FlatBufferBuilder builder, BlobT _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.Blob>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateBlob(
      builder,
      _data);
  }
};

public class BlobT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public BlobT() {
    this.Data = null;
  }
}

public struct ValueBool16 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ValueBool16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Bit(int j) { return 0!=__p.bb.Get(__p.bb_pos + 0 + j * 1); }

  public static Offset<gfl.gnpt.fb.ValueBool16> CreateValueBool16(FlatBufferBuilder builder, bool[] Bit) {
    builder.Prep(1, 16);
    for (int _idx0 = 16; _idx0 > 0; _idx0--) {
      builder.PutBool(Bit[_idx0-1]);
    }
    return new Offset<gfl.gnpt.fb.ValueBool16>(builder.Offset);
  }
  public ValueBool16T UnPack() {
    var _o = new ValueBool16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ValueBool16T _o) {
    _o.Bit = new bool[16];
    for (var _j = 0; _j < 16; ++_j) { _o.Bit[_j] = this.Bit(_j); }
  }
  public static Offset<gfl.gnpt.fb.ValueBool16> Pack(FlatBufferBuilder builder, ValueBool16T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ValueBool16>);
    var _bit = _o.Bit;
    return CreateValueBool16(
      builder,
      _bit);
  }
};

public class ValueBool16T
{
  [Newtonsoft.Json.JsonProperty("bit")]
  public bool[] Bit { get; set; }

  public ValueBool16T() {
    this.Bit = new bool[16];
  }
}

public struct ValueInt16 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ValueInt16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value(int j) { return __p.bb.GetInt(__p.bb_pos + 0 + j * 4); }

  public static Offset<gfl.gnpt.fb.ValueInt16> CreateValueInt16(FlatBufferBuilder builder, int[] Value) {
    builder.Prep(4, 64);
    for (int _idx0 = 16; _idx0 > 0; _idx0--) {
      builder.PutInt(Value[_idx0-1]);
    }
    return new Offset<gfl.gnpt.fb.ValueInt16>(builder.Offset);
  }
  public ValueInt16T UnPack() {
    var _o = new ValueInt16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ValueInt16T _o) {
    _o.Value = new int[16];
    for (var _j = 0; _j < 16; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<gfl.gnpt.fb.ValueInt16> Pack(FlatBufferBuilder builder, ValueInt16T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ValueInt16>);
    var _value = _o.Value;
    return CreateValueInt16(
      builder,
      _value);
  }
};

public class ValueInt16T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int[] Value { get; set; }

  public ValueInt16T() {
    this.Value = new int[16];
  }
}

public struct ValueFloat4 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ValueFloat4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value(int j) { return __p.bb.GetFloat(__p.bb_pos + 0 + j * 4); }

  public static Offset<gfl.gnpt.fb.ValueFloat4> CreateValueFloat4(FlatBufferBuilder builder, float[] Value) {
    builder.Prep(4, 16);
    for (int _idx0 = 4; _idx0 > 0; _idx0--) {
      builder.PutFloat(Value[_idx0-1]);
    }
    return new Offset<gfl.gnpt.fb.ValueFloat4>(builder.Offset);
  }
  public ValueFloat4T UnPack() {
    var _o = new ValueFloat4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ValueFloat4T _o) {
    _o.Value = new float[4];
    for (var _j = 0; _j < 4; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<gfl.gnpt.fb.ValueFloat4> Pack(FlatBufferBuilder builder, ValueFloat4T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ValueFloat4>);
    var _value = _o.Value;
    return CreateValueFloat4(
      builder,
      _value);
  }
};

public class ValueFloat4T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float[] Value { get; set; }

  public ValueFloat4T() {
    this.Value = new float[4];
  }
}

public struct ValueFloat16 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ValueFloat16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value(int j) { return __p.bb.GetFloat(__p.bb_pos + 0 + j * 4); }

  public static Offset<gfl.gnpt.fb.ValueFloat16> CreateValueFloat16(FlatBufferBuilder builder, float[] Value) {
    builder.Prep(4, 64);
    for (int _idx0 = 16; _idx0 > 0; _idx0--) {
      builder.PutFloat(Value[_idx0-1]);
    }
    return new Offset<gfl.gnpt.fb.ValueFloat16>(builder.Offset);
  }
  public ValueFloat16T UnPack() {
    var _o = new ValueFloat16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ValueFloat16T _o) {
    _o.Value = new float[16];
    for (var _j = 0; _j < 16; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<gfl.gnpt.fb.ValueFloat16> Pack(FlatBufferBuilder builder, ValueFloat16T _o) {
    if (_o == null) return default(Offset<gfl.gnpt.fb.ValueFloat16>);
    var _value = _o.Value;
    return CreateValueFloat16(
      builder,
      _value);
  }
};

public class ValueFloat16T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float[] Value { get; set; }

  public ValueFloat16T() {
    this.Value = new float[16];
  }
}


}
