// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.CharacterCreate.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CCPreviewAttachData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCPreviewAttachData GetRootAsCCPreviewAttachData(ByteBuffer _bb) { return GetRootAsCCPreviewAttachData(_bb, new CCPreviewAttachData()); }
  public static CCPreviewAttachData GetRootAsCCPreviewAttachData(ByteBuffer _bb, CCPreviewAttachData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCPreviewAttachData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrmdlFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmdlFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrmdlFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrmdlFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string JointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool InheritedScale { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData> CreateCCPreviewAttachData(FlatBufferBuilder builder,
      StringOffset trmdlFilePathOffset = default(StringOffset),
      StringOffset jointNameOffset = default(StringOffset),
      bool inheritedScale = false) {
    builder.StartTable(3);
    CCPreviewAttachData.AddJointName(builder, jointNameOffset);
    CCPreviewAttachData.AddTrmdlFilePath(builder, trmdlFilePathOffset);
    CCPreviewAttachData.AddInheritedScale(builder, inheritedScale);
    return CCPreviewAttachData.EndCCPreviewAttachData(builder);
  }

  public static void StartCCPreviewAttachData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTrmdlFilePath(FlatBufferBuilder builder, StringOffset trmdlFilePathOffset) { builder.AddOffset(0, trmdlFilePathOffset.Value, 0); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(1, jointNameOffset.Value, 0); }
  public static void AddInheritedScale(FlatBufferBuilder builder, bool inheritedScale) { builder.AddBool(2, inheritedScale, false); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData> EndCCPreviewAttachData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData>(o);
  }
  public CCPreviewAttachDataT UnPack() {
    var _o = new CCPreviewAttachDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCPreviewAttachDataT _o) {
    _o.TrmdlFilePath = this.TrmdlFilePath;
    _o.JointName = this.JointName;
    _o.InheritedScale = this.InheritedScale;
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData> Pack(FlatBufferBuilder builder, CCPreviewAttachDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData>);
    var _trmdlFilePath = _o.TrmdlFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmdlFilePath);
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateCCPreviewAttachData(
      builder,
      _trmdlFilePath,
      _jointName,
      _o.InheritedScale);
  }
};

public class CCPreviewAttachDataT
{
  [Newtonsoft.Json.JsonProperty("trmdlFilePath")]
  public string TrmdlFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }
  [Newtonsoft.Json.JsonProperty("inheritedScale")]
  public bool InheritedScale { get; set; }

  public CCPreviewAttachDataT() {
    this.TrmdlFilePath = null;
    this.JointName = null;
    this.InheritedScale = false;
  }
}

public struct CCTypeParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCTypeParameter GetRootAsCCTypeParameter(ByteBuffer _bb) { return GetRootAsCCTypeParameter(_bb, new CCTypeParameter()); }
  public static CCTypeParameter GetRootAsCCTypeParameter(ByteBuffer _bb, CCTypeParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCTypeParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter> CreateCCTypeParameter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int value = 0) {
    builder.StartTable(2);
    CCTypeParameter.AddValue(builder, value);
    CCTypeParameter.AddName(builder, nameOffset);
    return CCTypeParameter.EndCCTypeParameter(builder);
  }

  public static void StartCCTypeParameter(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 0); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter> EndCCTypeParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter>(o);
  }
  public CCTypeParameterT UnPack() {
    var _o = new CCTypeParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCTypeParameterT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter> Pack(FlatBufferBuilder builder, CCTypeParameterT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCCTypeParameter(
      builder,
      _name,
      _o.Value);
  }
};

public class CCTypeParameterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public CCTypeParameterT() {
    this.Name = null;
    this.Value = 0;
  }
}

public struct CCPreviewData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCPreviewData GetRootAsCCPreviewData(ByteBuffer _bb) { return GetRootAsCCPreviewData(_bb, new CCPreviewData()); }
  public static CCPreviewData GetRootAsCCPreviewData(ByteBuffer _bb, CCPreviewData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCPreviewData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceIdArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.cc.fb.CCData? Ccdata { get { int o = __p.__offset(6); return o != 0 ? (gfl.cc.fb.CCData?)(new gfl.cc.fb.CCData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData? AttachDataList(int j) { int o = __p.__offset(8); return o != 0 ? (GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData?)(new GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttachDataListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter? TypeParameterList(int j) { int o = __p.__offset(10); return o != 0 ? (GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter?)(new GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TypeParameterListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData> CreateCCPreviewData(FlatBufferBuilder builder,
      StringOffset instanceIdOffset = default(StringOffset),
      Offset<gfl.cc.fb.CCData> ccdataOffset = default(Offset<gfl.cc.fb.CCData>),
      VectorOffset attachDataListOffset = default(VectorOffset),
      VectorOffset typeParameterListOffset = default(VectorOffset)) {
    builder.StartTable(4);
    CCPreviewData.AddTypeParameterList(builder, typeParameterListOffset);
    CCPreviewData.AddAttachDataList(builder, attachDataListOffset);
    CCPreviewData.AddCcdata(builder, ccdataOffset);
    CCPreviewData.AddInstanceId(builder, instanceIdOffset);
    return CCPreviewData.EndCCPreviewData(builder);
  }

  public static void StartCCPreviewData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddInstanceId(FlatBufferBuilder builder, StringOffset instanceIdOffset) { builder.AddOffset(0, instanceIdOffset.Value, 0); }
  public static void AddCcdata(FlatBufferBuilder builder, Offset<gfl.cc.fb.CCData> ccdataOffset) { builder.AddOffset(1, ccdataOffset.Value, 0); }
  public static void AddAttachDataList(FlatBufferBuilder builder, VectorOffset attachDataListOffset) { builder.AddOffset(2, attachDataListOffset.Value, 0); }
  public static VectorOffset CreateAttachDataListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttachDataListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttachDataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTypeParameterList(FlatBufferBuilder builder, VectorOffset typeParameterListOffset) { builder.AddOffset(3, typeParameterListOffset.Value, 0); }
  public static VectorOffset CreateTypeParameterListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTypeParameterListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTypeParameterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData> EndCCPreviewData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData>(o);
  }
  public static void FinishCCPreviewDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCCPreviewDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CCPreviewDataT UnPack() {
    var _o = new CCPreviewDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCPreviewDataT _o) {
    _o.InstanceId = this.InstanceId;
    _o.Ccdata = this.Ccdata.HasValue ? this.Ccdata.Value.UnPack() : null;
    _o.AttachDataList = new List<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachDataT>();
    for (var _j = 0; _j < this.AttachDataListLength; ++_j) {_o.AttachDataList.Add(this.AttachDataList(_j).HasValue ? this.AttachDataList(_j).Value.UnPack() : null);}
    _o.TypeParameterList = new List<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameterT>();
    for (var _j = 0; _j < this.TypeParameterListLength; ++_j) {_o.TypeParameterList.Add(this.TypeParameterList(_j).HasValue ? this.TypeParameterList(_j).Value.UnPack() : null);}
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData> Pack(FlatBufferBuilder builder, CCPreviewDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewData>);
    var _instanceId = _o.InstanceId == null ? default(StringOffset) : builder.CreateString(_o.InstanceId);
    var _ccdata = _o.Ccdata == null ? default(Offset<gfl.cc.fb.CCData>) : gfl.cc.fb.CCData.Pack(builder, _o.Ccdata);
    var _attachDataList = default(VectorOffset);
    if (_o.AttachDataList != null) {
      var __attachDataList = new Offset<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData>[_o.AttachDataList.Count];
      for (var _j = 0; _j < __attachDataList.Length; ++_j) { __attachDataList[_j] = GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachData.Pack(builder, _o.AttachDataList[_j]); }
      _attachDataList = CreateAttachDataListVector(builder, __attachDataList);
    }
    var _typeParameterList = default(VectorOffset);
    if (_o.TypeParameterList != null) {
      var __typeParameterList = new Offset<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter>[_o.TypeParameterList.Count];
      for (var _j = 0; _j < __typeParameterList.Length; ++_j) { __typeParameterList[_j] = GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameter.Pack(builder, _o.TypeParameterList[_j]); }
      _typeParameterList = CreateTypeParameterListVector(builder, __typeParameterList);
    }
    return CreateCCPreviewData(
      builder,
      _instanceId,
      _ccdata,
      _attachDataList,
      _typeParameterList);
  }
};

public class CCPreviewDataT
{
  [Newtonsoft.Json.JsonProperty("instanceId")]
  public string InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("ccdata")]
  public gfl.cc.fb.CCDataT Ccdata { get; set; }
  [Newtonsoft.Json.JsonProperty("attachDataList")]
  public List<GenericEditor.Plugin.CharacterCreate.FB.CCPreviewAttachDataT> AttachDataList { get; set; }
  [Newtonsoft.Json.JsonProperty("typeParameterList")]
  public List<GenericEditor.Plugin.CharacterCreate.FB.CCTypeParameterT> TypeParameterList { get; set; }

  public CCPreviewDataT() {
    this.InstanceId = null;
    this.Ccdata = null;
    this.AttachDataList = null;
    this.TypeParameterList = null;
  }

  public static CCPreviewDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CCPreviewDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CCPreviewDataT DeserializeFromBinary(byte[] fbBuffer) {
    return CCPreviewData.GetRootAsCCPreviewData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CCPreviewData.FinishCCPreviewDataBuffer(fbb, CCPreviewData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
