// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.CharacterCreate.ToViewer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MessageType : byte
{
  NONE = 0,
  ReceiveAllAnimEditorMessages = 1,
};

public class MessageTypeUnion {
  public MessageType Type { get; set; }
  public object Value { get; set; }

  public MessageTypeUnion() {
    this.Type = MessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessagesT AsReceiveAllAnimEditorMessages() { return this.As<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessagesT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MessageType.ReceiveAllAnimEditorMessages: return GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages.Pack(builder, _o.AsReceiveAllAnimEditorMessages()).Value;
    }
  }
}

public class MessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<MessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MessageTypeUnion, serializer);
    }
  }
  public MessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MessageType.ReceiveAllAnimEditorMessages: _o.Value = serializer.Deserialize<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessagesT>(reader); break;
    }
    return _o;
  }
}

public struct ReceiveAllAnimEditorMessages : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ReceiveAllAnimEditorMessages GetRootAsReceiveAllAnimEditorMessages(ByteBuffer _bb) { return GetRootAsReceiveAllAnimEditorMessages(_bb, new ReceiveAllAnimEditorMessages()); }
  public static ReceiveAllAnimEditorMessages GetRootAsReceiveAllAnimEditorMessages(ByteBuffer _bb, ReceiveAllAnimEditorMessages obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReceiveAllAnimEditorMessages __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enable { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages> CreateReceiveAllAnimEditorMessages(FlatBufferBuilder builder,
      bool enable = false) {
    builder.StartTable(1);
    ReceiveAllAnimEditorMessages.AddEnable(builder, enable);
    return ReceiveAllAnimEditorMessages.EndReceiveAllAnimEditorMessages(builder);
  }

  public static void StartReceiveAllAnimEditorMessages(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(0, enable, false); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages> EndReceiveAllAnimEditorMessages(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages>(o);
  }
  public ReceiveAllAnimEditorMessagesT UnPack() {
    var _o = new ReceiveAllAnimEditorMessagesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReceiveAllAnimEditorMessagesT _o) {
    _o.Enable = this.Enable;
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages> Pack(FlatBufferBuilder builder, ReceiveAllAnimEditorMessagesT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages>);
    return CreateReceiveAllAnimEditorMessages(
      builder,
      _o.Enable);
  }
};

public class ReceiveAllAnimEditorMessagesT
{
  [Newtonsoft.Json.JsonProperty("enable")]
  public bool Enable { get; set; }

  public ReceiveAllAnimEditorMessagesT() {
    this.Enable = false;
  }
}

public struct CharaCreateEditorToViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharaCreateEditorToViewer GetRootAsCharaCreateEditorToViewer(ByteBuffer _bb) { return GetRootAsCharaCreateEditorToViewer(_bb, new CharaCreateEditorToViewer()); }
  public static CharaCreateEditorToViewer GetRootAsCharaCreateEditorToViewer(ByteBuffer _bb, CharaCreateEditorToViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharaCreateEditorToViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType)__p.bb.Get(o + __p.bb_pos) : GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer> CreateCharaCreateEditorToViewer(FlatBufferBuilder builder,
      GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType message_type = GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    CharaCreateEditorToViewer.AddMessage(builder, messageOffset);
    CharaCreateEditorToViewer.AddMessageType(builder, message_type);
    return CharaCreateEditorToViewer.EndCharaCreateEditorToViewer(builder);
  }

  public static void StartCharaCreateEditorToViewer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer> EndCharaCreateEditorToViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer>(o);
  }
  public static void FinishCharaCreateEditorToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCharaCreateEditorToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CharaCreateEditorToViewerT UnPack() {
    var _o = new CharaCreateEditorToViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharaCreateEditorToViewerT _o) {
    _o.Message = new GenericEditor.Plugin.CharacterCreate.ToViewer.MessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType.ReceiveAllAnimEditorMessages:
        _o.Message.Value = this.Message<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages>().HasValue ? this.Message<GenericEditor.Plugin.CharacterCreate.ToViewer.ReceiveAllAnimEditorMessages>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer> Pack(FlatBufferBuilder builder, CharaCreateEditorToViewerT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.ToViewer.CharaCreateEditorToViewer>);
    var _message_type = _o.Message == null ? GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : GenericEditor.Plugin.CharacterCreate.ToViewer.MessageTypeUnion.Pack(builder, _o.Message);
    return CreateCharaCreateEditorToViewer(
      builder,
      _message_type,
      _message);
  }
};

public class CharaCreateEditorToViewerT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : GenericEditor.Plugin.CharacterCreate.ToViewer.MessageType.NONE;
    }
    set {
      this.Message = new GenericEditor.Plugin.CharacterCreate.ToViewer.MessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(GenericEditor.Plugin.CharacterCreate.ToViewer.MessageTypeUnion_JsonConverter))]
  public GenericEditor.Plugin.CharacterCreate.ToViewer.MessageTypeUnion Message { get; set; }

  public CharaCreateEditorToViewerT() {
    this.Message = null;
  }

  public static CharaCreateEditorToViewerT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CharaCreateEditorToViewerT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CharaCreateEditorToViewerT DeserializeFromBinary(byte[] fbBuffer) {
    return CharaCreateEditorToViewer.GetRootAsCharaCreateEditorToViewer(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CharaCreateEditorToViewer.FinishCharaCreateEditorToViewerBuffer(fbb, CharaCreateEditorToViewer.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
