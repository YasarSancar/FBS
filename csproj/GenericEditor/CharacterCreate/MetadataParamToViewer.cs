// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.CharacterCreate.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MetadataParamToViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MetadataParamToViewer GetRootAsMetadataParamToViewer(ByteBuffer _bb) { return GetRootAsMetadataParamToViewer(_bb, new MetadataParamToViewer()); }
  public static MetadataParamToViewer GetRootAsMetadataParamToViewer(ByteBuffer _bb, MetadataParamToViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MetadataParamToViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceIdArray() { return __p.__vector_as_array<byte>(4); }
  public string PartsName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPartsNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPartsNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPartsNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ParameterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(8); }
  public int Parameter { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer> CreateMetadataParamToViewer(FlatBufferBuilder builder,
      StringOffset instanceIdOffset = default(StringOffset),
      StringOffset partsNameOffset = default(StringOffset),
      StringOffset parameterNameOffset = default(StringOffset),
      int parameter = 0) {
    builder.StartTable(4);
    MetadataParamToViewer.AddParameter(builder, parameter);
    MetadataParamToViewer.AddParameterName(builder, parameterNameOffset);
    MetadataParamToViewer.AddPartsName(builder, partsNameOffset);
    MetadataParamToViewer.AddInstanceId(builder, instanceIdOffset);
    return MetadataParamToViewer.EndMetadataParamToViewer(builder);
  }

  public static void StartMetadataParamToViewer(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddInstanceId(FlatBufferBuilder builder, StringOffset instanceIdOffset) { builder.AddOffset(0, instanceIdOffset.Value, 0); }
  public static void AddPartsName(FlatBufferBuilder builder, StringOffset partsNameOffset) { builder.AddOffset(1, partsNameOffset.Value, 0); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(2, parameterNameOffset.Value, 0); }
  public static void AddParameter(FlatBufferBuilder builder, int parameter) { builder.AddInt(3, parameter, 0); }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer> EndMetadataParamToViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer>(o);
  }
  public static void FinishMetadataParamToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMetadataParamToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MetadataParamToViewerT UnPack() {
    var _o = new MetadataParamToViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MetadataParamToViewerT _o) {
    _o.InstanceId = this.InstanceId;
    _o.PartsName = this.PartsName;
    _o.ParameterName = this.ParameterName;
    _o.Parameter = this.Parameter;
  }
  public static Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer> Pack(FlatBufferBuilder builder, MetadataParamToViewerT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.CharacterCreate.FB.MetadataParamToViewer>);
    var _instanceId = _o.InstanceId == null ? default(StringOffset) : builder.CreateString(_o.InstanceId);
    var _partsName = _o.PartsName == null ? default(StringOffset) : builder.CreateString(_o.PartsName);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    return CreateMetadataParamToViewer(
      builder,
      _instanceId,
      _partsName,
      _parameterName,
      _o.Parameter);
  }
};

public class MetadataParamToViewerT
{
  [Newtonsoft.Json.JsonProperty("instanceId")]
  public string InstanceId { get; set; }
  [Newtonsoft.Json.JsonProperty("partsName")]
  public string PartsName { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("parameter")]
  public int Parameter { get; set; }

  public MetadataParamToViewerT() {
    this.InstanceId = null;
    this.PartsName = null;
    this.ParameterName = null;
    this.Parameter = 0;
  }

  public static MetadataParamToViewerT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataParamToViewerT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MetadataParamToViewerT DeserializeFromBinary(byte[] fbBuffer) {
    return MetadataParamToViewer.GetRootAsMetadataParamToViewer(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MetadataParamToViewer.FinishMetadataParamToViewerBuffer(fbb, MetadataParamToViewer.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
