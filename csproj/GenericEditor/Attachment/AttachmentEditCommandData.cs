// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Attachment
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CurveInterpType : uint
{
  Constant = 0,
  Linear = 1,
  TangentAuto = 2,
  TangentBreak = 3,
  TangentUser = 4,
};

public struct RuntimeCurveKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveKey GetRootAsRuntimeCurveKey(ByteBuffer _bb) { return GetRootAsRuntimeCurveKey(_bb, new RuntimeCurveKey()); }
  public static RuntimeCurveKey GetRootAsRuntimeCurveKey(ByteBuffer _bb, RuntimeCurveKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentLeft { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentRight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GenericEditor.Plugin.Attachment.CurveInterpType InterpType { get { int o = __p.__offset(12); return o != 0 ? (GenericEditor.Plugin.Attachment.CurveInterpType)__p.bb.GetUint(o + __p.bb_pos) : GenericEditor.Plugin.Attachment.CurveInterpType.Constant; } }

  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey> CreateRuntimeCurveKey(FlatBufferBuilder builder,
      float time = 0.0f,
      float value = 0.0f,
      float tangentLeft = 0.0f,
      float tangentRight = 0.0f,
      GenericEditor.Plugin.Attachment.CurveInterpType interpType = GenericEditor.Plugin.Attachment.CurveInterpType.Constant) {
    builder.StartTable(5);
    RuntimeCurveKey.AddInterpType(builder, interpType);
    RuntimeCurveKey.AddTangentRight(builder, tangentRight);
    RuntimeCurveKey.AddTangentLeft(builder, tangentLeft);
    RuntimeCurveKey.AddValue(builder, value);
    RuntimeCurveKey.AddTime(builder, time);
    return RuntimeCurveKey.EndRuntimeCurveKey(builder);
  }

  public static void StartRuntimeCurveKey(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(0, time, 0.0f); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static void AddTangentLeft(FlatBufferBuilder builder, float tangentLeft) { builder.AddFloat(2, tangentLeft, 0.0f); }
  public static void AddTangentRight(FlatBufferBuilder builder, float tangentRight) { builder.AddFloat(3, tangentRight, 0.0f); }
  public static void AddInterpType(FlatBufferBuilder builder, GenericEditor.Plugin.Attachment.CurveInterpType interpType) { builder.AddUint(4, (uint)interpType, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey> EndRuntimeCurveKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey>(o);
  }
  public RuntimeCurveKeyT UnPack() {
    var _o = new RuntimeCurveKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveKeyT _o) {
    _o.Time = this.Time;
    _o.Value = this.Value;
    _o.TangentLeft = this.TangentLeft;
    _o.TangentRight = this.TangentRight;
    _o.InterpType = this.InterpType;
  }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey> Pack(FlatBufferBuilder builder, RuntimeCurveKeyT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey>);
    return CreateRuntimeCurveKey(
      builder,
      _o.Time,
      _o.Value,
      _o.TangentLeft,
      _o.TangentRight,
      _o.InterpType);
  }
};

public class RuntimeCurveKeyT
{
  [Newtonsoft.Json.JsonProperty("time")]
  public float Time { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentLeft")]
  public float TangentLeft { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentRight")]
  public float TangentRight { get; set; }
  [Newtonsoft.Json.JsonProperty("interpType")]
  public GenericEditor.Plugin.Attachment.CurveInterpType InterpType { get; set; }

  public RuntimeCurveKeyT() {
    this.Time = 0.0f;
    this.Value = 0.0f;
    this.TangentLeft = 0.0f;
    this.TangentRight = 0.0f;
    this.InterpType = GenericEditor.Plugin.Attachment.CurveInterpType.Constant;
  }
}

public struct RuntimeCurveFloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveFloat GetRootAsRuntimeCurveFloat(ByteBuffer _bb) { return GetRootAsRuntimeCurveFloat(_bb, new RuntimeCurveFloat()); }
  public static RuntimeCurveFloat GetRootAsRuntimeCurveFloat(ByteBuffer _bb, RuntimeCurveFloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.Attachment.RuntimeCurveKey? Keys(int j) { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveKey?)(new GenericEditor.Plugin.Attachment.RuntimeCurveKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeysLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> CreateRuntimeCurveFloat(FlatBufferBuilder builder,
      VectorOffset keysOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RuntimeCurveFloat.AddKeys(builder, keysOffset);
    return RuntimeCurveFloat.EndRuntimeCurveFloat(builder);
  }

  public static void StartRuntimeCurveFloat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(0, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> EndRuntimeCurveFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>(o);
  }
  public RuntimeCurveFloatT UnPack() {
    var _o = new RuntimeCurveFloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveFloatT _o) {
    _o.Keys = new List<GenericEditor.Plugin.Attachment.RuntimeCurveKeyT>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j).HasValue ? this.Keys(_j).Value.UnPack() : null);}
  }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> Pack(FlatBufferBuilder builder, RuntimeCurveFloatT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new Offset<GenericEditor.Plugin.Attachment.RuntimeCurveKey>[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = GenericEditor.Plugin.Attachment.RuntimeCurveKey.Pack(builder, _o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    return CreateRuntimeCurveFloat(
      builder,
      _keys);
  }
};

public class RuntimeCurveFloatT
{
  [Newtonsoft.Json.JsonProperty("keys")]
  public List<GenericEditor.Plugin.Attachment.RuntimeCurveKeyT> Keys { get; set; }

  public RuntimeCurveFloatT() {
    this.Keys = null;
  }
}

public struct RuntimeCurveFloat4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveFloat4 GetRootAsRuntimeCurveFloat4(ByteBuffer _bb) { return GetRootAsRuntimeCurveFloat4(_bb, new RuntimeCurveFloat4()); }
  public static RuntimeCurveFloat4 GetRootAsRuntimeCurveFloat4(ByteBuffer _bb, RuntimeCurveFloat4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveFloat4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat? X { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat? Y { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat? Z { get { int o = __p.__offset(8); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat? W { get { int o = __p.__offset(10); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4> CreateRuntimeCurveFloat4(FlatBufferBuilder builder,
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> xOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>),
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> yOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>),
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> zOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>),
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> wOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>)) {
    builder.StartTable(4);
    RuntimeCurveFloat4.AddW(builder, wOffset);
    RuntimeCurveFloat4.AddZ(builder, zOffset);
    RuntimeCurveFloat4.AddY(builder, yOffset);
    RuntimeCurveFloat4.AddX(builder, xOffset);
    return RuntimeCurveFloat4.EndRuntimeCurveFloat4(builder);
  }

  public static void StartRuntimeCurveFloat4(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddX(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> xOffset) { builder.AddOffset(0, xOffset.Value, 0); }
  public static void AddY(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> yOffset) { builder.AddOffset(1, yOffset.Value, 0); }
  public static void AddZ(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static void AddW(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> wOffset) { builder.AddOffset(3, wOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4> EndRuntimeCurveFloat4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4>(o);
  }
  public RuntimeCurveFloat4T UnPack() {
    var _o = new RuntimeCurveFloat4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveFloat4T _o) {
    _o.X = this.X.HasValue ? this.X.Value.UnPack() : null;
    _o.Y = this.Y.HasValue ? this.Y.Value.UnPack() : null;
    _o.Z = this.Z.HasValue ? this.Z.Value.UnPack() : null;
    _o.W = this.W.HasValue ? this.W.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4> Pack(FlatBufferBuilder builder, RuntimeCurveFloat4T _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4>);
    var _x = _o.X == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat.Pack(builder, _o.X);
    var _y = _o.Y == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat.Pack(builder, _o.Y);
    var _z = _o.Z == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat.Pack(builder, _o.Z);
    var _w = _o.W == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat.Pack(builder, _o.W);
    return CreateRuntimeCurveFloat4(
      builder,
      _x,
      _y,
      _z,
      _w);
  }
};

public class RuntimeCurveFloat4T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloatT X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloatT Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloatT Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloatT W { get; set; }

  public RuntimeCurveFloat4T() {
    this.X = null;
    this.Y = null;
    this.Z = null;
    this.W = null;
  }
}

public struct LightFloatParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightFloatParam GetRootAsLightFloatParam(ByteBuffer _bb) { return GetRootAsLightFloatParam(_bb, new LightFloatParam()); }
  public static LightFloatParam GetRootAsLightFloatParam(ByteBuffer _bb, LightFloatParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightFloatParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GenericEditor.Plugin.Attachment.LightFloatParam> CreateLightFloatParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      float value = 0.0f) {
    builder.StartTable(2);
    LightFloatParam.AddValue(builder, value);
    LightFloatParam.AddName(builder, nameOffset);
    return LightFloatParam.EndLightFloatParam(builder);
  }

  public static void StartLightFloatParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static Offset<GenericEditor.Plugin.Attachment.LightFloatParam> EndLightFloatParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightFloatParam>(o);
  }
  public LightFloatParamT UnPack() {
    var _o = new LightFloatParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightFloatParamT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightFloatParam> Pack(FlatBufferBuilder builder, LightFloatParamT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightFloatParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateLightFloatParam(
      builder,
      _name,
      _o.Value);
  }
};

public class LightFloatParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public LightFloatParamT() {
    this.Name = null;
    this.Value = 0.0f;
  }
}

public struct LightVector4fParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightVector4fParam GetRootAsLightVector4fParam(ByteBuffer _bb) { return GetRootAsLightVector4fParam(_bb, new LightVector4fParam()); }
  public static LightVector4fParam GetRootAsLightVector4fParam(ByteBuffer _bb, LightVector4fParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightVector4fParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector4f? Value { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.LightVector4fParam> CreateLightVector4fParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.math.fb.Vector4fT value = null) {
    builder.StartTable(2);
    LightVector4fParam.AddValue(builder, gfl.math.fb.Vector4f.Pack(builder, value));
    LightVector4fParam.AddName(builder, nameOffset);
    return LightVector4fParam.EndLightVector4fParam(builder);
  }

  public static void StartLightVector4fParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> valueOffset) { builder.AddStruct(1, valueOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.LightVector4fParam> EndLightVector4fParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightVector4fParam>(o);
  }
  public LightVector4fParamT UnPack() {
    var _o = new LightVector4fParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightVector4fParamT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightVector4fParam> Pack(FlatBufferBuilder builder, LightVector4fParamT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightVector4fParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateLightVector4fParam(
      builder,
      _name,
      _o.Value);
  }
};

public class LightVector4fParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.math.fb.Vector4fT Value { get; set; }

  public LightVector4fParamT() {
    this.Name = null;
    this.Value = new gfl.math.fb.Vector4fT();
  }
}

public struct LightTextureParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightTextureParam GetRootAsLightTextureParam(ByteBuffer _bb) { return GetRootAsLightTextureParam(_bb, new LightTextureParam()); }
  public static LightTextureParam GetRootAsLightTextureParam(ByteBuffer _bb, LightTextureParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightTextureParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<GenericEditor.Plugin.Attachment.LightTextureParam> CreateLightTextureParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset file_pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    LightTextureParam.AddFilePath(builder, file_pathOffset);
    LightTextureParam.AddName(builder, nameOffset);
    return LightTextureParam.EndLightTextureParam(builder);
  }

  public static void StartLightTextureParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.LightTextureParam> EndLightTextureParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightTextureParam>(o);
  }
  public LightTextureParamT UnPack() {
    var _o = new LightTextureParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightTextureParamT _o) {
    _o.Name = this.Name;
    _o.FilePath = this.FilePath;
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightTextureParam> Pack(FlatBufferBuilder builder, LightTextureParamT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightTextureParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateLightTextureParam(
      builder,
      _name,
      _file_path);
  }
};

public class LightTextureParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("file_path")]
  public string FilePath { get; set; }

  public LightTextureParamT() {
    this.Name = null;
    this.FilePath = null;
  }
}

public struct LightItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightItem GetRootAsLightItem(ByteBuffer _bb) { return GetRootAsLightItem(_bb, new LightItem()); }
  public static LightItem GetRootAsLightItem(ByteBuffer _bb, LightItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.math.fb.SRT? Transform { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.Attachment.LightFloatParam? FloatParamList(int j) { int o = __p.__offset(10); return o != 0 ? (GenericEditor.Plugin.Attachment.LightFloatParam?)(new GenericEditor.Plugin.Attachment.LightFloatParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatParamListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GenericEditor.Plugin.Attachment.LightVector4fParam? Vector4fParamList(int j) { int o = __p.__offset(12); return o != 0 ? (GenericEditor.Plugin.Attachment.LightVector4fParam?)(new GenericEditor.Plugin.Attachment.LightVector4fParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Vector4fParamListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GenericEditor.Plugin.Attachment.LightTextureParam? TextureParamList(int j) { int o = __p.__offset(14); return o != 0 ? (GenericEditor.Plugin.Attachment.LightTextureParam?)(new GenericEditor.Plugin.Attachment.LightTextureParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TextureParamListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.Attachment.LightItem> CreateLightItem(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> transformOffset = default(Offset<gfl.math.fb.SRT>),
      VectorOffset float_param_listOffset = default(VectorOffset),
      VectorOffset vector4f_param_listOffset = default(VectorOffset),
      VectorOffset texture_param_listOffset = default(VectorOffset)) {
    builder.StartTable(6);
    LightItem.AddTextureParamList(builder, texture_param_listOffset);
    LightItem.AddVector4fParamList(builder, vector4f_param_listOffset);
    LightItem.AddFloatParamList(builder, float_param_listOffset);
    LightItem.AddTransform(builder, transformOffset);
    LightItem.AddType(builder, typeOffset);
    LightItem.AddName(builder, nameOffset);
    return LightItem.EndLightItem(builder);
  }

  public static void StartLightItem(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> transformOffset) { builder.AddOffset(2, transformOffset.Value, 0); }
  public static void AddFloatParamList(FlatBufferBuilder builder, VectorOffset floatParamListOffset) { builder.AddOffset(3, floatParamListOffset.Value, 0); }
  public static VectorOffset CreateFloatParamListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatParamListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVector4fParamList(FlatBufferBuilder builder, VectorOffset vector4fParamListOffset) { builder.AddOffset(4, vector4fParamListOffset.Value, 0); }
  public static VectorOffset CreateVector4fParamListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVector4fParamListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVector4fParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTextureParamList(FlatBufferBuilder builder, VectorOffset textureParamListOffset) { builder.AddOffset(5, textureParamListOffset.Value, 0); }
  public static VectorOffset CreateTextureParamListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightTextureParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTextureParamListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightTextureParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTextureParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.Attachment.LightItem> EndLightItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightItem>(o);
  }
  public LightItemT UnPack() {
    var _o = new LightItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightItemT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Transform = this.Transform.HasValue ? this.Transform.Value.UnPack() : null;
    _o.FloatParamList = new List<GenericEditor.Plugin.Attachment.LightFloatParamT>();
    for (var _j = 0; _j < this.FloatParamListLength; ++_j) {_o.FloatParamList.Add(this.FloatParamList(_j).HasValue ? this.FloatParamList(_j).Value.UnPack() : null);}
    _o.Vector4fParamList = new List<GenericEditor.Plugin.Attachment.LightVector4fParamT>();
    for (var _j = 0; _j < this.Vector4fParamListLength; ++_j) {_o.Vector4fParamList.Add(this.Vector4fParamList(_j).HasValue ? this.Vector4fParamList(_j).Value.UnPack() : null);}
    _o.TextureParamList = new List<GenericEditor.Plugin.Attachment.LightTextureParamT>();
    for (var _j = 0; _j < this.TextureParamListLength; ++_j) {_o.TextureParamList.Add(this.TextureParamList(_j).HasValue ? this.TextureParamList(_j).Value.UnPack() : null);}
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightItem> Pack(FlatBufferBuilder builder, LightItemT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightItem>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _transform = _o.Transform == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Transform);
    var _float_param_list = default(VectorOffset);
    if (_o.FloatParamList != null) {
      var __float_param_list = new Offset<GenericEditor.Plugin.Attachment.LightFloatParam>[_o.FloatParamList.Count];
      for (var _j = 0; _j < __float_param_list.Length; ++_j) { __float_param_list[_j] = GenericEditor.Plugin.Attachment.LightFloatParam.Pack(builder, _o.FloatParamList[_j]); }
      _float_param_list = CreateFloatParamListVector(builder, __float_param_list);
    }
    var _vector4f_param_list = default(VectorOffset);
    if (_o.Vector4fParamList != null) {
      var __vector4f_param_list = new Offset<GenericEditor.Plugin.Attachment.LightVector4fParam>[_o.Vector4fParamList.Count];
      for (var _j = 0; _j < __vector4f_param_list.Length; ++_j) { __vector4f_param_list[_j] = GenericEditor.Plugin.Attachment.LightVector4fParam.Pack(builder, _o.Vector4fParamList[_j]); }
      _vector4f_param_list = CreateVector4fParamListVector(builder, __vector4f_param_list);
    }
    var _texture_param_list = default(VectorOffset);
    if (_o.TextureParamList != null) {
      var __texture_param_list = new Offset<GenericEditor.Plugin.Attachment.LightTextureParam>[_o.TextureParamList.Count];
      for (var _j = 0; _j < __texture_param_list.Length; ++_j) { __texture_param_list[_j] = GenericEditor.Plugin.Attachment.LightTextureParam.Pack(builder, _o.TextureParamList[_j]); }
      _texture_param_list = CreateTextureParamListVector(builder, __texture_param_list);
    }
    return CreateLightItem(
      builder,
      _name,
      _type,
      _transform,
      _float_param_list,
      _vector4f_param_list,
      _texture_param_list);
  }
};

public class LightItemT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public gfl.math.fb.SRTT Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("float_param_list")]
  public List<GenericEditor.Plugin.Attachment.LightFloatParamT> FloatParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("vector4f_param_list")]
  public List<GenericEditor.Plugin.Attachment.LightVector4fParamT> Vector4fParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("texture_param_list")]
  public List<GenericEditor.Plugin.Attachment.LightTextureParamT> TextureParamList { get; set; }

  public LightItemT() {
    this.Name = null;
    this.Type = null;
    this.Transform = null;
    this.FloatParamList = null;
    this.Vector4fParamList = null;
    this.TextureParamList = null;
  }
}

public struct LightAnimationFloatParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightAnimationFloatParam GetRootAsLightAnimationFloatParam(ByteBuffer _bb) { return GetRootAsLightAnimationFloatParam(_bb, new LightAnimationFloatParam()); }
  public static LightAnimationFloatParam GetRootAsLightAnimationFloatParam(ByteBuffer _bb, LightAnimationFloatParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightAnimationFloatParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat? CurveData { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam> CreateLightAnimationFloatParam(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> curveDataOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>)) {
    builder.StartTable(2);
    LightAnimationFloatParam.AddCurveData(builder, curveDataOffset);
    LightAnimationFloatParam.AddAttributeName(builder, attributeNameOffset);
    return LightAnimationFloatParam.EndLightAnimationFloatParam(builder);
  }

  public static void StartLightAnimationFloatParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam> EndLightAnimationFloatParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam>(o);
  }
  public LightAnimationFloatParamT UnPack() {
    var _o = new LightAnimationFloatParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightAnimationFloatParamT _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam> Pack(FlatBufferBuilder builder, LightAnimationFloatParamT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat.Pack(builder, _o.CurveData);
    return CreateLightAnimationFloatParam(
      builder,
      _attributeName,
      _curveData);
  }
};

public class LightAnimationFloatParamT
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloatT CurveData { get; set; }

  public LightAnimationFloatParamT() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct LightAnimationFloat4Param : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightAnimationFloat4Param GetRootAsLightAnimationFloat4Param(ByteBuffer _bb) { return GetRootAsLightAnimationFloat4Param(_bb, new LightAnimationFloat4Param()); }
  public static LightAnimationFloat4Param GetRootAsLightAnimationFloat4Param(ByteBuffer _bb, LightAnimationFloat4Param obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightAnimationFloat4Param __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat4? CurveData { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.Attachment.RuntimeCurveFloat4?)(new GenericEditor.Plugin.Attachment.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param> CreateLightAnimationFloat4Param(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4> curveDataOffset = default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4>)) {
    builder.StartTable(2);
    LightAnimationFloat4Param.AddCurveData(builder, curveDataOffset);
    LightAnimationFloat4Param.AddAttributeName(builder, attributeNameOffset);
    return LightAnimationFloat4Param.EndLightAnimationFloat4Param(builder);
  }

  public static void StartLightAnimationFloat4Param(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param> EndLightAnimationFloat4Param(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param>(o);
  }
  public LightAnimationFloat4ParamT UnPack() {
    var _o = new LightAnimationFloat4ParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightAnimationFloat4ParamT _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param> Pack(FlatBufferBuilder builder, LightAnimationFloat4ParamT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<GenericEditor.Plugin.Attachment.RuntimeCurveFloat4>) : GenericEditor.Plugin.Attachment.RuntimeCurveFloat4.Pack(builder, _o.CurveData);
    return CreateLightAnimationFloat4Param(
      builder,
      _attributeName,
      _curveData);
  }
};

public class LightAnimationFloat4ParamT
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public GenericEditor.Plugin.Attachment.RuntimeCurveFloat4T CurveData { get; set; }

  public LightAnimationFloat4ParamT() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct AttachmentItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AttachmentItem GetRootAsAttachmentItem(ByteBuffer _bb) { return GetRootAsAttachmentItem(_bb, new AttachmentItem()); }
  public static AttachmentItem GetRootAsAttachmentItem(ByteBuffer _bb, AttachmentItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttachmentItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string LocatorName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocatorNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLocatorNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLocatorNameArray() { return __p.__vector_as_array<byte>(8); }
  public GenericEditor.Plugin.Attachment.LightItem? Light { get { int o = __p.__offset(10); return o != 0 ? (GenericEditor.Plugin.Attachment.LightItem?)(new GenericEditor.Plugin.Attachment.LightItem()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string FilePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(12); }
  public GenericEditor.Plugin.Attachment.LightAnimationFloatParam? AnimationFloatParam { get { int o = __p.__offset(14); return o != 0 ? (GenericEditor.Plugin.Attachment.LightAnimationFloatParam?)(new GenericEditor.Plugin.Attachment.LightAnimationFloatParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GenericEditor.Plugin.Attachment.LightAnimationFloat4Param? AnimationFloat4Param { get { int o = __p.__offset(16); return o != 0 ? (GenericEditor.Plugin.Attachment.LightAnimationFloat4Param?)(new GenericEditor.Plugin.Attachment.LightAnimationFloat4Param()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.AttachmentItem> CreateAttachmentItem(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset locatorNameOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Attachment.LightItem> lightOffset = default(Offset<GenericEditor.Plugin.Attachment.LightItem>),
      StringOffset filePathOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam> animationFloatParamOffset = default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam>),
      Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param> animationFloat4ParamOffset = default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param>)) {
    builder.StartTable(7);
    AttachmentItem.AddAnimationFloat4Param(builder, animationFloat4ParamOffset);
    AttachmentItem.AddAnimationFloatParam(builder, animationFloatParamOffset);
    AttachmentItem.AddFilePath(builder, filePathOffset);
    AttachmentItem.AddLight(builder, lightOffset);
    AttachmentItem.AddLocatorName(builder, locatorNameOffset);
    AttachmentItem.AddType(builder, typeOffset);
    AttachmentItem.AddName(builder, nameOffset);
    return AttachmentItem.EndAttachmentItem(builder);
  }

  public static void StartAttachmentItem(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddLocatorName(FlatBufferBuilder builder, StringOffset locatorNameOffset) { builder.AddOffset(2, locatorNameOffset.Value, 0); }
  public static void AddLight(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightItem> lightOffset) { builder.AddOffset(3, lightOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(4, filePathOffset.Value, 0); }
  public static void AddAnimationFloatParam(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam> animationFloatParamOffset) { builder.AddOffset(5, animationFloatParamOffset.Value, 0); }
  public static void AddAnimationFloat4Param(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param> animationFloat4ParamOffset) { builder.AddOffset(6, animationFloat4ParamOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.AttachmentItem> EndAttachmentItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.AttachmentItem>(o);
  }
  public AttachmentItemT UnPack() {
    var _o = new AttachmentItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttachmentItemT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.LocatorName = this.LocatorName;
    _o.Light = this.Light.HasValue ? this.Light.Value.UnPack() : null;
    _o.FilePath = this.FilePath;
    _o.AnimationFloatParam = this.AnimationFloatParam.HasValue ? this.AnimationFloatParam.Value.UnPack() : null;
    _o.AnimationFloat4Param = this.AnimationFloat4Param.HasValue ? this.AnimationFloat4Param.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.AttachmentItem> Pack(FlatBufferBuilder builder, AttachmentItemT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.AttachmentItem>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _locatorName = _o.LocatorName == null ? default(StringOffset) : builder.CreateString(_o.LocatorName);
    var _light = _o.Light == null ? default(Offset<GenericEditor.Plugin.Attachment.LightItem>) : GenericEditor.Plugin.Attachment.LightItem.Pack(builder, _o.Light);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _animationFloatParam = _o.AnimationFloatParam == null ? default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloatParam>) : GenericEditor.Plugin.Attachment.LightAnimationFloatParam.Pack(builder, _o.AnimationFloatParam);
    var _animationFloat4Param = _o.AnimationFloat4Param == null ? default(Offset<GenericEditor.Plugin.Attachment.LightAnimationFloat4Param>) : GenericEditor.Plugin.Attachment.LightAnimationFloat4Param.Pack(builder, _o.AnimationFloat4Param);
    return CreateAttachmentItem(
      builder,
      _name,
      _type,
      _locatorName,
      _light,
      _filePath,
      _animationFloatParam,
      _animationFloat4Param);
  }
};

public class AttachmentItemT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("locatorName")]
  public string LocatorName { get; set; }
  [Newtonsoft.Json.JsonProperty("light")]
  public GenericEditor.Plugin.Attachment.LightItemT Light { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFloatParam")]
  public GenericEditor.Plugin.Attachment.LightAnimationFloatParamT AnimationFloatParam { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFloat4Param")]
  public GenericEditor.Plugin.Attachment.LightAnimationFloat4ParamT AnimationFloat4Param { get; set; }

  public AttachmentItemT() {
    this.Name = null;
    this.Type = null;
    this.LocatorName = null;
    this.Light = null;
    this.FilePath = null;
    this.AnimationFloatParam = null;
    this.AnimationFloat4Param = null;
  }
}

public struct AttachmentEditCommandData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AttachmentEditCommandData GetRootAsAttachmentEditCommandData(ByteBuffer _bb) { return GetRootAsAttachmentEditCommandData(_bb, new AttachmentEditCommandData()); }
  public static AttachmentEditCommandData GetRootAsAttachmentEditCommandData(ByteBuffer _bb, AttachmentEditCommandData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttachmentEditCommandData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CommandName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommandNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCommandNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCommandNameArray() { return __p.__vector_as_array<byte>(4); }
  public string InstanceName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(6); }
  public string AttachmentName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttachmentNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAttachmentNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAttachmentNameArray() { return __p.__vector_as_array<byte>(8); }
  public GenericEditor.Plugin.Attachment.AttachmentItem? AttachmentItem { get { int o = __p.__offset(10); return o != 0 ? (GenericEditor.Plugin.Attachment.AttachmentItem?)(new GenericEditor.Plugin.Attachment.AttachmentItem()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData> CreateAttachmentEditCommandData(FlatBufferBuilder builder,
      StringOffset commandNameOffset = default(StringOffset),
      StringOffset instanceNameOffset = default(StringOffset),
      StringOffset attachmentNameOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Attachment.AttachmentItem> attachmentItemOffset = default(Offset<GenericEditor.Plugin.Attachment.AttachmentItem>)) {
    builder.StartTable(4);
    AttachmentEditCommandData.AddAttachmentItem(builder, attachmentItemOffset);
    AttachmentEditCommandData.AddAttachmentName(builder, attachmentNameOffset);
    AttachmentEditCommandData.AddInstanceName(builder, instanceNameOffset);
    AttachmentEditCommandData.AddCommandName(builder, commandNameOffset);
    return AttachmentEditCommandData.EndAttachmentEditCommandData(builder);
  }

  public static void StartAttachmentEditCommandData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCommandName(FlatBufferBuilder builder, StringOffset commandNameOffset) { builder.AddOffset(0, commandNameOffset.Value, 0); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(1, instanceNameOffset.Value, 0); }
  public static void AddAttachmentName(FlatBufferBuilder builder, StringOffset attachmentNameOffset) { builder.AddOffset(2, attachmentNameOffset.Value, 0); }
  public static void AddAttachmentItem(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.AttachmentItem> attachmentItemOffset) { builder.AddOffset(3, attachmentItemOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData> EndAttachmentEditCommandData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData>(o);
  }
  public static void FinishAttachmentEditCommandDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAttachmentEditCommandDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AttachmentEditCommandDataT UnPack() {
    var _o = new AttachmentEditCommandDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttachmentEditCommandDataT _o) {
    _o.CommandName = this.CommandName;
    _o.InstanceName = this.InstanceName;
    _o.AttachmentName = this.AttachmentName;
    _o.AttachmentItem = this.AttachmentItem.HasValue ? this.AttachmentItem.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData> Pack(FlatBufferBuilder builder, AttachmentEditCommandDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Attachment.AttachmentEditCommandData>);
    var _commandName = _o.CommandName == null ? default(StringOffset) : builder.CreateString(_o.CommandName);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _attachmentName = _o.AttachmentName == null ? default(StringOffset) : builder.CreateString(_o.AttachmentName);
    var _attachmentItem = _o.AttachmentItem == null ? default(Offset<GenericEditor.Plugin.Attachment.AttachmentItem>) : GenericEditor.Plugin.Attachment.AttachmentItem.Pack(builder, _o.AttachmentItem);
    return CreateAttachmentEditCommandData(
      builder,
      _commandName,
      _instanceName,
      _attachmentName,
      _attachmentItem);
  }
};

public class AttachmentEditCommandDataT
{
  [Newtonsoft.Json.JsonProperty("commandName")]
  public string CommandName { get; set; }
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("attachmentName")]
  public string AttachmentName { get; set; }
  [Newtonsoft.Json.JsonProperty("attachmentItem")]
  public GenericEditor.Plugin.Attachment.AttachmentItemT AttachmentItem { get; set; }

  public AttachmentEditCommandDataT() {
    this.CommandName = null;
    this.InstanceName = null;
    this.AttachmentName = null;
    this.AttachmentItem = null;
  }

  public static AttachmentEditCommandDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentEditCommandDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AttachmentEditCommandDataT DeserializeFromBinary(byte[] fbBuffer) {
    return AttachmentEditCommandData.GetRootAsAttachmentEditCommandData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AttachmentEditCommandData.FinishAttachmentEditCommandDataBuffer(fbb, AttachmentEditCommandData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
