// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.AnimationController.ToEditor
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MessageType : byte
{
  NONE = 0,
  LoadCompleteMessage = 1,
  SetFrameMessage = 2,
  PlayCompleteMessage = 3,
};

public class MessageTypeUnion {
  public MessageType Type { get; set; }
  public object Value { get; set; }

  public MessageTypeUnion() {
    this.Type = MessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessageT AsLoadCompleteMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessageT AsSetFrameMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessageT AsPlayCompleteMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessageT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MessageType.LoadCompleteMessage: return GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage.Pack(builder, _o.AsLoadCompleteMessage()).Value;
      case MessageType.SetFrameMessage: return GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage.Pack(builder, _o.AsSetFrameMessage()).Value;
      case MessageType.PlayCompleteMessage: return GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage.Pack(builder, _o.AsPlayCompleteMessage()).Value;
    }
  }
}

public class MessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<MessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MessageTypeUnion, serializer);
    }
  }
  public MessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MessageType.LoadCompleteMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessageT>(reader); break;
      case MessageType.SetFrameMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessageT>(reader); break;
      case MessageType.PlayCompleteMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessageT>(reader); break;
    }
    return _o;
  }
}

public struct FrameSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb) { return GetRootAsFrameSetting(_bb, new FrameSetting()); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb, FrameSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FrameSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint FrameCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool LoopEnabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint Fps { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> CreateFrameSetting(FlatBufferBuilder builder,
      uint frameCount = 0,
      bool loopEnabled = false,
      uint fps = 0) {
    builder.StartTable(3);
    FrameSetting.AddFps(builder, fps);
    FrameSetting.AddFrameCount(builder, frameCount);
    FrameSetting.AddLoopEnabled(builder, loopEnabled);
    return FrameSetting.EndFrameSetting(builder);
  }

  public static void StartFrameSetting(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrameCount(FlatBufferBuilder builder, uint frameCount) { builder.AddUint(0, frameCount, 0); }
  public static void AddLoopEnabled(FlatBufferBuilder builder, bool loopEnabled) { builder.AddBool(1, loopEnabled, false); }
  public static void AddFps(FlatBufferBuilder builder, uint fps) { builder.AddUint(2, fps, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> EndFrameSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>(o);
  }
  public FrameSettingT UnPack() {
    var _o = new FrameSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FrameSettingT _o) {
    _o.FrameCount = this.FrameCount;
    _o.LoopEnabled = this.LoopEnabled;
    _o.Fps = this.Fps;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> Pack(FlatBufferBuilder builder, FrameSettingT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>);
    return CreateFrameSetting(
      builder,
      _o.FrameCount,
      _o.LoopEnabled,
      _o.Fps);
  }
};

public class FrameSettingT
{
  [Newtonsoft.Json.JsonProperty("frameCount")]
  public uint FrameCount { get; set; }
  [Newtonsoft.Json.JsonProperty("loopEnabled")]
  public bool LoopEnabled { get; set; }
  [Newtonsoft.Json.JsonProperty("fps")]
  public uint Fps { get; set; }

  public FrameSettingT() {
    this.FrameCount = 0;
    this.LoopEnabled = false;
    this.Fps = 0;
  }
}

public struct LoadCompleteMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadCompleteMessage GetRootAsLoadCompleteMessage(ByteBuffer _bb) { return GetRootAsLoadCompleteMessage(_bb, new LoadCompleteMessage()); }
  public static LoadCompleteMessage GetRootAsLoadCompleteMessage(ByteBuffer _bb, LoadCompleteMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadCompleteMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting?)(new GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage> CreateLoadCompleteMessage(FlatBufferBuilder builder,
      Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> frameSettingOffset = default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>)) {
    builder.StartTable(1);
    LoadCompleteMessage.AddFrameSetting(builder, frameSettingOffset);
    return LoadCompleteMessage.EndLoadCompleteMessage(builder);
  }

  public static void StartLoadCompleteMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage> EndLoadCompleteMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage>(o);
  }
  public LoadCompleteMessageT UnPack() {
    var _o = new LoadCompleteMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadCompleteMessageT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage> Pack(FlatBufferBuilder builder, LoadCompleteMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>) : GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting.Pack(builder, _o.FrameSetting);
    return CreateLoadCompleteMessage(
      builder,
      _frameSetting);
  }
};

public class LoadCompleteMessageT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public GenericEditor.Plugin.AnimationController.ToEditor.FrameSettingT FrameSetting { get; set; }

  public LoadCompleteMessageT() {
    this.FrameSetting = null;
  }
}

public struct SetFrameMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetFrameMessage GetRootAsSetFrameMessage(ByteBuffer _bb) { return GetRootAsSetFrameMessage(_bb, new SetFrameMessage()); }
  public static SetFrameMessage GetRootAsSetFrameMessage(ByteBuffer _bb, SetFrameMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetFrameMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Frame { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting? FrameSetting { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting?)(new GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage> CreateSetFrameMessage(FlatBufferBuilder builder,
      float frame = 0.0f,
      Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> frameSettingOffset = default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>)) {
    builder.StartTable(2);
    SetFrameMessage.AddFrameSetting(builder, frameSettingOffset);
    SetFrameMessage.AddFrame(builder, frame);
    return SetFrameMessage.EndSetFrameMessage(builder);
  }

  public static void StartSetFrameMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrame(FlatBufferBuilder builder, float frame) { builder.AddFloat(0, frame, 0.0f); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting> frameSettingOffset) { builder.AddOffset(1, frameSettingOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage> EndSetFrameMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage>(o);
  }
  public SetFrameMessageT UnPack() {
    var _o = new SetFrameMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetFrameMessageT _o) {
    _o.Frame = this.Frame;
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage> Pack(FlatBufferBuilder builder, SetFrameMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting>) : GenericEditor.Plugin.AnimationController.ToEditor.FrameSetting.Pack(builder, _o.FrameSetting);
    return CreateSetFrameMessage(
      builder,
      _o.Frame,
      _frameSetting);
  }
};

public class SetFrameMessageT
{
  [Newtonsoft.Json.JsonProperty("frame")]
  public float Frame { get; set; }
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public GenericEditor.Plugin.AnimationController.ToEditor.FrameSettingT FrameSetting { get; set; }

  public SetFrameMessageT() {
    this.Frame = 0.0f;
    this.FrameSetting = null;
  }
}

public struct PlayCompleteMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlayCompleteMessage GetRootAsPlayCompleteMessage(ByteBuffer _bb) { return GetRootAsPlayCompleteMessage(_bb, new PlayCompleteMessage()); }
  public static PlayCompleteMessage GetRootAsPlayCompleteMessage(ByteBuffer _bb, PlayCompleteMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayCompleteMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Dummy { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage> CreatePlayCompleteMessage(FlatBufferBuilder builder,
      int dummy = 0) {
    builder.StartTable(1);
    PlayCompleteMessage.AddDummy(builder, dummy);
    return PlayCompleteMessage.EndPlayCompleteMessage(builder);
  }

  public static void StartPlayCompleteMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDummy(FlatBufferBuilder builder, int dummy) { builder.AddInt(0, dummy, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage> EndPlayCompleteMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage>(o);
  }
  public PlayCompleteMessageT UnPack() {
    var _o = new PlayCompleteMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlayCompleteMessageT _o) {
    _o.Dummy = this.Dummy;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage> Pack(FlatBufferBuilder builder, PlayCompleteMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage>);
    return CreatePlayCompleteMessage(
      builder,
      _o.Dummy);
  }
};

public class PlayCompleteMessageT
{
  [Newtonsoft.Json.JsonProperty("dummy")]
  public int Dummy { get; set; }

  public PlayCompleteMessageT() {
    this.Dummy = 0;
  }
}

public struct AnimationControllerToEditor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationControllerToEditor GetRootAsAnimationControllerToEditor(ByteBuffer _bb) { return GetRootAsAnimationControllerToEditor(_bb, new AnimationControllerToEditor()); }
  public static AnimationControllerToEditor GetRootAsAnimationControllerToEditor(ByteBuffer _bb, AnimationControllerToEditor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationControllerToEditor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToEditor.MessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToEditor.MessageType)__p.bb.Get(o + __p.bb_pos) : GenericEditor.Plugin.AnimationController.ToEditor.MessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor> CreateAnimationControllerToEditor(FlatBufferBuilder builder,
      GenericEditor.Plugin.AnimationController.ToEditor.MessageType message_type = GenericEditor.Plugin.AnimationController.ToEditor.MessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    AnimationControllerToEditor.AddMessage(builder, messageOffset);
    AnimationControllerToEditor.AddMessageType(builder, message_type);
    return AnimationControllerToEditor.EndAnimationControllerToEditor(builder);
  }

  public static void StartAnimationControllerToEditor(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, GenericEditor.Plugin.AnimationController.ToEditor.MessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor> EndAnimationControllerToEditor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor>(o);
  }
  public static void FinishAnimationControllerToEditorBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationControllerToEditorBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationControllerToEditorT UnPack() {
    var _o = new AnimationControllerToEditorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationControllerToEditorT _o) {
    _o.Message = new GenericEditor.Plugin.AnimationController.ToEditor.MessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case GenericEditor.Plugin.AnimationController.ToEditor.MessageType.LoadCompleteMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToEditor.LoadCompleteMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToEditor.MessageType.SetFrameMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToEditor.SetFrameMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToEditor.MessageType.PlayCompleteMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToEditor.PlayCompleteMessage>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor> Pack(FlatBufferBuilder builder, AnimationControllerToEditorT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToEditor.AnimationControllerToEditor>);
    var _message_type = _o.Message == null ? GenericEditor.Plugin.AnimationController.ToEditor.MessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : GenericEditor.Plugin.AnimationController.ToEditor.MessageTypeUnion.Pack(builder, _o.Message);
    return CreateAnimationControllerToEditor(
      builder,
      _message_type,
      _message);
  }
};

public class AnimationControllerToEditorT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private GenericEditor.Plugin.AnimationController.ToEditor.MessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : GenericEditor.Plugin.AnimationController.ToEditor.MessageType.NONE;
    }
    set {
      this.Message = new GenericEditor.Plugin.AnimationController.ToEditor.MessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(GenericEditor.Plugin.AnimationController.ToEditor.MessageTypeUnion_JsonConverter))]
  public GenericEditor.Plugin.AnimationController.ToEditor.MessageTypeUnion Message { get; set; }

  public AnimationControllerToEditorT() {
    this.Message = null;
  }

  public static AnimationControllerToEditorT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationControllerToEditorT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationControllerToEditorT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationControllerToEditor.GetRootAsAnimationControllerToEditor(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationControllerToEditor.FinishAnimationControllerToEditorBuffer(fbb, AnimationControllerToEditor.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
