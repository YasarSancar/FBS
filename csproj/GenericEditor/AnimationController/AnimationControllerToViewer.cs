// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.AnimationController.ToViewer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum State : uint
{
  Play = 0,
  Pause = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
[System.FlagsAttribute]
public enum AnimationMasks : uint
{
  Joint = 1,
  Material = 2,
  Visibility = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MessageType : byte
{
  NONE = 0,
  LoadMessage = 1,
  StateMessage = 2,
  SetFrameMessage = 3,
  SetSpeedMessage = 4,
  SetLoopMessage = 5,
  SetSyncAllMessage = 6,
  SetAnimationMasksMessage = 7,
  SetSkeletonMaxPriorityMessage = 8,
  SetCameraAnimationEnabledMessage = 9,
};

public class MessageTypeUnion {
  public MessageType Type { get; set; }
  public object Value { get; set; }

  public MessageTypeUnion() {
    this.Type = MessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public GenericEditor.Plugin.AnimationController.ToViewer.LoadMessageT AsLoadMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.StateMessageT AsStateMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.StateMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessageT AsSetFrameMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessageT AsSetSpeedMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessageT AsSetLoopMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessageT AsSetSyncAllMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessageT AsSetAnimationMasksMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessageT AsSetSkeletonMaxPriorityMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessageT>(); }
  public GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessageT AsSetCameraAnimationEnabledMessage() { return this.As<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessageT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MessageType.LoadMessage: return GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage.Pack(builder, _o.AsLoadMessage()).Value;
      case MessageType.StateMessage: return GenericEditor.Plugin.AnimationController.ToViewer.StateMessage.Pack(builder, _o.AsStateMessage()).Value;
      case MessageType.SetFrameMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage.Pack(builder, _o.AsSetFrameMessage()).Value;
      case MessageType.SetSpeedMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage.Pack(builder, _o.AsSetSpeedMessage()).Value;
      case MessageType.SetLoopMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage.Pack(builder, _o.AsSetLoopMessage()).Value;
      case MessageType.SetSyncAllMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage.Pack(builder, _o.AsSetSyncAllMessage()).Value;
      case MessageType.SetAnimationMasksMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage.Pack(builder, _o.AsSetAnimationMasksMessage()).Value;
      case MessageType.SetSkeletonMaxPriorityMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage.Pack(builder, _o.AsSetSkeletonMaxPriorityMessage()).Value;
      case MessageType.SetCameraAnimationEnabledMessage: return GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage.Pack(builder, _o.AsSetCameraAnimationEnabledMessage()).Value;
    }
  }
}

public class MessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<MessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MessageTypeUnion, serializer);
    }
  }
  public MessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MessageType.LoadMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessageT>(reader); break;
      case MessageType.StateMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.StateMessageT>(reader); break;
      case MessageType.SetFrameMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessageT>(reader); break;
      case MessageType.SetSpeedMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessageT>(reader); break;
      case MessageType.SetLoopMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessageT>(reader); break;
      case MessageType.SetSyncAllMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessageT>(reader); break;
      case MessageType.SetAnimationMasksMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessageT>(reader); break;
      case MessageType.SetSkeletonMaxPriorityMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessageT>(reader); break;
      case MessageType.SetCameraAnimationEnabledMessage: _o.Value = serializer.Deserialize<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessageT>(reader); break;
    }
    return _o;
  }
}

public struct FrameSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb) { return GetRootAsFrameSetting(_bb, new FrameSetting()); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb, FrameSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FrameSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Frame { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public uint Fps { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> CreateFrameSetting(FlatBufferBuilder builder,
      float frame = 0.0f,
      uint fps = 0) {
    builder.StartTable(2);
    FrameSetting.AddFps(builder, fps);
    FrameSetting.AddFrame(builder, frame);
    return FrameSetting.EndFrameSetting(builder);
  }

  public static void StartFrameSetting(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrame(FlatBufferBuilder builder, float frame) { builder.AddFloat(0, frame, 0.0f); }
  public static void AddFps(FlatBufferBuilder builder, uint fps) { builder.AddUint(1, fps, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> EndFrameSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>(o);
  }
  public FrameSettingT UnPack() {
    var _o = new FrameSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FrameSettingT _o) {
    _o.Frame = this.Frame;
    _o.Fps = this.Fps;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> Pack(FlatBufferBuilder builder, FrameSettingT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>);
    return CreateFrameSetting(
      builder,
      _o.Frame,
      _o.Fps);
  }
};

public class FrameSettingT
{
  [Newtonsoft.Json.JsonProperty("frame")]
  public float Frame { get; set; }
  [Newtonsoft.Json.JsonProperty("fps")]
  public uint Fps { get; set; }

  public FrameSettingT() {
    this.Frame = 0.0f;
    this.Fps = 0;
  }
}

public struct LoadMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadMessage GetRootAsLoadMessage(ByteBuffer _bb) { return GetRootAsLoadMessage(_bb, new LoadMessage()); }
  public static LoadMessage GetRootAsLoadMessage(ByteBuffer _bb, LoadMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Filename { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilenameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilenameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilenameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage> CreateLoadMessage(FlatBufferBuilder builder,
      StringOffset filenameOffset = default(StringOffset)) {
    builder.StartTable(1);
    LoadMessage.AddFilename(builder, filenameOffset);
    return LoadMessage.EndLoadMessage(builder);
  }

  public static void StartLoadMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilename(FlatBufferBuilder builder, StringOffset filenameOffset) { builder.AddOffset(0, filenameOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage> EndLoadMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage>(o);
  }
  public LoadMessageT UnPack() {
    var _o = new LoadMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadMessageT _o) {
    _o.Filename = this.Filename;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage> Pack(FlatBufferBuilder builder, LoadMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage>);
    var _filename = _o.Filename == null ? default(StringOffset) : builder.CreateString(_o.Filename);
    return CreateLoadMessage(
      builder,
      _filename);
  }
};

public class LoadMessageT
{
  [Newtonsoft.Json.JsonProperty("filename")]
  public string Filename { get; set; }

  public LoadMessageT() {
    this.Filename = null;
  }
}

public struct StateMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StateMessage GetRootAsStateMessage(ByteBuffer _bb) { return GetRootAsStateMessage(_bb, new StateMessage()); }
  public static StateMessage GetRootAsStateMessage(ByteBuffer _bb, StateMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StateMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToViewer.State State { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToViewer.State)__p.bb.GetUint(o + __p.bb_pos) : GenericEditor.Plugin.AnimationController.ToViewer.State.Play; } }
  public GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting? FrameSetting { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting?)(new GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage> CreateStateMessage(FlatBufferBuilder builder,
      GenericEditor.Plugin.AnimationController.ToViewer.State state = GenericEditor.Plugin.AnimationController.ToViewer.State.Play,
      Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> frameSettingOffset = default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>)) {
    builder.StartTable(2);
    StateMessage.AddFrameSetting(builder, frameSettingOffset);
    StateMessage.AddState(builder, state);
    return StateMessage.EndStateMessage(builder);
  }

  public static void StartStateMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddState(FlatBufferBuilder builder, GenericEditor.Plugin.AnimationController.ToViewer.State state) { builder.AddUint(0, (uint)state, 0); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> frameSettingOffset) { builder.AddOffset(1, frameSettingOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage> EndStateMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage>(o);
  }
  public StateMessageT UnPack() {
    var _o = new StateMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateMessageT _o) {
    _o.State = this.State;
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage> Pack(FlatBufferBuilder builder, StateMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>) : GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting.Pack(builder, _o.FrameSetting);
    return CreateStateMessage(
      builder,
      _o.State,
      _frameSetting);
  }
};

public class StateMessageT
{
  [Newtonsoft.Json.JsonProperty("state")]
  public GenericEditor.Plugin.AnimationController.ToViewer.State State { get; set; }
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public GenericEditor.Plugin.AnimationController.ToViewer.FrameSettingT FrameSetting { get; set; }

  public StateMessageT() {
    this.State = GenericEditor.Plugin.AnimationController.ToViewer.State.Play;
    this.FrameSetting = null;
  }
}

public struct SetFrameMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetFrameMessage GetRootAsSetFrameMessage(ByteBuffer _bb) { return GetRootAsSetFrameMessage(_bb, new SetFrameMessage()); }
  public static SetFrameMessage GetRootAsSetFrameMessage(ByteBuffer _bb, SetFrameMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetFrameMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting?)(new GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage> CreateSetFrameMessage(FlatBufferBuilder builder,
      Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> frameSettingOffset = default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>)) {
    builder.StartTable(1);
    SetFrameMessage.AddFrameSetting(builder, frameSettingOffset);
    return SetFrameMessage.EndSetFrameMessage(builder);
  }

  public static void StartSetFrameMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage> EndSetFrameMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage>(o);
  }
  public SetFrameMessageT UnPack() {
    var _o = new SetFrameMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetFrameMessageT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage> Pack(FlatBufferBuilder builder, SetFrameMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting>) : GenericEditor.Plugin.AnimationController.ToViewer.FrameSetting.Pack(builder, _o.FrameSetting);
    return CreateSetFrameMessage(
      builder,
      _frameSetting);
  }
};

public class SetFrameMessageT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public GenericEditor.Plugin.AnimationController.ToViewer.FrameSettingT FrameSetting { get; set; }

  public SetFrameMessageT() {
    this.FrameSetting = null;
  }
}

public struct SetSpeedMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetSpeedMessage GetRootAsSetSpeedMessage(ByteBuffer _bb) { return GetRootAsSetSpeedMessage(_bb, new SetSpeedMessage()); }
  public static SetSpeedMessage GetRootAsSetSpeedMessage(ByteBuffer _bb, SetSpeedMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetSpeedMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Speed { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage> CreateSetSpeedMessage(FlatBufferBuilder builder,
      float speed = 0.0f) {
    builder.StartTable(1);
    SetSpeedMessage.AddSpeed(builder, speed);
    return SetSpeedMessage.EndSetSpeedMessage(builder);
  }

  public static void StartSetSpeedMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(0, speed, 0.0f); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage> EndSetSpeedMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage>(o);
  }
  public SetSpeedMessageT UnPack() {
    var _o = new SetSpeedMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetSpeedMessageT _o) {
    _o.Speed = this.Speed;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage> Pack(FlatBufferBuilder builder, SetSpeedMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage>);
    return CreateSetSpeedMessage(
      builder,
      _o.Speed);
  }
};

public class SetSpeedMessageT
{
  [Newtonsoft.Json.JsonProperty("speed")]
  public float Speed { get; set; }

  public SetSpeedMessageT() {
    this.Speed = 0.0f;
  }
}

public struct SetLoopMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetLoopMessage GetRootAsSetLoopMessage(ByteBuffer _bb) { return GetRootAsSetLoopMessage(_bb, new SetLoopMessage()); }
  public static SetLoopMessage GetRootAsSetLoopMessage(ByteBuffer _bb, SetLoopMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetLoopMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool LoopEnabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage> CreateSetLoopMessage(FlatBufferBuilder builder,
      bool loopEnabled = false) {
    builder.StartTable(1);
    SetLoopMessage.AddLoopEnabled(builder, loopEnabled);
    return SetLoopMessage.EndSetLoopMessage(builder);
  }

  public static void StartSetLoopMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLoopEnabled(FlatBufferBuilder builder, bool loopEnabled) { builder.AddBool(0, loopEnabled, false); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage> EndSetLoopMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage>(o);
  }
  public SetLoopMessageT UnPack() {
    var _o = new SetLoopMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetLoopMessageT _o) {
    _o.LoopEnabled = this.LoopEnabled;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage> Pack(FlatBufferBuilder builder, SetLoopMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage>);
    return CreateSetLoopMessage(
      builder,
      _o.LoopEnabled);
  }
};

public class SetLoopMessageT
{
  [Newtonsoft.Json.JsonProperty("loopEnabled")]
  public bool LoopEnabled { get; set; }

  public SetLoopMessageT() {
    this.LoopEnabled = false;
  }
}

public struct SetSyncAllMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetSyncAllMessage GetRootAsSetSyncAllMessage(ByteBuffer _bb) { return GetRootAsSetSyncAllMessage(_bb, new SetSyncAllMessage()); }
  public static SetSyncAllMessage GetRootAsSetSyncAllMessage(ByteBuffer _bb, SetSyncAllMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetSyncAllMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage> CreateSetSyncAllMessage(FlatBufferBuilder builder,
      bool enabled = false) {
    builder.StartTable(1);
    SetSyncAllMessage.AddEnabled(builder, enabled);
    return SetSyncAllMessage.EndSetSyncAllMessage(builder);
  }

  public static void StartSetSyncAllMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage> EndSetSyncAllMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage>(o);
  }
  public SetSyncAllMessageT UnPack() {
    var _o = new SetSyncAllMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetSyncAllMessageT _o) {
    _o.Enabled = this.Enabled;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage> Pack(FlatBufferBuilder builder, SetSyncAllMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage>);
    return CreateSetSyncAllMessage(
      builder,
      _o.Enabled);
  }
};

public class SetSyncAllMessageT
{
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public SetSyncAllMessageT() {
    this.Enabled = false;
  }
}

public struct SetAnimationMasksMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetAnimationMasksMessage GetRootAsSetAnimationMasksMessage(ByteBuffer _bb) { return GetRootAsSetAnimationMasksMessage(_bb, new SetAnimationMasksMessage()); }
  public static SetAnimationMasksMessage GetRootAsSetAnimationMasksMessage(ByteBuffer _bb, SetAnimationMasksMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetAnimationMasksMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToViewer.AnimationMasks AnimationMasks { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToViewer.AnimationMasks)__p.bb.GetUint(o + __p.bb_pos) : 0; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage> CreateSetAnimationMasksMessage(FlatBufferBuilder builder,
      GenericEditor.Plugin.AnimationController.ToViewer.AnimationMasks animationMasks = 0) {
    builder.StartTable(1);
    SetAnimationMasksMessage.AddAnimationMasks(builder, animationMasks);
    return SetAnimationMasksMessage.EndSetAnimationMasksMessage(builder);
  }

  public static void StartSetAnimationMasksMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAnimationMasks(FlatBufferBuilder builder, GenericEditor.Plugin.AnimationController.ToViewer.AnimationMasks animationMasks) { builder.AddUint(0, (uint)animationMasks, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage> EndSetAnimationMasksMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage>(o);
  }
  public SetAnimationMasksMessageT UnPack() {
    var _o = new SetAnimationMasksMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetAnimationMasksMessageT _o) {
    _o.AnimationMasks = this.AnimationMasks;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage> Pack(FlatBufferBuilder builder, SetAnimationMasksMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage>);
    return CreateSetAnimationMasksMessage(
      builder,
      _o.AnimationMasks);
  }
};

public class SetAnimationMasksMessageT
{
  [Newtonsoft.Json.JsonProperty("animationMasks")]
  public GenericEditor.Plugin.AnimationController.ToViewer.AnimationMasks AnimationMasks { get; set; }

  public SetAnimationMasksMessageT() {
    this.AnimationMasks = 0;
  }
}

public struct SetSkeletonMaxPriorityMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetSkeletonMaxPriorityMessage GetRootAsSetSkeletonMaxPriorityMessage(ByteBuffer _bb) { return GetRootAsSetSkeletonMaxPriorityMessage(_bb, new SetSkeletonMaxPriorityMessage()); }
  public static SetSkeletonMaxPriorityMessage GetRootAsSetSkeletonMaxPriorityMessage(ByteBuffer _bb, SetSkeletonMaxPriorityMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetSkeletonMaxPriorityMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsEnabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint MaxPriority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage> CreateSetSkeletonMaxPriorityMessage(FlatBufferBuilder builder,
      bool isEnabled = false,
      uint maxPriority = 0) {
    builder.StartTable(2);
    SetSkeletonMaxPriorityMessage.AddMaxPriority(builder, maxPriority);
    SetSkeletonMaxPriorityMessage.AddIsEnabled(builder, isEnabled);
    return SetSkeletonMaxPriorityMessage.EndSetSkeletonMaxPriorityMessage(builder);
  }

  public static void StartSetSkeletonMaxPriorityMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIsEnabled(FlatBufferBuilder builder, bool isEnabled) { builder.AddBool(0, isEnabled, false); }
  public static void AddMaxPriority(FlatBufferBuilder builder, uint maxPriority) { builder.AddUint(1, maxPriority, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage> EndSetSkeletonMaxPriorityMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage>(o);
  }
  public SetSkeletonMaxPriorityMessageT UnPack() {
    var _o = new SetSkeletonMaxPriorityMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetSkeletonMaxPriorityMessageT _o) {
    _o.IsEnabled = this.IsEnabled;
    _o.MaxPriority = this.MaxPriority;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage> Pack(FlatBufferBuilder builder, SetSkeletonMaxPriorityMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage>);
    return CreateSetSkeletonMaxPriorityMessage(
      builder,
      _o.IsEnabled,
      _o.MaxPriority);
  }
};

public class SetSkeletonMaxPriorityMessageT
{
  [Newtonsoft.Json.JsonProperty("isEnabled")]
  public bool IsEnabled { get; set; }
  [Newtonsoft.Json.JsonProperty("maxPriority")]
  public uint MaxPriority { get; set; }

  public SetSkeletonMaxPriorityMessageT() {
    this.IsEnabled = false;
    this.MaxPriority = 0;
  }
}

public struct SetCameraAnimationEnabledMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetCameraAnimationEnabledMessage GetRootAsSetCameraAnimationEnabledMessage(ByteBuffer _bb) { return GetRootAsSetCameraAnimationEnabledMessage(_bb, new SetCameraAnimationEnabledMessage()); }
  public static SetCameraAnimationEnabledMessage GetRootAsSetCameraAnimationEnabledMessage(ByteBuffer _bb, SetCameraAnimationEnabledMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetCameraAnimationEnabledMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage> CreateSetCameraAnimationEnabledMessage(FlatBufferBuilder builder,
      bool enabled = false) {
    builder.StartTable(1);
    SetCameraAnimationEnabledMessage.AddEnabled(builder, enabled);
    return SetCameraAnimationEnabledMessage.EndSetCameraAnimationEnabledMessage(builder);
  }

  public static void StartSetCameraAnimationEnabledMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage> EndSetCameraAnimationEnabledMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage>(o);
  }
  public SetCameraAnimationEnabledMessageT UnPack() {
    var _o = new SetCameraAnimationEnabledMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetCameraAnimationEnabledMessageT _o) {
    _o.Enabled = this.Enabled;
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage> Pack(FlatBufferBuilder builder, SetCameraAnimationEnabledMessageT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage>);
    return CreateSetCameraAnimationEnabledMessage(
      builder,
      _o.Enabled);
  }
};

public class SetCameraAnimationEnabledMessageT
{
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public SetCameraAnimationEnabledMessageT() {
    this.Enabled = false;
  }
}

public struct AnimationControllerToViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationControllerToViewer GetRootAsAnimationControllerToViewer(ByteBuffer _bb) { return GetRootAsAnimationControllerToViewer(_bb, new AnimationControllerToViewer()); }
  public static AnimationControllerToViewer GetRootAsAnimationControllerToViewer(ByteBuffer _bb, AnimationControllerToViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationControllerToViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.AnimationController.ToViewer.MessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.AnimationController.ToViewer.MessageType)__p.bb.Get(o + __p.bb_pos) : GenericEditor.Plugin.AnimationController.ToViewer.MessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer> CreateAnimationControllerToViewer(FlatBufferBuilder builder,
      GenericEditor.Plugin.AnimationController.ToViewer.MessageType message_type = GenericEditor.Plugin.AnimationController.ToViewer.MessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    AnimationControllerToViewer.AddMessage(builder, messageOffset);
    AnimationControllerToViewer.AddMessageType(builder, message_type);
    return AnimationControllerToViewer.EndAnimationControllerToViewer(builder);
  }

  public static void StartAnimationControllerToViewer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, GenericEditor.Plugin.AnimationController.ToViewer.MessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer> EndAnimationControllerToViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer>(o);
  }
  public static void FinishAnimationControllerToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationControllerToViewerBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationControllerToViewerT UnPack() {
    var _o = new AnimationControllerToViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationControllerToViewerT _o) {
    _o.Message = new GenericEditor.Plugin.AnimationController.ToViewer.MessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.LoadMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.LoadMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.StateMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.StateMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetFrameMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetFrameMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetSpeedMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSpeedMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetLoopMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetLoopMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetSyncAllMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSyncAllMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetAnimationMasksMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetAnimationMasksMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetSkeletonMaxPriorityMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetSkeletonMaxPriorityMessage>().Value.UnPack() : null;
        break;
      case GenericEditor.Plugin.AnimationController.ToViewer.MessageType.SetCameraAnimationEnabledMessage:
        _o.Message.Value = this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage>().HasValue ? this.Message<GenericEditor.Plugin.AnimationController.ToViewer.SetCameraAnimationEnabledMessage>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer> Pack(FlatBufferBuilder builder, AnimationControllerToViewerT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.AnimationController.ToViewer.AnimationControllerToViewer>);
    var _message_type = _o.Message == null ? GenericEditor.Plugin.AnimationController.ToViewer.MessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : GenericEditor.Plugin.AnimationController.ToViewer.MessageTypeUnion.Pack(builder, _o.Message);
    return CreateAnimationControllerToViewer(
      builder,
      _message_type,
      _message);
  }
};

public class AnimationControllerToViewerT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private GenericEditor.Plugin.AnimationController.ToViewer.MessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : GenericEditor.Plugin.AnimationController.ToViewer.MessageType.NONE;
    }
    set {
      this.Message = new GenericEditor.Plugin.AnimationController.ToViewer.MessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(GenericEditor.Plugin.AnimationController.ToViewer.MessageTypeUnion_JsonConverter))]
  public GenericEditor.Plugin.AnimationController.ToViewer.MessageTypeUnion Message { get; set; }

  public AnimationControllerToViewerT() {
    this.Message = null;
  }

  public static AnimationControllerToViewerT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationControllerToViewerT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationControllerToViewerT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationControllerToViewer.GetRootAsAnimationControllerToViewer(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationControllerToViewer.FinishAnimationControllerToViewerBuffer(fbb, AnimationControllerToViewer.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
