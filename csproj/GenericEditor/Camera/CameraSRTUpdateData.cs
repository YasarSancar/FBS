// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Camera.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ProjectionType : byte
{
  Perspective = 0,
  Ortho = 1,
};

public struct CameraSRTUpdateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraSRTUpdateData GetRootAsCameraSRTUpdateData(ByteBuffer _bb) { return GetRootAsCameraSRTUpdateData(_bb, new CameraSRTUpdateData()); }
  public static CameraSRTUpdateData GetRootAsCameraSRTUpdateData(ByteBuffer _bb, CameraSRTUpdateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraSRTUpdateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector3f? Rotation { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector3f? Translation { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Fovy { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)30.0f; } }
  public float NearDistance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)32.0f; } }
  public float FarDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)6000.0f; } }
  public GenericEditor.Plugin.Camera.FB.ProjectionType ProjectionType { get { int o = __p.__offset(16); return o != 0 ? (GenericEditor.Plugin.Camera.FB.ProjectionType)__p.bb.Get(o + __p.bb_pos) : GenericEditor.Plugin.Camera.FB.ProjectionType.Perspective; } }

  public static Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData> CreateCameraSRTUpdateData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT rotation = null,
      gfl.math.fb.Vector3fT translation = null,
      float fovy = 30.0f,
      float nearDistance = 32.0f,
      float farDistance = 6000.0f,
      GenericEditor.Plugin.Camera.FB.ProjectionType projectionType = GenericEditor.Plugin.Camera.FB.ProjectionType.Perspective) {
    builder.StartTable(7);
    CameraSRTUpdateData.AddFarDistance(builder, farDistance);
    CameraSRTUpdateData.AddNearDistance(builder, nearDistance);
    CameraSRTUpdateData.AddFovy(builder, fovy);
    CameraSRTUpdateData.AddTranslation(builder, gfl.math.fb.Vector3f.Pack(builder, translation));
    CameraSRTUpdateData.AddRotation(builder, gfl.math.fb.Vector3f.Pack(builder, rotation));
    CameraSRTUpdateData.AddInstanceName(builder, instanceNameOffset);
    CameraSRTUpdateData.AddProjectionType(builder, projectionType);
    return CameraSRTUpdateData.EndCameraSRTUpdateData(builder);
  }

  public static void StartCameraSRTUpdateData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> rotationOffset) { builder.AddStruct(1, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> translationOffset) { builder.AddStruct(2, translationOffset.Value, 0); }
  public static void AddFovy(FlatBufferBuilder builder, float fovy) { builder.AddFloat(3, fovy, 30.0f); }
  public static void AddNearDistance(FlatBufferBuilder builder, float nearDistance) { builder.AddFloat(4, nearDistance, 32.0f); }
  public static void AddFarDistance(FlatBufferBuilder builder, float farDistance) { builder.AddFloat(5, farDistance, 6000.0f); }
  public static void AddProjectionType(FlatBufferBuilder builder, GenericEditor.Plugin.Camera.FB.ProjectionType projectionType) { builder.AddByte(6, (byte)projectionType, 0); }
  public static Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData> EndCameraSRTUpdateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData>(o);
  }
  public static void FinishCameraSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCameraSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CameraSRTUpdateDataT UnPack() {
    var _o = new CameraSRTUpdateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraSRTUpdateDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
    _o.Fovy = this.Fovy;
    _o.NearDistance = this.NearDistance;
    _o.FarDistance = this.FarDistance;
    _o.ProjectionType = this.ProjectionType;
  }
  public static Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData> Pack(FlatBufferBuilder builder, CameraSRTUpdateDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Camera.FB.CameraSRTUpdateData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    return CreateCameraSRTUpdateData(
      builder,
      _instanceName,
      _o.Rotation,
      _o.Translation,
      _o.Fovy,
      _o.NearDistance,
      _o.FarDistance,
      _o.ProjectionType);
  }
};

public class CameraSRTUpdateDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public gfl.math.fb.Vector3fT Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("translation")]
  public gfl.math.fb.Vector3fT Translation { get; set; }
  [Newtonsoft.Json.JsonProperty("fovy")]
  public float Fovy { get; set; }
  [Newtonsoft.Json.JsonProperty("nearDistance")]
  public float NearDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("farDistance")]
  public float FarDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("projectionType")]
  public GenericEditor.Plugin.Camera.FB.ProjectionType ProjectionType { get; set; }

  public CameraSRTUpdateDataT() {
    this.InstanceName = null;
    this.Rotation = new gfl.math.fb.Vector3fT();
    this.Translation = new gfl.math.fb.Vector3fT();
    this.Fovy = 30.0f;
    this.NearDistance = 32.0f;
    this.FarDistance = 6000.0f;
    this.ProjectionType = GenericEditor.Plugin.Camera.FB.ProjectionType.Perspective;
  }

  public static CameraSRTUpdateDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CameraSRTUpdateDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CameraSRTUpdateDataT DeserializeFromBinary(byte[] fbBuffer) {
    return CameraSRTUpdateData.GetRootAsCameraSRTUpdateData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CameraSRTUpdateData.FinishCameraSRTUpdateDataBuffer(fbb, CameraSRTUpdateData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
