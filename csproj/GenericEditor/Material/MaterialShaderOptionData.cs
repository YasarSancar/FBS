// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Material
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ShaderOptionData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ShaderOptionData GetRootAsShaderOptionData(ByteBuffer _bb) { return GetRootAsShaderOptionData(_bb, new ShaderOptionData()); }
  public static ShaderOptionData GetRootAsShaderOptionData(ByteBuffer _bb, ShaderOptionData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShaderOptionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MaterialName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMaterialNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMaterialNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TechniqueName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTechniqueNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTechniqueNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTechniqueNameArray() { return __p.__vector_as_array<byte>(6); }
  public string OptionName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOptionNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOptionNameArray() { return __p.__vector_as_array<byte>(8); }
  public string OptionChoice { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOptionChoiceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOptionChoiceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOptionChoiceArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GenericEditor.Plugin.Material.ShaderOptionData> CreateShaderOptionData(FlatBufferBuilder builder,
      StringOffset materialNameOffset = default(StringOffset),
      StringOffset techniqueNameOffset = default(StringOffset),
      StringOffset optionNameOffset = default(StringOffset),
      StringOffset optionChoiceOffset = default(StringOffset)) {
    builder.StartTable(4);
    ShaderOptionData.AddOptionChoice(builder, optionChoiceOffset);
    ShaderOptionData.AddOptionName(builder, optionNameOffset);
    ShaderOptionData.AddTechniqueName(builder, techniqueNameOffset);
    ShaderOptionData.AddMaterialName(builder, materialNameOffset);
    return ShaderOptionData.EndShaderOptionData(builder);
  }

  public static void StartShaderOptionData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMaterialName(FlatBufferBuilder builder, StringOffset materialNameOffset) { builder.AddOffset(0, materialNameOffset.Value, 0); }
  public static void AddTechniqueName(FlatBufferBuilder builder, StringOffset techniqueNameOffset) { builder.AddOffset(1, techniqueNameOffset.Value, 0); }
  public static void AddOptionName(FlatBufferBuilder builder, StringOffset optionNameOffset) { builder.AddOffset(2, optionNameOffset.Value, 0); }
  public static void AddOptionChoice(FlatBufferBuilder builder, StringOffset optionChoiceOffset) { builder.AddOffset(3, optionChoiceOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Material.ShaderOptionData> EndShaderOptionData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Material.ShaderOptionData>(o);
  }
  public static void FinishShaderOptionDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Material.ShaderOptionData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedShaderOptionDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Material.ShaderOptionData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ShaderOptionDataT UnPack() {
    var _o = new ShaderOptionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShaderOptionDataT _o) {
    _o.MaterialName = this.MaterialName;
    _o.TechniqueName = this.TechniqueName;
    _o.OptionName = this.OptionName;
    _o.OptionChoice = this.OptionChoice;
  }
  public static Offset<GenericEditor.Plugin.Material.ShaderOptionData> Pack(FlatBufferBuilder builder, ShaderOptionDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Material.ShaderOptionData>);
    var _materialName = _o.MaterialName == null ? default(StringOffset) : builder.CreateString(_o.MaterialName);
    var _techniqueName = _o.TechniqueName == null ? default(StringOffset) : builder.CreateString(_o.TechniqueName);
    var _optionName = _o.OptionName == null ? default(StringOffset) : builder.CreateString(_o.OptionName);
    var _optionChoice = _o.OptionChoice == null ? default(StringOffset) : builder.CreateString(_o.OptionChoice);
    return CreateShaderOptionData(
      builder,
      _materialName,
      _techniqueName,
      _optionName,
      _optionChoice);
  }
};

public class ShaderOptionDataT
{
  [Newtonsoft.Json.JsonProperty("materialName")]
  public string MaterialName { get; set; }
  [Newtonsoft.Json.JsonProperty("techniqueName")]
  public string TechniqueName { get; set; }
  [Newtonsoft.Json.JsonProperty("optionName")]
  public string OptionName { get; set; }
  [Newtonsoft.Json.JsonProperty("optionChoice")]
  public string OptionChoice { get; set; }

  public ShaderOptionDataT() {
    this.MaterialName = null;
    this.TechniqueName = null;
    this.OptionName = null;
    this.OptionChoice = null;
  }

  public static ShaderOptionDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ShaderOptionDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ShaderOptionDataT DeserializeFromBinary(byte[] fbBuffer) {
    return ShaderOptionData.GetRootAsShaderOptionData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ShaderOptionData.FinishShaderOptionDataBuffer(fbb, ShaderOptionData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
