// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.ImplicitVolume
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ImplicitVolumeEditCommandData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ImplicitVolumeEditCommandData GetRootAsImplicitVolumeEditCommandData(ByteBuffer _bb) { return GetRootAsImplicitVolumeEditCommandData(_bb, new ImplicitVolumeEditCommandData()); }
  public static ImplicitVolumeEditCommandData GetRootAsImplicitVolumeEditCommandData(ByteBuffer _bb, ImplicitVolumeEditCommandData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ImplicitVolumeEditCommandData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public string CommandName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommandNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCommandNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCommandNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Value { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData> CreateImplicitVolumeEditCommandData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      StringOffset commandNameOffset = default(StringOffset),
      int value = 0) {
    builder.StartTable(3);
    ImplicitVolumeEditCommandData.AddValue(builder, value);
    ImplicitVolumeEditCommandData.AddCommandName(builder, commandNameOffset);
    ImplicitVolumeEditCommandData.AddInstanceName(builder, instanceNameOffset);
    return ImplicitVolumeEditCommandData.EndImplicitVolumeEditCommandData(builder);
  }

  public static void StartImplicitVolumeEditCommandData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddCommandName(FlatBufferBuilder builder, StringOffset commandNameOffset) { builder.AddOffset(1, commandNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(2, value, 0); }
  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData> EndImplicitVolumeEditCommandData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData>(o);
  }
  public static void FinishImplicitVolumeEditCommandDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedImplicitVolumeEditCommandDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ImplicitVolumeEditCommandDataT UnPack() {
    var _o = new ImplicitVolumeEditCommandDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ImplicitVolumeEditCommandDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.CommandName = this.CommandName;
    _o.Value = this.Value;
  }
  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData> Pack(FlatBufferBuilder builder, ImplicitVolumeEditCommandDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeEditCommandData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _commandName = _o.CommandName == null ? default(StringOffset) : builder.CreateString(_o.CommandName);
    return CreateImplicitVolumeEditCommandData(
      builder,
      _instanceName,
      _commandName,
      _o.Value);
  }
};

public class ImplicitVolumeEditCommandDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("commandName")]
  public string CommandName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public ImplicitVolumeEditCommandDataT() {
    this.InstanceName = null;
    this.CommandName = null;
    this.Value = 0;
  }

  public static ImplicitVolumeEditCommandDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ImplicitVolumeEditCommandDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ImplicitVolumeEditCommandDataT DeserializeFromBinary(byte[] fbBuffer) {
    return ImplicitVolumeEditCommandData.GetRootAsImplicitVolumeEditCommandData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ImplicitVolumeEditCommandData.FinishImplicitVolumeEditCommandDataBuffer(fbb, ImplicitVolumeEditCommandData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
