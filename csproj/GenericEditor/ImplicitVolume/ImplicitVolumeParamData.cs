// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.ImplicitVolume
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ImplicitVolumeParamData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ImplicitVolumeParamData GetRootAsImplicitVolumeParamData(ByteBuffer _bb) { return GetRootAsImplicitVolumeParamData(_bb, new ImplicitVolumeParamData()); }
  public static ImplicitVolumeParamData GetRootAsImplicitVolumeParamData(ByteBuffer _bb, ImplicitVolumeParamData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ImplicitVolumeParamData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public int VolumeIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MaterialName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMaterialNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMaterialNameArray() { return __p.__vector_as_array<byte>(8); }
  public string StartJointName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartJointNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStartJointNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStartJointNameArray() { return __p.__vector_as_array<byte>(10); }
  public string EndJointName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndJointNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEndJointNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEndJointNameArray() { return __p.__vector_as_array<byte>(12); }
  public gfl.math.fb.Vector2f? Mask0UVDir { get { int o = __p.__offset(14); return o != 0 ? (gfl.math.fb.Vector2f?)(new gfl.math.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector2f? Mask1UVDir { get { int o = __p.__offset(16); return o != 0 ? (gfl.math.fb.Vector2f?)(new gfl.math.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector2f? Volume0UVDir { get { int o = __p.__offset(18); return o != 0 ? (gfl.math.fb.Vector2f?)(new gfl.math.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector2f? Volume1UVDir { get { int o = __p.__offset(20); return o != 0 ? (gfl.math.fb.Vector2f?)(new gfl.math.fb.Vector2f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector3f? AxisDir { get { int o = __p.__offset(22); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Radius { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool CalcType { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData> CreateImplicitVolumeParamData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      int volumeIndex = 0,
      StringOffset materialNameOffset = default(StringOffset),
      StringOffset startJointNameOffset = default(StringOffset),
      StringOffset endJointNameOffset = default(StringOffset),
      gfl.math.fb.Vector2fT mask0UVDir = null,
      gfl.math.fb.Vector2fT mask1UVDir = null,
      gfl.math.fb.Vector2fT volume0UVDir = null,
      gfl.math.fb.Vector2fT volume1UVDir = null,
      gfl.math.fb.Vector3fT axisDir = null,
      float radius = 0.0f,
      bool calcType = false) {
    builder.StartTable(12);
    ImplicitVolumeParamData.AddRadius(builder, radius);
    ImplicitVolumeParamData.AddAxisDir(builder, gfl.math.fb.Vector3f.Pack(builder, axisDir));
    ImplicitVolumeParamData.AddVolume1UVDir(builder, gfl.math.fb.Vector2f.Pack(builder, volume1UVDir));
    ImplicitVolumeParamData.AddVolume0UVDir(builder, gfl.math.fb.Vector2f.Pack(builder, volume0UVDir));
    ImplicitVolumeParamData.AddMask1UVDir(builder, gfl.math.fb.Vector2f.Pack(builder, mask1UVDir));
    ImplicitVolumeParamData.AddMask0UVDir(builder, gfl.math.fb.Vector2f.Pack(builder, mask0UVDir));
    ImplicitVolumeParamData.AddEndJointName(builder, endJointNameOffset);
    ImplicitVolumeParamData.AddStartJointName(builder, startJointNameOffset);
    ImplicitVolumeParamData.AddMaterialName(builder, materialNameOffset);
    ImplicitVolumeParamData.AddVolumeIndex(builder, volumeIndex);
    ImplicitVolumeParamData.AddInstanceName(builder, instanceNameOffset);
    ImplicitVolumeParamData.AddCalcType(builder, calcType);
    return ImplicitVolumeParamData.EndImplicitVolumeParamData(builder);
  }

  public static void StartImplicitVolumeParamData(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddVolumeIndex(FlatBufferBuilder builder, int volumeIndex) { builder.AddInt(1, volumeIndex, 0); }
  public static void AddMaterialName(FlatBufferBuilder builder, StringOffset materialNameOffset) { builder.AddOffset(2, materialNameOffset.Value, 0); }
  public static void AddStartJointName(FlatBufferBuilder builder, StringOffset startJointNameOffset) { builder.AddOffset(3, startJointNameOffset.Value, 0); }
  public static void AddEndJointName(FlatBufferBuilder builder, StringOffset endJointNameOffset) { builder.AddOffset(4, endJointNameOffset.Value, 0); }
  public static void AddMask0UVDir(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector2f> mask0UVDirOffset) { builder.AddStruct(5, mask0UVDirOffset.Value, 0); }
  public static void AddMask1UVDir(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector2f> mask1UVDirOffset) { builder.AddStruct(6, mask1UVDirOffset.Value, 0); }
  public static void AddVolume0UVDir(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector2f> volume0UVDirOffset) { builder.AddStruct(7, volume0UVDirOffset.Value, 0); }
  public static void AddVolume1UVDir(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector2f> volume1UVDirOffset) { builder.AddStruct(8, volume1UVDirOffset.Value, 0); }
  public static void AddAxisDir(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> axisDirOffset) { builder.AddStruct(9, axisDirOffset.Value, 0); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(10, radius, 0.0f); }
  public static void AddCalcType(FlatBufferBuilder builder, bool calcType) { builder.AddBool(11, calcType, false); }
  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData> EndImplicitVolumeParamData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData>(o);
  }
  public static void FinishImplicitVolumeParamDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedImplicitVolumeParamDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ImplicitVolumeParamDataT UnPack() {
    var _o = new ImplicitVolumeParamDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ImplicitVolumeParamDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.VolumeIndex = this.VolumeIndex;
    _o.MaterialName = this.MaterialName;
    _o.StartJointName = this.StartJointName;
    _o.EndJointName = this.EndJointName;
    _o.Mask0UVDir = this.Mask0UVDir.HasValue ? this.Mask0UVDir.Value.UnPack() : null;
    _o.Mask1UVDir = this.Mask1UVDir.HasValue ? this.Mask1UVDir.Value.UnPack() : null;
    _o.Volume0UVDir = this.Volume0UVDir.HasValue ? this.Volume0UVDir.Value.UnPack() : null;
    _o.Volume1UVDir = this.Volume1UVDir.HasValue ? this.Volume1UVDir.Value.UnPack() : null;
    _o.AxisDir = this.AxisDir.HasValue ? this.AxisDir.Value.UnPack() : null;
    _o.Radius = this.Radius;
    _o.CalcType = this.CalcType;
  }
  public static Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData> Pack(FlatBufferBuilder builder, ImplicitVolumeParamDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.ImplicitVolume.ImplicitVolumeParamData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _materialName = _o.MaterialName == null ? default(StringOffset) : builder.CreateString(_o.MaterialName);
    var _startJointName = _o.StartJointName == null ? default(StringOffset) : builder.CreateString(_o.StartJointName);
    var _endJointName = _o.EndJointName == null ? default(StringOffset) : builder.CreateString(_o.EndJointName);
    return CreateImplicitVolumeParamData(
      builder,
      _instanceName,
      _o.VolumeIndex,
      _materialName,
      _startJointName,
      _endJointName,
      _o.Mask0UVDir,
      _o.Mask1UVDir,
      _o.Volume0UVDir,
      _o.Volume1UVDir,
      _o.AxisDir,
      _o.Radius,
      _o.CalcType);
  }
};

public class ImplicitVolumeParamDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("volumeIndex")]
  public int VolumeIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("materialName")]
  public string MaterialName { get; set; }
  [Newtonsoft.Json.JsonProperty("startJointName")]
  public string StartJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("endJointName")]
  public string EndJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("mask0UVDir")]
  public gfl.math.fb.Vector2fT Mask0UVDir { get; set; }
  [Newtonsoft.Json.JsonProperty("mask1UVDir")]
  public gfl.math.fb.Vector2fT Mask1UVDir { get; set; }
  [Newtonsoft.Json.JsonProperty("volume0UVDir")]
  public gfl.math.fb.Vector2fT Volume0UVDir { get; set; }
  [Newtonsoft.Json.JsonProperty("volume1UVDir")]
  public gfl.math.fb.Vector2fT Volume1UVDir { get; set; }
  [Newtonsoft.Json.JsonProperty("axisDir")]
  public gfl.math.fb.Vector3fT AxisDir { get; set; }
  [Newtonsoft.Json.JsonProperty("radius")]
  public float Radius { get; set; }
  [Newtonsoft.Json.JsonProperty("calcType")]
  public bool CalcType { get; set; }

  public ImplicitVolumeParamDataT() {
    this.InstanceName = null;
    this.VolumeIndex = 0;
    this.MaterialName = null;
    this.StartJointName = null;
    this.EndJointName = null;
    this.Mask0UVDir = new gfl.math.fb.Vector2fT();
    this.Mask1UVDir = new gfl.math.fb.Vector2fT();
    this.Volume0UVDir = new gfl.math.fb.Vector2fT();
    this.Volume1UVDir = new gfl.math.fb.Vector2fT();
    this.AxisDir = new gfl.math.fb.Vector3fT();
    this.Radius = 0.0f;
    this.CalcType = false;
  }

  public static ImplicitVolumeParamDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ImplicitVolumeParamDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ImplicitVolumeParamDataT DeserializeFromBinary(byte[] fbBuffer) {
    return ImplicitVolumeParamData.GetRootAsImplicitVolumeParamData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ImplicitVolumeParamData.FinishImplicitVolumeParamDataBuffer(fbb, ImplicitVolumeParamData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
