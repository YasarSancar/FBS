// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Physics
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CollisionFilter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CollisionFilter GetRootAsCollisionFilter(ByteBuffer _bb) { return GetRootAsCollisionFilter(_bb, new CollisionFilter()); }
  public static CollisionFilter GetRootAsCollisionFilter(ByteBuffer _bb, CollisionFilter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollisionFilter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Filter { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.Physics.CollisionFilter> CreateCollisionFilter(FlatBufferBuilder builder,
      int filter = 0) {
    builder.StartTable(1);
    CollisionFilter.AddFilter(builder, filter);
    return CollisionFilter.EndCollisionFilter(builder);
  }

  public static void StartCollisionFilter(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilter(FlatBufferBuilder builder, int filter) { builder.AddInt(0, filter, 0); }
  public static Offset<GenericEditor.Plugin.Physics.CollisionFilter> EndCollisionFilter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Physics.CollisionFilter>(o);
  }
  public CollisionFilterT UnPack() {
    var _o = new CollisionFilterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollisionFilterT _o) {
    _o.Filter = this.Filter;
  }
  public static Offset<GenericEditor.Plugin.Physics.CollisionFilter> Pack(FlatBufferBuilder builder, CollisionFilterT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Physics.CollisionFilter>);
    return CreateCollisionFilter(
      builder,
      _o.Filter);
  }
};

public class CollisionFilterT
{
  [Newtonsoft.Json.JsonProperty("filter")]
  public int Filter { get; set; }

  public CollisionFilterT() {
    this.Filter = 0;
  }
}

public struct PhysicsFilterSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PhysicsFilterSetting GetRootAsPhysicsFilterSetting(ByteBuffer _bb) { return GetRootAsPhysicsFilterSetting(_bb, new PhysicsFilterSetting()); }
  public static PhysicsFilterSetting GetRootAsPhysicsFilterSetting(ByteBuffer _bb, PhysicsFilterSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhysicsFilterSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.Physics.CollisionFilter? CollisionFilterList(int j) { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.Physics.CollisionFilter?)(new GenericEditor.Plugin.Physics.CollisionFilter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CollisionFilterListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting> CreatePhysicsFilterSetting(FlatBufferBuilder builder,
      VectorOffset collisionFilterListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PhysicsFilterSetting.AddCollisionFilterList(builder, collisionFilterListOffset);
    return PhysicsFilterSetting.EndPhysicsFilterSetting(builder);
  }

  public static void StartPhysicsFilterSetting(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCollisionFilterList(FlatBufferBuilder builder, VectorOffset collisionFilterListOffset) { builder.AddOffset(0, collisionFilterListOffset.Value, 0); }
  public static VectorOffset CreateCollisionFilterListVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Physics.CollisionFilter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCollisionFilterListVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Physics.CollisionFilter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCollisionFilterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting> EndPhysicsFilterSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting>(o);
  }
  public static void FinishPhysicsFilterSettingBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPhysicsFilterSettingBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PhysicsFilterSettingT UnPack() {
    var _o = new PhysicsFilterSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhysicsFilterSettingT _o) {
    _o.CollisionFilterList = new List<GenericEditor.Plugin.Physics.CollisionFilterT>();
    for (var _j = 0; _j < this.CollisionFilterListLength; ++_j) {_o.CollisionFilterList.Add(this.CollisionFilterList(_j).HasValue ? this.CollisionFilterList(_j).Value.UnPack() : null);}
  }
  public static Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting> Pack(FlatBufferBuilder builder, PhysicsFilterSettingT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Physics.PhysicsFilterSetting>);
    var _collisionFilterList = default(VectorOffset);
    if (_o.CollisionFilterList != null) {
      var __collisionFilterList = new Offset<GenericEditor.Plugin.Physics.CollisionFilter>[_o.CollisionFilterList.Count];
      for (var _j = 0; _j < __collisionFilterList.Length; ++_j) { __collisionFilterList[_j] = GenericEditor.Plugin.Physics.CollisionFilter.Pack(builder, _o.CollisionFilterList[_j]); }
      _collisionFilterList = CreateCollisionFilterListVector(builder, __collisionFilterList);
    }
    return CreatePhysicsFilterSetting(
      builder,
      _collisionFilterList);
  }
};

public class PhysicsFilterSettingT
{
  [Newtonsoft.Json.JsonProperty("collisionFilterList")]
  public List<GenericEditor.Plugin.Physics.CollisionFilterT> CollisionFilterList { get; set; }

  public PhysicsFilterSettingT() {
    this.CollisionFilterList = null;
  }

  public static PhysicsFilterSettingT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PhysicsFilterSettingT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PhysicsFilterSettingT DeserializeFromBinary(byte[] fbBuffer) {
    return PhysicsFilterSetting.GetRootAsPhysicsFilterSetting(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PhysicsFilterSetting.FinishPhysicsFilterSettingBuffer(fbb, PhysicsFilterSetting.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
