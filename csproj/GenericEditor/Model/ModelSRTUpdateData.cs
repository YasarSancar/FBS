// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Model
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModelSRTUpdateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelSRTUpdateData GetRootAsModelSRTUpdateData(ByteBuffer _bb) { return GetRootAsModelSRTUpdateData(_bb, new ModelSRTUpdateData()); }
  public static ModelSRTUpdateData GetRootAsModelSRTUpdateData(ByteBuffer _bb, ModelSRTUpdateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelSRTUpdateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector3f? Scale { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector3f? Rotation { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector3f? Translation { get { int o = __p.__offset(10); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GenericEditor.Plugin.Model.DataType DataType { get { int o = __p.__offset(12); return o != 0 ? (GenericEditor.Plugin.Model.DataType)__p.bb.GetUint(o + __p.bb_pos) : GenericEditor.Plugin.Model.DataType.ModelSRTUpdate; } }

  public static Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData> CreateModelSRTUpdateData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT scale = null,
      gfl.math.fb.Vector3fT rotation = null,
      gfl.math.fb.Vector3fT translation = null,
      GenericEditor.Plugin.Model.DataType dataType = GenericEditor.Plugin.Model.DataType.ModelSRTUpdate) {
    builder.StartTable(5);
    ModelSRTUpdateData.AddDataType(builder, dataType);
    ModelSRTUpdateData.AddTranslation(builder, gfl.math.fb.Vector3f.Pack(builder, translation));
    ModelSRTUpdateData.AddRotation(builder, gfl.math.fb.Vector3f.Pack(builder, rotation));
    ModelSRTUpdateData.AddScale(builder, gfl.math.fb.Vector3f.Pack(builder, scale));
    ModelSRTUpdateData.AddInstanceName(builder, instanceNameOffset);
    return ModelSRTUpdateData.EndModelSRTUpdateData(builder);
  }

  public static void StartModelSRTUpdateData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> scaleOffset) { builder.AddStruct(1, scaleOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> rotationOffset) { builder.AddStruct(2, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> translationOffset) { builder.AddStruct(3, translationOffset.Value, 0); }
  public static void AddDataType(FlatBufferBuilder builder, GenericEditor.Plugin.Model.DataType dataType) { builder.AddUint(4, (uint)dataType, 4); }
  public static Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData> EndModelSRTUpdateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData>(o);
  }
  public static void FinishModelSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelSRTUpdateDataT UnPack() {
    var _o = new ModelSRTUpdateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelSRTUpdateDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
    _o.DataType = this.DataType;
  }
  public static Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData> Pack(FlatBufferBuilder builder, ModelSRTUpdateDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Model.ModelSRTUpdateData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    return CreateModelSRTUpdateData(
      builder,
      _instanceName,
      _o.Scale,
      _o.Rotation,
      _o.Translation,
      _o.DataType);
  }
};

public class ModelSRTUpdateDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public gfl.math.fb.Vector3fT Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public gfl.math.fb.Vector3fT Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("translation")]
  public gfl.math.fb.Vector3fT Translation { get; set; }
  [Newtonsoft.Json.JsonProperty("dataType")]
  public GenericEditor.Plugin.Model.DataType DataType { get; set; }

  public ModelSRTUpdateDataT() {
    this.InstanceName = null;
    this.Scale = new gfl.math.fb.Vector3fT();
    this.Rotation = new gfl.math.fb.Vector3fT();
    this.Translation = new gfl.math.fb.Vector3fT();
    this.DataType = GenericEditor.Plugin.Model.DataType.ModelSRTUpdate;
  }

  public static ModelSRTUpdateDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelSRTUpdateDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelSRTUpdateDataT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelSRTUpdateData.GetRootAsModelSRTUpdateData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelSRTUpdateData.FinishModelSRTUpdateDataBuffer(fbb, ModelSRTUpdateData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
