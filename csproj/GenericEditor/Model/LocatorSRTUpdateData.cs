// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Model
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LocatorSRTUpdateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LocatorSRTUpdateData GetRootAsLocatorSRTUpdateData(ByteBuffer _bb) { return GetRootAsLocatorSRTUpdateData(_bb, new LocatorSRTUpdateData()); }
  public static LocatorSRTUpdateData GetRootAsLocatorSRTUpdateData(ByteBuffer _bb, LocatorSRTUpdateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LocatorSRTUpdateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public string NodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.math.fb.SRT? Value { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData> CreateLocatorSRTUpdateData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      StringOffset nodeNameOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> valueOffset = default(Offset<gfl.math.fb.SRT>)) {
    builder.StartTable(3);
    LocatorSRTUpdateData.AddValue(builder, valueOffset);
    LocatorSRTUpdateData.AddNodeName(builder, nodeNameOffset);
    LocatorSRTUpdateData.AddInstanceName(builder, instanceNameOffset);
    return LocatorSRTUpdateData.EndLocatorSRTUpdateData(builder);
  }

  public static void StartLocatorSRTUpdateData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(1, nodeNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> valueOffset) { builder.AddOffset(2, valueOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData> EndLocatorSRTUpdateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData>(o);
  }
  public static void FinishLocatorSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLocatorSRTUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LocatorSRTUpdateDataT UnPack() {
    var _o = new LocatorSRTUpdateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LocatorSRTUpdateDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.NodeName = this.NodeName;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData> Pack(FlatBufferBuilder builder, LocatorSRTUpdateDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Model.LocatorSRTUpdateData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _nodeName = _o.NodeName == null ? default(StringOffset) : builder.CreateString(_o.NodeName);
    var _value = _o.Value == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Value);
    return CreateLocatorSRTUpdateData(
      builder,
      _instanceName,
      _nodeName,
      _value);
  }
};

public class LocatorSRTUpdateDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("nodeName")]
  public string NodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.math.fb.SRTT Value { get; set; }

  public LocatorSRTUpdateDataT() {
    this.InstanceName = null;
    this.NodeName = null;
    this.Value = null;
  }

  public static LocatorSRTUpdateDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LocatorSRTUpdateDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LocatorSRTUpdateDataT DeserializeFromBinary(byte[] fbBuffer) {
    return LocatorSRTUpdateData.GetRootAsLocatorSRTUpdateData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LocatorSRTUpdateData.FinishLocatorSRTUpdateDataBuffer(fbb, LocatorSRTUpdateData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
