// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Model
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModelLoadData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelLoadData GetRootAsModelLoadData(ByteBuffer _bb) { return GetRootAsModelLoadData(_bb, new ModelLoadData()); }
  public static ModelLoadData GetRootAsModelLoadData(ByteBuffer _bb, ModelLoadData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelLoadData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public string NodeName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(8); }
  public string SkeletonPath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkeletonPathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSkeletonPathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkeletonPathArray() { return __p.__vector_as_array<byte>(10); }
  public string TrmmtFilePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmmtFilePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTrmmtFilePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTrmmtFilePathArray() { return __p.__vector_as_array<byte>(12); }
  public string MetadataName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMetadataNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMetadataNameArray() { return __p.__vector_as_array<byte>(14); }
  public GenericEditor.Plugin.Model.DataType DataType { get { int o = __p.__offset(16); return o != 0 ? (GenericEditor.Plugin.Model.DataType)__p.bb.GetUint(o + __p.bb_pos) : GenericEditor.Plugin.Model.DataType.ModelLoad; } }
  public bool IsolateMaterial { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public int ModelType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GenericEditor.Plugin.Model.ModelLoadData> CreateModelLoadData(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      StringOffset nodeNameOffset = default(StringOffset),
      StringOffset skeletonPathOffset = default(StringOffset),
      StringOffset trmmtFilePathOffset = default(StringOffset),
      StringOffset metadataNameOffset = default(StringOffset),
      GenericEditor.Plugin.Model.DataType dataType = GenericEditor.Plugin.Model.DataType.ModelLoad,
      bool isolateMaterial = true,
      int modelType = 0) {
    builder.StartTable(9);
    ModelLoadData.AddModelType(builder, modelType);
    ModelLoadData.AddDataType(builder, dataType);
    ModelLoadData.AddMetadataName(builder, metadataNameOffset);
    ModelLoadData.AddTrmmtFilePath(builder, trmmtFilePathOffset);
    ModelLoadData.AddSkeletonPath(builder, skeletonPathOffset);
    ModelLoadData.AddNodeName(builder, nodeNameOffset);
    ModelLoadData.AddFilePath(builder, filePathOffset);
    ModelLoadData.AddInstanceName(builder, instanceNameOffset);
    ModelLoadData.AddIsolateMaterial(builder, isolateMaterial);
    return ModelLoadData.EndModelLoadData(builder);
  }

  public static void StartModelLoadData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(2, nodeNameOffset.Value, 0); }
  public static void AddSkeletonPath(FlatBufferBuilder builder, StringOffset skeletonPathOffset) { builder.AddOffset(3, skeletonPathOffset.Value, 0); }
  public static void AddTrmmtFilePath(FlatBufferBuilder builder, StringOffset trmmtFilePathOffset) { builder.AddOffset(4, trmmtFilePathOffset.Value, 0); }
  public static void AddMetadataName(FlatBufferBuilder builder, StringOffset metadataNameOffset) { builder.AddOffset(5, metadataNameOffset.Value, 0); }
  public static void AddDataType(FlatBufferBuilder builder, GenericEditor.Plugin.Model.DataType dataType) { builder.AddUint(6, (uint)dataType, 0); }
  public static void AddIsolateMaterial(FlatBufferBuilder builder, bool isolateMaterial) { builder.AddBool(7, isolateMaterial, true); }
  public static void AddModelType(FlatBufferBuilder builder, int modelType) { builder.AddInt(8, modelType, 0); }
  public static Offset<GenericEditor.Plugin.Model.ModelLoadData> EndModelLoadData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Model.ModelLoadData>(o);
  }
  public static void FinishModelLoadDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.ModelLoadData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelLoadDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Model.ModelLoadData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelLoadDataT UnPack() {
    var _o = new ModelLoadDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelLoadDataT _o) {
    _o.InstanceName = this.InstanceName;
    _o.FilePath = this.FilePath;
    _o.NodeName = this.NodeName;
    _o.SkeletonPath = this.SkeletonPath;
    _o.TrmmtFilePath = this.TrmmtFilePath;
    _o.MetadataName = this.MetadataName;
    _o.DataType = this.DataType;
    _o.IsolateMaterial = this.IsolateMaterial;
    _o.ModelType = this.ModelType;
  }
  public static Offset<GenericEditor.Plugin.Model.ModelLoadData> Pack(FlatBufferBuilder builder, ModelLoadDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Model.ModelLoadData>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _nodeName = _o.NodeName == null ? default(StringOffset) : builder.CreateString(_o.NodeName);
    var _skeletonPath = _o.SkeletonPath == null ? default(StringOffset) : builder.CreateString(_o.SkeletonPath);
    var _trmmtFilePath = _o.TrmmtFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmmtFilePath);
    var _metadataName = _o.MetadataName == null ? default(StringOffset) : builder.CreateString(_o.MetadataName);
    return CreateModelLoadData(
      builder,
      _instanceName,
      _filePath,
      _nodeName,
      _skeletonPath,
      _trmmtFilePath,
      _metadataName,
      _o.DataType,
      _o.IsolateMaterial,
      _o.ModelType);
  }
};

public class ModelLoadDataT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("nodeName")]
  public string NodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("skeletonPath")]
  public string SkeletonPath { get; set; }
  [Newtonsoft.Json.JsonProperty("trmmtFilePath")]
  public string TrmmtFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("metadataName")]
  public string MetadataName { get; set; }
  [Newtonsoft.Json.JsonProperty("dataType")]
  public GenericEditor.Plugin.Model.DataType DataType { get; set; }
  [Newtonsoft.Json.JsonProperty("isolateMaterial")]
  public bool IsolateMaterial { get; set; }
  [Newtonsoft.Json.JsonProperty("modelType")]
  public int ModelType { get; set; }

  public ModelLoadDataT() {
    this.InstanceName = null;
    this.FilePath = null;
    this.NodeName = null;
    this.SkeletonPath = null;
    this.TrmmtFilePath = null;
    this.MetadataName = null;
    this.DataType = GenericEditor.Plugin.Model.DataType.ModelLoad;
    this.IsolateMaterial = true;
    this.ModelType = 0;
  }

  public static ModelLoadDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelLoadDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelLoadDataT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelLoadData.GetRootAsModelLoadData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelLoadData.FinishModelLoadDataBuffer(fbb, ModelLoadData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
