// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Audio
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AudioEngineInitializationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioEngineInitializationData GetRootAsAudioEngineInitializationData(ByteBuffer _bb) { return GetRootAsAudioEngineInitializationData(_bb, new AudioEngineInitializationData()); }
  public static AudioEngineInitializationData GetRootAsAudioEngineInitializationData(ByteBuffer _bb, AudioEngineInitializationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioEngineInitializationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string BankPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBankPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBankPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBankPathArray() { return __p.__vector_as_array<byte>(4); }
  public string InitEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetInitEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetInitEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public string PackageNames(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PackageNamesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData> CreateAudioEngineInitializationData(FlatBufferBuilder builder,
      StringOffset bankPathOffset = default(StringOffset),
      StringOffset initEventNameOffset = default(StringOffset),
      VectorOffset packageNamesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    AudioEngineInitializationData.AddPackageNames(builder, packageNamesOffset);
    AudioEngineInitializationData.AddInitEventName(builder, initEventNameOffset);
    AudioEngineInitializationData.AddBankPath(builder, bankPathOffset);
    return AudioEngineInitializationData.EndAudioEngineInitializationData(builder);
  }

  public static void StartAudioEngineInitializationData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBankPath(FlatBufferBuilder builder, StringOffset bankPathOffset) { builder.AddOffset(0, bankPathOffset.Value, 0); }
  public static void AddInitEventName(FlatBufferBuilder builder, StringOffset initEventNameOffset) { builder.AddOffset(1, initEventNameOffset.Value, 0); }
  public static void AddPackageNames(FlatBufferBuilder builder, VectorOffset packageNamesOffset) { builder.AddOffset(2, packageNamesOffset.Value, 0); }
  public static VectorOffset CreatePackageNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackageNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPackageNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData> EndAudioEngineInitializationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData>(o);
  }
  public static void FinishAudioEngineInitializationDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAudioEngineInitializationDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AudioEngineInitializationDataT UnPack() {
    var _o = new AudioEngineInitializationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioEngineInitializationDataT _o) {
    _o.BankPath = this.BankPath;
    _o.InitEventName = this.InitEventName;
    _o.PackageNames = new List<string>();
    for (var _j = 0; _j < this.PackageNamesLength; ++_j) {_o.PackageNames.Add(this.PackageNames(_j));}
  }
  public static Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData> Pack(FlatBufferBuilder builder, AudioEngineInitializationDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Audio.AudioEngineInitializationData>);
    var _bankPath = _o.BankPath == null ? default(StringOffset) : builder.CreateString(_o.BankPath);
    var _initEventName = _o.InitEventName == null ? default(StringOffset) : builder.CreateString(_o.InitEventName);
    var _packageNames = default(VectorOffset);
    if (_o.PackageNames != null) {
      var __packageNames = new StringOffset[_o.PackageNames.Count];
      for (var _j = 0; _j < __packageNames.Length; ++_j) { __packageNames[_j] = builder.CreateString(_o.PackageNames[_j]); }
      _packageNames = CreatePackageNamesVector(builder, __packageNames);
    }
    return CreateAudioEngineInitializationData(
      builder,
      _bankPath,
      _initEventName,
      _packageNames);
  }
};

public class AudioEngineInitializationDataT
{
  [Newtonsoft.Json.JsonProperty("bankPath")]
  public string BankPath { get; set; }
  [Newtonsoft.Json.JsonProperty("initEventName")]
  public string InitEventName { get; set; }
  [Newtonsoft.Json.JsonProperty("packageNames")]
  public List<string> PackageNames { get; set; }

  public AudioEngineInitializationDataT() {
    this.BankPath = null;
    this.InitEventName = null;
    this.PackageNames = null;
  }

  public static AudioEngineInitializationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioEngineInitializationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AudioEngineInitializationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return AudioEngineInitializationData.GetRootAsAudioEngineInitializationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AudioEngineInitializationData.FinishAudioEngineInitializationDataBuffer(fbb, AudioEngineInitializationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
