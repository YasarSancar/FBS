// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GenericEditor.Plugin.Animation
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb) { return GetRootAsVector3(_bb, new Vector3()); }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb, Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GenericEditor.Plugin.Animation.Vector3> CreateVector3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartTable(3);
    Vector3.AddZ(builder, z);
    Vector3.AddY(builder, y);
    Vector3.AddX(builder, x);
    return Vector3.EndVector3(builder);
  }

  public static void StartVector3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<GenericEditor.Plugin.Animation.Vector3> EndVector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Animation.Vector3>(o);
  }
  public Vector3T UnPack() {
    var _o = new Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<GenericEditor.Plugin.Animation.Vector3> Pack(FlatBufferBuilder builder, Vector3T _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Animation.Vector3>);
    return CreateVector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct TwoBoneIKGroupUpdateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TwoBoneIKGroupUpdateData GetRootAsTwoBoneIKGroupUpdateData(ByteBuffer _bb) { return GetRootAsTwoBoneIKGroupUpdateData(_bb, new TwoBoneIKGroupUpdateData()); }
  public static TwoBoneIKGroupUpdateData GetRootAsTwoBoneIKGroupUpdateData(ByteBuffer _bb, TwoBoneIKGroupUpdateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TwoBoneIKGroupUpdateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string GroupName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGroupNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGroupNameArray() { return __p.__vector_as_array<byte>(4); }
  public GenericEditor.Plugin.Animation.Vector3? TargetPosition { get { int o = __p.__offset(6); return o != 0 ? (GenericEditor.Plugin.Animation.Vector3?)(new GenericEditor.Plugin.Animation.Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData> CreateTwoBoneIKGroupUpdateData(FlatBufferBuilder builder,
      StringOffset groupNameOffset = default(StringOffset),
      Offset<GenericEditor.Plugin.Animation.Vector3> targetPositionOffset = default(Offset<GenericEditor.Plugin.Animation.Vector3>)) {
    builder.StartTable(2);
    TwoBoneIKGroupUpdateData.AddTargetPosition(builder, targetPositionOffset);
    TwoBoneIKGroupUpdateData.AddGroupName(builder, groupNameOffset);
    return TwoBoneIKGroupUpdateData.EndTwoBoneIKGroupUpdateData(builder);
  }

  public static void StartTwoBoneIKGroupUpdateData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddGroupName(FlatBufferBuilder builder, StringOffset groupNameOffset) { builder.AddOffset(0, groupNameOffset.Value, 0); }
  public static void AddTargetPosition(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Animation.Vector3> targetPositionOffset) { builder.AddOffset(1, targetPositionOffset.Value, 0); }
  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData> EndTwoBoneIKGroupUpdateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData>(o);
  }
  public TwoBoneIKGroupUpdateDataT UnPack() {
    var _o = new TwoBoneIKGroupUpdateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TwoBoneIKGroupUpdateDataT _o) {
    _o.GroupName = this.GroupName;
    _o.TargetPosition = this.TargetPosition.HasValue ? this.TargetPosition.Value.UnPack() : null;
  }
  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData> Pack(FlatBufferBuilder builder, TwoBoneIKGroupUpdateDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData>);
    var _groupName = _o.GroupName == null ? default(StringOffset) : builder.CreateString(_o.GroupName);
    var _targetPosition = _o.TargetPosition == null ? default(Offset<GenericEditor.Plugin.Animation.Vector3>) : GenericEditor.Plugin.Animation.Vector3.Pack(builder, _o.TargetPosition);
    return CreateTwoBoneIKGroupUpdateData(
      builder,
      _groupName,
      _targetPosition);
  }
};

public class TwoBoneIKGroupUpdateDataT
{
  [Newtonsoft.Json.JsonProperty("groupName")]
  public string GroupName { get; set; }
  [Newtonsoft.Json.JsonProperty("targetPosition")]
  public GenericEditor.Plugin.Animation.Vector3T TargetPosition { get; set; }

  public TwoBoneIKGroupUpdateDataT() {
    this.GroupName = null;
    this.TargetPosition = null;
  }
}

public struct TwoBoneIKUpdateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TwoBoneIKUpdateData GetRootAsTwoBoneIKUpdateData(ByteBuffer _bb) { return GetRootAsTwoBoneIKUpdateData(_bb, new TwoBoneIKUpdateData()); }
  public static TwoBoneIKUpdateData GetRootAsTwoBoneIKUpdateData(ByteBuffer _bb, TwoBoneIKUpdateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TwoBoneIKUpdateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData? Groups(int j) { int o = __p.__offset(4); return o != 0 ? (GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData?)(new GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GroupsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData> CreateTwoBoneIKUpdateData(FlatBufferBuilder builder,
      VectorOffset groupsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TwoBoneIKUpdateData.AddGroups(builder, groupsOffset);
    return TwoBoneIKUpdateData.EndTwoBoneIKUpdateData(builder);
  }

  public static void StartTwoBoneIKUpdateData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddGroups(FlatBufferBuilder builder, VectorOffset groupsOffset) { builder.AddOffset(0, groupsOffset.Value, 0); }
  public static VectorOffset CreateGroupsVector(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData> EndTwoBoneIKUpdateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData>(o);
  }
  public static void FinishTwoBoneIKUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTwoBoneIKUpdateDataBuffer(FlatBufferBuilder builder, Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TwoBoneIKUpdateDataT UnPack() {
    var _o = new TwoBoneIKUpdateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TwoBoneIKUpdateDataT _o) {
    _o.Groups = new List<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateDataT>();
    for (var _j = 0; _j < this.GroupsLength; ++_j) {_o.Groups.Add(this.Groups(_j).HasValue ? this.Groups(_j).Value.UnPack() : null);}
  }
  public static Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData> Pack(FlatBufferBuilder builder, TwoBoneIKUpdateDataT _o) {
    if (_o == null) return default(Offset<GenericEditor.Plugin.Animation.TwoBoneIKUpdateData>);
    var _groups = default(VectorOffset);
    if (_o.Groups != null) {
      var __groups = new Offset<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData>[_o.Groups.Count];
      for (var _j = 0; _j < __groups.Length; ++_j) { __groups[_j] = GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateData.Pack(builder, _o.Groups[_j]); }
      _groups = CreateGroupsVector(builder, __groups);
    }
    return CreateTwoBoneIKUpdateData(
      builder,
      _groups);
  }
};

public class TwoBoneIKUpdateDataT
{
  [Newtonsoft.Json.JsonProperty("groups")]
  public List<GenericEditor.Plugin.Animation.TwoBoneIKGroupUpdateDataT> Groups { get; set; }

  public TwoBoneIKUpdateDataT() {
    this.Groups = null;
  }

  public static TwoBoneIKUpdateDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TwoBoneIKUpdateDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TwoBoneIKUpdateDataT DeserializeFromBinary(byte[] fbBuffer) {
    return TwoBoneIKUpdateData.GetRootAsTwoBoneIKUpdateData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TwoBoneIKUpdateData.FinishTwoBoneIKUpdateDataBuffer(fbb, TwoBoneIKUpdateData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
