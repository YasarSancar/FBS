// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sdp
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ToRuntimeMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ToRuntimeMessage GetRootAsToRuntimeMessage(ByteBuffer _bb) { return GetRootAsToRuntimeMessage(_bb, new ToRuntimeMessage()); }
  public static ToRuntimeMessage GetRootAsToRuntimeMessage(ByteBuffer _bb, ToRuntimeMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ToRuntimeMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.ToRuntimeMessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (sdp.ToRuntimeMessageType)__p.bb.Get(o + __p.bb_pos) : sdp.ToRuntimeMessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<sdp.ToRuntimeMessage> CreateToRuntimeMessage(FlatBufferBuilder builder,
      sdp.ToRuntimeMessageType message_type = sdp.ToRuntimeMessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    ToRuntimeMessage.AddMessage(builder, messageOffset);
    ToRuntimeMessage.AddMessageType(builder, message_type);
    return ToRuntimeMessage.EndToRuntimeMessage(builder);
  }

  public static void StartToRuntimeMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, sdp.ToRuntimeMessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<sdp.ToRuntimeMessage> EndToRuntimeMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.ToRuntimeMessage>(o);
  }
  public static void FinishToRuntimeMessageBuffer(FlatBufferBuilder builder, Offset<sdp.ToRuntimeMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedToRuntimeMessageBuffer(FlatBufferBuilder builder, Offset<sdp.ToRuntimeMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ToRuntimeMessageT UnPack() {
    var _o = new ToRuntimeMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ToRuntimeMessageT _o) {
    _o.Message = new sdp.ToRuntimeMessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case sdp.ToRuntimeMessageType.EventResponse:
        _o.Message.Value = this.Message<sdp.EventResponse>().HasValue ? this.Message<sdp.EventResponse>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.DebugStartRequest:
        _o.Message.Value = this.Message<sdp.DebugStartRequest>().HasValue ? this.Message<sdp.DebugStartRequest>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.SetBreakpointsRequest:
        _o.Message.Value = this.Message<sdp.SetBreakpointsRequest>().HasValue ? this.Message<sdp.SetBreakpointsRequest>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.StackTraceRequest:
        _o.Message.Value = this.Message<sdp.StackTraceRequest>().HasValue ? this.Message<sdp.StackTraceRequest>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.DebugActionRequest:
        _o.Message.Value = this.Message<sdp.DebugActionRequest>().HasValue ? this.Message<sdp.DebugActionRequest>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.LocalVariablesRequest:
        _o.Message.Value = this.Message<sdp.LocalVariablesRequest>().HasValue ? this.Message<sdp.LocalVariablesRequest>().Value.UnPack() : null;
        break;
      case sdp.ToRuntimeMessageType.GlobalVariablesRequest:
        _o.Message.Value = this.Message<sdp.GlobalVariablesRequest>().HasValue ? this.Message<sdp.GlobalVariablesRequest>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<sdp.ToRuntimeMessage> Pack(FlatBufferBuilder builder, ToRuntimeMessageT _o) {
    if (_o == null) return default(Offset<sdp.ToRuntimeMessage>);
    var _message_type = _o.Message == null ? sdp.ToRuntimeMessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : sdp.ToRuntimeMessageTypeUnion.Pack(builder, _o.Message);
    return CreateToRuntimeMessage(
      builder,
      _message_type,
      _message);
  }
};

public class ToRuntimeMessageT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private sdp.ToRuntimeMessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : sdp.ToRuntimeMessageType.NONE;
    }
    set {
      this.Message = new sdp.ToRuntimeMessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(sdp.ToRuntimeMessageTypeUnion_JsonConverter))]
  public sdp.ToRuntimeMessageTypeUnion Message { get; set; }

  public ToRuntimeMessageT() {
    this.Message = null;
  }

  public static ToRuntimeMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ToRuntimeMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ToRuntimeMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return ToRuntimeMessage.GetRootAsToRuntimeMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ToRuntimeMessage.FinishToRuntimeMessageBuffer(fbb, ToRuntimeMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
