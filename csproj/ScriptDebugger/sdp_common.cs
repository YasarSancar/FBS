// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sdp
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ToRuntimeMessageType : byte
{
  NONE = 0,
  EventResponse = 1,
  DebugStartRequest = 2,
  SetBreakpointsRequest = 3,
  StackTraceRequest = 4,
  DebugActionRequest = 5,
  LocalVariablesRequest = 6,
  GlobalVariablesRequest = 7,
};

public class ToRuntimeMessageTypeUnion {
  public ToRuntimeMessageType Type { get; set; }
  public object Value { get; set; }

  public ToRuntimeMessageTypeUnion() {
    this.Type = ToRuntimeMessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public sdp.EventResponseT AsEventResponse() { return this.As<sdp.EventResponseT>(); }
  public sdp.DebugStartRequestT AsDebugStartRequest() { return this.As<sdp.DebugStartRequestT>(); }
  public sdp.SetBreakpointsRequestT AsSetBreakpointsRequest() { return this.As<sdp.SetBreakpointsRequestT>(); }
  public sdp.StackTraceRequestT AsStackTraceRequest() { return this.As<sdp.StackTraceRequestT>(); }
  public sdp.DebugActionRequestT AsDebugActionRequest() { return this.As<sdp.DebugActionRequestT>(); }
  public sdp.LocalVariablesRequestT AsLocalVariablesRequest() { return this.As<sdp.LocalVariablesRequestT>(); }
  public sdp.GlobalVariablesRequestT AsGlobalVariablesRequest() { return this.As<sdp.GlobalVariablesRequestT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ToRuntimeMessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ToRuntimeMessageType.EventResponse: return sdp.EventResponse.Pack(builder, _o.AsEventResponse()).Value;
      case ToRuntimeMessageType.DebugStartRequest: return sdp.DebugStartRequest.Pack(builder, _o.AsDebugStartRequest()).Value;
      case ToRuntimeMessageType.SetBreakpointsRequest: return sdp.SetBreakpointsRequest.Pack(builder, _o.AsSetBreakpointsRequest()).Value;
      case ToRuntimeMessageType.StackTraceRequest: return sdp.StackTraceRequest.Pack(builder, _o.AsStackTraceRequest()).Value;
      case ToRuntimeMessageType.DebugActionRequest: return sdp.DebugActionRequest.Pack(builder, _o.AsDebugActionRequest()).Value;
      case ToRuntimeMessageType.LocalVariablesRequest: return sdp.LocalVariablesRequest.Pack(builder, _o.AsLocalVariablesRequest()).Value;
      case ToRuntimeMessageType.GlobalVariablesRequest: return sdp.GlobalVariablesRequest.Pack(builder, _o.AsGlobalVariablesRequest()).Value;
    }
  }
}

public class ToRuntimeMessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ToRuntimeMessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<ToRuntimeMessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ToRuntimeMessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ToRuntimeMessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ToRuntimeMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ToRuntimeMessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ToRuntimeMessageTypeUnion, serializer);
    }
  }
  public ToRuntimeMessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, ToRuntimeMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ToRuntimeMessageType.EventResponse: _o.Value = serializer.Deserialize<sdp.EventResponseT>(reader); break;
      case ToRuntimeMessageType.DebugStartRequest: _o.Value = serializer.Deserialize<sdp.DebugStartRequestT>(reader); break;
      case ToRuntimeMessageType.SetBreakpointsRequest: _o.Value = serializer.Deserialize<sdp.SetBreakpointsRequestT>(reader); break;
      case ToRuntimeMessageType.StackTraceRequest: _o.Value = serializer.Deserialize<sdp.StackTraceRequestT>(reader); break;
      case ToRuntimeMessageType.DebugActionRequest: _o.Value = serializer.Deserialize<sdp.DebugActionRequestT>(reader); break;
      case ToRuntimeMessageType.LocalVariablesRequest: _o.Value = serializer.Deserialize<sdp.LocalVariablesRequestT>(reader); break;
      case ToRuntimeMessageType.GlobalVariablesRequest: _o.Value = serializer.Deserialize<sdp.GlobalVariablesRequestT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ToDebuggerMessageType : byte
{
  NONE = 0,
  StoppedEvent = 1,
  LoadedSourceEvent = 2,
  DebugStartResponse = 3,
  SetBreakpointsResponse = 4,
  StackTraceResponse = 5,
  DebugActionResponse = 6,
  LocalVariablesResponse = 7,
  GlobalVariablesResponse = 8,
};

public class ToDebuggerMessageTypeUnion {
  public ToDebuggerMessageType Type { get; set; }
  public object Value { get; set; }

  public ToDebuggerMessageTypeUnion() {
    this.Type = ToDebuggerMessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public sdp.StoppedEventT AsStoppedEvent() { return this.As<sdp.StoppedEventT>(); }
  public sdp.LoadedSourceEventT AsLoadedSourceEvent() { return this.As<sdp.LoadedSourceEventT>(); }
  public sdp.DebugStartResponseT AsDebugStartResponse() { return this.As<sdp.DebugStartResponseT>(); }
  public sdp.SetBreakpointsResponseT AsSetBreakpointsResponse() { return this.As<sdp.SetBreakpointsResponseT>(); }
  public sdp.StackTraceResponseT AsStackTraceResponse() { return this.As<sdp.StackTraceResponseT>(); }
  public sdp.DebugActionResponseT AsDebugActionResponse() { return this.As<sdp.DebugActionResponseT>(); }
  public sdp.LocalVariablesResponseT AsLocalVariablesResponse() { return this.As<sdp.LocalVariablesResponseT>(); }
  public sdp.GlobalVariablesResponseT AsGlobalVariablesResponse() { return this.As<sdp.GlobalVariablesResponseT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ToDebuggerMessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ToDebuggerMessageType.StoppedEvent: return sdp.StoppedEvent.Pack(builder, _o.AsStoppedEvent()).Value;
      case ToDebuggerMessageType.LoadedSourceEvent: return sdp.LoadedSourceEvent.Pack(builder, _o.AsLoadedSourceEvent()).Value;
      case ToDebuggerMessageType.DebugStartResponse: return sdp.DebugStartResponse.Pack(builder, _o.AsDebugStartResponse()).Value;
      case ToDebuggerMessageType.SetBreakpointsResponse: return sdp.SetBreakpointsResponse.Pack(builder, _o.AsSetBreakpointsResponse()).Value;
      case ToDebuggerMessageType.StackTraceResponse: return sdp.StackTraceResponse.Pack(builder, _o.AsStackTraceResponse()).Value;
      case ToDebuggerMessageType.DebugActionResponse: return sdp.DebugActionResponse.Pack(builder, _o.AsDebugActionResponse()).Value;
      case ToDebuggerMessageType.LocalVariablesResponse: return sdp.LocalVariablesResponse.Pack(builder, _o.AsLocalVariablesResponse()).Value;
      case ToDebuggerMessageType.GlobalVariablesResponse: return sdp.GlobalVariablesResponse.Pack(builder, _o.AsGlobalVariablesResponse()).Value;
    }
  }
}

public class ToDebuggerMessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ToDebuggerMessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<ToDebuggerMessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ToDebuggerMessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ToDebuggerMessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ToDebuggerMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ToDebuggerMessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ToDebuggerMessageTypeUnion, serializer);
    }
  }
  public ToDebuggerMessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, ToDebuggerMessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ToDebuggerMessageType.StoppedEvent: _o.Value = serializer.Deserialize<sdp.StoppedEventT>(reader); break;
      case ToDebuggerMessageType.LoadedSourceEvent: _o.Value = serializer.Deserialize<sdp.LoadedSourceEventT>(reader); break;
      case ToDebuggerMessageType.DebugStartResponse: _o.Value = serializer.Deserialize<sdp.DebugStartResponseT>(reader); break;
      case ToDebuggerMessageType.SetBreakpointsResponse: _o.Value = serializer.Deserialize<sdp.SetBreakpointsResponseT>(reader); break;
      case ToDebuggerMessageType.StackTraceResponse: _o.Value = serializer.Deserialize<sdp.StackTraceResponseT>(reader); break;
      case ToDebuggerMessageType.DebugActionResponse: _o.Value = serializer.Deserialize<sdp.DebugActionResponseT>(reader); break;
      case ToDebuggerMessageType.LocalVariablesResponse: _o.Value = serializer.Deserialize<sdp.LocalVariablesResponseT>(reader); break;
      case ToDebuggerMessageType.GlobalVariablesResponse: _o.Value = serializer.Deserialize<sdp.GlobalVariablesResponseT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum DebugActionRequest_Type : int
{
  Stop = 0,
  Pause = 1,
  Continue = 2,
  Next = 3,
  StepIn = 4,
  StepOut = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Variable_Type : int
{
  Number = 0,
  String = 1,
  Bool = 2,
  Null = 3,
  UserData = 4,
  Function = 5,
  Thread = 6,
  Table = 7,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum StoppedEvent_Reason : int
{
  Step = 0,
  Breakpoint = 1,
  Exception = 2,
  Pause = 3,
};

public struct DebugStartRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DebugStartRequest GetRootAsDebugStartRequest(ByteBuffer _bb) { return GetRootAsDebugStartRequest(_bb, new DebugStartRequest()); }
  public static DebugStartRequest GetRootAsDebugStartRequest(ByteBuffer _bb, DebugStartRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugStartRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Dummy_ { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.DebugStartRequest> CreateDebugStartRequest(FlatBufferBuilder builder,
      int __dummy__ = 0) {
    builder.StartTable(1);
    DebugStartRequest.Add_Dummy_(builder, __dummy__);
    return DebugStartRequest.EndDebugStartRequest(builder);
  }

  public static void StartDebugStartRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_Dummy_(FlatBufferBuilder builder, int _dummy_) { builder.AddInt(0, _dummy_, 0); }
  public static Offset<sdp.DebugStartRequest> EndDebugStartRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.DebugStartRequest>(o);
  }
  public DebugStartRequestT UnPack() {
    var _o = new DebugStartRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugStartRequestT _o) {
    _o._Dummy_ = this._Dummy_;
  }
  public static Offset<sdp.DebugStartRequest> Pack(FlatBufferBuilder builder, DebugStartRequestT _o) {
    if (_o == null) return default(Offset<sdp.DebugStartRequest>);
    return CreateDebugStartRequest(
      builder,
      _o._Dummy_);
  }
};

public class DebugStartRequestT
{
  [Newtonsoft.Json.JsonProperty("__dummy__")]
  public int _Dummy_ { get; set; }

  public DebugStartRequestT() {
    this._Dummy_ = 0;
  }
}

public struct DebugStartResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DebugStartResponse GetRootAsDebugStartResponse(ByteBuffer _bb) { return GetRootAsDebugStartResponse(_bb, new DebugStartResponse()); }
  public static DebugStartResponse GetRootAsDebugStartResponse(ByteBuffer _bb, DebugStartResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugStartResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ExePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetExePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetExePathArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePathList(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FilePathListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint Crc32List(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int Crc32ListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetCrc32ListBytes() { return __p.__vector_as_span<uint>(8, 4); }
#else
  public ArraySegment<byte>? GetCrc32ListBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public uint[] GetCrc32ListArray() { return __p.__vector_as_array<uint>(8); }

  public static Offset<sdp.DebugStartResponse> CreateDebugStartResponse(FlatBufferBuilder builder,
      StringOffset exePathOffset = default(StringOffset),
      VectorOffset filePathListOffset = default(VectorOffset),
      VectorOffset crc32ListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    DebugStartResponse.AddCrc32List(builder, crc32ListOffset);
    DebugStartResponse.AddFilePathList(builder, filePathListOffset);
    DebugStartResponse.AddExePath(builder, exePathOffset);
    return DebugStartResponse.EndDebugStartResponse(builder);
  }

  public static void StartDebugStartResponse(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddExePath(FlatBufferBuilder builder, StringOffset exePathOffset) { builder.AddOffset(0, exePathOffset.Value, 0); }
  public static void AddFilePathList(FlatBufferBuilder builder, VectorOffset filePathListOffset) { builder.AddOffset(1, filePathListOffset.Value, 0); }
  public static VectorOffset CreateFilePathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFilePathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFilePathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrc32List(FlatBufferBuilder builder, VectorOffset crc32ListOffset) { builder.AddOffset(2, crc32ListOffset.Value, 0); }
  public static VectorOffset CreateCrc32ListVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCrc32ListVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCrc32ListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.DebugStartResponse> EndDebugStartResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.DebugStartResponse>(o);
  }
  public DebugStartResponseT UnPack() {
    var _o = new DebugStartResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugStartResponseT _o) {
    _o.ExePath = this.ExePath;
    _o.FilePathList = new List<string>();
    for (var _j = 0; _j < this.FilePathListLength; ++_j) {_o.FilePathList.Add(this.FilePathList(_j));}
    _o.Crc32List = new List<uint>();
    for (var _j = 0; _j < this.Crc32ListLength; ++_j) {_o.Crc32List.Add(this.Crc32List(_j));}
  }
  public static Offset<sdp.DebugStartResponse> Pack(FlatBufferBuilder builder, DebugStartResponseT _o) {
    if (_o == null) return default(Offset<sdp.DebugStartResponse>);
    var _exePath = _o.ExePath == null ? default(StringOffset) : builder.CreateString(_o.ExePath);
    var _filePathList = default(VectorOffset);
    if (_o.FilePathList != null) {
      var __filePathList = new StringOffset[_o.FilePathList.Count];
      for (var _j = 0; _j < __filePathList.Length; ++_j) { __filePathList[_j] = builder.CreateString(_o.FilePathList[_j]); }
      _filePathList = CreateFilePathListVector(builder, __filePathList);
    }
    var _crc32List = default(VectorOffset);
    if (_o.Crc32List != null) {
      var __crc32List = _o.Crc32List.ToArray();
      _crc32List = CreateCrc32ListVector(builder, __crc32List);
    }
    return CreateDebugStartResponse(
      builder,
      _exePath,
      _filePathList,
      _crc32List);
  }
};

public class DebugStartResponseT
{
  [Newtonsoft.Json.JsonProperty("exePath")]
  public string ExePath { get; set; }
  [Newtonsoft.Json.JsonProperty("filePathList")]
  public List<string> FilePathList { get; set; }
  [Newtonsoft.Json.JsonProperty("crc32List")]
  public List<uint> Crc32List { get; set; }

  public DebugStartResponseT() {
    this.ExePath = null;
    this.FilePathList = null;
    this.Crc32List = null;
  }
}

public struct Source : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Source GetRootAsSource(ByteBuffer _bb) { return GetRootAsSource(_bb, new Source()); }
  public static Source GetRootAsSource(ByteBuffer _bb, Source obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Source __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Path { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<sdp.Source> CreateSource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    Source.AddPath(builder, pathOffset);
    Source.AddName(builder, nameOffset);
    return Source.EndSource(builder);
  }

  public static void StartSource(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(1, pathOffset.Value, 0); }
  public static Offset<sdp.Source> EndSource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.Source>(o);
  }
  public SourceT UnPack() {
    var _o = new SourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SourceT _o) {
    _o.Name = this.Name;
    _o.Path = this.Path;
  }
  public static Offset<sdp.Source> Pack(FlatBufferBuilder builder, SourceT _o) {
    if (_o == null) return default(Offset<sdp.Source>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateSource(
      builder,
      _name,
      _path);
  }
};

public class SourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public SourceT() {
    this.Name = null;
    this.Path = null;
  }
}

public struct Breakpoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Breakpoint GetRootAsBreakpoint(ByteBuffer _bb) { return GetRootAsBreakpoint(_bb, new Breakpoint()); }
  public static Breakpoint GetRootAsBreakpoint(ByteBuffer _bb, Breakpoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Breakpoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Verified { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Line { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Condition { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(10); }
  public string HitCondition { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHitConditionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHitConditionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHitConditionArray() { return __p.__vector_as_array<byte>(12); }
  public string LogMessage { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogMessageBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLogMessageBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLogMessageArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<sdp.Breakpoint> CreateBreakpoint(FlatBufferBuilder builder,
      int id = 0,
      bool verified = false,
      int line = 0,
      StringOffset conditionOffset = default(StringOffset),
      StringOffset hitConditionOffset = default(StringOffset),
      StringOffset logMessageOffset = default(StringOffset)) {
    builder.StartTable(6);
    Breakpoint.AddLogMessage(builder, logMessageOffset);
    Breakpoint.AddHitCondition(builder, hitConditionOffset);
    Breakpoint.AddCondition(builder, conditionOffset);
    Breakpoint.AddLine(builder, line);
    Breakpoint.AddId(builder, id);
    Breakpoint.AddVerified(builder, verified);
    return Breakpoint.EndBreakpoint(builder);
  }

  public static void StartBreakpoint(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddVerified(FlatBufferBuilder builder, bool verified) { builder.AddBool(1, verified, false); }
  public static void AddLine(FlatBufferBuilder builder, int line) { builder.AddInt(2, line, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(3, conditionOffset.Value, 0); }
  public static void AddHitCondition(FlatBufferBuilder builder, StringOffset hitConditionOffset) { builder.AddOffset(4, hitConditionOffset.Value, 0); }
  public static void AddLogMessage(FlatBufferBuilder builder, StringOffset logMessageOffset) { builder.AddOffset(5, logMessageOffset.Value, 0); }
  public static Offset<sdp.Breakpoint> EndBreakpoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.Breakpoint>(o);
  }
  public BreakpointT UnPack() {
    var _o = new BreakpointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BreakpointT _o) {
    _o.Id = this.Id;
    _o.Verified = this.Verified;
    _o.Line = this.Line;
    _o.Condition = this.Condition;
    _o.HitCondition = this.HitCondition;
    _o.LogMessage = this.LogMessage;
  }
  public static Offset<sdp.Breakpoint> Pack(FlatBufferBuilder builder, BreakpointT _o) {
    if (_o == null) return default(Offset<sdp.Breakpoint>);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _hitCondition = _o.HitCondition == null ? default(StringOffset) : builder.CreateString(_o.HitCondition);
    var _logMessage = _o.LogMessage == null ? default(StringOffset) : builder.CreateString(_o.LogMessage);
    return CreateBreakpoint(
      builder,
      _o.Id,
      _o.Verified,
      _o.Line,
      _condition,
      _hitCondition,
      _logMessage);
  }
};

public class BreakpointT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("verified")]
  public bool Verified { get; set; }
  [Newtonsoft.Json.JsonProperty("line")]
  public int Line { get; set; }
  [Newtonsoft.Json.JsonProperty("condition")]
  public string Condition { get; set; }
  [Newtonsoft.Json.JsonProperty("hitCondition")]
  public string HitCondition { get; set; }
  [Newtonsoft.Json.JsonProperty("logMessage")]
  public string LogMessage { get; set; }

  public BreakpointT() {
    this.Id = 0;
    this.Verified = false;
    this.Line = 0;
    this.Condition = null;
    this.HitCondition = null;
    this.LogMessage = null;
  }
}

public struct SetBreakpointsRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetBreakpointsRequest GetRootAsSetBreakpointsRequest(ByteBuffer _bb) { return GetRootAsSetBreakpointsRequest(_bb, new SetBreakpointsRequest()); }
  public static SetBreakpointsRequest GetRootAsSetBreakpointsRequest(ByteBuffer _bb, SetBreakpointsRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetBreakpointsRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.Source? Source { get { int o = __p.__offset(4); return o != 0 ? (sdp.Source?)(new sdp.Source()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public sdp.Breakpoint? Breakpoints(int j) { int o = __p.__offset(6); return o != 0 ? (sdp.Breakpoint?)(new sdp.Breakpoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BreakpointsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.SetBreakpointsRequest> CreateSetBreakpointsRequest(FlatBufferBuilder builder,
      Offset<sdp.Source> sourceOffset = default(Offset<sdp.Source>),
      VectorOffset breakpointsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SetBreakpointsRequest.AddBreakpoints(builder, breakpointsOffset);
    SetBreakpointsRequest.AddSource(builder, sourceOffset);
    return SetBreakpointsRequest.EndSetBreakpointsRequest(builder);
  }

  public static void StartSetBreakpointsRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSource(FlatBufferBuilder builder, Offset<sdp.Source> sourceOffset) { builder.AddOffset(0, sourceOffset.Value, 0); }
  public static void AddBreakpoints(FlatBufferBuilder builder, VectorOffset breakpointsOffset) { builder.AddOffset(1, breakpointsOffset.Value, 0); }
  public static VectorOffset CreateBreakpointsVector(FlatBufferBuilder builder, Offset<sdp.Breakpoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBreakpointsVectorBlock(FlatBufferBuilder builder, Offset<sdp.Breakpoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBreakpointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.SetBreakpointsRequest> EndSetBreakpointsRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.SetBreakpointsRequest>(o);
  }
  public SetBreakpointsRequestT UnPack() {
    var _o = new SetBreakpointsRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetBreakpointsRequestT _o) {
    _o.Source = this.Source.HasValue ? this.Source.Value.UnPack() : null;
    _o.Breakpoints = new List<sdp.BreakpointT>();
    for (var _j = 0; _j < this.BreakpointsLength; ++_j) {_o.Breakpoints.Add(this.Breakpoints(_j).HasValue ? this.Breakpoints(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.SetBreakpointsRequest> Pack(FlatBufferBuilder builder, SetBreakpointsRequestT _o) {
    if (_o == null) return default(Offset<sdp.SetBreakpointsRequest>);
    var _source = _o.Source == null ? default(Offset<sdp.Source>) : sdp.Source.Pack(builder, _o.Source);
    var _breakpoints = default(VectorOffset);
    if (_o.Breakpoints != null) {
      var __breakpoints = new Offset<sdp.Breakpoint>[_o.Breakpoints.Count];
      for (var _j = 0; _j < __breakpoints.Length; ++_j) { __breakpoints[_j] = sdp.Breakpoint.Pack(builder, _o.Breakpoints[_j]); }
      _breakpoints = CreateBreakpointsVector(builder, __breakpoints);
    }
    return CreateSetBreakpointsRequest(
      builder,
      _source,
      _breakpoints);
  }
};

public class SetBreakpointsRequestT
{
  [Newtonsoft.Json.JsonProperty("source")]
  public sdp.SourceT Source { get; set; }
  [Newtonsoft.Json.JsonProperty("breakpoints")]
  public List<sdp.BreakpointT> Breakpoints { get; set; }

  public SetBreakpointsRequestT() {
    this.Source = null;
    this.Breakpoints = null;
  }
}

public struct SetBreakpointsResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SetBreakpointsResponse GetRootAsSetBreakpointsResponse(ByteBuffer _bb) { return GetRootAsSetBreakpointsResponse(_bb, new SetBreakpointsResponse()); }
  public static SetBreakpointsResponse GetRootAsSetBreakpointsResponse(ByteBuffer _bb, SetBreakpointsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetBreakpointsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.Breakpoint? Breakpoints(int j) { int o = __p.__offset(4); return o != 0 ? (sdp.Breakpoint?)(new sdp.Breakpoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BreakpointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.SetBreakpointsResponse> CreateSetBreakpointsResponse(FlatBufferBuilder builder,
      VectorOffset breakpointsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SetBreakpointsResponse.AddBreakpoints(builder, breakpointsOffset);
    return SetBreakpointsResponse.EndSetBreakpointsResponse(builder);
  }

  public static void StartSetBreakpointsResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBreakpoints(FlatBufferBuilder builder, VectorOffset breakpointsOffset) { builder.AddOffset(0, breakpointsOffset.Value, 0); }
  public static VectorOffset CreateBreakpointsVector(FlatBufferBuilder builder, Offset<sdp.Breakpoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBreakpointsVectorBlock(FlatBufferBuilder builder, Offset<sdp.Breakpoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBreakpointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.SetBreakpointsResponse> EndSetBreakpointsResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.SetBreakpointsResponse>(o);
  }
  public SetBreakpointsResponseT UnPack() {
    var _o = new SetBreakpointsResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SetBreakpointsResponseT _o) {
    _o.Breakpoints = new List<sdp.BreakpointT>();
    for (var _j = 0; _j < this.BreakpointsLength; ++_j) {_o.Breakpoints.Add(this.Breakpoints(_j).HasValue ? this.Breakpoints(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.SetBreakpointsResponse> Pack(FlatBufferBuilder builder, SetBreakpointsResponseT _o) {
    if (_o == null) return default(Offset<sdp.SetBreakpointsResponse>);
    var _breakpoints = default(VectorOffset);
    if (_o.Breakpoints != null) {
      var __breakpoints = new Offset<sdp.Breakpoint>[_o.Breakpoints.Count];
      for (var _j = 0; _j < __breakpoints.Length; ++_j) { __breakpoints[_j] = sdp.Breakpoint.Pack(builder, _o.Breakpoints[_j]); }
      _breakpoints = CreateBreakpointsVector(builder, __breakpoints);
    }
    return CreateSetBreakpointsResponse(
      builder,
      _breakpoints);
  }
};

public class SetBreakpointsResponseT
{
  [Newtonsoft.Json.JsonProperty("breakpoints")]
  public List<sdp.BreakpointT> Breakpoints { get; set; }

  public SetBreakpointsResponseT() {
    this.Breakpoints = null;
  }
}

public struct StackTraceRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StackTraceRequest GetRootAsStackTraceRequest(ByteBuffer _bb) { return GetRootAsStackTraceRequest(_bb, new StackTraceRequest()); }
  public static StackTraceRequest GetRootAsStackTraceRequest(ByteBuffer _bb, StackTraceRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StackTraceRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Dummy_ { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.StackTraceRequest> CreateStackTraceRequest(FlatBufferBuilder builder,
      int __dummy__ = 0) {
    builder.StartTable(1);
    StackTraceRequest.Add_Dummy_(builder, __dummy__);
    return StackTraceRequest.EndStackTraceRequest(builder);
  }

  public static void StartStackTraceRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_Dummy_(FlatBufferBuilder builder, int _dummy_) { builder.AddInt(0, _dummy_, 0); }
  public static Offset<sdp.StackTraceRequest> EndStackTraceRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.StackTraceRequest>(o);
  }
  public StackTraceRequestT UnPack() {
    var _o = new StackTraceRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StackTraceRequestT _o) {
    _o._Dummy_ = this._Dummy_;
  }
  public static Offset<sdp.StackTraceRequest> Pack(FlatBufferBuilder builder, StackTraceRequestT _o) {
    if (_o == null) return default(Offset<sdp.StackTraceRequest>);
    return CreateStackTraceRequest(
      builder,
      _o._Dummy_);
  }
};

public class StackTraceRequestT
{
  [Newtonsoft.Json.JsonProperty("__dummy__")]
  public int _Dummy_ { get; set; }

  public StackTraceRequestT() {
    this._Dummy_ = 0;
  }
}

public struct StackFrame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StackFrame GetRootAsStackFrame(ByteBuffer _bb) { return GetRootAsStackFrame(_bb, new StackFrame()); }
  public static StackFrame GetRootAsStackFrame(ByteBuffer _bb, StackFrame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StackFrame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Source { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(8); }
  public int Line { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.StackFrame> CreateStackFrame(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      int line = 0) {
    builder.StartTable(4);
    StackFrame.AddLine(builder, line);
    StackFrame.AddSource(builder, sourceOffset);
    StackFrame.AddName(builder, nameOffset);
    StackFrame.AddId(builder, id);
    return StackFrame.EndStackFrame(builder);
  }

  public static void StartStackFrame(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(2, sourceOffset.Value, 0); }
  public static void AddLine(FlatBufferBuilder builder, int line) { builder.AddInt(3, line, 0); }
  public static Offset<sdp.StackFrame> EndStackFrame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.StackFrame>(o);
  }
  public StackFrameT UnPack() {
    var _o = new StackFrameT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StackFrameT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Source = this.Source;
    _o.Line = this.Line;
  }
  public static Offset<sdp.StackFrame> Pack(FlatBufferBuilder builder, StackFrameT _o) {
    if (_o == null) return default(Offset<sdp.StackFrame>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    return CreateStackFrame(
      builder,
      _o.Id,
      _name,
      _source,
      _o.Line);
  }
};

public class StackFrameT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public string Source { get; set; }
  [Newtonsoft.Json.JsonProperty("line")]
  public int Line { get; set; }

  public StackFrameT() {
    this.Id = 0;
    this.Name = null;
    this.Source = null;
    this.Line = 0;
  }
}

public struct StackTraceResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StackTraceResponse GetRootAsStackTraceResponse(ByteBuffer _bb) { return GetRootAsStackTraceResponse(_bb, new StackTraceResponse()); }
  public static StackTraceResponse GetRootAsStackTraceResponse(ByteBuffer _bb, StackTraceResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StackTraceResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.StackFrame? StackFrames(int j) { int o = __p.__offset(4); return o != 0 ? (sdp.StackFrame?)(new sdp.StackFrame()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StackFramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.StackTraceResponse> CreateStackTraceResponse(FlatBufferBuilder builder,
      VectorOffset stackFramesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StackTraceResponse.AddStackFrames(builder, stackFramesOffset);
    return StackTraceResponse.EndStackTraceResponse(builder);
  }

  public static void StartStackTraceResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddStackFrames(FlatBufferBuilder builder, VectorOffset stackFramesOffset) { builder.AddOffset(0, stackFramesOffset.Value, 0); }
  public static VectorOffset CreateStackFramesVector(FlatBufferBuilder builder, Offset<sdp.StackFrame>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStackFramesVectorBlock(FlatBufferBuilder builder, Offset<sdp.StackFrame>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStackFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.StackTraceResponse> EndStackTraceResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.StackTraceResponse>(o);
  }
  public StackTraceResponseT UnPack() {
    var _o = new StackTraceResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StackTraceResponseT _o) {
    _o.StackFrames = new List<sdp.StackFrameT>();
    for (var _j = 0; _j < this.StackFramesLength; ++_j) {_o.StackFrames.Add(this.StackFrames(_j).HasValue ? this.StackFrames(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.StackTraceResponse> Pack(FlatBufferBuilder builder, StackTraceResponseT _o) {
    if (_o == null) return default(Offset<sdp.StackTraceResponse>);
    var _stackFrames = default(VectorOffset);
    if (_o.StackFrames != null) {
      var __stackFrames = new Offset<sdp.StackFrame>[_o.StackFrames.Count];
      for (var _j = 0; _j < __stackFrames.Length; ++_j) { __stackFrames[_j] = sdp.StackFrame.Pack(builder, _o.StackFrames[_j]); }
      _stackFrames = CreateStackFramesVector(builder, __stackFrames);
    }
    return CreateStackTraceResponse(
      builder,
      _stackFrames);
  }
};

public class StackTraceResponseT
{
  [Newtonsoft.Json.JsonProperty("stackFrames")]
  public List<sdp.StackFrameT> StackFrames { get; set; }

  public StackTraceResponseT() {
    this.StackFrames = null;
  }
}

public struct DebugActionRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DebugActionRequest GetRootAsDebugActionRequest(ByteBuffer _bb) { return GetRootAsDebugActionRequest(_bb, new DebugActionRequest()); }
  public static DebugActionRequest GetRootAsDebugActionRequest(ByteBuffer _bb, DebugActionRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugActionRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.DebugActionRequest_Type Type { get { int o = __p.__offset(4); return o != 0 ? (sdp.DebugActionRequest_Type)__p.bb.GetInt(o + __p.bb_pos) : sdp.DebugActionRequest_Type.Stop; } }

  public static Offset<sdp.DebugActionRequest> CreateDebugActionRequest(FlatBufferBuilder builder,
      sdp.DebugActionRequest_Type type = sdp.DebugActionRequest_Type.Stop) {
    builder.StartTable(1);
    DebugActionRequest.AddType(builder, type);
    return DebugActionRequest.EndDebugActionRequest(builder);
  }

  public static void StartDebugActionRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddType(FlatBufferBuilder builder, sdp.DebugActionRequest_Type type) { builder.AddInt(0, (int)type, 0); }
  public static Offset<sdp.DebugActionRequest> EndDebugActionRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.DebugActionRequest>(o);
  }
  public DebugActionRequestT UnPack() {
    var _o = new DebugActionRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugActionRequestT _o) {
    _o.Type = this.Type;
  }
  public static Offset<sdp.DebugActionRequest> Pack(FlatBufferBuilder builder, DebugActionRequestT _o) {
    if (_o == null) return default(Offset<sdp.DebugActionRequest>);
    return CreateDebugActionRequest(
      builder,
      _o.Type);
  }
};

public class DebugActionRequestT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public sdp.DebugActionRequest_Type Type { get; set; }

  public DebugActionRequestT() {
    this.Type = sdp.DebugActionRequest_Type.Stop;
  }
}

public struct DebugActionResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DebugActionResponse GetRootAsDebugActionResponse(ByteBuffer _bb) { return GetRootAsDebugActionResponse(_bb, new DebugActionResponse()); }
  public static DebugActionResponse GetRootAsDebugActionResponse(ByteBuffer _bb, DebugActionResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DebugActionResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Dummy_ { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.DebugActionResponse> CreateDebugActionResponse(FlatBufferBuilder builder,
      int __dummy__ = 0) {
    builder.StartTable(1);
    DebugActionResponse.Add_Dummy_(builder, __dummy__);
    return DebugActionResponse.EndDebugActionResponse(builder);
  }

  public static void StartDebugActionResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_Dummy_(FlatBufferBuilder builder, int _dummy_) { builder.AddInt(0, _dummy_, 0); }
  public static Offset<sdp.DebugActionResponse> EndDebugActionResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.DebugActionResponse>(o);
  }
  public DebugActionResponseT UnPack() {
    var _o = new DebugActionResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DebugActionResponseT _o) {
    _o._Dummy_ = this._Dummy_;
  }
  public static Offset<sdp.DebugActionResponse> Pack(FlatBufferBuilder builder, DebugActionResponseT _o) {
    if (_o == null) return default(Offset<sdp.DebugActionResponse>);
    return CreateDebugActionResponse(
      builder,
      _o._Dummy_);
  }
};

public class DebugActionResponseT
{
  [Newtonsoft.Json.JsonProperty("__dummy__")]
  public int _Dummy_ { get; set; }

  public DebugActionResponseT() {
    this._Dummy_ = 0;
  }
}

public struct Variable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Variable GetRootAsVariable(ByteBuffer _bb) { return GetRootAsVariable(_bb, new Variable()); }
  public static Variable GetRootAsVariable(ByteBuffer _bb, Variable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Variable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LuaIndex { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public sdp.Variable_Type Type { get { int o = __p.__offset(12); return o != 0 ? (sdp.Variable_Type)__p.bb.GetInt(o + __p.bb_pos) : sdp.Variable_Type.Number; } }
  public string TypeText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeTextArray() { return __p.__vector_as_array<byte>(14); }
  public string Value { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(16); }
  public int ChildrenCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public sdp.Variable? Children(int j) { int o = __p.__offset(20); return o != 0 ? (sdp.Variable?)(new sdp.Variable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.Variable> CreateVariable(FlatBufferBuilder builder,
      int level = 0,
      int id = 0,
      int lua_index = 0,
      StringOffset nameOffset = default(StringOffset),
      sdp.Variable_Type type = sdp.Variable_Type.Number,
      StringOffset typeTextOffset = default(StringOffset),
      StringOffset valueOffset = default(StringOffset),
      int childrenCount = 0,
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(9);
    Variable.AddChildren(builder, childrenOffset);
    Variable.AddChildrenCount(builder, childrenCount);
    Variable.AddValue(builder, valueOffset);
    Variable.AddTypeText(builder, typeTextOffset);
    Variable.AddType(builder, type);
    Variable.AddName(builder, nameOffset);
    Variable.AddLuaIndex(builder, lua_index);
    Variable.AddId(builder, id);
    Variable.AddLevel(builder, level);
    return Variable.EndVariable(builder);
  }

  public static void StartVariable(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddLuaIndex(FlatBufferBuilder builder, int luaIndex) { builder.AddInt(2, luaIndex, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, sdp.Variable_Type type) { builder.AddInt(4, (int)type, 0); }
  public static void AddTypeText(FlatBufferBuilder builder, StringOffset typeTextOffset) { builder.AddOffset(5, typeTextOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(6, valueOffset.Value, 0); }
  public static void AddChildrenCount(FlatBufferBuilder builder, int childrenCount) { builder.AddInt(7, childrenCount, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(8, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.Variable> EndVariable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.Variable>(o);
  }
  public VariableT UnPack() {
    var _o = new VariableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VariableT _o) {
    _o.Level = this.Level;
    _o.Id = this.Id;
    _o.LuaIndex = this.LuaIndex;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.TypeText = this.TypeText;
    _o.Value = this.Value;
    _o.ChildrenCount = this.ChildrenCount;
    _o.Children = new List<sdp.VariableT>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j).HasValue ? this.Children(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.Variable> Pack(FlatBufferBuilder builder, VariableT _o) {
    if (_o == null) return default(Offset<sdp.Variable>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _typeText = _o.TypeText == null ? default(StringOffset) : builder.CreateString(_o.TypeText);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = new Offset<sdp.Variable>[_o.Children.Count];
      for (var _j = 0; _j < __children.Length; ++_j) { __children[_j] = sdp.Variable.Pack(builder, _o.Children[_j]); }
      _children = CreateChildrenVector(builder, __children);
    }
    return CreateVariable(
      builder,
      _o.Level,
      _o.Id,
      _o.LuaIndex,
      _name,
      _o.Type,
      _typeText,
      _value,
      _o.ChildrenCount,
      _children);
  }
};

public class VariableT
{
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("id")]
  public int Id { get; set; }
  [Newtonsoft.Json.JsonProperty("lua_index")]
  public int LuaIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public sdp.Variable_Type Type { get; set; }
  [Newtonsoft.Json.JsonProperty("typeText")]
  public string TypeText { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }
  [Newtonsoft.Json.JsonProperty("childrenCount")]
  public int ChildrenCount { get; set; }
  [Newtonsoft.Json.JsonProperty("children")]
  public List<sdp.VariableT> Children { get; set; }

  public VariableT() {
    this.Level = 0;
    this.Id = 0;
    this.LuaIndex = 0;
    this.Name = null;
    this.Type = sdp.Variable_Type.Number;
    this.TypeText = null;
    this.Value = null;
    this.ChildrenCount = 0;
    this.Children = null;
  }
}

public struct LocalVariablesRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LocalVariablesRequest GetRootAsLocalVariablesRequest(ByteBuffer _bb) { return GetRootAsLocalVariablesRequest(_bb, new LocalVariablesRequest()); }
  public static LocalVariablesRequest GetRootAsLocalVariablesRequest(ByteBuffer _bb, LocalVariablesRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LocalVariablesRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LuaIndexList(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LuaIndexListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLuaIndexListBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetLuaIndexListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetLuaIndexListArray() { return __p.__vector_as_array<int>(6); }

  public static Offset<sdp.LocalVariablesRequest> CreateLocalVariablesRequest(FlatBufferBuilder builder,
      int level = 0,
      VectorOffset lua_index_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    LocalVariablesRequest.AddLuaIndexList(builder, lua_index_listOffset);
    LocalVariablesRequest.AddLevel(builder, level);
    return LocalVariablesRequest.EndLocalVariablesRequest(builder);
  }

  public static void StartLocalVariablesRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddLuaIndexList(FlatBufferBuilder builder, VectorOffset luaIndexListOffset) { builder.AddOffset(1, luaIndexListOffset.Value, 0); }
  public static VectorOffset CreateLuaIndexListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLuaIndexListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLuaIndexListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.LocalVariablesRequest> EndLocalVariablesRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.LocalVariablesRequest>(o);
  }
  public LocalVariablesRequestT UnPack() {
    var _o = new LocalVariablesRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LocalVariablesRequestT _o) {
    _o.Level = this.Level;
    _o.LuaIndexList = new List<int>();
    for (var _j = 0; _j < this.LuaIndexListLength; ++_j) {_o.LuaIndexList.Add(this.LuaIndexList(_j));}
  }
  public static Offset<sdp.LocalVariablesRequest> Pack(FlatBufferBuilder builder, LocalVariablesRequestT _o) {
    if (_o == null) return default(Offset<sdp.LocalVariablesRequest>);
    var _lua_index_list = default(VectorOffset);
    if (_o.LuaIndexList != null) {
      var __lua_index_list = _o.LuaIndexList.ToArray();
      _lua_index_list = CreateLuaIndexListVector(builder, __lua_index_list);
    }
    return CreateLocalVariablesRequest(
      builder,
      _o.Level,
      _lua_index_list);
  }
};

public class LocalVariablesRequestT
{
  [Newtonsoft.Json.JsonProperty("level")]
  public int Level { get; set; }
  [Newtonsoft.Json.JsonProperty("lua_index_list")]
  public List<int> LuaIndexList { get; set; }

  public LocalVariablesRequestT() {
    this.Level = 0;
    this.LuaIndexList = null;
  }
}

public struct LocalVariablesResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LocalVariablesResponse GetRootAsLocalVariablesResponse(ByteBuffer _bb) { return GetRootAsLocalVariablesResponse(_bb, new LocalVariablesResponse()); }
  public static LocalVariablesResponse GetRootAsLocalVariablesResponse(ByteBuffer _bb, LocalVariablesResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LocalVariablesResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.Variable? Variables(int j) { int o = __p.__offset(4); return o != 0 ? (sdp.Variable?)(new sdp.Variable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.LocalVariablesResponse> CreateLocalVariablesResponse(FlatBufferBuilder builder,
      VectorOffset variablesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LocalVariablesResponse.AddVariables(builder, variablesOffset);
    return LocalVariablesResponse.EndLocalVariablesResponse(builder);
  }

  public static void StartLocalVariablesResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(0, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.LocalVariablesResponse> EndLocalVariablesResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.LocalVariablesResponse>(o);
  }
  public LocalVariablesResponseT UnPack() {
    var _o = new LocalVariablesResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LocalVariablesResponseT _o) {
    _o.Variables = new List<sdp.VariableT>();
    for (var _j = 0; _j < this.VariablesLength; ++_j) {_o.Variables.Add(this.Variables(_j).HasValue ? this.Variables(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.LocalVariablesResponse> Pack(FlatBufferBuilder builder, LocalVariablesResponseT _o) {
    if (_o == null) return default(Offset<sdp.LocalVariablesResponse>);
    var _variables = default(VectorOffset);
    if (_o.Variables != null) {
      var __variables = new Offset<sdp.Variable>[_o.Variables.Count];
      for (var _j = 0; _j < __variables.Length; ++_j) { __variables[_j] = sdp.Variable.Pack(builder, _o.Variables[_j]); }
      _variables = CreateVariablesVector(builder, __variables);
    }
    return CreateLocalVariablesResponse(
      builder,
      _variables);
  }
};

public class LocalVariablesResponseT
{
  [Newtonsoft.Json.JsonProperty("variables")]
  public List<sdp.VariableT> Variables { get; set; }

  public LocalVariablesResponseT() {
    this.Variables = null;
  }
}

public struct GlobalVariablesRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GlobalVariablesRequest GetRootAsGlobalVariablesRequest(ByteBuffer _bb) { return GetRootAsGlobalVariablesRequest(_bb, new GlobalVariablesRequest()); }
  public static GlobalVariablesRequest GetRootAsGlobalVariablesRequest(ByteBuffer _bb, GlobalVariablesRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GlobalVariablesRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Names(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NamesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.GlobalVariablesRequest> CreateGlobalVariablesRequest(FlatBufferBuilder builder,
      VectorOffset namesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GlobalVariablesRequest.AddNames(builder, namesOffset);
    return GlobalVariablesRequest.EndGlobalVariablesRequest(builder);
  }

  public static void StartGlobalVariablesRequest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNames(FlatBufferBuilder builder, VectorOffset namesOffset) { builder.AddOffset(0, namesOffset.Value, 0); }
  public static VectorOffset CreateNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.GlobalVariablesRequest> EndGlobalVariablesRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.GlobalVariablesRequest>(o);
  }
  public GlobalVariablesRequestT UnPack() {
    var _o = new GlobalVariablesRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GlobalVariablesRequestT _o) {
    _o.Names = new List<string>();
    for (var _j = 0; _j < this.NamesLength; ++_j) {_o.Names.Add(this.Names(_j));}
  }
  public static Offset<sdp.GlobalVariablesRequest> Pack(FlatBufferBuilder builder, GlobalVariablesRequestT _o) {
    if (_o == null) return default(Offset<sdp.GlobalVariablesRequest>);
    var _names = default(VectorOffset);
    if (_o.Names != null) {
      var __names = new StringOffset[_o.Names.Count];
      for (var _j = 0; _j < __names.Length; ++_j) { __names[_j] = builder.CreateString(_o.Names[_j]); }
      _names = CreateNamesVector(builder, __names);
    }
    return CreateGlobalVariablesRequest(
      builder,
      _names);
  }
};

public class GlobalVariablesRequestT
{
  [Newtonsoft.Json.JsonProperty("names")]
  public List<string> Names { get; set; }

  public GlobalVariablesRequestT() {
    this.Names = null;
  }
}

public struct GlobalVariablesResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GlobalVariablesResponse GetRootAsGlobalVariablesResponse(ByteBuffer _bb) { return GetRootAsGlobalVariablesResponse(_bb, new GlobalVariablesResponse()); }
  public static GlobalVariablesResponse GetRootAsGlobalVariablesResponse(ByteBuffer _bb, GlobalVariablesResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GlobalVariablesResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.Variable? Variables(int j) { int o = __p.__offset(4); return o != 0 ? (sdp.Variable?)(new sdp.Variable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<sdp.GlobalVariablesResponse> CreateGlobalVariablesResponse(FlatBufferBuilder builder,
      VectorOffset variablesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    GlobalVariablesResponse.AddVariables(builder, variablesOffset);
    return GlobalVariablesResponse.EndGlobalVariablesResponse(builder);
  }

  public static void StartGlobalVariablesResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(0, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVariablesVectorBlock(FlatBufferBuilder builder, Offset<sdp.Variable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<sdp.GlobalVariablesResponse> EndGlobalVariablesResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.GlobalVariablesResponse>(o);
  }
  public GlobalVariablesResponseT UnPack() {
    var _o = new GlobalVariablesResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GlobalVariablesResponseT _o) {
    _o.Variables = new List<sdp.VariableT>();
    for (var _j = 0; _j < this.VariablesLength; ++_j) {_o.Variables.Add(this.Variables(_j).HasValue ? this.Variables(_j).Value.UnPack() : null);}
  }
  public static Offset<sdp.GlobalVariablesResponse> Pack(FlatBufferBuilder builder, GlobalVariablesResponseT _o) {
    if (_o == null) return default(Offset<sdp.GlobalVariablesResponse>);
    var _variables = default(VectorOffset);
    if (_o.Variables != null) {
      var __variables = new Offset<sdp.Variable>[_o.Variables.Count];
      for (var _j = 0; _j < __variables.Length; ++_j) { __variables[_j] = sdp.Variable.Pack(builder, _o.Variables[_j]); }
      _variables = CreateVariablesVector(builder, __variables);
    }
    return CreateGlobalVariablesResponse(
      builder,
      _variables);
  }
};

public class GlobalVariablesResponseT
{
  [Newtonsoft.Json.JsonProperty("variables")]
  public List<sdp.VariableT> Variables { get; set; }

  public GlobalVariablesResponseT() {
    this.Variables = null;
  }
}

public struct EventResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventResponse GetRootAsEventResponse(ByteBuffer _bb) { return GetRootAsEventResponse(_bb, new EventResponse()); }
  public static EventResponse GetRootAsEventResponse(ByteBuffer _bb, EventResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _Dummy_ { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.EventResponse> CreateEventResponse(FlatBufferBuilder builder,
      int __dummy__ = 0) {
    builder.StartTable(1);
    EventResponse.Add_Dummy_(builder, __dummy__);
    return EventResponse.EndEventResponse(builder);
  }

  public static void StartEventResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_Dummy_(FlatBufferBuilder builder, int _dummy_) { builder.AddInt(0, _dummy_, 0); }
  public static Offset<sdp.EventResponse> EndEventResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.EventResponse>(o);
  }
  public EventResponseT UnPack() {
    var _o = new EventResponseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventResponseT _o) {
    _o._Dummy_ = this._Dummy_;
  }
  public static Offset<sdp.EventResponse> Pack(FlatBufferBuilder builder, EventResponseT _o) {
    if (_o == null) return default(Offset<sdp.EventResponse>);
    return CreateEventResponse(
      builder,
      _o._Dummy_);
  }
};

public class EventResponseT
{
  [Newtonsoft.Json.JsonProperty("__dummy__")]
  public int _Dummy_ { get; set; }

  public EventResponseT() {
    this._Dummy_ = 0;
  }
}

public struct StoppedEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StoppedEvent GetRootAsStoppedEvent(ByteBuffer _bb) { return GetRootAsStoppedEvent(_bb, new StoppedEvent()); }
  public static StoppedEvent GetRootAsStoppedEvent(ByteBuffer _bb, StoppedEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StoppedEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sdp.StoppedEvent_Reason Reason { get { int o = __p.__offset(4); return o != 0 ? (sdp.StoppedEvent_Reason)__p.bb.GetInt(o + __p.bb_pos) : sdp.StoppedEvent_Reason.Step; } }
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(6); }
  public int BreakpointId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<sdp.StoppedEvent> CreateStoppedEvent(FlatBufferBuilder builder,
      sdp.StoppedEvent_Reason reason = sdp.StoppedEvent_Reason.Step,
      StringOffset descriptionOffset = default(StringOffset),
      int breakpointId = 0) {
    builder.StartTable(3);
    StoppedEvent.AddBreakpointId(builder, breakpointId);
    StoppedEvent.AddDescription(builder, descriptionOffset);
    StoppedEvent.AddReason(builder, reason);
    return StoppedEvent.EndStoppedEvent(builder);
  }

  public static void StartStoppedEvent(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddReason(FlatBufferBuilder builder, sdp.StoppedEvent_Reason reason) { builder.AddInt(0, (int)reason, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static void AddBreakpointId(FlatBufferBuilder builder, int breakpointId) { builder.AddInt(2, breakpointId, 0); }
  public static Offset<sdp.StoppedEvent> EndStoppedEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.StoppedEvent>(o);
  }
  public StoppedEventT UnPack() {
    var _o = new StoppedEventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StoppedEventT _o) {
    _o.Reason = this.Reason;
    _o.Description = this.Description;
    _o.BreakpointId = this.BreakpointId;
  }
  public static Offset<sdp.StoppedEvent> Pack(FlatBufferBuilder builder, StoppedEventT _o) {
    if (_o == null) return default(Offset<sdp.StoppedEvent>);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    return CreateStoppedEvent(
      builder,
      _o.Reason,
      _description,
      _o.BreakpointId);
  }
};

public class StoppedEventT
{
  [Newtonsoft.Json.JsonProperty("reason")]
  public sdp.StoppedEvent_Reason Reason { get; set; }
  [Newtonsoft.Json.JsonProperty("description")]
  public string Description { get; set; }
  [Newtonsoft.Json.JsonProperty("breakpointId")]
  public int BreakpointId { get; set; }

  public StoppedEventT() {
    this.Reason = sdp.StoppedEvent_Reason.Step;
    this.Description = null;
    this.BreakpointId = 0;
  }
}

public struct LoadedSourceEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadedSourceEvent GetRootAsLoadedSourceEvent(ByteBuffer _bb) { return GetRootAsLoadedSourceEvent(_bb, new LoadedSourceEvent()); }
  public static LoadedSourceEvent GetRootAsLoadedSourceEvent(ByteBuffer _bb, LoadedSourceEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadedSourceEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool LoadOrUnload { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public uint Crc32 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<sdp.LoadedSourceEvent> CreateLoadedSourceEvent(FlatBufferBuilder builder,
      bool load_or_unload = false,
      StringOffset filePathOffset = default(StringOffset),
      uint crc32 = 0) {
    builder.StartTable(3);
    LoadedSourceEvent.AddCrc32(builder, crc32);
    LoadedSourceEvent.AddFilePath(builder, filePathOffset);
    LoadedSourceEvent.AddLoadOrUnload(builder, load_or_unload);
    return LoadedSourceEvent.EndLoadedSourceEvent(builder);
  }

  public static void StartLoadedSourceEvent(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLoadOrUnload(FlatBufferBuilder builder, bool loadOrUnload) { builder.AddBool(0, loadOrUnload, false); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddCrc32(FlatBufferBuilder builder, uint crc32) { builder.AddUint(2, crc32, 0); }
  public static Offset<sdp.LoadedSourceEvent> EndLoadedSourceEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<sdp.LoadedSourceEvent>(o);
  }
  public LoadedSourceEventT UnPack() {
    var _o = new LoadedSourceEventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadedSourceEventT _o) {
    _o.LoadOrUnload = this.LoadOrUnload;
    _o.FilePath = this.FilePath;
    _o.Crc32 = this.Crc32;
  }
  public static Offset<sdp.LoadedSourceEvent> Pack(FlatBufferBuilder builder, LoadedSourceEventT _o) {
    if (_o == null) return default(Offset<sdp.LoadedSourceEvent>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateLoadedSourceEvent(
      builder,
      _o.LoadOrUnload,
      _filePath,
      _o.Crc32);
  }
};

public class LoadedSourceEventT
{
  [Newtonsoft.Json.JsonProperty("load_or_unload")]
  public bool LoadOrUnload { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("crc32")]
  public uint Crc32 { get; set; }

  public LoadedSourceEventT() {
    this.LoadOrUnload = false;
    this.FilePath = null;
    this.Crc32 = 0;
  }
}


}
