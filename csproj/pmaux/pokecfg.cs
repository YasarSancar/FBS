// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace pmaux.pokecfg.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum SizeCategory : byte
{
  S = 0,
  M = 1,
  L = 2,
  LL = 3,
};

public struct Distance : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Distance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value(int j) { return __p.bb.GetFloat(__p.bb_pos + 0 + j * 4); }

  public static Offset<pmaux.pokecfg.fb.Distance> CreateDistance(FlatBufferBuilder builder, float[] Value) {
    builder.Prep(4, 12);
    for (int _idx0 = 3; _idx0 > 0; _idx0--) {
      builder.PutFloat(Value[_idx0-1]);
    }
    return new Offset<pmaux.pokecfg.fb.Distance>(builder.Offset);
  }
  public DistanceT UnPack() {
    var _o = new DistanceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DistanceT _o) {
    _o.Value = new float[3];
    for (var _j = 0; _j < 3; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<pmaux.pokecfg.fb.Distance> Pack(FlatBufferBuilder builder, DistanceT _o) {
    if (_o == null) return default(Offset<pmaux.pokecfg.fb.Distance>);
    var _value = _o.Value;
    return CreateDistance(
      builder,
      _value);
  }
};

public class DistanceT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float[] Value { get; set; }

  public DistanceT() {
    this.Value = new float[3];
  }
}

public struct PokeCfgData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PokeCfgData GetRootAsPokeCfgData(ByteBuffer _bb) { return GetRootAsPokeCfgData(_bb, new PokeCfgData()); }
  public static PokeCfgData GetRootAsPokeCfgData(ByteBuffer _bb, PokeCfgData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PokeCfgData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public pmaux.pokecfg.fb.SizeCategory SizeIndex { get { int o = __p.__offset(4); return o != 0 ? (pmaux.pokecfg.fb.SizeCategory)__p.bb.Get(o + __p.bb_pos) : pmaux.pokecfg.fb.SizeCategory.M; } }
  public float MinScale { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.8f; } }
  public float MaxScale { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.2f; } }
  public float InframeScale { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float InframeVerticalRotYOrigin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InframeBottomYOffset { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InframeCenterYOffset { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InframeLeftRotation { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float InframeRightRotation { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool NotLift { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float GroundOffset { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SwimmingOffset { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FloatingOffset { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsHideFloor { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float HideBoxSizeX { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float HideBoxSizeY { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.1f; } }
  public float HideBoxSizeZ { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float HideBoxCenterX { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HideBoxCenterY { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.05f; } }
  public float HideBoxCenterZ { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool UseLodSize { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public pmaux.pokecfg.fb.SizeCategory LodSize { get { int o = __p.__offset(46); return o != 0 ? (pmaux.pokecfg.fb.SizeCategory)__p.bb.Get(o + __p.bb_pos) : pmaux.pokecfg.fb.SizeCategory.M; } }
  public bool UseLodDistance { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public pmaux.pokecfg.fb.Distance? LodDistance { get { int o = __p.__offset(50); return o != 0 ? (pmaux.pokecfg.fb.Distance?)(new pmaux.pokecfg.fb.Distance()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<pmaux.pokecfg.fb.PokeCfgData> CreatePokeCfgData(FlatBufferBuilder builder,
      pmaux.pokecfg.fb.SizeCategory size_index = pmaux.pokecfg.fb.SizeCategory.M,
      float min_scale = 0.8f,
      float max_scale = 1.2f,
      float inframe_scale = 1.0f,
      float inframe_vertical_rot_y_origin = 0.0f,
      float inframe_bottom_y_offset = 0.0f,
      float inframe_center_y_offset = 0.0f,
      float inframe_left_rotation = 0.0f,
      float inframe_right_rotation = 0.0f,
      bool not_lift = false,
      float ground_offset = 0.0f,
      float swimming_offset = 0.0f,
      float floating_offset = 0.0f,
      bool is_hide_floor = false,
      float hide_box_size_x = 1.0f,
      float hide_box_size_y = 0.1f,
      float hide_box_size_z = 1.0f,
      float hide_box_center_x = 0.0f,
      float hide_box_center_y = -0.05f,
      float hide_box_center_z = 0.0f,
      bool use_lod_size = false,
      pmaux.pokecfg.fb.SizeCategory lod_size = pmaux.pokecfg.fb.SizeCategory.M,
      bool use_lod_distance = false,
      pmaux.pokecfg.fb.DistanceT lod_distance = null) {
    builder.StartTable(24);
    PokeCfgData.AddLodDistance(builder, pmaux.pokecfg.fb.Distance.Pack(builder, lod_distance));
    PokeCfgData.AddHideBoxCenterZ(builder, hide_box_center_z);
    PokeCfgData.AddHideBoxCenterY(builder, hide_box_center_y);
    PokeCfgData.AddHideBoxCenterX(builder, hide_box_center_x);
    PokeCfgData.AddHideBoxSizeZ(builder, hide_box_size_z);
    PokeCfgData.AddHideBoxSizeY(builder, hide_box_size_y);
    PokeCfgData.AddHideBoxSizeX(builder, hide_box_size_x);
    PokeCfgData.AddFloatingOffset(builder, floating_offset);
    PokeCfgData.AddSwimmingOffset(builder, swimming_offset);
    PokeCfgData.AddGroundOffset(builder, ground_offset);
    PokeCfgData.AddInframeRightRotation(builder, inframe_right_rotation);
    PokeCfgData.AddInframeLeftRotation(builder, inframe_left_rotation);
    PokeCfgData.AddInframeCenterYOffset(builder, inframe_center_y_offset);
    PokeCfgData.AddInframeBottomYOffset(builder, inframe_bottom_y_offset);
    PokeCfgData.AddInframeVerticalRotYOrigin(builder, inframe_vertical_rot_y_origin);
    PokeCfgData.AddInframeScale(builder, inframe_scale);
    PokeCfgData.AddMaxScale(builder, max_scale);
    PokeCfgData.AddMinScale(builder, min_scale);
    PokeCfgData.AddUseLodDistance(builder, use_lod_distance);
    PokeCfgData.AddLodSize(builder, lod_size);
    PokeCfgData.AddUseLodSize(builder, use_lod_size);
    PokeCfgData.AddIsHideFloor(builder, is_hide_floor);
    PokeCfgData.AddNotLift(builder, not_lift);
    PokeCfgData.AddSizeIndex(builder, size_index);
    return PokeCfgData.EndPokeCfgData(builder);
  }

  public static void StartPokeCfgData(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddSizeIndex(FlatBufferBuilder builder, pmaux.pokecfg.fb.SizeCategory sizeIndex) { builder.AddByte(0, (byte)sizeIndex, 1); }
  public static void AddMinScale(FlatBufferBuilder builder, float minScale) { builder.AddFloat(1, minScale, 0.8f); }
  public static void AddMaxScale(FlatBufferBuilder builder, float maxScale) { builder.AddFloat(2, maxScale, 1.2f); }
  public static void AddInframeScale(FlatBufferBuilder builder, float inframeScale) { builder.AddFloat(3, inframeScale, 1.0f); }
  public static void AddInframeVerticalRotYOrigin(FlatBufferBuilder builder, float inframeVerticalRotYOrigin) { builder.AddFloat(4, inframeVerticalRotYOrigin, 0.0f); }
  public static void AddInframeBottomYOffset(FlatBufferBuilder builder, float inframeBottomYOffset) { builder.AddFloat(5, inframeBottomYOffset, 0.0f); }
  public static void AddInframeCenterYOffset(FlatBufferBuilder builder, float inframeCenterYOffset) { builder.AddFloat(6, inframeCenterYOffset, 0.0f); }
  public static void AddInframeLeftRotation(FlatBufferBuilder builder, float inframeLeftRotation) { builder.AddFloat(7, inframeLeftRotation, 0.0f); }
  public static void AddInframeRightRotation(FlatBufferBuilder builder, float inframeRightRotation) { builder.AddFloat(8, inframeRightRotation, 0.0f); }
  public static void AddNotLift(FlatBufferBuilder builder, bool notLift) { builder.AddBool(9, notLift, false); }
  public static void AddGroundOffset(FlatBufferBuilder builder, float groundOffset) { builder.AddFloat(10, groundOffset, 0.0f); }
  public static void AddSwimmingOffset(FlatBufferBuilder builder, float swimmingOffset) { builder.AddFloat(11, swimmingOffset, 0.0f); }
  public static void AddFloatingOffset(FlatBufferBuilder builder, float floatingOffset) { builder.AddFloat(12, floatingOffset, 0.0f); }
  public static void AddIsHideFloor(FlatBufferBuilder builder, bool isHideFloor) { builder.AddBool(13, isHideFloor, false); }
  public static void AddHideBoxSizeX(FlatBufferBuilder builder, float hideBoxSizeX) { builder.AddFloat(14, hideBoxSizeX, 1.0f); }
  public static void AddHideBoxSizeY(FlatBufferBuilder builder, float hideBoxSizeY) { builder.AddFloat(15, hideBoxSizeY, 0.1f); }
  public static void AddHideBoxSizeZ(FlatBufferBuilder builder, float hideBoxSizeZ) { builder.AddFloat(16, hideBoxSizeZ, 1.0f); }
  public static void AddHideBoxCenterX(FlatBufferBuilder builder, float hideBoxCenterX) { builder.AddFloat(17, hideBoxCenterX, 0.0f); }
  public static void AddHideBoxCenterY(FlatBufferBuilder builder, float hideBoxCenterY) { builder.AddFloat(18, hideBoxCenterY, -0.05f); }
  public static void AddHideBoxCenterZ(FlatBufferBuilder builder, float hideBoxCenterZ) { builder.AddFloat(19, hideBoxCenterZ, 0.0f); }
  public static void AddUseLodSize(FlatBufferBuilder builder, bool useLodSize) { builder.AddBool(20, useLodSize, false); }
  public static void AddLodSize(FlatBufferBuilder builder, pmaux.pokecfg.fb.SizeCategory lodSize) { builder.AddByte(21, (byte)lodSize, 1); }
  public static void AddUseLodDistance(FlatBufferBuilder builder, bool useLodDistance) { builder.AddBool(22, useLodDistance, false); }
  public static void AddLodDistance(FlatBufferBuilder builder, Offset<pmaux.pokecfg.fb.Distance> lodDistanceOffset) { builder.AddStruct(23, lodDistanceOffset.Value, 0); }
  public static Offset<pmaux.pokecfg.fb.PokeCfgData> EndPokeCfgData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<pmaux.pokecfg.fb.PokeCfgData>(o);
  }
  public static void FinishPokeCfgDataBuffer(FlatBufferBuilder builder, Offset<pmaux.pokecfg.fb.PokeCfgData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPokeCfgDataBuffer(FlatBufferBuilder builder, Offset<pmaux.pokecfg.fb.PokeCfgData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PokeCfgDataT UnPack() {
    var _o = new PokeCfgDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PokeCfgDataT _o) {
    _o.SizeIndex = this.SizeIndex;
    _o.MinScale = this.MinScale;
    _o.MaxScale = this.MaxScale;
    _o.InframeScale = this.InframeScale;
    _o.InframeVerticalRotYOrigin = this.InframeVerticalRotYOrigin;
    _o.InframeBottomYOffset = this.InframeBottomYOffset;
    _o.InframeCenterYOffset = this.InframeCenterYOffset;
    _o.InframeLeftRotation = this.InframeLeftRotation;
    _o.InframeRightRotation = this.InframeRightRotation;
    _o.NotLift = this.NotLift;
    _o.GroundOffset = this.GroundOffset;
    _o.SwimmingOffset = this.SwimmingOffset;
    _o.FloatingOffset = this.FloatingOffset;
    _o.IsHideFloor = this.IsHideFloor;
    _o.HideBoxSizeX = this.HideBoxSizeX;
    _o.HideBoxSizeY = this.HideBoxSizeY;
    _o.HideBoxSizeZ = this.HideBoxSizeZ;
    _o.HideBoxCenterX = this.HideBoxCenterX;
    _o.HideBoxCenterY = this.HideBoxCenterY;
    _o.HideBoxCenterZ = this.HideBoxCenterZ;
    _o.UseLodSize = this.UseLodSize;
    _o.LodSize = this.LodSize;
    _o.UseLodDistance = this.UseLodDistance;
    _o.LodDistance = this.LodDistance.HasValue ? this.LodDistance.Value.UnPack() : null;
  }
  public static Offset<pmaux.pokecfg.fb.PokeCfgData> Pack(FlatBufferBuilder builder, PokeCfgDataT _o) {
    if (_o == null) return default(Offset<pmaux.pokecfg.fb.PokeCfgData>);
    return CreatePokeCfgData(
      builder,
      _o.SizeIndex,
      _o.MinScale,
      _o.MaxScale,
      _o.InframeScale,
      _o.InframeVerticalRotYOrigin,
      _o.InframeBottomYOffset,
      _o.InframeCenterYOffset,
      _o.InframeLeftRotation,
      _o.InframeRightRotation,
      _o.NotLift,
      _o.GroundOffset,
      _o.SwimmingOffset,
      _o.FloatingOffset,
      _o.IsHideFloor,
      _o.HideBoxSizeX,
      _o.HideBoxSizeY,
      _o.HideBoxSizeZ,
      _o.HideBoxCenterX,
      _o.HideBoxCenterY,
      _o.HideBoxCenterZ,
      _o.UseLodSize,
      _o.LodSize,
      _o.UseLodDistance,
      _o.LodDistance);
  }
};

public class PokeCfgDataT
{
  [Newtonsoft.Json.JsonProperty("size_index")]
  public pmaux.pokecfg.fb.SizeCategory SizeIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("min_scale")]
  public float MinScale { get; set; }
  [Newtonsoft.Json.JsonProperty("max_scale")]
  public float MaxScale { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_scale")]
  public float InframeScale { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_vertical_rot_y_origin")]
  public float InframeVerticalRotYOrigin { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_bottom_y_offset")]
  public float InframeBottomYOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_center_y_offset")]
  public float InframeCenterYOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_left_rotation")]
  public float InframeLeftRotation { get; set; }
  [Newtonsoft.Json.JsonProperty("inframe_right_rotation")]
  public float InframeRightRotation { get; set; }
  [Newtonsoft.Json.JsonProperty("not_lift")]
  public bool NotLift { get; set; }
  [Newtonsoft.Json.JsonProperty("ground_offset")]
  public float GroundOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("swimming_offset")]
  public float SwimmingOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("floating_offset")]
  public float FloatingOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("is_hide_floor")]
  public bool IsHideFloor { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_size_x")]
  public float HideBoxSizeX { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_size_y")]
  public float HideBoxSizeY { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_size_z")]
  public float HideBoxSizeZ { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_center_x")]
  public float HideBoxCenterX { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_center_y")]
  public float HideBoxCenterY { get; set; }
  [Newtonsoft.Json.JsonProperty("hide_box_center_z")]
  public float HideBoxCenterZ { get; set; }
  [Newtonsoft.Json.JsonProperty("use_lod_size")]
  public bool UseLodSize { get; set; }
  [Newtonsoft.Json.JsonProperty("lod_size")]
  public pmaux.pokecfg.fb.SizeCategory LodSize { get; set; }
  [Newtonsoft.Json.JsonProperty("use_lod_distance")]
  public bool UseLodDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("lod_distance")]
  public pmaux.pokecfg.fb.DistanceT LodDistance { get; set; }

  public PokeCfgDataT() {
    this.SizeIndex = pmaux.pokecfg.fb.SizeCategory.M;
    this.MinScale = 0.8f;
    this.MaxScale = 1.2f;
    this.InframeScale = 1.0f;
    this.InframeVerticalRotYOrigin = 0.0f;
    this.InframeBottomYOffset = 0.0f;
    this.InframeCenterYOffset = 0.0f;
    this.InframeLeftRotation = 0.0f;
    this.InframeRightRotation = 0.0f;
    this.NotLift = false;
    this.GroundOffset = 0.0f;
    this.SwimmingOffset = 0.0f;
    this.FloatingOffset = 0.0f;
    this.IsHideFloor = false;
    this.HideBoxSizeX = 1.0f;
    this.HideBoxSizeY = 0.1f;
    this.HideBoxSizeZ = 1.0f;
    this.HideBoxCenterX = 0.0f;
    this.HideBoxCenterY = -0.05f;
    this.HideBoxCenterZ = 0.0f;
    this.UseLodSize = false;
    this.LodSize = pmaux.pokecfg.fb.SizeCategory.M;
    this.UseLodDistance = false;
    this.LodDistance = new pmaux.pokecfg.fb.DistanceT();
  }

  public static PokeCfgDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PokeCfgDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PokeCfgDataT DeserializeFromBinary(byte[] fbBuffer) {
    return PokeCfgData.GetRootAsPokeCfgData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PokeCfgData.FinishPokeCfgDataBuffer(fbb, PokeCfgData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
