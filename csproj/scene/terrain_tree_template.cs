// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TerrainTreeTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TerrainTreeTemplate GetRootAsTerrainTreeTemplate(ByteBuffer _bb) { return GetRootAsTerrainTreeTemplate(_bb, new TerrainTreeTemplate()); }
  public static TerrainTreeTemplate GetRootAsTerrainTreeTemplate(ByteBuffer _bb, TerrainTreeTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TerrainTreeTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TreeModelPathHash { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string TreeTemplatePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTreeTemplatePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTreeTemplatePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTreeTemplatePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.scene.fb.TerrainTreeTemplate> CreateTerrainTreeTemplate(FlatBufferBuilder builder,
      ulong treeModelPathHash = 0,
      StringOffset treeTemplatePathOffset = default(StringOffset)) {
    builder.StartTable(2);
    TerrainTreeTemplate.AddTreeModelPathHash(builder, treeModelPathHash);
    TerrainTreeTemplate.AddTreeTemplatePath(builder, treeTemplatePathOffset);
    return TerrainTreeTemplate.EndTerrainTreeTemplate(builder);
  }

  public static void StartTerrainTreeTemplate(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTreeModelPathHash(FlatBufferBuilder builder, ulong treeModelPathHash) { builder.AddUlong(0, treeModelPathHash, 0); }
  public static void AddTreeTemplatePath(FlatBufferBuilder builder, StringOffset treeTemplatePathOffset) { builder.AddOffset(1, treeTemplatePathOffset.Value, 0); }
  public static Offset<gfl.scene.fb.TerrainTreeTemplate> EndTerrainTreeTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.TerrainTreeTemplate>(o);
  }
  public static void FinishTerrainTreeTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainTreeTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTerrainTreeTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainTreeTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TerrainTreeTemplateT UnPack() {
    var _o = new TerrainTreeTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TerrainTreeTemplateT _o) {
    _o.TreeModelPathHash = this.TreeModelPathHash;
    _o.TreeTemplatePath = this.TreeTemplatePath;
  }
  public static Offset<gfl.scene.fb.TerrainTreeTemplate> Pack(FlatBufferBuilder builder, TerrainTreeTemplateT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.TerrainTreeTemplate>);
    var _treeTemplatePath = _o.TreeTemplatePath == null ? default(StringOffset) : builder.CreateString(_o.TreeTemplatePath);
    return CreateTerrainTreeTemplate(
      builder,
      _o.TreeModelPathHash,
      _treeTemplatePath);
  }
};

public class TerrainTreeTemplateT
{
  [Newtonsoft.Json.JsonProperty("treeModelPathHash")]
  public ulong TreeModelPathHash { get; set; }
  [Newtonsoft.Json.JsonProperty("treeTemplatePath")]
  public string TreeTemplatePath { get; set; }

  public TerrainTreeTemplateT() {
    this.TreeModelPathHash = 0;
    this.TreeTemplatePath = null;
  }

  public static TerrainTreeTemplateT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TerrainTreeTemplateT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TerrainTreeTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return TerrainTreeTemplate.GetRootAsTerrainTreeTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TerrainTreeTemplate.FinishTerrainTreeTemplateBuffer(fbb, TerrainTreeTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
