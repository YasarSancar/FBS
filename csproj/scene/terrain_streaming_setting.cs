// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TerrainStreamingSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TerrainStreamingSetting GetRootAsTerrainStreamingSetting(ByteBuffer _bb) { return GetRootAsTerrainStreamingSetting(_bb, new TerrainStreamingSetting()); }
  public static TerrainStreamingSetting GetRootAsTerrainStreamingSetting(ByteBuffer _bb, TerrainStreamingSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TerrainStreamingSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float LowLoadRadius { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MiddleLoadRadius { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HighLoadRadius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CollisionLoadRadius { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TreeVisibleRadius { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.TerrainStreamingSetting> CreateTerrainStreamingSetting(FlatBufferBuilder builder,
      float lowLoadRadius = 0.0f,
      float middleLoadRadius = 0.0f,
      float highLoadRadius = 0.0f,
      float collisionLoadRadius = 0.0f,
      float treeVisibleRadius = 0.0f) {
    builder.StartTable(5);
    TerrainStreamingSetting.AddTreeVisibleRadius(builder, treeVisibleRadius);
    TerrainStreamingSetting.AddCollisionLoadRadius(builder, collisionLoadRadius);
    TerrainStreamingSetting.AddHighLoadRadius(builder, highLoadRadius);
    TerrainStreamingSetting.AddMiddleLoadRadius(builder, middleLoadRadius);
    TerrainStreamingSetting.AddLowLoadRadius(builder, lowLoadRadius);
    return TerrainStreamingSetting.EndTerrainStreamingSetting(builder);
  }

  public static void StartTerrainStreamingSetting(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLowLoadRadius(FlatBufferBuilder builder, float lowLoadRadius) { builder.AddFloat(0, lowLoadRadius, 0.0f); }
  public static void AddMiddleLoadRadius(FlatBufferBuilder builder, float middleLoadRadius) { builder.AddFloat(1, middleLoadRadius, 0.0f); }
  public static void AddHighLoadRadius(FlatBufferBuilder builder, float highLoadRadius) { builder.AddFloat(2, highLoadRadius, 0.0f); }
  public static void AddCollisionLoadRadius(FlatBufferBuilder builder, float collisionLoadRadius) { builder.AddFloat(3, collisionLoadRadius, 0.0f); }
  public static void AddTreeVisibleRadius(FlatBufferBuilder builder, float treeVisibleRadius) { builder.AddFloat(4, treeVisibleRadius, 0.0f); }
  public static Offset<gfl.scene.fb.TerrainStreamingSetting> EndTerrainStreamingSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.TerrainStreamingSetting>(o);
  }
  public static void FinishTerrainStreamingSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainStreamingSetting> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTerrainStreamingSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainStreamingSetting> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TerrainStreamingSettingT UnPack() {
    var _o = new TerrainStreamingSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TerrainStreamingSettingT _o) {
    _o.LowLoadRadius = this.LowLoadRadius;
    _o.MiddleLoadRadius = this.MiddleLoadRadius;
    _o.HighLoadRadius = this.HighLoadRadius;
    _o.CollisionLoadRadius = this.CollisionLoadRadius;
    _o.TreeVisibleRadius = this.TreeVisibleRadius;
  }
  public static Offset<gfl.scene.fb.TerrainStreamingSetting> Pack(FlatBufferBuilder builder, TerrainStreamingSettingT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.TerrainStreamingSetting>);
    return CreateTerrainStreamingSetting(
      builder,
      _o.LowLoadRadius,
      _o.MiddleLoadRadius,
      _o.HighLoadRadius,
      _o.CollisionLoadRadius,
      _o.TreeVisibleRadius);
  }
};

public class TerrainStreamingSettingT
{
  [Newtonsoft.Json.JsonProperty("lowLoadRadius")]
  public float LowLoadRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("middleLoadRadius")]
  public float MiddleLoadRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("highLoadRadius")]
  public float HighLoadRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("collisionLoadRadius")]
  public float CollisionLoadRadius { get; set; }
  [Newtonsoft.Json.JsonProperty("treeVisibleRadius")]
  public float TreeVisibleRadius { get; set; }

  public TerrainStreamingSettingT() {
    this.LowLoadRadius = 0.0f;
    this.MiddleLoadRadius = 0.0f;
    this.HighLoadRadius = 0.0f;
    this.CollisionLoadRadius = 0.0f;
    this.TreeVisibleRadius = 0.0f;
  }

  public static TerrainStreamingSettingT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TerrainStreamingSettingT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TerrainStreamingSettingT DeserializeFromBinary(byte[] fbBuffer) {
    return TerrainStreamingSetting.GetRootAsTerrainStreamingSetting(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TerrainStreamingSetting.FinishTerrainStreamingSettingBuffer(fbb, TerrainStreamingSetting.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
