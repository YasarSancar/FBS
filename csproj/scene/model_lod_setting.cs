// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModelSubLodSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelSubLodSetting GetRootAsModelSubLodSetting(ByteBuffer _bb) { return GetRootAsModelSubLodSetting(_bb, new ModelSubLodSetting()); }
  public static ModelSubLodSetting GetRootAsModelSubLodSetting(ByteBuffer _bb, ModelSubLodSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelSubLodSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CategoryName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCategoryNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCategoryNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Threshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float LodDistances(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LodDistancesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLodDistancesBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetLodDistancesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetLodDistancesArray() { return __p.__vector_as_array<float>(8); }

  public static Offset<gfl.scene.fb.ModelSubLodSetting> CreateModelSubLodSetting(FlatBufferBuilder builder,
      StringOffset categoryNameOffset = default(StringOffset),
      float threshold = 0.0f,
      VectorOffset lodDistancesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ModelSubLodSetting.AddLodDistances(builder, lodDistancesOffset);
    ModelSubLodSetting.AddThreshold(builder, threshold);
    ModelSubLodSetting.AddCategoryName(builder, categoryNameOffset);
    return ModelSubLodSetting.EndModelSubLodSetting(builder);
  }

  public static void StartModelSubLodSetting(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCategoryName(FlatBufferBuilder builder, StringOffset categoryNameOffset) { builder.AddOffset(0, categoryNameOffset.Value, 0); }
  public static void AddThreshold(FlatBufferBuilder builder, float threshold) { builder.AddFloat(1, threshold, 0.0f); }
  public static void AddLodDistances(FlatBufferBuilder builder, VectorOffset lodDistancesOffset) { builder.AddOffset(2, lodDistancesOffset.Value, 0); }
  public static VectorOffset CreateLodDistancesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLodDistancesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLodDistancesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.ModelSubLodSetting> EndModelSubLodSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ModelSubLodSetting>(o);
  }
  public ModelSubLodSettingT UnPack() {
    var _o = new ModelSubLodSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelSubLodSettingT _o) {
    _o.CategoryName = this.CategoryName;
    _o.Threshold = this.Threshold;
    _o.LodDistances = new List<float>();
    for (var _j = 0; _j < this.LodDistancesLength; ++_j) {_o.LodDistances.Add(this.LodDistances(_j));}
  }
  public static Offset<gfl.scene.fb.ModelSubLodSetting> Pack(FlatBufferBuilder builder, ModelSubLodSettingT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ModelSubLodSetting>);
    var _categoryName = _o.CategoryName == null ? default(StringOffset) : builder.CreateString(_o.CategoryName);
    var _lodDistances = default(VectorOffset);
    if (_o.LodDistances != null) {
      var __lodDistances = _o.LodDistances.ToArray();
      _lodDistances = CreateLodDistancesVector(builder, __lodDistances);
    }
    return CreateModelSubLodSetting(
      builder,
      _categoryName,
      _o.Threshold,
      _lodDistances);
  }
};

public class ModelSubLodSettingT
{
  [Newtonsoft.Json.JsonProperty("categoryName")]
  public string CategoryName { get; set; }
  [Newtonsoft.Json.JsonProperty("threshold")]
  public float Threshold { get; set; }
  [Newtonsoft.Json.JsonProperty("lodDistances")]
  public List<float> LodDistances { get; set; }

  public ModelSubLodSettingT() {
    this.CategoryName = null;
    this.Threshold = 0.0f;
    this.LodDistances = null;
  }
}

public struct ModelLodSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelLodSetting GetRootAsModelLodSetting(ByteBuffer _bb) { return GetRootAsModelLodSetting(_bb, new ModelLodSetting()); }
  public static ModelLodSetting GetRootAsModelLodSetting(ByteBuffer _bb, ModelLodSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelLodSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CategoryName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCategoryNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCategoryNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Pattern { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPatternBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPatternBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPatternArray() { return __p.__vector_as_array<byte>(6); }
  public float LodDistances(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int LodDistancesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetLodDistancesBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetLodDistancesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetLodDistancesArray() { return __p.__vector_as_array<float>(8); }
  public gfl.scene.fb.ModelSubLodSetting? SubSettings(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.scene.fb.ModelSubLodSetting?)(new gfl.scene.fb.ModelSubLodSetting()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubSettingsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.ModelLodSetting> CreateModelLodSetting(FlatBufferBuilder builder,
      StringOffset categoryNameOffset = default(StringOffset),
      StringOffset patternOffset = default(StringOffset),
      VectorOffset lodDistancesOffset = default(VectorOffset),
      VectorOffset subSettingsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ModelLodSetting.AddSubSettings(builder, subSettingsOffset);
    ModelLodSetting.AddLodDistances(builder, lodDistancesOffset);
    ModelLodSetting.AddPattern(builder, patternOffset);
    ModelLodSetting.AddCategoryName(builder, categoryNameOffset);
    return ModelLodSetting.EndModelLodSetting(builder);
  }

  public static void StartModelLodSetting(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCategoryName(FlatBufferBuilder builder, StringOffset categoryNameOffset) { builder.AddOffset(0, categoryNameOffset.Value, 0); }
  public static void AddPattern(FlatBufferBuilder builder, StringOffset patternOffset) { builder.AddOffset(1, patternOffset.Value, 0); }
  public static void AddLodDistances(FlatBufferBuilder builder, VectorOffset lodDistancesOffset) { builder.AddOffset(2, lodDistancesOffset.Value, 0); }
  public static VectorOffset CreateLodDistancesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLodDistancesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLodDistancesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubSettings(FlatBufferBuilder builder, VectorOffset subSettingsOffset) { builder.AddOffset(3, subSettingsOffset.Value, 0); }
  public static VectorOffset CreateSubSettingsVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelSubLodSetting>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubSettingsVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelSubLodSetting>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubSettingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.ModelLodSetting> EndModelLodSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ModelLodSetting>(o);
  }
  public static void FinishModelLodSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelLodSetting> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelLodSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelLodSetting> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelLodSettingT UnPack() {
    var _o = new ModelLodSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelLodSettingT _o) {
    _o.CategoryName = this.CategoryName;
    _o.Pattern = this.Pattern;
    _o.LodDistances = new List<float>();
    for (var _j = 0; _j < this.LodDistancesLength; ++_j) {_o.LodDistances.Add(this.LodDistances(_j));}
    _o.SubSettings = new List<gfl.scene.fb.ModelSubLodSettingT>();
    for (var _j = 0; _j < this.SubSettingsLength; ++_j) {_o.SubSettings.Add(this.SubSettings(_j).HasValue ? this.SubSettings(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.ModelLodSetting> Pack(FlatBufferBuilder builder, ModelLodSettingT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ModelLodSetting>);
    var _categoryName = _o.CategoryName == null ? default(StringOffset) : builder.CreateString(_o.CategoryName);
    var _pattern = _o.Pattern == null ? default(StringOffset) : builder.CreateString(_o.Pattern);
    var _lodDistances = default(VectorOffset);
    if (_o.LodDistances != null) {
      var __lodDistances = _o.LodDistances.ToArray();
      _lodDistances = CreateLodDistancesVector(builder, __lodDistances);
    }
    var _subSettings = default(VectorOffset);
    if (_o.SubSettings != null) {
      var __subSettings = new Offset<gfl.scene.fb.ModelSubLodSetting>[_o.SubSettings.Count];
      for (var _j = 0; _j < __subSettings.Length; ++_j) { __subSettings[_j] = gfl.scene.fb.ModelSubLodSetting.Pack(builder, _o.SubSettings[_j]); }
      _subSettings = CreateSubSettingsVector(builder, __subSettings);
    }
    return CreateModelLodSetting(
      builder,
      _categoryName,
      _pattern,
      _lodDistances,
      _subSettings);
  }
};

public class ModelLodSettingT
{
  [Newtonsoft.Json.JsonProperty("categoryName")]
  public string CategoryName { get; set; }
  [Newtonsoft.Json.JsonProperty("pattern")]
  public string Pattern { get; set; }
  [Newtonsoft.Json.JsonProperty("lodDistances")]
  public List<float> LodDistances { get; set; }
  [Newtonsoft.Json.JsonProperty("subSettings")]
  public List<gfl.scene.fb.ModelSubLodSettingT> SubSettings { get; set; }

  public ModelLodSettingT() {
    this.CategoryName = null;
    this.Pattern = null;
    this.LodDistances = null;
    this.SubSettings = null;
  }

  public static ModelLodSettingT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelLodSettingT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelLodSettingT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelLodSetting.GetRootAsModelLodSetting(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelLodSetting.FinishModelLodSettingBuffer(fbb, ModelLodSetting.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
