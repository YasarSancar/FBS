// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum GridType : sbyte
{
  Octree = 0,
  Quadtree = 1,
  Hybridtree = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum DivisionType : sbyte
{
  Div1 = 0,
  Div2 = 1,
  Div4 = 2,
  Div8 = 3,
  Div16 = 4,
  Div32 = 5,
  Div64 = 6,
  Div128 = 7,
  Div256 = 8,
  Div512 = 9,
  Div1024 = 10,
};

public struct GridStremingGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GridStremingGroup GetRootAsGridStremingGroup(ByteBuffer _bb) { return GetRootAsGridStremingGroup(_bb, new GridStremingGroup()); }
  public static GridStremingGroup GetRootAsGridStremingGroup(ByteBuffer _bb, GridStremingGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GridStremingGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.scene.fb.GridType GridType { get { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.GridType)__p.bb.GetSbyte(o + __p.bb_pos) : gfl.scene.fb.GridType.Octree; } }
  public gfl.math.fb.Vector3f? Position { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Sizes(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int SizesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetSizesBytes() { return __p.__vector_as_span<float>(10, 4); }
#else
  public ArraySegment<byte>? GetSizesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public float[] GetSizesArray() { return __p.__vector_as_array<float>(10); }
  public gfl.scene.fb.DivisionType Divisions(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.scene.fb.DivisionType)__p.bb.GetSbyte(__p.__vector(o) + j * 1) : (gfl.scene.fb.DivisionType)0; }
  public int DivisionsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<gfl.scene.fb.DivisionType> GetDivisionsBytes() { return __p.__vector_as_span<gfl.scene.fb.DivisionType>(12, 1); }
#else
  public ArraySegment<byte>? GetDivisionsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public gfl.scene.fb.DivisionType[] GetDivisionsArray() { int o = __p.__offset(12); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); gfl.scene.fb.DivisionType[] a = new gfl.scene.fb.DivisionType[l]; for (int i = 0; i < l; i++) { a[i] = (gfl.scene.fb.DivisionType)__p.bb.GetSbyte(p + i * 1); } return a; }
  public float Activate { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Disactivate { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.GridStremingGroup> CreateGridStremingGroup(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.scene.fb.GridType gridType = gfl.scene.fb.GridType.Octree,
      gfl.math.fb.Vector3fT position = null,
      VectorOffset sizesOffset = default(VectorOffset),
      VectorOffset divisionsOffset = default(VectorOffset),
      float activate = 0.0f,
      float disactivate = 0.0f) {
    builder.StartTable(7);
    GridStremingGroup.AddDisactivate(builder, disactivate);
    GridStremingGroup.AddActivate(builder, activate);
    GridStremingGroup.AddDivisions(builder, divisionsOffset);
    GridStremingGroup.AddSizes(builder, sizesOffset);
    GridStremingGroup.AddPosition(builder, gfl.math.fb.Vector3f.Pack(builder, position));
    GridStremingGroup.AddName(builder, nameOffset);
    GridStremingGroup.AddGridType(builder, gridType);
    return GridStremingGroup.EndGridStremingGroup(builder);
  }

  public static void StartGridStremingGroup(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddGridType(FlatBufferBuilder builder, gfl.scene.fb.GridType gridType) { builder.AddSbyte(1, (sbyte)gridType, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddSizes(FlatBufferBuilder builder, VectorOffset sizesOffset) { builder.AddOffset(3, sizesOffset.Value, 0); }
  public static VectorOffset CreateSizesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSizesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSizesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDivisions(FlatBufferBuilder builder, VectorOffset divisionsOffset) { builder.AddOffset(4, divisionsOffset.Value, 0); }
  public static VectorOffset CreateDivisionsVector(FlatBufferBuilder builder, gfl.scene.fb.DivisionType[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte((sbyte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDivisionsVectorBlock(FlatBufferBuilder builder, gfl.scene.fb.DivisionType[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDivisionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddActivate(FlatBufferBuilder builder, float activate) { builder.AddFloat(5, activate, 0.0f); }
  public static void AddDisactivate(FlatBufferBuilder builder, float disactivate) { builder.AddFloat(6, disactivate, 0.0f); }
  public static Offset<gfl.scene.fb.GridStremingGroup> EndGridStremingGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.GridStremingGroup>(o);
  }
  public static void FinishGridStremingGroupBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GridStremingGroup> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGridStremingGroupBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GridStremingGroup> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GridStremingGroupT UnPack() {
    var _o = new GridStremingGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GridStremingGroupT _o) {
    _o.Name = this.Name;
    _o.GridType = this.GridType;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Sizes = new List<float>();
    for (var _j = 0; _j < this.SizesLength; ++_j) {_o.Sizes.Add(this.Sizes(_j));}
    _o.Divisions = new List<gfl.scene.fb.DivisionType>();
    for (var _j = 0; _j < this.DivisionsLength; ++_j) {_o.Divisions.Add(this.Divisions(_j));}
    _o.Activate = this.Activate;
    _o.Disactivate = this.Disactivate;
  }
  public static Offset<gfl.scene.fb.GridStremingGroup> Pack(FlatBufferBuilder builder, GridStremingGroupT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.GridStremingGroup>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _sizes = default(VectorOffset);
    if (_o.Sizes != null) {
      var __sizes = _o.Sizes.ToArray();
      _sizes = CreateSizesVector(builder, __sizes);
    }
    var _divisions = default(VectorOffset);
    if (_o.Divisions != null) {
      var __divisions = _o.Divisions.ToArray();
      _divisions = CreateDivisionsVector(builder, __divisions);
    }
    return CreateGridStremingGroup(
      builder,
      _name,
      _o.GridType,
      _o.Position,
      _sizes,
      _divisions,
      _o.Activate,
      _o.Disactivate);
  }
};

public class GridStremingGroupT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("gridType")]
  public gfl.scene.fb.GridType GridType { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.math.fb.Vector3fT Position { get; set; }
  [Newtonsoft.Json.JsonProperty("sizes")]
  public List<float> Sizes { get; set; }
  [Newtonsoft.Json.JsonProperty("divisions")]
  public List<gfl.scene.fb.DivisionType> Divisions { get; set; }
  [Newtonsoft.Json.JsonProperty("activate")]
  public float Activate { get; set; }
  [Newtonsoft.Json.JsonProperty("disactivate")]
  public float Disactivate { get; set; }

  public GridStremingGroupT() {
    this.Name = null;
    this.GridType = gfl.scene.fb.GridType.Octree;
    this.Position = new gfl.math.fb.Vector3fT();
    this.Sizes = null;
    this.Divisions = null;
    this.Activate = 0.0f;
    this.Disactivate = 0.0f;
  }

  public static GridStremingGroupT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<GridStremingGroupT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static GridStremingGroupT DeserializeFromBinary(byte[] fbBuffer) {
    return GridStremingGroup.GetRootAsGridStremingGroup(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GridStremingGroup.FinishGridStremingGroupBuffer(fbb, GridStremingGroup.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
