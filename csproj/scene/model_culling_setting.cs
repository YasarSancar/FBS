// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModelSubCullingSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelSubCullingSetting GetRootAsModelSubCullingSetting(ByteBuffer _bb) { return GetRootAsModelSubCullingSetting(_bb, new ModelSubCullingSetting()); }
  public static ModelSubCullingSetting GetRootAsModelSubCullingSetting(ByteBuffer _bb, ModelSubCullingSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelSubCullingSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CategoryName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCategoryNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCategoryNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Threshold { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CullingDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.ModelSubCullingSetting> CreateModelSubCullingSetting(FlatBufferBuilder builder,
      StringOffset categoryNameOffset = default(StringOffset),
      float threshold = 0.0f,
      float cullingDistance = 0.0f) {
    builder.StartTable(3);
    ModelSubCullingSetting.AddCullingDistance(builder, cullingDistance);
    ModelSubCullingSetting.AddThreshold(builder, threshold);
    ModelSubCullingSetting.AddCategoryName(builder, categoryNameOffset);
    return ModelSubCullingSetting.EndModelSubCullingSetting(builder);
  }

  public static void StartModelSubCullingSetting(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCategoryName(FlatBufferBuilder builder, StringOffset categoryNameOffset) { builder.AddOffset(0, categoryNameOffset.Value, 0); }
  public static void AddThreshold(FlatBufferBuilder builder, float threshold) { builder.AddFloat(1, threshold, 0.0f); }
  public static void AddCullingDistance(FlatBufferBuilder builder, float cullingDistance) { builder.AddFloat(2, cullingDistance, 0.0f); }
  public static Offset<gfl.scene.fb.ModelSubCullingSetting> EndModelSubCullingSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ModelSubCullingSetting>(o);
  }
  public ModelSubCullingSettingT UnPack() {
    var _o = new ModelSubCullingSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelSubCullingSettingT _o) {
    _o.CategoryName = this.CategoryName;
    _o.Threshold = this.Threshold;
    _o.CullingDistance = this.CullingDistance;
  }
  public static Offset<gfl.scene.fb.ModelSubCullingSetting> Pack(FlatBufferBuilder builder, ModelSubCullingSettingT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ModelSubCullingSetting>);
    var _categoryName = _o.CategoryName == null ? default(StringOffset) : builder.CreateString(_o.CategoryName);
    return CreateModelSubCullingSetting(
      builder,
      _categoryName,
      _o.Threshold,
      _o.CullingDistance);
  }
};

public class ModelSubCullingSettingT
{
  [Newtonsoft.Json.JsonProperty("categoryName")]
  public string CategoryName { get; set; }
  [Newtonsoft.Json.JsonProperty("threshold")]
  public float Threshold { get; set; }
  [Newtonsoft.Json.JsonProperty("cullingDistance")]
  public float CullingDistance { get; set; }

  public ModelSubCullingSettingT() {
    this.CategoryName = null;
    this.Threshold = 0.0f;
    this.CullingDistance = 0.0f;
  }
}

public struct ModelCullingSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelCullingSetting GetRootAsModelCullingSetting(ByteBuffer _bb) { return GetRootAsModelCullingSetting(_bb, new ModelCullingSetting()); }
  public static ModelCullingSetting GetRootAsModelCullingSetting(ByteBuffer _bb, ModelCullingSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelCullingSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CategoryName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCategoryNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCategoryNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Pattern { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPatternBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPatternBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPatternArray() { return __p.__vector_as_array<byte>(6); }
  public float CullingDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.scene.fb.ModelSubCullingSetting? SubSettings(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.scene.fb.ModelSubCullingSetting?)(new gfl.scene.fb.ModelSubCullingSetting()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubSettingsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.ModelCullingSetting> CreateModelCullingSetting(FlatBufferBuilder builder,
      StringOffset categoryNameOffset = default(StringOffset),
      StringOffset patternOffset = default(StringOffset),
      float cullingDistance = 0.0f,
      VectorOffset subSettingsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ModelCullingSetting.AddSubSettings(builder, subSettingsOffset);
    ModelCullingSetting.AddCullingDistance(builder, cullingDistance);
    ModelCullingSetting.AddPattern(builder, patternOffset);
    ModelCullingSetting.AddCategoryName(builder, categoryNameOffset);
    return ModelCullingSetting.EndModelCullingSetting(builder);
  }

  public static void StartModelCullingSetting(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCategoryName(FlatBufferBuilder builder, StringOffset categoryNameOffset) { builder.AddOffset(0, categoryNameOffset.Value, 0); }
  public static void AddPattern(FlatBufferBuilder builder, StringOffset patternOffset) { builder.AddOffset(1, patternOffset.Value, 0); }
  public static void AddCullingDistance(FlatBufferBuilder builder, float cullingDistance) { builder.AddFloat(2, cullingDistance, 0.0f); }
  public static void AddSubSettings(FlatBufferBuilder builder, VectorOffset subSettingsOffset) { builder.AddOffset(3, subSettingsOffset.Value, 0); }
  public static VectorOffset CreateSubSettingsVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelSubCullingSetting>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubSettingsVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelSubCullingSetting>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubSettingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.ModelCullingSetting> EndModelCullingSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ModelCullingSetting>(o);
  }
  public static void FinishModelCullingSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelCullingSetting> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelCullingSettingBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ModelCullingSetting> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelCullingSettingT UnPack() {
    var _o = new ModelCullingSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelCullingSettingT _o) {
    _o.CategoryName = this.CategoryName;
    _o.Pattern = this.Pattern;
    _o.CullingDistance = this.CullingDistance;
    _o.SubSettings = new List<gfl.scene.fb.ModelSubCullingSettingT>();
    for (var _j = 0; _j < this.SubSettingsLength; ++_j) {_o.SubSettings.Add(this.SubSettings(_j).HasValue ? this.SubSettings(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.ModelCullingSetting> Pack(FlatBufferBuilder builder, ModelCullingSettingT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ModelCullingSetting>);
    var _categoryName = _o.CategoryName == null ? default(StringOffset) : builder.CreateString(_o.CategoryName);
    var _pattern = _o.Pattern == null ? default(StringOffset) : builder.CreateString(_o.Pattern);
    var _subSettings = default(VectorOffset);
    if (_o.SubSettings != null) {
      var __subSettings = new Offset<gfl.scene.fb.ModelSubCullingSetting>[_o.SubSettings.Count];
      for (var _j = 0; _j < __subSettings.Length; ++_j) { __subSettings[_j] = gfl.scene.fb.ModelSubCullingSetting.Pack(builder, _o.SubSettings[_j]); }
      _subSettings = CreateSubSettingsVector(builder, __subSettings);
    }
    return CreateModelCullingSetting(
      builder,
      _categoryName,
      _pattern,
      _o.CullingDistance,
      _subSettings);
  }
};

public class ModelCullingSettingT
{
  [Newtonsoft.Json.JsonProperty("categoryName")]
  public string CategoryName { get; set; }
  [Newtonsoft.Json.JsonProperty("pattern")]
  public string Pattern { get; set; }
  [Newtonsoft.Json.JsonProperty("cullingDistance")]
  public float CullingDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("subSettings")]
  public List<gfl.scene.fb.ModelSubCullingSettingT> SubSettings { get; set; }

  public ModelCullingSettingT() {
    this.CategoryName = null;
    this.Pattern = null;
    this.CullingDistance = 0.0f;
    this.SubSettings = null;
  }

  public static ModelCullingSettingT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelCullingSettingT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelCullingSettingT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelCullingSetting.GetRootAsModelCullingSetting(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelCullingSetting.FinishModelCullingSettingBuffer(fbb, ModelCullingSetting.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
