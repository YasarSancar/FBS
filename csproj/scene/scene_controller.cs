// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SceneController : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SceneController GetRootAsSceneController(ByteBuffer _bb) { return GetRootAsSceneController(_bb, new SceneController()); }
  public static SceneController GetRootAsSceneController(ByteBuffer _bb, SceneController obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneController __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float RealizingDistance { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UnrealizingDistance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float LoadingDistance { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float UnloadingDistance { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.SceneController> CreateSceneController(FlatBufferBuilder builder,
      float realizingDistance = 0.0f,
      float unrealizingDistance = 0.0f,
      float loadingDistance = 0.0f,
      float unloadingDistance = 0.0f) {
    builder.StartTable(4);
    SceneController.AddUnloadingDistance(builder, unloadingDistance);
    SceneController.AddLoadingDistance(builder, loadingDistance);
    SceneController.AddUnrealizingDistance(builder, unrealizingDistance);
    SceneController.AddRealizingDistance(builder, realizingDistance);
    return SceneController.EndSceneController(builder);
  }

  public static void StartSceneController(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddRealizingDistance(FlatBufferBuilder builder, float realizingDistance) { builder.AddFloat(0, realizingDistance, 0.0f); }
  public static void AddUnrealizingDistance(FlatBufferBuilder builder, float unrealizingDistance) { builder.AddFloat(1, unrealizingDistance, 0.0f); }
  public static void AddLoadingDistance(FlatBufferBuilder builder, float loadingDistance) { builder.AddFloat(2, loadingDistance, 0.0f); }
  public static void AddUnloadingDistance(FlatBufferBuilder builder, float unloadingDistance) { builder.AddFloat(3, unloadingDistance, 0.0f); }
  public static Offset<gfl.scene.fb.SceneController> EndSceneController(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.SceneController>(o);
  }
  public static void FinishSceneControllerBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SceneController> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSceneControllerBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SceneController> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SceneControllerT UnPack() {
    var _o = new SceneControllerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SceneControllerT _o) {
    _o.RealizingDistance = this.RealizingDistance;
    _o.UnrealizingDistance = this.UnrealizingDistance;
    _o.LoadingDistance = this.LoadingDistance;
    _o.UnloadingDistance = this.UnloadingDistance;
  }
  public static Offset<gfl.scene.fb.SceneController> Pack(FlatBufferBuilder builder, SceneControllerT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.SceneController>);
    return CreateSceneController(
      builder,
      _o.RealizingDistance,
      _o.UnrealizingDistance,
      _o.LoadingDistance,
      _o.UnloadingDistance);
  }
};

public class SceneControllerT
{
  [Newtonsoft.Json.JsonProperty("realizingDistance")]
  public float RealizingDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("unrealizingDistance")]
  public float UnrealizingDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("loadingDistance")]
  public float LoadingDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("unloadingDistance")]
  public float UnloadingDistance { get; set; }

  public SceneControllerT() {
    this.RealizingDistance = 0.0f;
    this.UnrealizingDistance = 0.0f;
    this.LoadingDistance = 0.0f;
    this.UnloadingDistance = 0.0f;
  }

  public static SceneControllerT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SceneControllerT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SceneControllerT DeserializeFromBinary(byte[] fbBuffer) {
    return SceneController.GetRootAsSceneController(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SceneController.FinishSceneControllerBuffer(fbb, SceneController.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
