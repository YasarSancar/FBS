// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightApplierComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightApplierComponent GetRootAsLightApplierComponent(ByteBuffer _bb) { return GetRootAsLightApplierComponent(_bb, new LightApplierComponent()); }
  public static LightApplierComponent GetRootAsLightApplierComponent(ByteBuffer _bb, LightApplierComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightApplierComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public float TimeSpan { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CurrentTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool StartWithOffsetData { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string OffsetDataName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetDataNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOffsetDataNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOffsetDataNameArray() { return __p.__vector_as_array<byte>(12); }
  public float OffsetBlendWeight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool ApplyGameObjectSRT { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Priority { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool UniqueFlag { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool UseInstancerSRT { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.scene.fb.LightApplierComponent> CreateLightApplierComponent(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      float timeSpan = 0.0f,
      float currentTime = 0.0f,
      bool startWithOffsetData = false,
      StringOffset offsetDataNameOffset = default(StringOffset),
      float offsetBlendWeight = 0.0f,
      bool applyGameObjectSRT = false,
      int priority = 0,
      bool uniqueFlag = false,
      bool useInstancerSRT = false) {
    builder.StartTable(10);
    LightApplierComponent.AddPriority(builder, priority);
    LightApplierComponent.AddOffsetBlendWeight(builder, offsetBlendWeight);
    LightApplierComponent.AddOffsetDataName(builder, offsetDataNameOffset);
    LightApplierComponent.AddCurrentTime(builder, currentTime);
    LightApplierComponent.AddTimeSpan(builder, timeSpan);
    LightApplierComponent.AddFilePath(builder, filePathOffset);
    LightApplierComponent.AddUseInstancerSRT(builder, useInstancerSRT);
    LightApplierComponent.AddUniqueFlag(builder, uniqueFlag);
    LightApplierComponent.AddApplyGameObjectSRT(builder, applyGameObjectSRT);
    LightApplierComponent.AddStartWithOffsetData(builder, startWithOffsetData);
    return LightApplierComponent.EndLightApplierComponent(builder);
  }

  public static void StartLightApplierComponent(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddTimeSpan(FlatBufferBuilder builder, float timeSpan) { builder.AddFloat(1, timeSpan, 0.0f); }
  public static void AddCurrentTime(FlatBufferBuilder builder, float currentTime) { builder.AddFloat(2, currentTime, 0.0f); }
  public static void AddStartWithOffsetData(FlatBufferBuilder builder, bool startWithOffsetData) { builder.AddBool(3, startWithOffsetData, false); }
  public static void AddOffsetDataName(FlatBufferBuilder builder, StringOffset offsetDataNameOffset) { builder.AddOffset(4, offsetDataNameOffset.Value, 0); }
  public static void AddOffsetBlendWeight(FlatBufferBuilder builder, float offsetBlendWeight) { builder.AddFloat(5, offsetBlendWeight, 0.0f); }
  public static void AddApplyGameObjectSRT(FlatBufferBuilder builder, bool applyGameObjectSRT) { builder.AddBool(6, applyGameObjectSRT, false); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(7, priority, 0); }
  public static void AddUniqueFlag(FlatBufferBuilder builder, bool uniqueFlag) { builder.AddBool(8, uniqueFlag, false); }
  public static void AddUseInstancerSRT(FlatBufferBuilder builder, bool useInstancerSRT) { builder.AddBool(9, useInstancerSRT, false); }
  public static Offset<gfl.scene.fb.LightApplierComponent> EndLightApplierComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.LightApplierComponent>(o);
  }
  public static void FinishLightApplierComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.LightApplierComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLightApplierComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.LightApplierComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LightApplierComponentT UnPack() {
    var _o = new LightApplierComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightApplierComponentT _o) {
    _o.FilePath = this.FilePath;
    _o.TimeSpan = this.TimeSpan;
    _o.CurrentTime = this.CurrentTime;
    _o.StartWithOffsetData = this.StartWithOffsetData;
    _o.OffsetDataName = this.OffsetDataName;
    _o.OffsetBlendWeight = this.OffsetBlendWeight;
    _o.ApplyGameObjectSRT = this.ApplyGameObjectSRT;
    _o.Priority = this.Priority;
    _o.UniqueFlag = this.UniqueFlag;
    _o.UseInstancerSRT = this.UseInstancerSRT;
  }
  public static Offset<gfl.scene.fb.LightApplierComponent> Pack(FlatBufferBuilder builder, LightApplierComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.LightApplierComponent>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _offsetDataName = _o.OffsetDataName == null ? default(StringOffset) : builder.CreateString(_o.OffsetDataName);
    return CreateLightApplierComponent(
      builder,
      _filePath,
      _o.TimeSpan,
      _o.CurrentTime,
      _o.StartWithOffsetData,
      _offsetDataName,
      _o.OffsetBlendWeight,
      _o.ApplyGameObjectSRT,
      _o.Priority,
      _o.UniqueFlag,
      _o.UseInstancerSRT);
  }
};

public class LightApplierComponentT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("timeSpan")]
  public float TimeSpan { get; set; }
  [Newtonsoft.Json.JsonProperty("currentTime")]
  public float CurrentTime { get; set; }
  [Newtonsoft.Json.JsonProperty("startWithOffsetData")]
  public bool StartWithOffsetData { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetDataName")]
  public string OffsetDataName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetBlendWeight")]
  public float OffsetBlendWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("applyGameObjectSRT")]
  public bool ApplyGameObjectSRT { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("uniqueFlag")]
  public bool UniqueFlag { get; set; }
  [Newtonsoft.Json.JsonProperty("useInstancerSRT")]
  public bool UseInstancerSRT { get; set; }

  public LightApplierComponentT() {
    this.FilePath = null;
    this.TimeSpan = 0.0f;
    this.CurrentTime = 0.0f;
    this.StartWithOffsetData = false;
    this.OffsetDataName = null;
    this.OffsetBlendWeight = 0.0f;
    this.ApplyGameObjectSRT = false;
    this.Priority = 0;
    this.UniqueFlag = false;
    this.UseInstancerSRT = false;
  }

  public static LightApplierComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LightApplierComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LightApplierComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return LightApplierComponent.GetRootAsLightApplierComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LightApplierComponent.FinishLightApplierComponentBuffer(fbb, LightApplierComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
