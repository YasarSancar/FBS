// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SubScene : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SubScene GetRootAsSubScene(ByteBuffer _bb) { return GetRootAsSubScene(_bb, new SubScene()); }
  public static SubScene GetRootAsSubScene(ByteBuffer _bb, SubScene obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SubScene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Group { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGroupBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGroupArray() { return __p.__vector_as_array<byte>(6); }
  public string Padding1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPadding1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPadding1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPadding1Array() { return __p.__vector_as_array<byte>(8); }
  public string Padding2 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPadding2Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPadding2Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPadding2Array() { return __p.__vector_as_array<byte>(10); }
  public byte Data(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<gfl.scene.fb.SubScene> CreateSubScene(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset groupOffset = default(StringOffset),
      StringOffset padding1Offset = default(StringOffset),
      StringOffset padding2Offset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(5);
    SubScene.AddData(builder, dataOffset);
    SubScene.AddPadding2(builder, padding2Offset);
    SubScene.AddPadding1(builder, padding1Offset);
    SubScene.AddGroup(builder, groupOffset);
    SubScene.AddName(builder, nameOffset);
    return SubScene.EndSubScene(builder);
  }

  public static void StartSubScene(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddGroup(FlatBufferBuilder builder, StringOffset groupOffset) { builder.AddOffset(1, groupOffset.Value, 0); }
  public static void AddPadding1(FlatBufferBuilder builder, StringOffset padding1Offset) { builder.AddOffset(2, padding1Offset.Value, 0); }
  public static void AddPadding2(FlatBufferBuilder builder, StringOffset padding2Offset) { builder.AddOffset(3, padding2Offset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(4, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.scene.fb.SubScene> EndSubScene(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.SubScene>(o);
  }
  public static void FinishSubSceneBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SubScene> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSubSceneBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SubScene> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SubSceneT UnPack() {
    var _o = new SubSceneT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SubSceneT _o) {
    _o.Name = this.Name;
    _o.Group = this.Group;
    _o.Padding1 = this.Padding1;
    _o.Padding2 = this.Padding2;
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.scene.fb.SubScene> Pack(FlatBufferBuilder builder, SubSceneT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.SubScene>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _group = _o.Group == null ? default(StringOffset) : builder.CreateString(_o.Group);
    var _padding1 = _o.Padding1 == null ? default(StringOffset) : builder.CreateString(_o.Padding1);
    var _padding2 = _o.Padding2 == null ? default(StringOffset) : builder.CreateString(_o.Padding2);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateSubScene(
      builder,
      _name,
      _group,
      _padding1,
      _padding2,
      _data);
  }
};

public class SubSceneT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("group")]
  public string Group { get; set; }
  [Newtonsoft.Json.JsonProperty("padding1")]
  public string Padding1 { get; set; }
  [Newtonsoft.Json.JsonProperty("padding2")]
  public string Padding2 { get; set; }
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public SubSceneT() {
    this.Name = null;
    this.Group = null;
    this.Padding1 = null;
    this.Padding2 = null;
    this.Data = null;
  }

  public static SubSceneT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SubSceneT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SubSceneT DeserializeFromBinary(byte[] fbBuffer) {
    return SubScene.GetRootAsSubScene(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SubScene.FinishSubSceneBuffer(fbb, SubScene.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
