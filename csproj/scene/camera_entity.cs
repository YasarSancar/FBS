// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ProjectionType : byte
{
  Perspective = 0,
  Ortho = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CameraMode : byte
{
  Immediate = 0,
  Free = 1,
  Relative = 2,
  Tracking = 3,
};

public struct CameraEntity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraEntity GetRootAsCameraEntity(ByteBuffer _bb) { return GetRootAsCameraEntity(_bb, new CameraEntity()); }
  public static CameraEntity GetRootAsCameraEntity(ByteBuffer _bb, CameraEntity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraEntity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Active { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.math.fb.Vector3f? Position { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector3f? Rotation { get { int o = __p.__offset(10); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Distance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Fovy { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Near { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Far { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.scene.fb.ProjectionType ProjectionType { get { int o = __p.__offset(20); return o != 0 ? (gfl.scene.fb.ProjectionType)__p.bb.Get(o + __p.bb_pos) : gfl.scene.fb.ProjectionType.Perspective; } }
  public gfl.scene.fb.CameraMode CameraMode { get { int o = __p.__offset(22); return o != 0 ? (gfl.scene.fb.CameraMode)__p.bb.Get(o + __p.bb_pos) : gfl.scene.fb.CameraMode.Immediate; } }
  public string TargetName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTargetNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTargetNameArray() { return __p.__vector_as_array<byte>(24); }
  public bool UseRoll { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Roll { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool AttachTransform { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.scene.fb.CameraEntity> CreateCameraEntity(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      bool active = false,
      gfl.math.fb.Vector3fT position = null,
      gfl.math.fb.Vector3fT rotation = null,
      float distance = 0.0f,
      float fovy = 0.0f,
      float Near = 0.0f,
      float Far = 0.0f,
      gfl.scene.fb.ProjectionType projectionType = gfl.scene.fb.ProjectionType.Perspective,
      gfl.scene.fb.CameraMode cameraMode = gfl.scene.fb.CameraMode.Immediate,
      StringOffset targetNameOffset = default(StringOffset),
      bool useRoll = false,
      float roll = 0.0f,
      bool attachTransform = false) {
    builder.StartTable(14);
    CameraEntity.AddRoll(builder, roll);
    CameraEntity.AddTargetName(builder, targetNameOffset);
    CameraEntity.AddFar(builder, Far);
    CameraEntity.AddNear(builder, Near);
    CameraEntity.AddFovy(builder, fovy);
    CameraEntity.AddDistance(builder, distance);
    CameraEntity.AddRotation(builder, gfl.math.fb.Vector3f.Pack(builder, rotation));
    CameraEntity.AddPosition(builder, gfl.math.fb.Vector3f.Pack(builder, position));
    CameraEntity.AddInstanceName(builder, instanceNameOffset);
    CameraEntity.AddAttachTransform(builder, attachTransform);
    CameraEntity.AddUseRoll(builder, useRoll);
    CameraEntity.AddCameraMode(builder, cameraMode);
    CameraEntity.AddProjectionType(builder, projectionType);
    CameraEntity.AddActive(builder, active);
    return CameraEntity.EndCameraEntity(builder);
  }

  public static void StartCameraEntity(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddActive(FlatBufferBuilder builder, bool active) { builder.AddBool(1, active, false); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> rotationOffset) { builder.AddStruct(3, rotationOffset.Value, 0); }
  public static void AddDistance(FlatBufferBuilder builder, float distance) { builder.AddFloat(4, distance, 0.0f); }
  public static void AddFovy(FlatBufferBuilder builder, float fovy) { builder.AddFloat(5, fovy, 0.0f); }
  public static void AddNear(FlatBufferBuilder builder, float Near) { builder.AddFloat(6, Near, 0.0f); }
  public static void AddFar(FlatBufferBuilder builder, float Far) { builder.AddFloat(7, Far, 0.0f); }
  public static void AddProjectionType(FlatBufferBuilder builder, gfl.scene.fb.ProjectionType projectionType) { builder.AddByte(8, (byte)projectionType, 0); }
  public static void AddCameraMode(FlatBufferBuilder builder, gfl.scene.fb.CameraMode cameraMode) { builder.AddByte(9, (byte)cameraMode, 0); }
  public static void AddTargetName(FlatBufferBuilder builder, StringOffset targetNameOffset) { builder.AddOffset(10, targetNameOffset.Value, 0); }
  public static void AddUseRoll(FlatBufferBuilder builder, bool useRoll) { builder.AddBool(11, useRoll, false); }
  public static void AddRoll(FlatBufferBuilder builder, float roll) { builder.AddFloat(12, roll, 0.0f); }
  public static void AddAttachTransform(FlatBufferBuilder builder, bool attachTransform) { builder.AddBool(13, attachTransform, false); }
  public static Offset<gfl.scene.fb.CameraEntity> EndCameraEntity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CameraEntity>(o);
  }
  public static void FinishCameraEntityBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CameraEntity> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCameraEntityBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CameraEntity> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CameraEntityT UnPack() {
    var _o = new CameraEntityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraEntityT _o) {
    _o.InstanceName = this.InstanceName;
    _o.Active = this.Active;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Distance = this.Distance;
    _o.Fovy = this.Fovy;
    _o.Near = this.Near;
    _o.Far = this.Far;
    _o.ProjectionType = this.ProjectionType;
    _o.CameraMode = this.CameraMode;
    _o.TargetName = this.TargetName;
    _o.UseRoll = this.UseRoll;
    _o.Roll = this.Roll;
    _o.AttachTransform = this.AttachTransform;
  }
  public static Offset<gfl.scene.fb.CameraEntity> Pack(FlatBufferBuilder builder, CameraEntityT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CameraEntity>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _targetName = _o.TargetName == null ? default(StringOffset) : builder.CreateString(_o.TargetName);
    return CreateCameraEntity(
      builder,
      _instanceName,
      _o.Active,
      _o.Position,
      _o.Rotation,
      _o.Distance,
      _o.Fovy,
      _o.Near,
      _o.Far,
      _o.ProjectionType,
      _o.CameraMode,
      _targetName,
      _o.UseRoll,
      _o.Roll,
      _o.AttachTransform);
  }
};

public class CameraEntityT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("active")]
  public bool Active { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.math.fb.Vector3fT Position { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public gfl.math.fb.Vector3fT Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("distance")]
  public float Distance { get; set; }
  [Newtonsoft.Json.JsonProperty("fovy")]
  public float Fovy { get; set; }
  [Newtonsoft.Json.JsonProperty("Near")]
  public float Near { get; set; }
  [Newtonsoft.Json.JsonProperty("Far")]
  public float Far { get; set; }
  [Newtonsoft.Json.JsonProperty("projectionType")]
  public gfl.scene.fb.ProjectionType ProjectionType { get; set; }
  [Newtonsoft.Json.JsonProperty("cameraMode")]
  public gfl.scene.fb.CameraMode CameraMode { get; set; }
  [Newtonsoft.Json.JsonProperty("targetName")]
  public string TargetName { get; set; }
  [Newtonsoft.Json.JsonProperty("useRoll")]
  public bool UseRoll { get; set; }
  [Newtonsoft.Json.JsonProperty("roll")]
  public float Roll { get; set; }
  [Newtonsoft.Json.JsonProperty("attachTransform")]
  public bool AttachTransform { get; set; }

  public CameraEntityT() {
    this.InstanceName = null;
    this.Active = false;
    this.Position = new gfl.math.fb.Vector3fT();
    this.Rotation = new gfl.math.fb.Vector3fT();
    this.Distance = 0.0f;
    this.Fovy = 0.0f;
    this.Near = 0.0f;
    this.Far = 0.0f;
    this.ProjectionType = gfl.scene.fb.ProjectionType.Perspective;
    this.CameraMode = gfl.scene.fb.CameraMode.Immediate;
    this.TargetName = null;
    this.UseRoll = false;
    this.Roll = 0.0f;
    this.AttachTransform = false;
  }

  public static CameraEntityT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CameraEntityT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CameraEntityT DeserializeFromBinary(byte[] fbBuffer) {
    return CameraEntity.GetRootAsCameraEntity(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CameraEntity.FinishCameraEntityBuffer(fbb, CameraEntity.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
