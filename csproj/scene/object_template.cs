// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ObjectTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ObjectTemplate GetRootAsObjectTemplate(ByteBuffer _bb) { return GetRootAsObjectTemplate(_bb, new ObjectTemplate()); }
  public static ObjectTemplate GetRootAsObjectTemplate(ByteBuffer _bb, ObjectTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ScopeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScopeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetScopeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetScopeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string FilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(8); }
  public bool IsExpanded { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string EntityType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEntityTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEntityTypeArray() { return __p.__vector_as_array<byte>(12); }
  public byte EntityData(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int EntityDataLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityDataBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEntityDataBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEntityDataArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<gfl.scene.fb.ObjectTemplate> CreateObjectTemplate(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset scopeNameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      bool isExpanded = false,
      StringOffset entityTypeOffset = default(StringOffset),
      VectorOffset entityDataOffset = default(VectorOffset)) {
    builder.StartTable(6);
    ObjectTemplate.AddEntityData(builder, entityDataOffset);
    ObjectTemplate.AddEntityType(builder, entityTypeOffset);
    ObjectTemplate.AddFilePath(builder, filePathOffset);
    ObjectTemplate.AddScopeName(builder, scopeNameOffset);
    ObjectTemplate.AddName(builder, nameOffset);
    ObjectTemplate.AddIsExpanded(builder, isExpanded);
    return ObjectTemplate.EndObjectTemplate(builder);
  }

  public static void StartObjectTemplate(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddScopeName(FlatBufferBuilder builder, StringOffset scopeNameOffset) { builder.AddOffset(1, scopeNameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(2, filePathOffset.Value, 0); }
  public static void AddIsExpanded(FlatBufferBuilder builder, bool isExpanded) { builder.AddBool(3, isExpanded, false); }
  public static void AddEntityType(FlatBufferBuilder builder, StringOffset entityTypeOffset) { builder.AddOffset(4, entityTypeOffset.Value, 0); }
  public static void AddEntityData(FlatBufferBuilder builder, VectorOffset entityDataOffset) { builder.AddOffset(5, entityDataOffset.Value, 0); }
  public static VectorOffset CreateEntityDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEntityDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartEntityDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.scene.fb.ObjectTemplate> EndObjectTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ObjectTemplate>(o);
  }
  public static void FinishObjectTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ObjectTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedObjectTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ObjectTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ObjectTemplateT UnPack() {
    var _o = new ObjectTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectTemplateT _o) {
    _o.Name = this.Name;
    _o.ScopeName = this.ScopeName;
    _o.FilePath = this.FilePath;
    _o.IsExpanded = this.IsExpanded;
    _o.EntityType = this.EntityType;
    _o.EntityData = new List<byte>();
    for (var _j = 0; _j < this.EntityDataLength; ++_j) {_o.EntityData.Add(this.EntityData(_j));}
  }
  public static Offset<gfl.scene.fb.ObjectTemplate> Pack(FlatBufferBuilder builder, ObjectTemplateT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ObjectTemplate>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _scopeName = _o.ScopeName == null ? default(StringOffset) : builder.CreateString(_o.ScopeName);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _entityType = _o.EntityType == null ? default(StringOffset) : builder.CreateString(_o.EntityType);
    var _entityData = default(VectorOffset);
    if (_o.EntityData != null) {
      var __entityData = _o.EntityData.ToArray();
      _entityData = CreateEntityDataVector(builder, __entityData);
    }
    return CreateObjectTemplate(
      builder,
      _name,
      _scopeName,
      _filePath,
      _o.IsExpanded,
      _entityType,
      _entityData);
  }
};

public class ObjectTemplateT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("scopeName")]
  public string ScopeName { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("isExpanded")]
  public bool IsExpanded { get; set; }
  [Newtonsoft.Json.JsonProperty("entityType")]
  public string EntityType { get; set; }
  [Newtonsoft.Json.JsonProperty("entityData")]
  public List<byte> EntityData { get; set; }

  public ObjectTemplateT() {
    this.Name = null;
    this.ScopeName = null;
    this.FilePath = null;
    this.IsExpanded = false;
    this.EntityType = null;
    this.EntityData = null;
  }

  public static ObjectTemplateT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectTemplateT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ObjectTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return ObjectTemplate.GetRootAsObjectTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ObjectTemplate.FinishObjectTemplateBuffer(fbb, ObjectTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
