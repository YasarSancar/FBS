// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TerrainCollision : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TerrainCollision GetRootAsTerrainCollision(ByteBuffer _bb) { return GetRootAsTerrainCollision(_bb, new TerrainCollision()); }
  public static TerrainCollision GetRootAsTerrainCollision(ByteBuffer _bb, TerrainCollision obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TerrainCollision __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public int Layer { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HoleLayer { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.scene.fb.TerrainCollision> CreateTerrainCollision(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      int layer = 0,
      int holeLayer = 0) {
    builder.StartTable(3);
    TerrainCollision.AddHoleLayer(builder, holeLayer);
    TerrainCollision.AddLayer(builder, layer);
    TerrainCollision.AddFilePath(builder, filePathOffset);
    return TerrainCollision.EndTerrainCollision(builder);
  }

  public static void StartTerrainCollision(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddLayer(FlatBufferBuilder builder, int layer) { builder.AddInt(1, layer, 0); }
  public static void AddHoleLayer(FlatBufferBuilder builder, int holeLayer) { builder.AddInt(2, holeLayer, 0); }
  public static Offset<gfl.scene.fb.TerrainCollision> EndTerrainCollision(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.TerrainCollision>(o);
  }
  public static void FinishTerrainCollisionBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainCollision> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTerrainCollisionBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.TerrainCollision> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TerrainCollisionT UnPack() {
    var _o = new TerrainCollisionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TerrainCollisionT _o) {
    _o.FilePath = this.FilePath;
    _o.Layer = this.Layer;
    _o.HoleLayer = this.HoleLayer;
  }
  public static Offset<gfl.scene.fb.TerrainCollision> Pack(FlatBufferBuilder builder, TerrainCollisionT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.TerrainCollision>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateTerrainCollision(
      builder,
      _filePath,
      _o.Layer,
      _o.HoleLayer);
  }
};

public class TerrainCollisionT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("layer")]
  public int Layer { get; set; }
  [Newtonsoft.Json.JsonProperty("holeLayer")]
  public int HoleLayer { get; set; }

  public TerrainCollisionT() {
    this.FilePath = null;
    this.Layer = 0;
    this.HoleLayer = 0;
  }

  public static TerrainCollisionT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TerrainCollisionT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TerrainCollisionT DeserializeFromBinary(byte[] fbBuffer) {
    return TerrainCollision.GetRootAsTerrainCollision(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TerrainCollision.FinishTerrainCollisionBuffer(fbb, TerrainCollision.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
