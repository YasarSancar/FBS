// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EnvironmentParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnvironmentParameter GetRootAsEnvironmentParameter(ByteBuffer _bb) { return GetRootAsEnvironmentParameter(_bb, new EnvironmentParameter()); }
  public static EnvironmentParameter GetRootAsEnvironmentParameter(ByteBuffer _bb, EnvironmentParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnvironmentParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ParameterName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.EnvironmentParameter> CreateEnvironmentParameter(FlatBufferBuilder builder,
      StringOffset parameterNameOffset = default(StringOffset),
      float value = 0.0f) {
    builder.StartTable(2);
    EnvironmentParameter.AddValue(builder, value);
    EnvironmentParameter.AddParameterName(builder, parameterNameOffset);
    return EnvironmentParameter.EndEnvironmentParameter(builder);
  }

  public static void StartEnvironmentParameter(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(0, parameterNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static Offset<gfl.scene.fb.EnvironmentParameter> EndEnvironmentParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.EnvironmentParameter>(o);
  }
  public static void FinishEnvironmentParameterBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.EnvironmentParameter> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEnvironmentParameterBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.EnvironmentParameter> offset) { builder.FinishSizePrefixed(offset.Value); }
  public EnvironmentParameterT UnPack() {
    var _o = new EnvironmentParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnvironmentParameterT _o) {
    _o.ParameterName = this.ParameterName;
    _o.Value = this.Value;
  }
  public static Offset<gfl.scene.fb.EnvironmentParameter> Pack(FlatBufferBuilder builder, EnvironmentParameterT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.EnvironmentParameter>);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    return CreateEnvironmentParameter(
      builder,
      _parameterName,
      _o.Value);
  }
};

public class EnvironmentParameterT
{
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public EnvironmentParameterT() {
    this.ParameterName = null;
    this.Value = 0.0f;
  }

  public static EnvironmentParameterT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvironmentParameterT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static EnvironmentParameterT DeserializeFromBinary(byte[] fbBuffer) {
    return EnvironmentParameter.GetRootAsEnvironmentParameter(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EnvironmentParameter.FinishEnvironmentParameterBuffer(fbb, EnvironmentParameter.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
