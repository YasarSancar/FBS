// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CompoundCapsuleShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CompoundCapsuleShape GetRootAsCompoundCapsuleShape(ByteBuffer _bb) { return GetRootAsCompoundCapsuleShape(_bb, new CompoundCapsuleShape()); }
  public static CompoundCapsuleShape GetRootAsCompoundCapsuleShape(ByteBuffer _bb, CompoundCapsuleShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CompoundCapsuleShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector3f? Pos { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Radius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Height { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.math.fb.Vector3f? Rot { get { int o = __p.__offset(12); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.scene.fb.CompoundCapsuleShape> CreateCompoundCapsuleShape(FlatBufferBuilder builder,
      StringOffset resourceNameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT pos = null,
      float radius = 0.0f,
      float height = 0.0f,
      gfl.math.fb.Vector3fT rot = null) {
    builder.StartTable(5);
    CompoundCapsuleShape.AddRot(builder, gfl.math.fb.Vector3f.Pack(builder, rot));
    CompoundCapsuleShape.AddHeight(builder, height);
    CompoundCapsuleShape.AddRadius(builder, radius);
    CompoundCapsuleShape.AddPos(builder, gfl.math.fb.Vector3f.Pack(builder, pos));
    CompoundCapsuleShape.AddResourceName(builder, resourceNameOffset);
    return CompoundCapsuleShape.EndCompoundCapsuleShape(builder);
  }

  public static void StartCompoundCapsuleShape(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(0, resourceNameOffset.Value, 0); }
  public static void AddPos(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> posOffset) { builder.AddStruct(1, posOffset.Value, 0); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(2, radius, 0.0f); }
  public static void AddHeight(FlatBufferBuilder builder, float height) { builder.AddFloat(3, height, 0.0f); }
  public static void AddRot(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> rotOffset) { builder.AddStruct(4, rotOffset.Value, 0); }
  public static Offset<gfl.scene.fb.CompoundCapsuleShape> EndCompoundCapsuleShape(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CompoundCapsuleShape>(o);
  }
  public static void FinishCompoundCapsuleShapeBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CompoundCapsuleShape> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCompoundCapsuleShapeBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CompoundCapsuleShape> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CompoundCapsuleShapeT UnPack() {
    var _o = new CompoundCapsuleShapeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CompoundCapsuleShapeT _o) {
    _o.ResourceName = this.ResourceName;
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.Radius = this.Radius;
    _o.Height = this.Height;
    _o.Rot = this.Rot.HasValue ? this.Rot.Value.UnPack() : null;
  }
  public static Offset<gfl.scene.fb.CompoundCapsuleShape> Pack(FlatBufferBuilder builder, CompoundCapsuleShapeT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CompoundCapsuleShape>);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateCompoundCapsuleShape(
      builder,
      _resourceName,
      _o.Pos,
      _o.Radius,
      _o.Height,
      _o.Rot);
  }
};

public class CompoundCapsuleShapeT
{
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("pos")]
  public gfl.math.fb.Vector3fT Pos { get; set; }
  [Newtonsoft.Json.JsonProperty("radius")]
  public float Radius { get; set; }
  [Newtonsoft.Json.JsonProperty("height")]
  public float Height { get; set; }
  [Newtonsoft.Json.JsonProperty("rot")]
  public gfl.math.fb.Vector3fT Rot { get; set; }

  public CompoundCapsuleShapeT() {
    this.ResourceName = null;
    this.Pos = new gfl.math.fb.Vector3fT();
    this.Radius = 0.0f;
    this.Height = 0.0f;
    this.Rot = new gfl.math.fb.Vector3fT();
  }

  public static CompoundCapsuleShapeT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CompoundCapsuleShapeT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CompoundCapsuleShapeT DeserializeFromBinary(byte[] fbBuffer) {
    return CompoundCapsuleShape.GetRootAsCompoundCapsuleShape(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CompoundCapsuleShape.FinishCompoundCapsuleShapeBuffer(fbb, CompoundCapsuleShape.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
