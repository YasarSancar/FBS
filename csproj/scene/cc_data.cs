// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CCPartsData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCPartsData GetRootAsCCPartsData(ByteBuffer _bb) { return GetRootAsCCPartsData(_bb, new CCPartsData()); }
  public static CCPartsData GetRootAsCCPartsData(ByteBuffer _bb, CCPartsData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCPartsData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsRoot { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TrmdlFilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmdlFilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTrmdlFilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTrmdlFilePathArray() { return __p.__vector_as_array<byte>(8); }
  public string TrmmtFilePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmmtFilePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTrmmtFilePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTrmmtFilePathArray() { return __p.__vector_as_array<byte>(10); }
  public string TracnFilePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTracnFilePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTracnFilePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTracnFilePathArray() { return __p.__vector_as_array<byte>(12); }
  public string MetadataName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMetadataNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMetadataNameArray() { return __p.__vector_as_array<byte>(14); }
  public string TracnFilePathList(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TracnFilePathListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.CCPartsData> CreateCCPartsData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool isRoot = false,
      StringOffset trmdlFilePathOffset = default(StringOffset),
      StringOffset trmmtFilePathOffset = default(StringOffset),
      StringOffset tracnFilePathOffset = default(StringOffset),
      StringOffset metadataNameOffset = default(StringOffset),
      VectorOffset tracnFilePathListOffset = default(VectorOffset)) {
    builder.StartTable(7);
    CCPartsData.AddTracnFilePathList(builder, tracnFilePathListOffset);
    CCPartsData.AddMetadataName(builder, metadataNameOffset);
    CCPartsData.AddTracnFilePath(builder, tracnFilePathOffset);
    CCPartsData.AddTrmmtFilePath(builder, trmmtFilePathOffset);
    CCPartsData.AddTrmdlFilePath(builder, trmdlFilePathOffset);
    CCPartsData.AddName(builder, nameOffset);
    CCPartsData.AddIsRoot(builder, isRoot);
    return CCPartsData.EndCCPartsData(builder);
  }

  public static void StartCCPartsData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddIsRoot(FlatBufferBuilder builder, bool isRoot) { builder.AddBool(1, isRoot, false); }
  public static void AddTrmdlFilePath(FlatBufferBuilder builder, StringOffset trmdlFilePathOffset) { builder.AddOffset(2, trmdlFilePathOffset.Value, 0); }
  public static void AddTrmmtFilePath(FlatBufferBuilder builder, StringOffset trmmtFilePathOffset) { builder.AddOffset(3, trmmtFilePathOffset.Value, 0); }
  public static void AddTracnFilePath(FlatBufferBuilder builder, StringOffset tracnFilePathOffset) { builder.AddOffset(4, tracnFilePathOffset.Value, 0); }
  public static void AddMetadataName(FlatBufferBuilder builder, StringOffset metadataNameOffset) { builder.AddOffset(5, metadataNameOffset.Value, 0); }
  public static void AddTracnFilePathList(FlatBufferBuilder builder, VectorOffset tracnFilePathListOffset) { builder.AddOffset(6, tracnFilePathListOffset.Value, 0); }
  public static VectorOffset CreateTracnFilePathListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTracnFilePathListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTracnFilePathListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.CCPartsData> EndCCPartsData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CCPartsData>(o);
  }
  public CCPartsDataT UnPack() {
    var _o = new CCPartsDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCPartsDataT _o) {
    _o.Name = this.Name;
    _o.IsRoot = this.IsRoot;
    _o.TrmdlFilePath = this.TrmdlFilePath;
    _o.TrmmtFilePath = this.TrmmtFilePath;
    _o.TracnFilePath = this.TracnFilePath;
    _o.MetadataName = this.MetadataName;
    _o.TracnFilePathList = new List<string>();
    for (var _j = 0; _j < this.TracnFilePathListLength; ++_j) {_o.TracnFilePathList.Add(this.TracnFilePathList(_j));}
  }
  public static Offset<gfl.scene.fb.CCPartsData> Pack(FlatBufferBuilder builder, CCPartsDataT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CCPartsData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _trmdlFilePath = _o.TrmdlFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmdlFilePath);
    var _trmmtFilePath = _o.TrmmtFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrmmtFilePath);
    var _tracnFilePath = _o.TracnFilePath == null ? default(StringOffset) : builder.CreateString(_o.TracnFilePath);
    var _metadataName = _o.MetadataName == null ? default(StringOffset) : builder.CreateString(_o.MetadataName);
    var _tracnFilePathList = default(VectorOffset);
    if (_o.TracnFilePathList != null) {
      var __tracnFilePathList = new StringOffset[_o.TracnFilePathList.Count];
      for (var _j = 0; _j < __tracnFilePathList.Length; ++_j) { __tracnFilePathList[_j] = builder.CreateString(_o.TracnFilePathList[_j]); }
      _tracnFilePathList = CreateTracnFilePathListVector(builder, __tracnFilePathList);
    }
    return CreateCCPartsData(
      builder,
      _name,
      _o.IsRoot,
      _trmdlFilePath,
      _trmmtFilePath,
      _tracnFilePath,
      _metadataName,
      _tracnFilePathList);
  }
};

public class CCPartsDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("isRoot")]
  public bool IsRoot { get; set; }
  [Newtonsoft.Json.JsonProperty("trmdlFilePath")]
  public string TrmdlFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("trmmtFilePath")]
  public string TrmmtFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("tracnFilePath")]
  public string TracnFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("metadataName")]
  public string MetadataName { get; set; }
  [Newtonsoft.Json.JsonProperty("tracnFilePathList")]
  public List<string> TracnFilePathList { get; set; }

  public CCPartsDataT() {
    this.Name = null;
    this.IsRoot = false;
    this.TrmdlFilePath = null;
    this.TrmmtFilePath = null;
    this.TracnFilePath = null;
    this.MetadataName = null;
    this.TracnFilePathList = null;
  }
}

public struct CCModifierScalar : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierScalar GetRootAsCCModifierScalar(ByteBuffer _bb) { return GetRootAsCCModifierScalar(_bb, new CCModifierScalar()); }
  public static CCModifierScalar GetRootAsCCModifierScalar(ByteBuffer _bb, CCModifierScalar obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierScalar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public float ScaleX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ScaleY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ScaleZ { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.CCModifierScalar> CreateCCModifierScalar(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      float scaleX = 0.0f,
      float scaleY = 0.0f,
      float scaleZ = 0.0f) {
    builder.StartTable(4);
    CCModifierScalar.AddScaleZ(builder, scaleZ);
    CCModifierScalar.AddScaleY(builder, scaleY);
    CCModifierScalar.AddScaleX(builder, scaleX);
    CCModifierScalar.AddName(builder, nameOffset);
    return CCModifierScalar.EndCCModifierScalar(builder);
  }

  public static void StartCCModifierScalar(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddScaleX(FlatBufferBuilder builder, float scaleX) { builder.AddFloat(1, scaleX, 0.0f); }
  public static void AddScaleY(FlatBufferBuilder builder, float scaleY) { builder.AddFloat(2, scaleY, 0.0f); }
  public static void AddScaleZ(FlatBufferBuilder builder, float scaleZ) { builder.AddFloat(3, scaleZ, 0.0f); }
  public static Offset<gfl.scene.fb.CCModifierScalar> EndCCModifierScalar(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CCModifierScalar>(o);
  }
  public CCModifierScalarT UnPack() {
    var _o = new CCModifierScalarT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierScalarT _o) {
    _o.Name = this.Name;
    _o.ScaleX = this.ScaleX;
    _o.ScaleY = this.ScaleY;
    _o.ScaleZ = this.ScaleZ;
  }
  public static Offset<gfl.scene.fb.CCModifierScalar> Pack(FlatBufferBuilder builder, CCModifierScalarT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CCModifierScalar>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCCModifierScalar(
      builder,
      _name,
      _o.ScaleX,
      _o.ScaleY,
      _o.ScaleZ);
  }
};

public class CCModifierScalarT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleX")]
  public float ScaleX { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleY")]
  public float ScaleY { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleZ")]
  public float ScaleZ { get; set; }

  public CCModifierScalarT() {
    this.Name = null;
    this.ScaleX = 0.0f;
    this.ScaleY = 0.0f;
    this.ScaleZ = 0.0f;
  }
}

public struct CCModifierRatio : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierRatio GetRootAsCCModifierRatio(ByteBuffer _bb) { return GetRootAsCCModifierRatio(_bb, new CCModifierRatio()); }
  public static CCModifierRatio GetRootAsCCModifierRatio(ByteBuffer _bb, CCModifierRatio obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierRatio __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Ratio { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.CCModifierRatio> CreateCCModifierRatio(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      float ratio = 0.0f) {
    builder.StartTable(2);
    CCModifierRatio.AddRatio(builder, ratio);
    CCModifierRatio.AddName(builder, nameOffset);
    return CCModifierRatio.EndCCModifierRatio(builder);
  }

  public static void StartCCModifierRatio(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddRatio(FlatBufferBuilder builder, float ratio) { builder.AddFloat(1, ratio, 0.0f); }
  public static Offset<gfl.scene.fb.CCModifierRatio> EndCCModifierRatio(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CCModifierRatio>(o);
  }
  public CCModifierRatioT UnPack() {
    var _o = new CCModifierRatioT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierRatioT _o) {
    _o.Name = this.Name;
    _o.Ratio = this.Ratio;
  }
  public static Offset<gfl.scene.fb.CCModifierRatio> Pack(FlatBufferBuilder builder, CCModifierRatioT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CCModifierRatio>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCCModifierRatio(
      builder,
      _name,
      _o.Ratio);
  }
};

public class CCModifierRatioT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("ratio")]
  public float Ratio { get; set; }

  public CCModifierRatioT() {
    this.Name = null;
    this.Ratio = 0.0f;
  }
}

public struct CCModifierData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCModifierData GetRootAsCCModifierData(ByteBuffer _bb) { return GetRootAsCCModifierData(_bb, new CCModifierData()); }
  public static CCModifierData GetRootAsCCModifierData(ByteBuffer _bb, CCModifierData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCModifierData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrbsmFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrbsmFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrbsmFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrbsmFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.scene.fb.CCModifierScalar? ScalarList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.CCModifierScalar?)(new gfl.scene.fb.CCModifierScalar()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScalarListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.scene.fb.CCModifierRatio? RatioList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.scene.fb.CCModifierRatio?)(new gfl.scene.fb.CCModifierRatio()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RatioListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.CCModifierData> CreateCCModifierData(FlatBufferBuilder builder,
      StringOffset trbsmFilePathOffset = default(StringOffset),
      VectorOffset scalarListOffset = default(VectorOffset),
      VectorOffset ratioListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    CCModifierData.AddRatioList(builder, ratioListOffset);
    CCModifierData.AddScalarList(builder, scalarListOffset);
    CCModifierData.AddTrbsmFilePath(builder, trbsmFilePathOffset);
    return CCModifierData.EndCCModifierData(builder);
  }

  public static void StartCCModifierData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTrbsmFilePath(FlatBufferBuilder builder, StringOffset trbsmFilePathOffset) { builder.AddOffset(0, trbsmFilePathOffset.Value, 0); }
  public static void AddScalarList(FlatBufferBuilder builder, VectorOffset scalarListOffset) { builder.AddOffset(1, scalarListOffset.Value, 0); }
  public static VectorOffset CreateScalarListVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCModifierScalar>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScalarListVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCModifierScalar>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScalarListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRatioList(FlatBufferBuilder builder, VectorOffset ratioListOffset) { builder.AddOffset(2, ratioListOffset.Value, 0); }
  public static VectorOffset CreateRatioListVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCModifierRatio>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRatioListVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCModifierRatio>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRatioListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.CCModifierData> EndCCModifierData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CCModifierData>(o);
  }
  public CCModifierDataT UnPack() {
    var _o = new CCModifierDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCModifierDataT _o) {
    _o.TrbsmFilePath = this.TrbsmFilePath;
    _o.ScalarList = new List<gfl.scene.fb.CCModifierScalarT>();
    for (var _j = 0; _j < this.ScalarListLength; ++_j) {_o.ScalarList.Add(this.ScalarList(_j).HasValue ? this.ScalarList(_j).Value.UnPack() : null);}
    _o.RatioList = new List<gfl.scene.fb.CCModifierRatioT>();
    for (var _j = 0; _j < this.RatioListLength; ++_j) {_o.RatioList.Add(this.RatioList(_j).HasValue ? this.RatioList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.CCModifierData> Pack(FlatBufferBuilder builder, CCModifierDataT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CCModifierData>);
    var _trbsmFilePath = _o.TrbsmFilePath == null ? default(StringOffset) : builder.CreateString(_o.TrbsmFilePath);
    var _scalarList = default(VectorOffset);
    if (_o.ScalarList != null) {
      var __scalarList = new Offset<gfl.scene.fb.CCModifierScalar>[_o.ScalarList.Count];
      for (var _j = 0; _j < __scalarList.Length; ++_j) { __scalarList[_j] = gfl.scene.fb.CCModifierScalar.Pack(builder, _o.ScalarList[_j]); }
      _scalarList = CreateScalarListVector(builder, __scalarList);
    }
    var _ratioList = default(VectorOffset);
    if (_o.RatioList != null) {
      var __ratioList = new Offset<gfl.scene.fb.CCModifierRatio>[_o.RatioList.Count];
      for (var _j = 0; _j < __ratioList.Length; ++_j) { __ratioList[_j] = gfl.scene.fb.CCModifierRatio.Pack(builder, _o.RatioList[_j]); }
      _ratioList = CreateRatioListVector(builder, __ratioList);
    }
    return CreateCCModifierData(
      builder,
      _trbsmFilePath,
      _scalarList,
      _ratioList);
  }
};

public class CCModifierDataT
{
  [Newtonsoft.Json.JsonProperty("trbsmFilePath")]
  public string TrbsmFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("scalarList")]
  public List<gfl.scene.fb.CCModifierScalarT> ScalarList { get; set; }
  [Newtonsoft.Json.JsonProperty("ratioList")]
  public List<gfl.scene.fb.CCModifierRatioT> RatioList { get; set; }

  public CCModifierDataT() {
    this.TrbsmFilePath = null;
    this.ScalarList = null;
    this.RatioList = null;
  }
}

public struct CCData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CCData GetRootAsCCData(ByteBuffer _bb) { return GetRootAsCCData(_bb, new CCData()); }
  public static CCData GetRootAsCCData(ByteBuffer _bb, CCData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CCData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.CCPartsData? PartsList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.CCPartsData?)(new gfl.scene.fb.CCPartsData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartsListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.scene.fb.CCModifierData? ModifierData { get { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.CCModifierData?)(new gfl.scene.fb.CCModifierData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int AnimationSlotCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<gfl.scene.fb.CCData> CreateCCData(FlatBufferBuilder builder,
      VectorOffset partsListOffset = default(VectorOffset),
      Offset<gfl.scene.fb.CCModifierData> modifierDataOffset = default(Offset<gfl.scene.fb.CCModifierData>),
      int animationSlotCount = 1) {
    builder.StartTable(3);
    CCData.AddAnimationSlotCount(builder, animationSlotCount);
    CCData.AddModifierData(builder, modifierDataOffset);
    CCData.AddPartsList(builder, partsListOffset);
    return CCData.EndCCData(builder);
  }

  public static void StartCCData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPartsList(FlatBufferBuilder builder, VectorOffset partsListOffset) { builder.AddOffset(0, partsListOffset.Value, 0); }
  public static VectorOffset CreatePartsListVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCPartsData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartsListVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCPartsData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartsListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddModifierData(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCModifierData> modifierDataOffset) { builder.AddOffset(1, modifierDataOffset.Value, 0); }
  public static void AddAnimationSlotCount(FlatBufferBuilder builder, int animationSlotCount) { builder.AddInt(2, animationSlotCount, 1); }
  public static Offset<gfl.scene.fb.CCData> EndCCData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CCData>(o);
  }
  public static void FinishCCDataBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCCDataBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CCData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CCDataT UnPack() {
    var _o = new CCDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CCDataT _o) {
    _o.PartsList = new List<gfl.scene.fb.CCPartsDataT>();
    for (var _j = 0; _j < this.PartsListLength; ++_j) {_o.PartsList.Add(this.PartsList(_j).HasValue ? this.PartsList(_j).Value.UnPack() : null);}
    _o.ModifierData = this.ModifierData.HasValue ? this.ModifierData.Value.UnPack() : null;
    _o.AnimationSlotCount = this.AnimationSlotCount;
  }
  public static Offset<gfl.scene.fb.CCData> Pack(FlatBufferBuilder builder, CCDataT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CCData>);
    var _partsList = default(VectorOffset);
    if (_o.PartsList != null) {
      var __partsList = new Offset<gfl.scene.fb.CCPartsData>[_o.PartsList.Count];
      for (var _j = 0; _j < __partsList.Length; ++_j) { __partsList[_j] = gfl.scene.fb.CCPartsData.Pack(builder, _o.PartsList[_j]); }
      _partsList = CreatePartsListVector(builder, __partsList);
    }
    var _modifierData = _o.ModifierData == null ? default(Offset<gfl.scene.fb.CCModifierData>) : gfl.scene.fb.CCModifierData.Pack(builder, _o.ModifierData);
    return CreateCCData(
      builder,
      _partsList,
      _modifierData,
      _o.AnimationSlotCount);
  }
};

public class CCDataT
{
  [Newtonsoft.Json.JsonProperty("partsList")]
  public List<gfl.scene.fb.CCPartsDataT> PartsList { get; set; }
  [Newtonsoft.Json.JsonProperty("modifierData")]
  public gfl.scene.fb.CCModifierDataT ModifierData { get; set; }
  [Newtonsoft.Json.JsonProperty("animationSlotCount")]
  public int AnimationSlotCount { get; set; }

  public CCDataT() {
    this.PartsList = null;
    this.ModifierData = null;
    this.AnimationSlotCount = 1;
  }

  public static CCDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CCDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CCDataT DeserializeFromBinary(byte[] fbBuffer) {
    return CCData.GetRootAsCCData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CCData.FinishCCDataBuffer(fbb, CCData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
