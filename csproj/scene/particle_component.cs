// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticleComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticleComponent GetRootAsParticleComponent(ByteBuffer _bb) { return GetRootAsParticleComponent(_bb, new ParticleComponent()); }
  public static ParticleComponent GetRootAsParticleComponent(ByteBuffer _bb, ParticleComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticleComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string AttachNodeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttachNodeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAttachNodeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAttachNodeNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool EmitOnCreate { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ResourceName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(10); }
  public string GroupDrawer { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroupDrawerBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGroupDrawerBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGroupDrawerArray() { return __p.__vector_as_array<byte>(12); }
  public bool DebugShowEmitterSetSRT { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TrackingToCurrentCamera { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TrackingToCurrentCameraIgnoreX { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float TrackingToCurrentCameraTranslationX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TrackingToCurrentCameraTranslationY { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TrackingToCurrentCameraTranslationZ { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool EmitterCullingEnable { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<gfl.scene.fb.ParticleComponent> CreateParticleComponent(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      StringOffset attachNodeNameOffset = default(StringOffset),
      bool emitOnCreate = false,
      StringOffset resourceNameOffset = default(StringOffset),
      StringOffset groupDrawerOffset = default(StringOffset),
      bool debugShowEmitterSetSRT = false,
      bool trackingToCurrentCamera = false,
      bool trackingToCurrentCameraIgnoreX = false,
      float trackingToCurrentCameraTranslationX = 0.0f,
      float trackingToCurrentCameraTranslationY = 0.0f,
      float trackingToCurrentCameraTranslationZ = 0.0f,
      bool emitterCullingEnable = true) {
    builder.StartTable(12);
    ParticleComponent.AddTrackingToCurrentCameraTranslationZ(builder, trackingToCurrentCameraTranslationZ);
    ParticleComponent.AddTrackingToCurrentCameraTranslationY(builder, trackingToCurrentCameraTranslationY);
    ParticleComponent.AddTrackingToCurrentCameraTranslationX(builder, trackingToCurrentCameraTranslationX);
    ParticleComponent.AddGroupDrawer(builder, groupDrawerOffset);
    ParticleComponent.AddResourceName(builder, resourceNameOffset);
    ParticleComponent.AddAttachNodeName(builder, attachNodeNameOffset);
    ParticleComponent.AddFilePath(builder, filePathOffset);
    ParticleComponent.AddEmitterCullingEnable(builder, emitterCullingEnable);
    ParticleComponent.AddTrackingToCurrentCameraIgnoreX(builder, trackingToCurrentCameraIgnoreX);
    ParticleComponent.AddTrackingToCurrentCamera(builder, trackingToCurrentCamera);
    ParticleComponent.AddDebugShowEmitterSetSRT(builder, debugShowEmitterSetSRT);
    ParticleComponent.AddEmitOnCreate(builder, emitOnCreate);
    return ParticleComponent.EndParticleComponent(builder);
  }

  public static void StartParticleComponent(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddAttachNodeName(FlatBufferBuilder builder, StringOffset attachNodeNameOffset) { builder.AddOffset(1, attachNodeNameOffset.Value, 0); }
  public static void AddEmitOnCreate(FlatBufferBuilder builder, bool emitOnCreate) { builder.AddBool(2, emitOnCreate, false); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(3, resourceNameOffset.Value, 0); }
  public static void AddGroupDrawer(FlatBufferBuilder builder, StringOffset groupDrawerOffset) { builder.AddOffset(4, groupDrawerOffset.Value, 0); }
  public static void AddDebugShowEmitterSetSRT(FlatBufferBuilder builder, bool debugShowEmitterSetSRT) { builder.AddBool(5, debugShowEmitterSetSRT, false); }
  public static void AddTrackingToCurrentCamera(FlatBufferBuilder builder, bool trackingToCurrentCamera) { builder.AddBool(6, trackingToCurrentCamera, false); }
  public static void AddTrackingToCurrentCameraIgnoreX(FlatBufferBuilder builder, bool trackingToCurrentCameraIgnoreX) { builder.AddBool(7, trackingToCurrentCameraIgnoreX, false); }
  public static void AddTrackingToCurrentCameraTranslationX(FlatBufferBuilder builder, float trackingToCurrentCameraTranslationX) { builder.AddFloat(8, trackingToCurrentCameraTranslationX, 0.0f); }
  public static void AddTrackingToCurrentCameraTranslationY(FlatBufferBuilder builder, float trackingToCurrentCameraTranslationY) { builder.AddFloat(9, trackingToCurrentCameraTranslationY, 0.0f); }
  public static void AddTrackingToCurrentCameraTranslationZ(FlatBufferBuilder builder, float trackingToCurrentCameraTranslationZ) { builder.AddFloat(10, trackingToCurrentCameraTranslationZ, 0.0f); }
  public static void AddEmitterCullingEnable(FlatBufferBuilder builder, bool emitterCullingEnable) { builder.AddBool(11, emitterCullingEnable, true); }
  public static Offset<gfl.scene.fb.ParticleComponent> EndParticleComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ParticleComponent>(o);
  }
  public static void FinishParticleComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ParticleComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedParticleComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ParticleComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ParticleComponentT UnPack() {
    var _o = new ParticleComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParticleComponentT _o) {
    _o.FilePath = this.FilePath;
    _o.AttachNodeName = this.AttachNodeName;
    _o.EmitOnCreate = this.EmitOnCreate;
    _o.ResourceName = this.ResourceName;
    _o.GroupDrawer = this.GroupDrawer;
    _o.DebugShowEmitterSetSRT = this.DebugShowEmitterSetSRT;
    _o.TrackingToCurrentCamera = this.TrackingToCurrentCamera;
    _o.TrackingToCurrentCameraIgnoreX = this.TrackingToCurrentCameraIgnoreX;
    _o.TrackingToCurrentCameraTranslationX = this.TrackingToCurrentCameraTranslationX;
    _o.TrackingToCurrentCameraTranslationY = this.TrackingToCurrentCameraTranslationY;
    _o.TrackingToCurrentCameraTranslationZ = this.TrackingToCurrentCameraTranslationZ;
    _o.EmitterCullingEnable = this.EmitterCullingEnable;
  }
  public static Offset<gfl.scene.fb.ParticleComponent> Pack(FlatBufferBuilder builder, ParticleComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ParticleComponent>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _attachNodeName = _o.AttachNodeName == null ? default(StringOffset) : builder.CreateString(_o.AttachNodeName);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    var _groupDrawer = _o.GroupDrawer == null ? default(StringOffset) : builder.CreateString(_o.GroupDrawer);
    return CreateParticleComponent(
      builder,
      _filePath,
      _attachNodeName,
      _o.EmitOnCreate,
      _resourceName,
      _groupDrawer,
      _o.DebugShowEmitterSetSRT,
      _o.TrackingToCurrentCamera,
      _o.TrackingToCurrentCameraIgnoreX,
      _o.TrackingToCurrentCameraTranslationX,
      _o.TrackingToCurrentCameraTranslationY,
      _o.TrackingToCurrentCameraTranslationZ,
      _o.EmitterCullingEnable);
  }
};

public class ParticleComponentT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("attachNodeName")]
  public string AttachNodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("emitOnCreate")]
  public bool EmitOnCreate { get; set; }
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("groupDrawer")]
  public string GroupDrawer { get; set; }
  [Newtonsoft.Json.JsonProperty("debugShowEmitterSetSRT")]
  public bool DebugShowEmitterSetSRT { get; set; }
  [Newtonsoft.Json.JsonProperty("trackingToCurrentCamera")]
  public bool TrackingToCurrentCamera { get; set; }
  [Newtonsoft.Json.JsonProperty("trackingToCurrentCameraIgnoreX")]
  public bool TrackingToCurrentCameraIgnoreX { get; set; }
  [Newtonsoft.Json.JsonProperty("trackingToCurrentCameraTranslationX")]
  public float TrackingToCurrentCameraTranslationX { get; set; }
  [Newtonsoft.Json.JsonProperty("trackingToCurrentCameraTranslationY")]
  public float TrackingToCurrentCameraTranslationY { get; set; }
  [Newtonsoft.Json.JsonProperty("trackingToCurrentCameraTranslationZ")]
  public float TrackingToCurrentCameraTranslationZ { get; set; }
  [Newtonsoft.Json.JsonProperty("emitterCullingEnable")]
  public bool EmitterCullingEnable { get; set; }

  public ParticleComponentT() {
    this.FilePath = null;
    this.AttachNodeName = null;
    this.EmitOnCreate = false;
    this.ResourceName = null;
    this.GroupDrawer = null;
    this.DebugShowEmitterSetSRT = false;
    this.TrackingToCurrentCamera = false;
    this.TrackingToCurrentCameraIgnoreX = false;
    this.TrackingToCurrentCameraTranslationX = 0.0f;
    this.TrackingToCurrentCameraTranslationY = 0.0f;
    this.TrackingToCurrentCameraTranslationZ = 0.0f;
    this.EmitterCullingEnable = true;
  }

  public static ParticleComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticleComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ParticleComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return ParticleComponent.GetRootAsParticleComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ParticleComponent.FinishParticleComponentBuffer(fbb, ParticleComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
