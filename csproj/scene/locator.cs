// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Locator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Locator GetRootAsLocator(ByteBuffer _bb) { return GetRootAsLocator(_bb, new Locator()); }
  public static Locator GetRootAsLocator(ByteBuffer _bb, Locator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Locator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string ResourceName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.scene.fb.Locator> CreateLocator(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      StringOffset resourceNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    Locator.AddResourceName(builder, resourceNameOffset);
    Locator.AddFilePath(builder, filePathOffset);
    return Locator.EndLocator(builder);
  }

  public static void StartLocator(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(1, resourceNameOffset.Value, 0); }
  public static Offset<gfl.scene.fb.Locator> EndLocator(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.Locator>(o);
  }
  public static void FinishLocatorBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.Locator> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLocatorBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.Locator> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LocatorT UnPack() {
    var _o = new LocatorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LocatorT _o) {
    _o.FilePath = this.FilePath;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<gfl.scene.fb.Locator> Pack(FlatBufferBuilder builder, LocatorT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.Locator>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateLocator(
      builder,
      _filePath,
      _resourceName);
  }
};

public class LocatorT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }

  public LocatorT() {
    this.FilePath = null;
    this.ResourceName = null;
  }

  public static LocatorT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LocatorT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LocatorT DeserializeFromBinary(byte[] fbBuffer) {
    return Locator.GetRootAsLocator(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Locator.FinishLocatorBuffer(fbb, Locator.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
