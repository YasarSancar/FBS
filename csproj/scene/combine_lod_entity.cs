// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CombineLODEntity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CombineLODEntity GetRootAsCombineLODEntity(ByteBuffer _bb) { return GetRootAsCombineLODEntity(_bb, new CombineLODEntity()); }
  public static CombineLODEntity GetRootAsCombineLODEntity(ByteBuffer _bb, CombineLODEntity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CombineLODEntity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public string TargetObjectNames(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TargetObjectNamesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.math.fb.Vector3f? ReferencePoint { get { int o = __p.__offset(10); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float CombineDistance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ReleaseDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string AnimationFilePath { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationFilePathBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAnimationFilePathBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAnimationFilePathArray() { return __p.__vector_as_array<byte>(16); }
  public string ScriptPackageName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScriptPackageNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetScriptPackageNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetScriptPackageNameArray() { return __p.__vector_as_array<byte>(18); }
  public gfl.scene.fb.CombineLODConfigure? Configures(int j) { int o = __p.__offset(20); return o != 0 ? (gfl.scene.fb.CombineLODConfigure?)(new gfl.scene.fb.CombineLODConfigure()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConfiguresLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.CombineLODEntity> CreateCombineLODEntity(FlatBufferBuilder builder,
      StringOffset resourceNameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      VectorOffset targetObjectNamesOffset = default(VectorOffset),
      gfl.math.fb.Vector3fT referencePoint = null,
      float combineDistance = 0.0f,
      float releaseDistance = 0.0f,
      StringOffset animationFilePathOffset = default(StringOffset),
      StringOffset scriptPackageNameOffset = default(StringOffset),
      VectorOffset configuresOffset = default(VectorOffset)) {
    builder.StartTable(9);
    CombineLODEntity.AddConfigures(builder, configuresOffset);
    CombineLODEntity.AddScriptPackageName(builder, scriptPackageNameOffset);
    CombineLODEntity.AddAnimationFilePath(builder, animationFilePathOffset);
    CombineLODEntity.AddReleaseDistance(builder, releaseDistance);
    CombineLODEntity.AddCombineDistance(builder, combineDistance);
    CombineLODEntity.AddReferencePoint(builder, gfl.math.fb.Vector3f.Pack(builder, referencePoint));
    CombineLODEntity.AddTargetObjectNames(builder, targetObjectNamesOffset);
    CombineLODEntity.AddFilePath(builder, filePathOffset);
    CombineLODEntity.AddResourceName(builder, resourceNameOffset);
    return CombineLODEntity.EndCombineLODEntity(builder);
  }

  public static void StartCombineLODEntity(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(0, resourceNameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddTargetObjectNames(FlatBufferBuilder builder, VectorOffset targetObjectNamesOffset) { builder.AddOffset(2, targetObjectNamesOffset.Value, 0); }
  public static VectorOffset CreateTargetObjectNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTargetObjectNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetObjectNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReferencePoint(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> referencePointOffset) { builder.AddStruct(3, referencePointOffset.Value, 0); }
  public static void AddCombineDistance(FlatBufferBuilder builder, float combineDistance) { builder.AddFloat(4, combineDistance, 0.0f); }
  public static void AddReleaseDistance(FlatBufferBuilder builder, float releaseDistance) { builder.AddFloat(5, releaseDistance, 0.0f); }
  public static void AddAnimationFilePath(FlatBufferBuilder builder, StringOffset animationFilePathOffset) { builder.AddOffset(6, animationFilePathOffset.Value, 0); }
  public static void AddScriptPackageName(FlatBufferBuilder builder, StringOffset scriptPackageNameOffset) { builder.AddOffset(7, scriptPackageNameOffset.Value, 0); }
  public static void AddConfigures(FlatBufferBuilder builder, VectorOffset configuresOffset) { builder.AddOffset(8, configuresOffset.Value, 0); }
  public static VectorOffset CreateConfiguresVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.CombineLODConfigure>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConfiguresVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.CombineLODConfigure>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConfiguresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.CombineLODEntity> EndCombineLODEntity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CombineLODEntity>(o);
  }
  public static void FinishCombineLODEntityBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CombineLODEntity> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCombineLODEntityBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.CombineLODEntity> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CombineLODEntityT UnPack() {
    var _o = new CombineLODEntityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CombineLODEntityT _o) {
    _o.ResourceName = this.ResourceName;
    _o.FilePath = this.FilePath;
    _o.TargetObjectNames = new List<string>();
    for (var _j = 0; _j < this.TargetObjectNamesLength; ++_j) {_o.TargetObjectNames.Add(this.TargetObjectNames(_j));}
    _o.ReferencePoint = this.ReferencePoint.HasValue ? this.ReferencePoint.Value.UnPack() : null;
    _o.CombineDistance = this.CombineDistance;
    _o.ReleaseDistance = this.ReleaseDistance;
    _o.AnimationFilePath = this.AnimationFilePath;
    _o.ScriptPackageName = this.ScriptPackageName;
    _o.Configures = new List<gfl.scene.fb.CombineLODConfigureT>();
    for (var _j = 0; _j < this.ConfiguresLength; ++_j) {_o.Configures.Add(this.Configures(_j).HasValue ? this.Configures(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.CombineLODEntity> Pack(FlatBufferBuilder builder, CombineLODEntityT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CombineLODEntity>);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _targetObjectNames = default(VectorOffset);
    if (_o.TargetObjectNames != null) {
      var __targetObjectNames = new StringOffset[_o.TargetObjectNames.Count];
      for (var _j = 0; _j < __targetObjectNames.Length; ++_j) { __targetObjectNames[_j] = builder.CreateString(_o.TargetObjectNames[_j]); }
      _targetObjectNames = CreateTargetObjectNamesVector(builder, __targetObjectNames);
    }
    var _animationFilePath = _o.AnimationFilePath == null ? default(StringOffset) : builder.CreateString(_o.AnimationFilePath);
    var _scriptPackageName = _o.ScriptPackageName == null ? default(StringOffset) : builder.CreateString(_o.ScriptPackageName);
    var _configures = default(VectorOffset);
    if (_o.Configures != null) {
      var __configures = new Offset<gfl.scene.fb.CombineLODConfigure>[_o.Configures.Count];
      for (var _j = 0; _j < __configures.Length; ++_j) { __configures[_j] = gfl.scene.fb.CombineLODConfigure.Pack(builder, _o.Configures[_j]); }
      _configures = CreateConfiguresVector(builder, __configures);
    }
    return CreateCombineLODEntity(
      builder,
      _resourceName,
      _filePath,
      _targetObjectNames,
      _o.ReferencePoint,
      _o.CombineDistance,
      _o.ReleaseDistance,
      _animationFilePath,
      _scriptPackageName,
      _configures);
  }
};

public class CombineLODEntityT
{
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("targetObjectNames")]
  public List<string> TargetObjectNames { get; set; }
  [Newtonsoft.Json.JsonProperty("referencePoint")]
  public gfl.math.fb.Vector3fT ReferencePoint { get; set; }
  [Newtonsoft.Json.JsonProperty("combineDistance")]
  public float CombineDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("releaseDistance")]
  public float ReleaseDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFilePath")]
  public string AnimationFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("scriptPackageName")]
  public string ScriptPackageName { get; set; }
  [Newtonsoft.Json.JsonProperty("configures")]
  public List<gfl.scene.fb.CombineLODConfigureT> Configures { get; set; }

  public CombineLODEntityT() {
    this.ResourceName = null;
    this.FilePath = null;
    this.TargetObjectNames = null;
    this.ReferencePoint = new gfl.math.fb.Vector3fT();
    this.CombineDistance = 0.0f;
    this.ReleaseDistance = 0.0f;
    this.AnimationFilePath = null;
    this.ScriptPackageName = null;
    this.Configures = null;
  }

  public static CombineLODEntityT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CombineLODEntityT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CombineLODEntityT DeserializeFromBinary(byte[] fbBuffer) {
    return CombineLODEntity.GetRootAsCombineLODEntity(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CombineLODEntity.FinishCombineLODEntityBuffer(fbb, CombineLODEntity.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}

public struct CombineLODConfigure : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CombineLODConfigure GetRootAsCombineLODConfigure(ByteBuffer _bb) { return GetRootAsCombineLODConfigure(_bb, new CombineLODConfigure()); }
  public static CombineLODConfigure GetRootAsCombineLODConfigure(ByteBuffer _bb, CombineLODConfigure obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CombineLODConfigure __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ModelFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetModelFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetModelFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string AnimationFilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAnimationFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAnimationFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public string ScriptPackageName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScriptPackageNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetScriptPackageNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetScriptPackageNameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.scene.fb.CombineLODConfigure> CreateCombineLODConfigure(FlatBufferBuilder builder,
      StringOffset modelFilePathOffset = default(StringOffset),
      StringOffset animationFilePathOffset = default(StringOffset),
      StringOffset scriptPackageNameOffset = default(StringOffset)) {
    builder.StartTable(3);
    CombineLODConfigure.AddScriptPackageName(builder, scriptPackageNameOffset);
    CombineLODConfigure.AddAnimationFilePath(builder, animationFilePathOffset);
    CombineLODConfigure.AddModelFilePath(builder, modelFilePathOffset);
    return CombineLODConfigure.EndCombineLODConfigure(builder);
  }

  public static void StartCombineLODConfigure(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddModelFilePath(FlatBufferBuilder builder, StringOffset modelFilePathOffset) { builder.AddOffset(0, modelFilePathOffset.Value, 0); }
  public static void AddAnimationFilePath(FlatBufferBuilder builder, StringOffset animationFilePathOffset) { builder.AddOffset(1, animationFilePathOffset.Value, 0); }
  public static void AddScriptPackageName(FlatBufferBuilder builder, StringOffset scriptPackageNameOffset) { builder.AddOffset(2, scriptPackageNameOffset.Value, 0); }
  public static Offset<gfl.scene.fb.CombineLODConfigure> EndCombineLODConfigure(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.CombineLODConfigure>(o);
  }
  public CombineLODConfigureT UnPack() {
    var _o = new CombineLODConfigureT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CombineLODConfigureT _o) {
    _o.ModelFilePath = this.ModelFilePath;
    _o.AnimationFilePath = this.AnimationFilePath;
    _o.ScriptPackageName = this.ScriptPackageName;
  }
  public static Offset<gfl.scene.fb.CombineLODConfigure> Pack(FlatBufferBuilder builder, CombineLODConfigureT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.CombineLODConfigure>);
    var _modelFilePath = _o.ModelFilePath == null ? default(StringOffset) : builder.CreateString(_o.ModelFilePath);
    var _animationFilePath = _o.AnimationFilePath == null ? default(StringOffset) : builder.CreateString(_o.AnimationFilePath);
    var _scriptPackageName = _o.ScriptPackageName == null ? default(StringOffset) : builder.CreateString(_o.ScriptPackageName);
    return CreateCombineLODConfigure(
      builder,
      _modelFilePath,
      _animationFilePath,
      _scriptPackageName);
  }
};

public class CombineLODConfigureT
{
  [Newtonsoft.Json.JsonProperty("modelFilePath")]
  public string ModelFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFilePath")]
  public string AnimationFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("scriptPackageName")]
  public string ScriptPackageName { get; set; }

  public CombineLODConfigureT() {
    this.ModelFilePath = null;
    this.AnimationFilePath = null;
    this.ScriptPackageName = null;
  }
}


}
