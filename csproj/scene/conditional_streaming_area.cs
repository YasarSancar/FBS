// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AreaType : sbyte
{
  Circle = 0,
  Sphere = 1,
};

public struct ConditionalStreamingArea : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionalStreamingArea GetRootAsConditionalStreamingArea(ByteBuffer _bb) { return GetRootAsConditionalStreamingArea(_bb, new ConditionalStreamingArea()); }
  public static ConditionalStreamingArea GetRootAsConditionalStreamingArea(ByteBuffer _bb, ConditionalStreamingArea obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionalStreamingArea __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.AreaType AreaType { get { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.AreaType)__p.bb.GetSbyte(o + __p.bb_pos) : gfl.scene.fb.AreaType.Circle; } }
  public gfl.math.fb.Vector3f? Position { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector4f? Activate { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector4f? Disactivate { get { int o = __p.__offset(10); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.scene.fb.ConditionalStreamingArea> CreateConditionalStreamingArea(FlatBufferBuilder builder,
      gfl.scene.fb.AreaType areaType = gfl.scene.fb.AreaType.Circle,
      gfl.math.fb.Vector3fT position = null,
      gfl.math.fb.Vector4fT activate = null,
      gfl.math.fb.Vector4fT disactivate = null) {
    builder.StartTable(4);
    ConditionalStreamingArea.AddDisactivate(builder, gfl.math.fb.Vector4f.Pack(builder, disactivate));
    ConditionalStreamingArea.AddActivate(builder, gfl.math.fb.Vector4f.Pack(builder, activate));
    ConditionalStreamingArea.AddPosition(builder, gfl.math.fb.Vector3f.Pack(builder, position));
    ConditionalStreamingArea.AddAreaType(builder, areaType);
    return ConditionalStreamingArea.EndConditionalStreamingArea(builder);
  }

  public static void StartConditionalStreamingArea(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddAreaType(FlatBufferBuilder builder, gfl.scene.fb.AreaType areaType) { builder.AddSbyte(0, (sbyte)areaType, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> positionOffset) { builder.AddStruct(1, positionOffset.Value, 0); }
  public static void AddActivate(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> activateOffset) { builder.AddStruct(2, activateOffset.Value, 0); }
  public static void AddDisactivate(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> disactivateOffset) { builder.AddStruct(3, disactivateOffset.Value, 0); }
  public static Offset<gfl.scene.fb.ConditionalStreamingArea> EndConditionalStreamingArea(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ConditionalStreamingArea>(o);
  }
  public static void FinishConditionalStreamingAreaBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ConditionalStreamingArea> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedConditionalStreamingAreaBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ConditionalStreamingArea> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ConditionalStreamingAreaT UnPack() {
    var _o = new ConditionalStreamingAreaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionalStreamingAreaT _o) {
    _o.AreaType = this.AreaType;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Activate = this.Activate.HasValue ? this.Activate.Value.UnPack() : null;
    _o.Disactivate = this.Disactivate.HasValue ? this.Disactivate.Value.UnPack() : null;
  }
  public static Offset<gfl.scene.fb.ConditionalStreamingArea> Pack(FlatBufferBuilder builder, ConditionalStreamingAreaT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ConditionalStreamingArea>);
    return CreateConditionalStreamingArea(
      builder,
      _o.AreaType,
      _o.Position,
      _o.Activate,
      _o.Disactivate);
  }
};

public class ConditionalStreamingAreaT
{
  [Newtonsoft.Json.JsonProperty("areaType")]
  public gfl.scene.fb.AreaType AreaType { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.math.fb.Vector3fT Position { get; set; }
  [Newtonsoft.Json.JsonProperty("activate")]
  public gfl.math.fb.Vector4fT Activate { get; set; }
  [Newtonsoft.Json.JsonProperty("disactivate")]
  public gfl.math.fb.Vector4fT Disactivate { get; set; }

  public ConditionalStreamingAreaT() {
    this.AreaType = gfl.scene.fb.AreaType.Circle;
    this.Position = new gfl.math.fb.Vector3fT();
    this.Activate = new gfl.math.fb.Vector4fT();
    this.Disactivate = new gfl.math.fb.Vector4fT();
  }

  public static ConditionalStreamingAreaT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ConditionalStreamingAreaT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ConditionalStreamingAreaT DeserializeFromBinary(byte[] fbBuffer) {
    return ConditionalStreamingArea.GetRootAsConditionalStreamingArea(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ConditionalStreamingArea.FinishConditionalStreamingAreaBuffer(fbb, ConditionalStreamingArea.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
