// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum PSValue : byte
{
  NONE = 0,
  PSInteger = 1,
  PSDecimal = 2,
  PSString = 3,
  gfl_math_fb_Vector2f = 4,
  gfl_math_fb_Vector3f = 5,
  gfl_math_fb_Vector4f = 6,
  PSEnum = 7,
  PSList = 8,
  PSTable = 9,
  PSUnion = 10,
};

public class PSValueUnion {
  public PSValue Type { get; set; }
  public object Value { get; set; }

  public PSValueUnion() {
    this.Type = PSValue.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.scene.fb.PSIntegerT AsPSInteger() { return this.As<gfl.scene.fb.PSIntegerT>(); }
  public gfl.scene.fb.PSDecimalT AsPSDecimal() { return this.As<gfl.scene.fb.PSDecimalT>(); }
  public gfl.scene.fb.PSStringT AsPSString() { return this.As<gfl.scene.fb.PSStringT>(); }
  public gfl.math.fb.Vector2fT Asgfl_math_fb_Vector2f() { return this.As<gfl.math.fb.Vector2fT>(); }
  public gfl.math.fb.Vector3fT Asgfl_math_fb_Vector3f() { return this.As<gfl.math.fb.Vector3fT>(); }
  public gfl.math.fb.Vector4fT Asgfl_math_fb_Vector4f() { return this.As<gfl.math.fb.Vector4fT>(); }
  public gfl.scene.fb.PSEnumT AsPSEnum() { return this.As<gfl.scene.fb.PSEnumT>(); }
  public gfl.scene.fb.PSListT AsPSList() { return this.As<gfl.scene.fb.PSListT>(); }
  public gfl.scene.fb.PSTableT AsPSTable() { return this.As<gfl.scene.fb.PSTableT>(); }
  public gfl.scene.fb.PSUnionT AsPSUnion() { return this.As<gfl.scene.fb.PSUnionT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, PSValueUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case PSValue.PSInteger: return gfl.scene.fb.PSInteger.Pack(builder, _o.AsPSInteger()).Value;
      case PSValue.PSDecimal: return gfl.scene.fb.PSDecimal.Pack(builder, _o.AsPSDecimal()).Value;
      case PSValue.PSString: return gfl.scene.fb.PSString.Pack(builder, _o.AsPSString()).Value;
      case PSValue.gfl_math_fb_Vector2f: return gfl.math.fb.Vector2f.Pack(builder, _o.Asgfl_math_fb_Vector2f()).Value;
      case PSValue.gfl_math_fb_Vector3f: return gfl.math.fb.Vector3f.Pack(builder, _o.Asgfl_math_fb_Vector3f()).Value;
      case PSValue.gfl_math_fb_Vector4f: return gfl.math.fb.Vector4f.Pack(builder, _o.Asgfl_math_fb_Vector4f()).Value;
      case PSValue.PSEnum: return gfl.scene.fb.PSEnum.Pack(builder, _o.AsPSEnum()).Value;
      case PSValue.PSList: return gfl.scene.fb.PSList.Pack(builder, _o.AsPSList()).Value;
      case PSValue.PSTable: return gfl.scene.fb.PSTable.Pack(builder, _o.AsPSTable()).Value;
      case PSValue.PSUnion: return gfl.scene.fb.PSUnion.Pack(builder, _o.AsPSUnion()).Value;
    }
  }
}

public class PSValueUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(PSValueUnion) || objectType == typeof(System.Collections.Generic.List<PSValueUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<PSValueUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as PSValueUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, PSValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<PSValueUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as PSValueUnion, serializer);
    }
  }
  public PSValueUnion ReadJson(Newtonsoft.Json.JsonReader reader, PSValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case PSValue.PSInteger: _o.Value = serializer.Deserialize<gfl.scene.fb.PSIntegerT>(reader); break;
      case PSValue.PSDecimal: _o.Value = serializer.Deserialize<gfl.scene.fb.PSDecimalT>(reader); break;
      case PSValue.PSString: _o.Value = serializer.Deserialize<gfl.scene.fb.PSStringT>(reader); break;
      case PSValue.gfl_math_fb_Vector2f: _o.Value = serializer.Deserialize<gfl.math.fb.Vector2fT>(reader); break;
      case PSValue.gfl_math_fb_Vector3f: _o.Value = serializer.Deserialize<gfl.math.fb.Vector3fT>(reader); break;
      case PSValue.gfl_math_fb_Vector4f: _o.Value = serializer.Deserialize<gfl.math.fb.Vector4fT>(reader); break;
      case PSValue.PSEnum: _o.Value = serializer.Deserialize<gfl.scene.fb.PSEnumT>(reader); break;
      case PSValue.PSList: _o.Value = serializer.Deserialize<gfl.scene.fb.PSListT>(reader); break;
      case PSValue.PSTable: _o.Value = serializer.Deserialize<gfl.scene.fb.PSTableT>(reader); break;
      case PSValue.PSUnion: _o.Value = serializer.Deserialize<gfl.scene.fb.PSUnionT>(reader); break;
    }
    return _o;
  }
}

public struct PSInteger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSInteger GetRootAsPSInteger(ByteBuffer _bb) { return GetRootAsPSInteger(_bb, new PSInteger()); }
  public static PSInteger GetRootAsPSInteger(ByteBuffer _bb, PSInteger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSInteger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte Size { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<gfl.scene.fb.PSInteger> CreatePSInteger(FlatBufferBuilder builder,
      ulong data = 0,
      byte size = 0) {
    builder.StartTable(2);
    PSInteger.AddData(builder, data);
    PSInteger.AddSize(builder, size);
    return PSInteger.EndPSInteger(builder);
  }

  public static void StartPSInteger(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddData(FlatBufferBuilder builder, ulong data) { builder.AddUlong(0, data, 0); }
  public static void AddSize(FlatBufferBuilder builder, byte size) { builder.AddByte(1, size, 0); }
  public static Offset<gfl.scene.fb.PSInteger> EndPSInteger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSInteger>(o);
  }
  public PSIntegerT UnPack() {
    var _o = new PSIntegerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSIntegerT _o) {
    _o.Data = this.Data;
    _o.Size = this.Size;
  }
  public static Offset<gfl.scene.fb.PSInteger> Pack(FlatBufferBuilder builder, PSIntegerT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSInteger>);
    return CreatePSInteger(
      builder,
      _o.Data,
      _o.Size);
  }
};

public class PSIntegerT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public ulong Data { get; set; }
  [Newtonsoft.Json.JsonProperty("size")]
  public byte Size { get; set; }

  public PSIntegerT() {
    this.Data = 0;
    this.Size = 0;
  }
}

public struct PSDecimal : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSDecimal GetRootAsPSDecimal(ByteBuffer _bb) { return GetRootAsPSDecimal(_bb, new PSDecimal()); }
  public static PSDecimal GetRootAsPSDecimal(ByteBuffer _bb, PSDecimal obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSDecimal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public byte Size { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<gfl.scene.fb.PSDecimal> CreatePSDecimal(FlatBufferBuilder builder,
      double data = 0.0,
      byte size = 0) {
    builder.StartTable(2);
    PSDecimal.AddData(builder, data);
    PSDecimal.AddSize(builder, size);
    return PSDecimal.EndPSDecimal(builder);
  }

  public static void StartPSDecimal(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddData(FlatBufferBuilder builder, double data) { builder.AddDouble(0, data, 0.0); }
  public static void AddSize(FlatBufferBuilder builder, byte size) { builder.AddByte(1, size, 0); }
  public static Offset<gfl.scene.fb.PSDecimal> EndPSDecimal(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSDecimal>(o);
  }
  public PSDecimalT UnPack() {
    var _o = new PSDecimalT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSDecimalT _o) {
    _o.Data = this.Data;
    _o.Size = this.Size;
  }
  public static Offset<gfl.scene.fb.PSDecimal> Pack(FlatBufferBuilder builder, PSDecimalT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSDecimal>);
    return CreatePSDecimal(
      builder,
      _o.Data,
      _o.Size);
  }
};

public class PSDecimalT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public double Data { get; set; }
  [Newtonsoft.Json.JsonProperty("size")]
  public byte Size { get; set; }

  public PSDecimalT() {
    this.Data = 0.0;
    this.Size = 0;
  }
}

public struct PSString : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSString GetRootAsPSString(ByteBuffer _bb) { return GetRootAsPSString(_bb, new PSString()); }
  public static PSString GetRootAsPSString(ByteBuffer _bb, PSString obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSString __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Data { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.scene.fb.PSString> CreatePSString(FlatBufferBuilder builder,
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(1);
    PSString.AddData(builder, dataOffset);
    return PSString.EndPSString(builder);
  }

  public static void StartPSString(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static Offset<gfl.scene.fb.PSString> EndPSString(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSString>(o);
  }
  public PSStringT UnPack() {
    var _o = new PSStringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSStringT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.scene.fb.PSString> Pack(FlatBufferBuilder builder, PSStringT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSString>);
    var _data = _o.Data == null ? default(StringOffset) : builder.CreateString(_o.Data);
    return CreatePSString(
      builder,
      _data);
  }
};

public class PSStringT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public string Data { get; set; }

  public PSStringT() {
    this.Data = null;
  }
}

public struct PSEnum : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSEnum GetRootAsPSEnum(ByteBuffer _bb) { return GetRootAsPSEnum(_bb, new PSEnum()); }
  public static PSEnum GetRootAsPSEnum(ByteBuffer _bb, PSEnum obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSEnum __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.scene.fb.PSEnum> CreatePSEnum(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int value = 0) {
    builder.StartTable(2);
    PSEnum.AddValue(builder, value);
    PSEnum.AddName(builder, nameOffset);
    return PSEnum.EndPSEnum(builder);
  }

  public static void StartPSEnum(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 0); }
  public static Offset<gfl.scene.fb.PSEnum> EndPSEnum(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSEnum>(o);
  }
  public PSEnumT UnPack() {
    var _o = new PSEnumT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSEnumT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
  }
  public static Offset<gfl.scene.fb.PSEnum> Pack(FlatBufferBuilder builder, PSEnumT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSEnum>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreatePSEnum(
      builder,
      _name,
      _o.Value);
  }
};

public class PSEnumT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public PSEnumT() {
    this.Name = null;
    this.Value = 0;
  }
}

public struct PSUnion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSUnion GetRootAsPSUnion(ByteBuffer _bb) { return GetRootAsPSUnion(_bb, new PSUnion()); }
  public static PSUnion GetRootAsPSUnion(ByteBuffer _bb, PSUnion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSUnion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.PSEnum? Type { get { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.PSEnum?)(new gfl.scene.fb.PSEnum()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.scene.fb.PSTable? Value { get { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.PSTable?)(new gfl.scene.fb.PSTable()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.scene.fb.PSUnion> CreatePSUnion(FlatBufferBuilder builder,
      Offset<gfl.scene.fb.PSEnum> typeOffset = default(Offset<gfl.scene.fb.PSEnum>),
      Offset<gfl.scene.fb.PSTable> valueOffset = default(Offset<gfl.scene.fb.PSTable>)) {
    builder.StartTable(2);
    PSUnion.AddValue(builder, valueOffset);
    PSUnion.AddType(builder, typeOffset);
    return PSUnion.EndPSUnion(builder);
  }

  public static void StartPSUnion(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSEnum> typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSTable> valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<gfl.scene.fb.PSUnion> EndPSUnion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSUnion>(o);
  }
  public PSUnionT UnPack() {
    var _o = new PSUnionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSUnionT _o) {
    _o.Type = this.Type.HasValue ? this.Type.Value.UnPack() : null;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.scene.fb.PSUnion> Pack(FlatBufferBuilder builder, PSUnionT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSUnion>);
    var _type = _o.Type == null ? default(Offset<gfl.scene.fb.PSEnum>) : gfl.scene.fb.PSEnum.Pack(builder, _o.Type);
    var _value = _o.Value == null ? default(Offset<gfl.scene.fb.PSTable>) : gfl.scene.fb.PSTable.Pack(builder, _o.Value);
    return CreatePSUnion(
      builder,
      _type,
      _value);
  }
};

public class PSUnionT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.scene.fb.PSEnumT Type { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.scene.fb.PSTableT Value { get; set; }

  public PSUnionT() {
    this.Type = null;
    this.Value = null;
  }
}

public struct PSField : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSField GetRootAsPSField(ByteBuffer _bb) { return GetRootAsPSField(_bb, new PSField()); }
  public static PSField GetRootAsPSField(ByteBuffer _bb, PSField obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSField __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.scene.fb.PSValue ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.PSValue)__p.bb.Get(o + __p.bb_pos) : gfl.scene.fb.PSValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.scene.fb.PSField> CreatePSField(FlatBufferBuilder builder,
      StringOffset keyOffset = default(StringOffset),
      gfl.scene.fb.PSValue value_type = gfl.scene.fb.PSValue.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    PSField.AddValue(builder, valueOffset);
    PSField.AddKey(builder, keyOffset);
    PSField.AddValueType(builder, value_type);
    return PSField.EndPSField(builder);
  }

  public static void StartPSField(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.scene.fb.PSValue valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<gfl.scene.fb.PSField> EndPSField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSField>(o);
  }
  public PSFieldT UnPack() {
    var _o = new PSFieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSFieldT _o) {
    _o.Key = this.Key;
    _o.Value = new gfl.scene.fb.PSValueUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.scene.fb.PSValue.PSInteger:
        _o.Value.Value = this.Value<gfl.scene.fb.PSInteger>().HasValue ? this.Value<gfl.scene.fb.PSInteger>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSDecimal:
        _o.Value.Value = this.Value<gfl.scene.fb.PSDecimal>().HasValue ? this.Value<gfl.scene.fb.PSDecimal>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSString:
        _o.Value.Value = this.Value<gfl.scene.fb.PSString>().HasValue ? this.Value<gfl.scene.fb.PSString>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.gfl_math_fb_Vector2f:
        _o.Value.Value = this.Value<gfl.math.fb.Vector2f>().HasValue ? this.Value<gfl.math.fb.Vector2f>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.gfl_math_fb_Vector3f:
        _o.Value.Value = this.Value<gfl.math.fb.Vector3f>().HasValue ? this.Value<gfl.math.fb.Vector3f>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.gfl_math_fb_Vector4f:
        _o.Value.Value = this.Value<gfl.math.fb.Vector4f>().HasValue ? this.Value<gfl.math.fb.Vector4f>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSEnum:
        _o.Value.Value = this.Value<gfl.scene.fb.PSEnum>().HasValue ? this.Value<gfl.scene.fb.PSEnum>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSList:
        _o.Value.Value = this.Value<gfl.scene.fb.PSList>().HasValue ? this.Value<gfl.scene.fb.PSList>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSTable:
        _o.Value.Value = this.Value<gfl.scene.fb.PSTable>().HasValue ? this.Value<gfl.scene.fb.PSTable>().Value.UnPack() : null;
        break;
      case gfl.scene.fb.PSValue.PSUnion:
        _o.Value.Value = this.Value<gfl.scene.fb.PSUnion>().HasValue ? this.Value<gfl.scene.fb.PSUnion>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.scene.fb.PSField> Pack(FlatBufferBuilder builder, PSFieldT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSField>);
    var _key = _o.Key == null ? default(StringOffset) : builder.CreateString(_o.Key);
    var _value_type = _o.Value == null ? gfl.scene.fb.PSValue.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.scene.fb.PSValueUnion.Pack(builder, _o.Value);
    return CreatePSField(
      builder,
      _key,
      _value_type,
      _value);
  }
};

public class PSFieldT
{
  [Newtonsoft.Json.JsonProperty("key")]
  public string Key { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.scene.fb.PSValue ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.scene.fb.PSValue.NONE;
    }
    set {
      this.Value = new gfl.scene.fb.PSValueUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.scene.fb.PSValueUnion_JsonConverter))]
  public gfl.scene.fb.PSValueUnion Value { get; set; }

  public PSFieldT() {
    this.Key = null;
    this.Value = null;
  }
}

public struct PSTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSTable GetRootAsPSTable(ByteBuffer _bb) { return GetRootAsPSTable(_bb, new PSTable()); }
  public static PSTable GetRootAsPSTable(ByteBuffer _bb, PSTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.PSField? Fields(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.PSField?)(new gfl.scene.fb.PSField()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FieldsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.PSTable> CreatePSTable(FlatBufferBuilder builder,
      VectorOffset fieldsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PSTable.AddFields(builder, fieldsOffset);
    return PSTable.EndPSTable(builder);
  }

  public static void StartPSTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFields(FlatBufferBuilder builder, VectorOffset fieldsOffset) { builder.AddOffset(0, fieldsOffset.Value, 0); }
  public static VectorOffset CreateFieldsVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSField>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFieldsVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSField>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFieldsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.PSTable> EndPSTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSTable>(o);
  }
  public PSTableT UnPack() {
    var _o = new PSTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSTableT _o) {
    _o.Fields = new List<gfl.scene.fb.PSFieldT>();
    for (var _j = 0; _j < this.FieldsLength; ++_j) {_o.Fields.Add(this.Fields(_j).HasValue ? this.Fields(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.PSTable> Pack(FlatBufferBuilder builder, PSTableT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSTable>);
    var _fields = default(VectorOffset);
    if (_o.Fields != null) {
      var __fields = new Offset<gfl.scene.fb.PSField>[_o.Fields.Count];
      for (var _j = 0; _j < __fields.Length; ++_j) { __fields[_j] = gfl.scene.fb.PSField.Pack(builder, _o.Fields[_j]); }
      _fields = CreateFieldsVector(builder, __fields);
    }
    return CreatePSTable(
      builder,
      _fields);
  }
};

public class PSTableT
{
  [Newtonsoft.Json.JsonProperty("fields")]
  public List<gfl.scene.fb.PSFieldT> Fields { get; set; }

  public PSTableT() {
    this.Fields = null;
  }
}

public struct PSList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PSList GetRootAsPSList(ByteBuffer _bb) { return GetRootAsPSList(_bb, new PSList()); }
  public static PSList GetRootAsPSList(ByteBuffer _bb, PSList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PSList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.PSValue ValuesType(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.PSValue)__p.bb.Get(__p.__vector(o) + j * 1) : (gfl.scene.fb.PSValue)0; }
  public int ValuesTypeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<gfl.scene.fb.PSValue> GetValuesTypeBytes() { return __p.__vector_as_span<gfl.scene.fb.PSValue>(4, 1); }
#else
  public ArraySegment<byte>? GetValuesTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public gfl.scene.fb.PSValue[] GetValuesTypeArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); gfl.scene.fb.PSValue[] a = new gfl.scene.fb.PSValue[l]; for (int i = 0; i < l; i++) { a[i] = (gfl.scene.fb.PSValue)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Values<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.PSList> CreatePSList(FlatBufferBuilder builder,
      VectorOffset values_typeOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    PSList.AddValues(builder, valuesOffset);
    PSList.AddValuesType(builder, values_typeOffset);
    return PSList.EndPSList(builder);
  }

  public static void StartPSList(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValuesType(FlatBufferBuilder builder, VectorOffset valuesTypeOffset) { builder.AddOffset(0, valuesTypeOffset.Value, 0); }
  public static VectorOffset CreateValuesTypeVector(FlatBufferBuilder builder, gfl.scene.fb.PSValue[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesTypeVectorBlock(FlatBufferBuilder builder, gfl.scene.fb.PSValue[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.PSList> EndPSList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PSList>(o);
  }
  public PSListT UnPack() {
    var _o = new PSListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PSListT _o) {
    _o.Values = new List<gfl.scene.fb.PSValueUnion>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {
      var _o_Values = new gfl.scene.fb.PSValueUnion();
      _o_Values.Type = this.ValuesType(_j);
      switch (this.ValuesType(_j)) {
        default: break;
        case gfl.scene.fb.PSValue.PSInteger:
          _o_Values.Value = this.Values<gfl.scene.fb.PSInteger>(_j).HasValue ? this.Values<gfl.scene.fb.PSInteger>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSDecimal:
          _o_Values.Value = this.Values<gfl.scene.fb.PSDecimal>(_j).HasValue ? this.Values<gfl.scene.fb.PSDecimal>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSString:
          _o_Values.Value = this.Values<gfl.scene.fb.PSString>(_j).HasValue ? this.Values<gfl.scene.fb.PSString>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.gfl_math_fb_Vector2f:
          _o_Values.Value = this.Values<gfl.math.fb.Vector2f>(_j).HasValue ? this.Values<gfl.math.fb.Vector2f>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.gfl_math_fb_Vector3f:
          _o_Values.Value = this.Values<gfl.math.fb.Vector3f>(_j).HasValue ? this.Values<gfl.math.fb.Vector3f>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.gfl_math_fb_Vector4f:
          _o_Values.Value = this.Values<gfl.math.fb.Vector4f>(_j).HasValue ? this.Values<gfl.math.fb.Vector4f>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSEnum:
          _o_Values.Value = this.Values<gfl.scene.fb.PSEnum>(_j).HasValue ? this.Values<gfl.scene.fb.PSEnum>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSList:
          _o_Values.Value = this.Values<gfl.scene.fb.PSList>(_j).HasValue ? this.Values<gfl.scene.fb.PSList>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSTable:
          _o_Values.Value = this.Values<gfl.scene.fb.PSTable>(_j).HasValue ? this.Values<gfl.scene.fb.PSTable>(_j).Value.UnPack() : null;
          break;
        case gfl.scene.fb.PSValue.PSUnion:
          _o_Values.Value = this.Values<gfl.scene.fb.PSUnion>(_j).HasValue ? this.Values<gfl.scene.fb.PSUnion>(_j).Value.UnPack() : null;
          break;
      }
      _o.Values.Add(_o_Values);
    }
  }
  public static Offset<gfl.scene.fb.PSList> Pack(FlatBufferBuilder builder, PSListT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PSList>);
    var _values_type = default(VectorOffset);
    if (_o.Values != null) {
      var __values_type = new gfl.scene.fb.PSValue[_o.Values.Count];
      for (var _j = 0; _j < __values_type.Length; ++_j) { __values_type[_j] = _o.Values[_j].Type; }
      _values_type = CreateValuesTypeVector(builder, __values_type);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new int[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = gfl.scene.fb.PSValueUnion.Pack(builder,  _o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    return CreatePSList(
      builder,
      _values_type,
      _values);
  }
};

public class PSListT
{
  [Newtonsoft.Json.JsonProperty("values_type")]
  private gfl.scene.fb.PSValue[] ValuesType {
    get {
      if (this.Values == null) return null;
      var _o = new gfl.scene.fb.PSValue[this.Values.Count];
      for (var _j = 0; _j < _o.Length; ++_j) { _o[_j] = this.Values[_j].Type; }
      return _o;
    }
    set {
      this.Values = new List<gfl.scene.fb.PSValueUnion>();
      for (var _j = 0; _j < value.Length; ++_j) {
        var _o = new gfl.scene.fb.PSValueUnion();
        _o.Type = value[_j];
        this.Values.Add(_o);
      }
    }
  }
  [Newtonsoft.Json.JsonProperty("values")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.scene.fb.PSValueUnion_JsonConverter))]
  public List<gfl.scene.fb.PSValueUnion> Values { get; set; }

  public PSListT() {
    this.Values = null;
  }
}

public struct PropertySheet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PropertySheet GetRootAsPropertySheet(ByteBuffer _bb) { return GetRootAsPropertySheet(_bb, new PropertySheet()); }
  public static PropertySheet GetRootAsPropertySheet(ByteBuffer _bb, PropertySheet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PropertySheet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SchemaName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSchemaNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSchemaNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSchemaNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ResourceName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.scene.fb.PSTable? Values(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.scene.fb.PSTable?)(new gfl.scene.fb.PSTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.PropertySheet> CreatePropertySheet(FlatBufferBuilder builder,
      StringOffset schemaNameOffset = default(StringOffset),
      StringOffset resourceNameOffset = default(StringOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    PropertySheet.AddValues(builder, valuesOffset);
    PropertySheet.AddResourceName(builder, resourceNameOffset);
    PropertySheet.AddSchemaName(builder, schemaNameOffset);
    return PropertySheet.EndPropertySheet(builder);
  }

  public static void StartPropertySheet(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSchemaName(FlatBufferBuilder builder, StringOffset schemaNameOffset) { builder.AddOffset(0, schemaNameOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(1, resourceNameOffset.Value, 0); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(2, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.PSTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.PropertySheet> EndPropertySheet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PropertySheet>(o);
  }
  public static void FinishPropertySheetBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.PropertySheet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPropertySheetBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.PropertySheet> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PropertySheetT UnPack() {
    var _o = new PropertySheetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PropertySheetT _o) {
    _o.SchemaName = this.SchemaName;
    _o.ResourceName = this.ResourceName;
    _o.Values = new List<gfl.scene.fb.PSTableT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.PropertySheet> Pack(FlatBufferBuilder builder, PropertySheetT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PropertySheet>);
    var _schemaName = _o.SchemaName == null ? default(StringOffset) : builder.CreateString(_o.SchemaName);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new Offset<gfl.scene.fb.PSTable>[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = gfl.scene.fb.PSTable.Pack(builder, _o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    return CreatePropertySheet(
      builder,
      _schemaName,
      _resourceName,
      _values);
  }
};

public class PropertySheetT
{
  [Newtonsoft.Json.JsonProperty("schemaName")]
  public string SchemaName { get; set; }
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.scene.fb.PSTableT> Values { get; set; }

  public PropertySheetT() {
    this.SchemaName = null;
    this.ResourceName = null;
    this.Values = null;
  }

  public static PropertySheetT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertySheetT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PropertySheetT DeserializeFromBinary(byte[] fbBuffer) {
    return PropertySheet.GetRootAsPropertySheet(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PropertySheet.FinishPropertySheetBuffer(fbb, PropertySheet.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
