// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ScenePoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ScenePoint GetRootAsScenePoint(ByteBuffer _bb) { return GetRootAsScenePoint(_bb, new ScenePoint()); }
  public static ScenePoint GetRootAsScenePoint(ByteBuffer _bb, ScenePoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenePoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector3f? Point { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool AttachParent { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.scene.fb.ScenePoint> CreateScenePoint(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT point = null,
      bool attachParent = false) {
    builder.StartTable(3);
    ScenePoint.AddPoint(builder, gfl.math.fb.Vector3f.Pack(builder, point));
    ScenePoint.AddName(builder, nameOffset);
    ScenePoint.AddAttachParent(builder, attachParent);
    return ScenePoint.EndScenePoint(builder);
  }

  public static void StartScenePoint(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddPoint(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> pointOffset) { builder.AddStruct(1, pointOffset.Value, 0); }
  public static void AddAttachParent(FlatBufferBuilder builder, bool attachParent) { builder.AddBool(2, attachParent, false); }
  public static Offset<gfl.scene.fb.ScenePoint> EndScenePoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.ScenePoint>(o);
  }
  public static void FinishScenePointBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ScenePoint> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedScenePointBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.ScenePoint> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ScenePointT UnPack() {
    var _o = new ScenePointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenePointT _o) {
    _o.Name = this.Name;
    _o.Point = this.Point.HasValue ? this.Point.Value.UnPack() : null;
    _o.AttachParent = this.AttachParent;
  }
  public static Offset<gfl.scene.fb.ScenePoint> Pack(FlatBufferBuilder builder, ScenePointT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.ScenePoint>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateScenePoint(
      builder,
      _name,
      _o.Point,
      _o.AttachParent);
  }
};

public class ScenePointT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("point")]
  public gfl.math.fb.Vector3fT Point { get; set; }
  [Newtonsoft.Json.JsonProperty("attachParent")]
  public bool AttachParent { get; set; }

  public ScenePointT() {
    this.Name = null;
    this.Point = new gfl.math.fb.Vector3fT();
    this.AttachParent = false;
  }

  public static ScenePointT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ScenePointT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ScenePointT DeserializeFromBinary(byte[] fbBuffer) {
    return ScenePoint.GetRootAsScenePoint(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ScenePoint.FinishScenePointBuffer(fbb, ScenePoint.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
