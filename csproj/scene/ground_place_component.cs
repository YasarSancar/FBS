// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GroundPlaceComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GroundPlaceComponent GetRootAsGroundPlaceComponent(ByteBuffer _bb) { return GetRootAsGroundPlaceComponent(_bb, new GroundPlaceComponent()); }
  public static GroundPlaceComponent GetRootAsGroundPlaceComponent(ByteBuffer _bb, GroundPlaceComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundPlaceComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LayerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public bool Enabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<gfl.scene.fb.GroundPlaceComponent> CreateGroundPlaceComponent(FlatBufferBuilder builder,
      int layerId = -1,
      bool enabled = true) {
    builder.StartTable(2);
    GroundPlaceComponent.AddLayerId(builder, layerId);
    GroundPlaceComponent.AddEnabled(builder, enabled);
    return GroundPlaceComponent.EndGroundPlaceComponent(builder);
  }

  public static void StartGroundPlaceComponent(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLayerId(FlatBufferBuilder builder, int layerId) { builder.AddInt(0, layerId, -1); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(1, enabled, true); }
  public static Offset<gfl.scene.fb.GroundPlaceComponent> EndGroundPlaceComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.GroundPlaceComponent>(o);
  }
  public static void FinishGroundPlaceComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GroundPlaceComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGroundPlaceComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GroundPlaceComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GroundPlaceComponentT UnPack() {
    var _o = new GroundPlaceComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundPlaceComponentT _o) {
    _o.LayerId = this.LayerId;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.scene.fb.GroundPlaceComponent> Pack(FlatBufferBuilder builder, GroundPlaceComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.GroundPlaceComponent>);
    return CreateGroundPlaceComponent(
      builder,
      _o.LayerId,
      _o.Enabled);
  }
};

public class GroundPlaceComponentT
{
  [Newtonsoft.Json.JsonProperty("layerId")]
  public int LayerId { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public GroundPlaceComponentT() {
    this.LayerId = -1;
    this.Enabled = true;
  }

  public static GroundPlaceComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<GroundPlaceComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static GroundPlaceComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return GroundPlaceComponent.GetRootAsGroundPlaceComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GroundPlaceComponent.FinishGroundPlaceComponentBuffer(fbb, GroundPlaceComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
