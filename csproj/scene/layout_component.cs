// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LayoutComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LayoutComponent GetRootAsLayoutComponent(ByteBuffer _bb) { return GetRootAsLayoutComponent(_bb, new LayoutComponent()); }
  public static LayoutComponent GetRootAsLayoutComponent(ByteBuffer _bb, LayoutComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LayoutComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string BflytName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBflytNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBflytNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBflytNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Priority { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool InvisibleAtLoaded { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ResourceName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<gfl.scene.fb.LayoutComponent> CreateLayoutComponent(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      StringOffset bflytNameOffset = default(StringOffset),
      int priority = 0,
      bool invisibleAtLoaded = false,
      StringOffset resourceNameOffset = default(StringOffset)) {
    builder.StartTable(5);
    LayoutComponent.AddResourceName(builder, resourceNameOffset);
    LayoutComponent.AddPriority(builder, priority);
    LayoutComponent.AddBflytName(builder, bflytNameOffset);
    LayoutComponent.AddFilePath(builder, filePathOffset);
    LayoutComponent.AddInvisibleAtLoaded(builder, invisibleAtLoaded);
    return LayoutComponent.EndLayoutComponent(builder);
  }

  public static void StartLayoutComponent(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddBflytName(FlatBufferBuilder builder, StringOffset bflytNameOffset) { builder.AddOffset(1, bflytNameOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(2, priority, 0); }
  public static void AddInvisibleAtLoaded(FlatBufferBuilder builder, bool invisibleAtLoaded) { builder.AddBool(3, invisibleAtLoaded, false); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(4, resourceNameOffset.Value, 0); }
  public static Offset<gfl.scene.fb.LayoutComponent> EndLayoutComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.LayoutComponent>(o);
  }
  public static void FinishLayoutComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.LayoutComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLayoutComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.LayoutComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LayoutComponentT UnPack() {
    var _o = new LayoutComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LayoutComponentT _o) {
    _o.FilePath = this.FilePath;
    _o.BflytName = this.BflytName;
    _o.Priority = this.Priority;
    _o.InvisibleAtLoaded = this.InvisibleAtLoaded;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<gfl.scene.fb.LayoutComponent> Pack(FlatBufferBuilder builder, LayoutComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.LayoutComponent>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _bflytName = _o.BflytName == null ? default(StringOffset) : builder.CreateString(_o.BflytName);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateLayoutComponent(
      builder,
      _filePath,
      _bflytName,
      _o.Priority,
      _o.InvisibleAtLoaded,
      _resourceName);
  }
};

public class LayoutComponentT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("bflytName")]
  public string BflytName { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("invisibleAtLoaded")]
  public bool InvisibleAtLoaded { get; set; }
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }

  public LayoutComponentT() {
    this.FilePath = null;
    this.BflytName = null;
    this.Priority = 0;
    this.InvisibleAtLoaded = false;
    this.ResourceName = null;
  }

  public static LayoutComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LayoutComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LayoutComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return LayoutComponent.GetRootAsLayoutComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LayoutComponent.FinishLayoutComponentBuffer(fbb, LayoutComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
