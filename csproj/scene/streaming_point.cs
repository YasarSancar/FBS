// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PointElement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PointElement GetRootAsPointElement(ByteBuffer _bb) { return GetRootAsPointElement(_bb, new PointElement()); }
  public static PointElement GetRootAsPointElement(ByteBuffer _bb, PointElement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PointElement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  public byte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.scene.fb.PointElement> CreatePointElement(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    PointElement.AddData(builder, dataOffset);
    PointElement.AddType(builder, typeOffset);
    return PointElement.EndPointElement(builder);
  }

  public static void StartPointElement(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.scene.fb.PointElement> EndPointElement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PointElement>(o);
  }
  public PointElementT UnPack() {
    var _o = new PointElementT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PointElementT _o) {
    _o.Type = this.Type;
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.scene.fb.PointElement> Pack(FlatBufferBuilder builder, PointElementT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PointElement>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreatePointElement(
      builder,
      _type,
      _data);
  }
};

public class PointElementT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public PointElementT() {
    this.Type = null;
    this.Data = null;
  }
}

public struct PointTree : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PointTree GetRootAsPointTree(ByteBuffer _bb) { return GetRootAsPointTree(_bb, new PointTree()); }
  public static PointTree GetRootAsPointTree(ByteBuffer _bb, PointTree obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PointTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.ScenePoint? Point { get { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.ScenePoint?)(new gfl.scene.fb.ScenePoint()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.scene.fb.PointElement? Elements(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.scene.fb.PointElement?)(new gfl.scene.fb.PointElement()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ElementsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.PointTree> CreatePointTree(FlatBufferBuilder builder,
      Offset<gfl.scene.fb.ScenePoint> pointOffset = default(Offset<gfl.scene.fb.ScenePoint>),
      VectorOffset elementsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    PointTree.AddElements(builder, elementsOffset);
    PointTree.AddPoint(builder, pointOffset);
    return PointTree.EndPointTree(builder);
  }

  public static void StartPointTree(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPoint(FlatBufferBuilder builder, Offset<gfl.scene.fb.ScenePoint> pointOffset) { builder.AddOffset(0, pointOffset.Value, 0); }
  public static void AddElements(FlatBufferBuilder builder, VectorOffset elementsOffset) { builder.AddOffset(1, elementsOffset.Value, 0); }
  public static VectorOffset CreateElementsVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.PointElement>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElementsVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.PointElement>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartElementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.PointTree> EndPointTree(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.PointTree>(o);
  }
  public PointTreeT UnPack() {
    var _o = new PointTreeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PointTreeT _o) {
    _o.Point = this.Point.HasValue ? this.Point.Value.UnPack() : null;
    _o.Elements = new List<gfl.scene.fb.PointElementT>();
    for (var _j = 0; _j < this.ElementsLength; ++_j) {_o.Elements.Add(this.Elements(_j).HasValue ? this.Elements(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.PointTree> Pack(FlatBufferBuilder builder, PointTreeT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.PointTree>);
    var _point = _o.Point == null ? default(Offset<gfl.scene.fb.ScenePoint>) : gfl.scene.fb.ScenePoint.Pack(builder, _o.Point);
    var _elements = default(VectorOffset);
    if (_o.Elements != null) {
      var __elements = new Offset<gfl.scene.fb.PointElement>[_o.Elements.Count];
      for (var _j = 0; _j < __elements.Length; ++_j) { __elements[_j] = gfl.scene.fb.PointElement.Pack(builder, _o.Elements[_j]); }
      _elements = CreateElementsVector(builder, __elements);
    }
    return CreatePointTree(
      builder,
      _point,
      _elements);
  }
};

public class PointTreeT
{
  [Newtonsoft.Json.JsonProperty("point")]
  public gfl.scene.fb.ScenePointT Point { get; set; }
  [Newtonsoft.Json.JsonProperty("elements")]
  public List<gfl.scene.fb.PointElementT> Elements { get; set; }

  public PointTreeT() {
    this.Point = null;
    this.Elements = null;
  }
}

public struct StreamingPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StreamingPoint GetRootAsStreamingPoint(ByteBuffer _bb) { return GetRootAsStreamingPoint(_bb, new StreamingPoint()); }
  public static StreamingPoint GetRootAsStreamingPoint(ByteBuffer _bb, StreamingPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StreamingPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.scene.fb.PointTree? Points(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.scene.fb.PointTree?)(new gfl.scene.fb.PointTree()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.scene.fb.StreamingPoint> CreateStreamingPoint(FlatBufferBuilder builder,
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StreamingPoint.AddPoints(builder, pointsOffset);
    return StreamingPoint.EndStreamingPoint(builder);
  }

  public static void StartStreamingPoint(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(0, pointsOffset.Value, 0); }
  public static VectorOffset CreatePointsVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.PointTree>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.PointTree>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.scene.fb.StreamingPoint> EndStreamingPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.StreamingPoint>(o);
  }
  public static void FinishStreamingPointBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.StreamingPoint> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedStreamingPointBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.StreamingPoint> offset) { builder.FinishSizePrefixed(offset.Value); }
  public StreamingPointT UnPack() {
    var _o = new StreamingPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StreamingPointT _o) {
    _o.Points = new List<gfl.scene.fb.PointTreeT>();
    for (var _j = 0; _j < this.PointsLength; ++_j) {_o.Points.Add(this.Points(_j).HasValue ? this.Points(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.scene.fb.StreamingPoint> Pack(FlatBufferBuilder builder, StreamingPointT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.StreamingPoint>);
    var _points = default(VectorOffset);
    if (_o.Points != null) {
      var __points = new Offset<gfl.scene.fb.PointTree>[_o.Points.Count];
      for (var _j = 0; _j < __points.Length; ++_j) { __points[_j] = gfl.scene.fb.PointTree.Pack(builder, _o.Points[_j]); }
      _points = CreatePointsVector(builder, __points);
    }
    return CreateStreamingPoint(
      builder,
      _points);
  }
};

public class StreamingPointT
{
  [Newtonsoft.Json.JsonProperty("points")]
  public List<gfl.scene.fb.PointTreeT> Points { get; set; }

  public StreamingPointT() {
    this.Points = null;
  }

  public static StreamingPointT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<StreamingPointT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static StreamingPointT DeserializeFromBinary(byte[] fbBuffer) {
    return StreamingPoint.GetRootAsStreamingPoint(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    StreamingPoint.FinishStreamingPointBuffer(fbb, StreamingPoint.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
