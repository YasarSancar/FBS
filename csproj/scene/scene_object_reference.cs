// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SceneObjectReference : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SceneObjectReference GetRootAsSceneObjectReference(ByteBuffer _bb) { return GetRootAsSceneObjectReference(_bb, new SceneObjectReference()); }
  public static SceneObjectReference GetRootAsSceneObjectReference(ByteBuffer _bb, SceneObjectReference obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneObjectReference __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.SRT? Srt { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.scene.fb.SceneObjectReference> CreateSceneObjectReference(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> srtOffset = default(Offset<gfl.math.fb.SRT>)) {
    builder.StartTable(2);
    SceneObjectReference.AddSrt(builder, srtOffset);
    SceneObjectReference.AddName(builder, nameOffset);
    return SceneObjectReference.EndSceneObjectReference(builder);
  }

  public static void StartSceneObjectReference(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddSrt(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> srtOffset) { builder.AddOffset(1, srtOffset.Value, 0); }
  public static Offset<gfl.scene.fb.SceneObjectReference> EndSceneObjectReference(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.SceneObjectReference>(o);
  }
  public static void FinishSceneObjectReferenceBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SceneObjectReference> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSceneObjectReferenceBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.SceneObjectReference> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SceneObjectReferenceT UnPack() {
    var _o = new SceneObjectReferenceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SceneObjectReferenceT _o) {
    _o.Name = this.Name;
    _o.Srt = this.Srt.HasValue ? this.Srt.Value.UnPack() : null;
  }
  public static Offset<gfl.scene.fb.SceneObjectReference> Pack(FlatBufferBuilder builder, SceneObjectReferenceT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.SceneObjectReference>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _srt = _o.Srt == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Srt);
    return CreateSceneObjectReference(
      builder,
      _name,
      _srt);
  }
};

public class SceneObjectReferenceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("srt")]
  public gfl.math.fb.SRTT Srt { get; set; }

  public SceneObjectReferenceT() {
    this.Name = null;
    this.Srt = null;
  }

  public static SceneObjectReferenceT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SceneObjectReferenceT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SceneObjectReferenceT DeserializeFromBinary(byte[] fbBuffer) {
    return SceneObjectReference.GetRootAsSceneObjectReference(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SceneObjectReference.FinishSceneObjectReferenceBuffer(fbb, SceneObjectReference.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
