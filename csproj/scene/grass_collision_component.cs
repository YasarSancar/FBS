// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GrassCollisionComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GrassCollisionComponent GetRootAsGrassCollisionComponent(ByteBuffer _bb) { return GetRootAsGrassCollisionComponent(_bb, new GrassCollisionComponent()); }
  public static GrassCollisionComponent GetRootAsGrassCollisionComponent(ByteBuffer _bb, GrassCollisionComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GrassCollisionComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InstanceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(4); }
  public float OffsetY { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Radius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.scene.fb.GrassCollisionComponent> CreateGrassCollisionComponent(FlatBufferBuilder builder,
      StringOffset instanceNameOffset = default(StringOffset),
      float offsetY = 0.0f,
      float radius = 0.0f) {
    builder.StartTable(3);
    GrassCollisionComponent.AddRadius(builder, radius);
    GrassCollisionComponent.AddOffsetY(builder, offsetY);
    GrassCollisionComponent.AddInstanceName(builder, instanceNameOffset);
    return GrassCollisionComponent.EndGrassCollisionComponent(builder);
  }

  public static void StartGrassCollisionComponent(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(0, instanceNameOffset.Value, 0); }
  public static void AddOffsetY(FlatBufferBuilder builder, float offsetY) { builder.AddFloat(1, offsetY, 0.0f); }
  public static void AddRadius(FlatBufferBuilder builder, float radius) { builder.AddFloat(2, radius, 0.0f); }
  public static Offset<gfl.scene.fb.GrassCollisionComponent> EndGrassCollisionComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.GrassCollisionComponent>(o);
  }
  public static void FinishGrassCollisionComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GrassCollisionComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGrassCollisionComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.GrassCollisionComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GrassCollisionComponentT UnPack() {
    var _o = new GrassCollisionComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GrassCollisionComponentT _o) {
    _o.InstanceName = this.InstanceName;
    _o.OffsetY = this.OffsetY;
    _o.Radius = this.Radius;
  }
  public static Offset<gfl.scene.fb.GrassCollisionComponent> Pack(FlatBufferBuilder builder, GrassCollisionComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.GrassCollisionComponent>);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    return CreateGrassCollisionComponent(
      builder,
      _instanceName,
      _o.OffsetY,
      _o.Radius);
  }
};

public class GrassCollisionComponentT
{
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetY")]
  public float OffsetY { get; set; }
  [Newtonsoft.Json.JsonProperty("radius")]
  public float Radius { get; set; }

  public GrassCollisionComponentT() {
    this.InstanceName = null;
    this.OffsetY = 0.0f;
    this.Radius = 0.0f;
  }

  public static GrassCollisionComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<GrassCollisionComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static GrassCollisionComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return GrassCollisionComponent.GetRootAsGrassCollisionComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GrassCollisionComponent.FinishGrassCollisionComponentBuffer(fbb, GrassCollisionComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
