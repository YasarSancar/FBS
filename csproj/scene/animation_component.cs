// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnimationComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationComponent GetRootAsAnimationComponent(ByteBuffer _bb) { return GetRootAsAnimationComponent(_bb, new AnimationComponent()); }
  public static AnimationComponent GetRootAsAnimationComponent(ByteBuffer _bb, AnimationComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public string InstanceName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstanceNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetInstanceNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetInstanceNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool DistanceIntervalEnabled { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float IntervalDistance0 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int UpdateInterval0 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float IntervalDistance1 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int UpdateInterval1 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float IntervalDistance2 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int UpdateInterval2 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float IntervalDistance3 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int UpdateInterval3 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ModelComponentName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelComponentNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetModelComponentNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetModelComponentNameArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<gfl.scene.fb.AnimationComponent> CreateAnimationComponent(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      StringOffset instanceNameOffset = default(StringOffset),
      bool distanceIntervalEnabled = false,
      float intervalDistance0 = 0.0f,
      int updateInterval0 = 0,
      float intervalDistance1 = 0.0f,
      int updateInterval1 = 0,
      float intervalDistance2 = 0.0f,
      int updateInterval2 = 0,
      float intervalDistance3 = 0.0f,
      int updateInterval3 = 0,
      StringOffset modelComponentNameOffset = default(StringOffset)) {
    builder.StartTable(12);
    AnimationComponent.AddModelComponentName(builder, modelComponentNameOffset);
    AnimationComponent.AddUpdateInterval3(builder, updateInterval3);
    AnimationComponent.AddIntervalDistance3(builder, intervalDistance3);
    AnimationComponent.AddUpdateInterval2(builder, updateInterval2);
    AnimationComponent.AddIntervalDistance2(builder, intervalDistance2);
    AnimationComponent.AddUpdateInterval1(builder, updateInterval1);
    AnimationComponent.AddIntervalDistance1(builder, intervalDistance1);
    AnimationComponent.AddUpdateInterval0(builder, updateInterval0);
    AnimationComponent.AddIntervalDistance0(builder, intervalDistance0);
    AnimationComponent.AddInstanceName(builder, instanceNameOffset);
    AnimationComponent.AddFilePath(builder, filePathOffset);
    AnimationComponent.AddDistanceIntervalEnabled(builder, distanceIntervalEnabled);
    return AnimationComponent.EndAnimationComponent(builder);
  }

  public static void StartAnimationComponent(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddInstanceName(FlatBufferBuilder builder, StringOffset instanceNameOffset) { builder.AddOffset(1, instanceNameOffset.Value, 0); }
  public static void AddDistanceIntervalEnabled(FlatBufferBuilder builder, bool distanceIntervalEnabled) { builder.AddBool(2, distanceIntervalEnabled, false); }
  public static void AddIntervalDistance0(FlatBufferBuilder builder, float intervalDistance0) { builder.AddFloat(3, intervalDistance0, 0.0f); }
  public static void AddUpdateInterval0(FlatBufferBuilder builder, int updateInterval0) { builder.AddInt(4, updateInterval0, 0); }
  public static void AddIntervalDistance1(FlatBufferBuilder builder, float intervalDistance1) { builder.AddFloat(5, intervalDistance1, 0.0f); }
  public static void AddUpdateInterval1(FlatBufferBuilder builder, int updateInterval1) { builder.AddInt(6, updateInterval1, 0); }
  public static void AddIntervalDistance2(FlatBufferBuilder builder, float intervalDistance2) { builder.AddFloat(7, intervalDistance2, 0.0f); }
  public static void AddUpdateInterval2(FlatBufferBuilder builder, int updateInterval2) { builder.AddInt(8, updateInterval2, 0); }
  public static void AddIntervalDistance3(FlatBufferBuilder builder, float intervalDistance3) { builder.AddFloat(9, intervalDistance3, 0.0f); }
  public static void AddUpdateInterval3(FlatBufferBuilder builder, int updateInterval3) { builder.AddInt(10, updateInterval3, 0); }
  public static void AddModelComponentName(FlatBufferBuilder builder, StringOffset modelComponentNameOffset) { builder.AddOffset(11, modelComponentNameOffset.Value, 0); }
  public static Offset<gfl.scene.fb.AnimationComponent> EndAnimationComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.scene.fb.AnimationComponent>(o);
  }
  public static void FinishAnimationComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.AnimationComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationComponentBuffer(FlatBufferBuilder builder, Offset<gfl.scene.fb.AnimationComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationComponentT UnPack() {
    var _o = new AnimationComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationComponentT _o) {
    _o.FilePath = this.FilePath;
    _o.InstanceName = this.InstanceName;
    _o.DistanceIntervalEnabled = this.DistanceIntervalEnabled;
    _o.IntervalDistance0 = this.IntervalDistance0;
    _o.UpdateInterval0 = this.UpdateInterval0;
    _o.IntervalDistance1 = this.IntervalDistance1;
    _o.UpdateInterval1 = this.UpdateInterval1;
    _o.IntervalDistance2 = this.IntervalDistance2;
    _o.UpdateInterval2 = this.UpdateInterval2;
    _o.IntervalDistance3 = this.IntervalDistance3;
    _o.UpdateInterval3 = this.UpdateInterval3;
    _o.ModelComponentName = this.ModelComponentName;
  }
  public static Offset<gfl.scene.fb.AnimationComponent> Pack(FlatBufferBuilder builder, AnimationComponentT _o) {
    if (_o == null) return default(Offset<gfl.scene.fb.AnimationComponent>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _instanceName = _o.InstanceName == null ? default(StringOffset) : builder.CreateString(_o.InstanceName);
    var _modelComponentName = _o.ModelComponentName == null ? default(StringOffset) : builder.CreateString(_o.ModelComponentName);
    return CreateAnimationComponent(
      builder,
      _filePath,
      _instanceName,
      _o.DistanceIntervalEnabled,
      _o.IntervalDistance0,
      _o.UpdateInterval0,
      _o.IntervalDistance1,
      _o.UpdateInterval1,
      _o.IntervalDistance2,
      _o.UpdateInterval2,
      _o.IntervalDistance3,
      _o.UpdateInterval3,
      _modelComponentName);
  }
};

public class AnimationComponentT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("instanceName")]
  public string InstanceName { get; set; }
  [Newtonsoft.Json.JsonProperty("distanceIntervalEnabled")]
  public bool DistanceIntervalEnabled { get; set; }
  [Newtonsoft.Json.JsonProperty("intervalDistance0")]
  public float IntervalDistance0 { get; set; }
  [Newtonsoft.Json.JsonProperty("updateInterval0")]
  public int UpdateInterval0 { get; set; }
  [Newtonsoft.Json.JsonProperty("intervalDistance1")]
  public float IntervalDistance1 { get; set; }
  [Newtonsoft.Json.JsonProperty("updateInterval1")]
  public int UpdateInterval1 { get; set; }
  [Newtonsoft.Json.JsonProperty("intervalDistance2")]
  public float IntervalDistance2 { get; set; }
  [Newtonsoft.Json.JsonProperty("updateInterval2")]
  public int UpdateInterval2 { get; set; }
  [Newtonsoft.Json.JsonProperty("intervalDistance3")]
  public float IntervalDistance3 { get; set; }
  [Newtonsoft.Json.JsonProperty("updateInterval3")]
  public int UpdateInterval3 { get; set; }
  [Newtonsoft.Json.JsonProperty("modelComponentName")]
  public string ModelComponentName { get; set; }

  public AnimationComponentT() {
    this.FilePath = null;
    this.InstanceName = null;
    this.DistanceIntervalEnabled = false;
    this.IntervalDistance0 = 0.0f;
    this.UpdateInterval0 = 0;
    this.IntervalDistance1 = 0.0f;
    this.UpdateInterval1 = 0;
    this.IntervalDistance2 = 0.0f;
    this.UpdateInterval2 = 0;
    this.IntervalDistance3 = 0.0f;
    this.UpdateInterval3 = 0;
    this.ModelComponentName = null;
  }

  public static AnimationComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationComponent.GetRootAsAnimationComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationComponent.FinishAnimationComponentBuffer(fbb, AnimationComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
