// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.gfx2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightAnimationFloatParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightAnimationFloatParam GetRootAsLightAnimationFloatParam(ByteBuffer _bb) { return GetRootAsLightAnimationFloatParam(_bb, new LightAnimationFloatParam()); }
  public static LightAnimationFloatParam GetRootAsLightAnimationFloatParam(ByteBuffer _bb, LightAnimationFloatParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightAnimationFloatParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gfx2.fb.RuntimeCurveFloat? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat?)(new gfl.gfx2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.LightAnimationFloatParam> CreateLightAnimationFloatParam(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat> curveDataOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat>)) {
    builder.StartTable(2);
    LightAnimationFloatParam.AddCurveData(builder, curveDataOffset);
    LightAnimationFloatParam.AddAttributeName(builder, attributeNameOffset);
    return LightAnimationFloatParam.EndLightAnimationFloatParam(builder);
  }

  public static void StartLightAnimationFloatParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightAnimationFloatParam> EndLightAnimationFloatParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightAnimationFloatParam>(o);
  }
  public LightAnimationFloatParamT UnPack() {
    var _o = new LightAnimationFloatParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightAnimationFloatParamT _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.LightAnimationFloatParam> Pack(FlatBufferBuilder builder, LightAnimationFloatParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightAnimationFloatParam>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat>) : gfl.gfx2.fb.RuntimeCurveFloat.Pack(builder, _o.CurveData);
    return CreateLightAnimationFloatParam(
      builder,
      _attributeName,
      _curveData);
  }
};

public class LightAnimationFloatParamT
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.gfx2.fb.RuntimeCurveFloatT CurveData { get; set; }

  public LightAnimationFloatParamT() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct LightAnimationFloat4Param : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightAnimationFloat4Param GetRootAsLightAnimationFloat4Param(ByteBuffer _bb) { return GetRootAsLightAnimationFloat4Param(_bb, new LightAnimationFloat4Param()); }
  public static LightAnimationFloat4Param GetRootAsLightAnimationFloat4Param(ByteBuffer _bb, LightAnimationFloat4Param obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightAnimationFloat4Param __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.gfx2.fb.RuntimeCurveFloat4? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.LightAnimationFloat4Param> CreateLightAnimationFloat4Param(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> curveDataOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>)) {
    builder.StartTable(2);
    LightAnimationFloat4Param.AddCurveData(builder, curveDataOffset);
    LightAnimationFloat4Param.AddAttributeName(builder, attributeNameOffset);
    return LightAnimationFloat4Param.EndLightAnimationFloat4Param(builder);
  }

  public static void StartLightAnimationFloat4Param(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightAnimationFloat4Param> EndLightAnimationFloat4Param(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightAnimationFloat4Param>(o);
  }
  public LightAnimationFloat4ParamT UnPack() {
    var _o = new LightAnimationFloat4ParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightAnimationFloat4ParamT _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.LightAnimationFloat4Param> Pack(FlatBufferBuilder builder, LightAnimationFloat4ParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightAnimationFloat4Param>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.CurveData);
    return CreateLightAnimationFloat4Param(
      builder,
      _attributeName,
      _curveData);
  }
};

public class LightAnimationFloat4ParamT
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T CurveData { get; set; }

  public LightAnimationFloat4ParamT() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct AttachmentItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AttachmentItem GetRootAsAttachmentItem(ByteBuffer _bb) { return GetRootAsAttachmentItem(_bb, new AttachmentItem()); }
  public static AttachmentItem GetRootAsAttachmentItem(ByteBuffer _bb, AttachmentItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttachmentItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string LocatorName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocatorNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLocatorNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLocatorNameArray() { return __p.__vector_as_array<byte>(8); }
  public gfl.gfx2.fb.LightItem? Light { get { int o = __p.__offset(10); return o != 0 ? (gfl.gfx2.fb.LightItem?)(new gfl.gfx2.fb.LightItem()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string FilePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(12); }
  public gfl.gfx2.fb.LightAnimationFloatParam? AnimationFloatParam { get { int o = __p.__offset(14); return o != 0 ? (gfl.gfx2.fb.LightAnimationFloatParam?)(new gfl.gfx2.fb.LightAnimationFloatParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.LightAnimationFloat4Param? AnimationFloat4Param { get { int o = __p.__offset(16); return o != 0 ? (gfl.gfx2.fb.LightAnimationFloat4Param?)(new gfl.gfx2.fb.LightAnimationFloat4Param()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.AttachmentItem> CreateAttachmentItem(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset locatorNameOffset = default(StringOffset),
      Offset<gfl.gfx2.fb.LightItem> lightOffset = default(Offset<gfl.gfx2.fb.LightItem>),
      StringOffset filePathOffset = default(StringOffset),
      Offset<gfl.gfx2.fb.LightAnimationFloatParam> animationFloatParamOffset = default(Offset<gfl.gfx2.fb.LightAnimationFloatParam>),
      Offset<gfl.gfx2.fb.LightAnimationFloat4Param> animationFloat4ParamOffset = default(Offset<gfl.gfx2.fb.LightAnimationFloat4Param>)) {
    builder.StartTable(7);
    AttachmentItem.AddAnimationFloat4Param(builder, animationFloat4ParamOffset);
    AttachmentItem.AddAnimationFloatParam(builder, animationFloatParamOffset);
    AttachmentItem.AddFilePath(builder, filePathOffset);
    AttachmentItem.AddLight(builder, lightOffset);
    AttachmentItem.AddLocatorName(builder, locatorNameOffset);
    AttachmentItem.AddType(builder, typeOffset);
    AttachmentItem.AddName(builder, nameOffset);
    return AttachmentItem.EndAttachmentItem(builder);
  }

  public static void StartAttachmentItem(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddLocatorName(FlatBufferBuilder builder, StringOffset locatorNameOffset) { builder.AddOffset(2, locatorNameOffset.Value, 0); }
  public static void AddLight(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightItem> lightOffset) { builder.AddOffset(3, lightOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(4, filePathOffset.Value, 0); }
  public static void AddAnimationFloatParam(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightAnimationFloatParam> animationFloatParamOffset) { builder.AddOffset(5, animationFloatParamOffset.Value, 0); }
  public static void AddAnimationFloat4Param(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightAnimationFloat4Param> animationFloat4ParamOffset) { builder.AddOffset(6, animationFloat4ParamOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.AttachmentItem> EndAttachmentItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.AttachmentItem>(o);
  }
  public AttachmentItemT UnPack() {
    var _o = new AttachmentItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttachmentItemT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.LocatorName = this.LocatorName;
    _o.Light = this.Light.HasValue ? this.Light.Value.UnPack() : null;
    _o.FilePath = this.FilePath;
    _o.AnimationFloatParam = this.AnimationFloatParam.HasValue ? this.AnimationFloatParam.Value.UnPack() : null;
    _o.AnimationFloat4Param = this.AnimationFloat4Param.HasValue ? this.AnimationFloat4Param.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.AttachmentItem> Pack(FlatBufferBuilder builder, AttachmentItemT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.AttachmentItem>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _locatorName = _o.LocatorName == null ? default(StringOffset) : builder.CreateString(_o.LocatorName);
    var _light = _o.Light == null ? default(Offset<gfl.gfx2.fb.LightItem>) : gfl.gfx2.fb.LightItem.Pack(builder, _o.Light);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _animationFloatParam = _o.AnimationFloatParam == null ? default(Offset<gfl.gfx2.fb.LightAnimationFloatParam>) : gfl.gfx2.fb.LightAnimationFloatParam.Pack(builder, _o.AnimationFloatParam);
    var _animationFloat4Param = _o.AnimationFloat4Param == null ? default(Offset<gfl.gfx2.fb.LightAnimationFloat4Param>) : gfl.gfx2.fb.LightAnimationFloat4Param.Pack(builder, _o.AnimationFloat4Param);
    return CreateAttachmentItem(
      builder,
      _name,
      _type,
      _locatorName,
      _light,
      _filePath,
      _animationFloatParam,
      _animationFloat4Param);
  }
};

public class AttachmentItemT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("locatorName")]
  public string LocatorName { get; set; }
  [Newtonsoft.Json.JsonProperty("light")]
  public gfl.gfx2.fb.LightItemT Light { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFloatParam")]
  public gfl.gfx2.fb.LightAnimationFloatParamT AnimationFloatParam { get; set; }
  [Newtonsoft.Json.JsonProperty("animationFloat4Param")]
  public gfl.gfx2.fb.LightAnimationFloat4ParamT AnimationFloat4Param { get; set; }

  public AttachmentItemT() {
    this.Name = null;
    this.Type = null;
    this.LocatorName = null;
    this.Light = null;
    this.FilePath = null;
    this.AnimationFloatParam = null;
    this.AnimationFloat4Param = null;
  }
}

public struct Attachment : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Attachment GetRootAsAttachment(ByteBuffer _bb) { return GetRootAsAttachment(_bb, new Attachment()); }
  public static Attachment GetRootAsAttachment(ByteBuffer _bb, Attachment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Attachment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)1; } }
  public gfl.gfx2.fb.AttachmentItem? ItemList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.AttachmentItem?)(new gfl.gfx2.fb.AttachmentItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.Attachment> CreateAttachment(FlatBufferBuilder builder,
      uint version = 1,
      VectorOffset item_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Attachment.AddItemList(builder, item_listOffset);
    Attachment.AddVersion(builder, version);
    return Attachment.EndAttachment(builder);
  }

  public static void StartAttachment(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 1); }
  public static void AddItemList(FlatBufferBuilder builder, VectorOffset itemListOffset) { builder.AddOffset(1, itemListOffset.Value, 0); }
  public static VectorOffset CreateItemListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.AttachmentItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.AttachmentItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.Attachment> EndAttachment(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.Attachment>(o);
  }
  public static void FinishAttachmentBuffer(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Attachment> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAttachmentBuffer(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Attachment> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AttachmentT UnPack() {
    var _o = new AttachmentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttachmentT _o) {
    _o.Version = this.Version;
    _o.ItemList = new List<gfl.gfx2.fb.AttachmentItemT>();
    for (var _j = 0; _j < this.ItemListLength; ++_j) {_o.ItemList.Add(this.ItemList(_j).HasValue ? this.ItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.Attachment> Pack(FlatBufferBuilder builder, AttachmentT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.Attachment>);
    var _item_list = default(VectorOffset);
    if (_o.ItemList != null) {
      var __item_list = new Offset<gfl.gfx2.fb.AttachmentItem>[_o.ItemList.Count];
      for (var _j = 0; _j < __item_list.Length; ++_j) { __item_list[_j] = gfl.gfx2.fb.AttachmentItem.Pack(builder, _o.ItemList[_j]); }
      _item_list = CreateItemListVector(builder, __item_list);
    }
    return CreateAttachment(
      builder,
      _o.Version,
      _item_list);
  }
};

public class AttachmentT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public uint Version { get; set; }
  [Newtonsoft.Json.JsonProperty("item_list")]
  public List<gfl.gfx2.fb.AttachmentItemT> ItemList { get; set; }

  public AttachmentT() {
    this.Version = 1;
    this.ItemList = null;
  }

  public static AttachmentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AttachmentT DeserializeFromBinary(byte[] fbBuffer) {
    return Attachment.GetRootAsAttachment(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Attachment.FinishAttachmentBuffer(fbb, Attachment.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
