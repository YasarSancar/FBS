// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.gfx2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightFloatParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightFloatParam GetRootAsLightFloatParam(ByteBuffer _bb) { return GetRootAsLightFloatParam(_bb, new LightFloatParam()); }
  public static LightFloatParam GetRootAsLightFloatParam(ByteBuffer _bb, LightFloatParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightFloatParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.gfx2.fb.RuntimeCurveFloat? CurveValue { get { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat?)(new gfl.gfx2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.LightFloatParam> CreateLightFloatParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      float value = 0.0f,
      Offset<gfl.gfx2.fb.RuntimeCurveFloat> curveValueOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat>)) {
    builder.StartTable(3);
    LightFloatParam.AddCurveValue(builder, curveValueOffset);
    LightFloatParam.AddValue(builder, value);
    LightFloatParam.AddName(builder, nameOffset);
    return LightFloatParam.EndLightFloatParam(builder);
  }

  public static void StartLightFloatParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static void AddCurveValue(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat> curveValueOffset) { builder.AddOffset(2, curveValueOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightFloatParam> EndLightFloatParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightFloatParam>(o);
  }
  public LightFloatParamT UnPack() {
    var _o = new LightFloatParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightFloatParamT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
    _o.CurveValue = this.CurveValue.HasValue ? this.CurveValue.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.LightFloatParam> Pack(FlatBufferBuilder builder, LightFloatParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightFloatParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _curveValue = _o.CurveValue == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat>) : gfl.gfx2.fb.RuntimeCurveFloat.Pack(builder, _o.CurveValue);
    return CreateLightFloatParam(
      builder,
      _name,
      _o.Value,
      _curveValue);
  }
};

public class LightFloatParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }
  [Newtonsoft.Json.JsonProperty("curveValue")]
  public gfl.gfx2.fb.RuntimeCurveFloatT CurveValue { get; set; }

  public LightFloatParamT() {
    this.Name = null;
    this.Value = 0.0f;
    this.CurveValue = null;
  }
}

public struct LightVector4fParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightVector4fParam GetRootAsLightVector4fParam(ByteBuffer _bb) { return GetRootAsLightVector4fParam(_bb, new LightVector4fParam()); }
  public static LightVector4fParam GetRootAsLightVector4fParam(ByteBuffer _bb, LightVector4fParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightVector4fParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector4f? Value { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.gfx2.fb.RuntimeCurveFloat4? CurveValue { get { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.LightVector4fParam> CreateLightVector4fParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.math.fb.Vector4fT value = null,
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> curveValueOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>)) {
    builder.StartTable(3);
    LightVector4fParam.AddCurveValue(builder, curveValueOffset);
    LightVector4fParam.AddValue(builder, gfl.math.fb.Vector4f.Pack(builder, value));
    LightVector4fParam.AddName(builder, nameOffset);
    return LightVector4fParam.EndLightVector4fParam(builder);
  }

  public static void StartLightVector4fParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> valueOffset) { builder.AddStruct(1, valueOffset.Value, 0); }
  public static void AddCurveValue(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> curveValueOffset) { builder.AddOffset(2, curveValueOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightVector4fParam> EndLightVector4fParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightVector4fParam>(o);
  }
  public LightVector4fParamT UnPack() {
    var _o = new LightVector4fParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightVector4fParamT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
    _o.CurveValue = this.CurveValue.HasValue ? this.CurveValue.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.LightVector4fParam> Pack(FlatBufferBuilder builder, LightVector4fParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightVector4fParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _curveValue = _o.CurveValue == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.CurveValue);
    return CreateLightVector4fParam(
      builder,
      _name,
      _o.Value,
      _curveValue);
  }
};

public class LightVector4fParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.math.fb.Vector4fT Value { get; set; }
  [Newtonsoft.Json.JsonProperty("curveValue")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T CurveValue { get; set; }

  public LightVector4fParamT() {
    this.Name = null;
    this.Value = new gfl.math.fb.Vector4fT();
    this.CurveValue = null;
  }
}

public struct LightTextureParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightTextureParam GetRootAsLightTextureParam(ByteBuffer _bb) { return GetRootAsLightTextureParam(_bb, new LightTextureParam()); }
  public static LightTextureParam GetRootAsLightTextureParam(ByteBuffer _bb, LightTextureParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightTextureParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.gfx2.fb.LightTextureParam> CreateLightTextureParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset file_pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    LightTextureParam.AddFilePath(builder, file_pathOffset);
    LightTextureParam.AddName(builder, nameOffset);
    return LightTextureParam.EndLightTextureParam(builder);
  }

  public static void StartLightTextureParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightTextureParam> EndLightTextureParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightTextureParam>(o);
  }
  public LightTextureParamT UnPack() {
    var _o = new LightTextureParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightTextureParamT _o) {
    _o.Name = this.Name;
    _o.FilePath = this.FilePath;
  }
  public static Offset<gfl.gfx2.fb.LightTextureParam> Pack(FlatBufferBuilder builder, LightTextureParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightTextureParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateLightTextureParam(
      builder,
      _name,
      _file_path);
  }
};

public class LightTextureParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("file_path")]
  public string FilePath { get; set; }

  public LightTextureParamT() {
    this.Name = null;
    this.FilePath = null;
  }
}

public struct LightCurveSRT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightCurveSRT GetRootAsLightCurveSRT(ByteBuffer _bb) { return GetRootAsLightCurveSRT(_bb, new LightCurveSRT()); }
  public static LightCurveSRT GetRootAsLightCurveSRT(ByteBuffer _bb, LightCurveSRT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightCurveSRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gfx2.fb.RuntimeCurveFloat4? Scale { get { int o = __p.__offset(4); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.RuntimeCurveFloat4? Rotation { get { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.RuntimeCurveFloat4? Translation { get { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.gfx2.fb.LightCurveSRT> CreateLightCurveSRT(FlatBufferBuilder builder,
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> scaleOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> rotationOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> translationOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>)) {
    builder.StartTable(3);
    LightCurveSRT.AddTranslation(builder, translationOffset);
    LightCurveSRT.AddRotation(builder, rotationOffset);
    LightCurveSRT.AddScale(builder, scaleOffset);
    return LightCurveSRT.EndLightCurveSRT(builder);
  }

  public static void StartLightCurveSRT(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddScale(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> scaleOffset) { builder.AddOffset(0, scaleOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> translationOffset) { builder.AddOffset(2, translationOffset.Value, 0); }
  public static Offset<gfl.gfx2.fb.LightCurveSRT> EndLightCurveSRT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightCurveSRT>(o);
  }
  public LightCurveSRTT UnPack() {
    var _o = new LightCurveSRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightCurveSRTT _o) {
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
  }
  public static Offset<gfl.gfx2.fb.LightCurveSRT> Pack(FlatBufferBuilder builder, LightCurveSRTT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightCurveSRT>);
    var _scale = _o.Scale == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Scale);
    var _rotation = _o.Rotation == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Rotation);
    var _translation = _o.Translation == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Translation);
    return CreateLightCurveSRT(
      builder,
      _scale,
      _rotation,
      _translation);
  }
};

public class LightCurveSRTT
{
  [Newtonsoft.Json.JsonProperty("scale")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("translation")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Translation { get; set; }

  public LightCurveSRTT() {
    this.Scale = null;
    this.Rotation = null;
    this.Translation = null;
  }
}

public struct LightOffsetParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightOffsetParam GetRootAsLightOffsetParam(ByteBuffer _bb) { return GetRootAsLightOffsetParam(_bb, new LightOffsetParam()); }
  public static LightOffsetParam GetRootAsLightOffsetParam(ByteBuffer _bb, LightOffsetParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightOffsetParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.SRT? Transform { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.LightFloatParam? FloatParamList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.LightFloatParam?)(new gfl.gfx2.fb.LightFloatParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatParamListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.LightVector4fParam? Vector4fParamList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.gfx2.fb.LightVector4fParam?)(new gfl.gfx2.fb.LightVector4fParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Vector4fParamListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.LightOffsetParam> CreateLightOffsetParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> transformOffset = default(Offset<gfl.math.fb.SRT>),
      VectorOffset float_param_listOffset = default(VectorOffset),
      VectorOffset vector4f_param_listOffset = default(VectorOffset)) {
    builder.StartTable(4);
    LightOffsetParam.AddVector4fParamList(builder, vector4f_param_listOffset);
    LightOffsetParam.AddFloatParamList(builder, float_param_listOffset);
    LightOffsetParam.AddTransform(builder, transformOffset);
    LightOffsetParam.AddName(builder, nameOffset);
    return LightOffsetParam.EndLightOffsetParam(builder);
  }

  public static void StartLightOffsetParam(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> transformOffset) { builder.AddOffset(1, transformOffset.Value, 0); }
  public static void AddFloatParamList(FlatBufferBuilder builder, VectorOffset floatParamListOffset) { builder.AddOffset(2, floatParamListOffset.Value, 0); }
  public static VectorOffset CreateFloatParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVector4fParamList(FlatBufferBuilder builder, VectorOffset vector4fParamListOffset) { builder.AddOffset(3, vector4fParamListOffset.Value, 0); }
  public static VectorOffset CreateVector4fParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVector4fParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVector4fParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.LightOffsetParam> EndLightOffsetParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightOffsetParam>(o);
  }
  public LightOffsetParamT UnPack() {
    var _o = new LightOffsetParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightOffsetParamT _o) {
    _o.Name = this.Name;
    _o.Transform = this.Transform.HasValue ? this.Transform.Value.UnPack() : null;
    _o.FloatParamList = new List<gfl.gfx2.fb.LightFloatParamT>();
    for (var _j = 0; _j < this.FloatParamListLength; ++_j) {_o.FloatParamList.Add(this.FloatParamList(_j).HasValue ? this.FloatParamList(_j).Value.UnPack() : null);}
    _o.Vector4fParamList = new List<gfl.gfx2.fb.LightVector4fParamT>();
    for (var _j = 0; _j < this.Vector4fParamListLength; ++_j) {_o.Vector4fParamList.Add(this.Vector4fParamList(_j).HasValue ? this.Vector4fParamList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.LightOffsetParam> Pack(FlatBufferBuilder builder, LightOffsetParamT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightOffsetParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _transform = _o.Transform == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Transform);
    var _float_param_list = default(VectorOffset);
    if (_o.FloatParamList != null) {
      var __float_param_list = new Offset<gfl.gfx2.fb.LightFloatParam>[_o.FloatParamList.Count];
      for (var _j = 0; _j < __float_param_list.Length; ++_j) { __float_param_list[_j] = gfl.gfx2.fb.LightFloatParam.Pack(builder, _o.FloatParamList[_j]); }
      _float_param_list = CreateFloatParamListVector(builder, __float_param_list);
    }
    var _vector4f_param_list = default(VectorOffset);
    if (_o.Vector4fParamList != null) {
      var __vector4f_param_list = new Offset<gfl.gfx2.fb.LightVector4fParam>[_o.Vector4fParamList.Count];
      for (var _j = 0; _j < __vector4f_param_list.Length; ++_j) { __vector4f_param_list[_j] = gfl.gfx2.fb.LightVector4fParam.Pack(builder, _o.Vector4fParamList[_j]); }
      _vector4f_param_list = CreateVector4fParamListVector(builder, __vector4f_param_list);
    }
    return CreateLightOffsetParam(
      builder,
      _name,
      _transform,
      _float_param_list,
      _vector4f_param_list);
  }
};

public class LightOffsetParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public gfl.math.fb.SRTT Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("float_param_list")]
  public List<gfl.gfx2.fb.LightFloatParamT> FloatParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("vector4f_param_list")]
  public List<gfl.gfx2.fb.LightVector4fParamT> Vector4fParamList { get; set; }

  public LightOffsetParamT() {
    this.Name = null;
    this.Transform = null;
    this.FloatParamList = null;
    this.Vector4fParamList = null;
  }
}

public struct LightItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightItem GetRootAsLightItem(ByteBuffer _bb) { return GetRootAsLightItem(_bb, new LightItem()); }
  public static LightItem GetRootAsLightItem(ByteBuffer _bb, LightItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.math.fb.SRT? Transform { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.LightFloatParam? FloatParamList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.gfx2.fb.LightFloatParam?)(new gfl.gfx2.fb.LightFloatParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatParamListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.LightVector4fParam? Vector4fParamList(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.gfx2.fb.LightVector4fParam?)(new gfl.gfx2.fb.LightVector4fParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Vector4fParamListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.LightTextureParam? TextureParamList(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.gfx2.fb.LightTextureParam?)(new gfl.gfx2.fb.LightTextureParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TextureParamListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.LightCurveSRT? TransformCurve { get { int o = __p.__offset(16); return o != 0 ? (gfl.gfx2.fb.LightCurveSRT?)(new gfl.gfx2.fb.LightCurveSRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.LightOffsetParam? OffsetParamList(int j) { int o = __p.__offset(18); return o != 0 ? (gfl.gfx2.fb.LightOffsetParam?)(new gfl.gfx2.fb.LightOffsetParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OffsetParamListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.LightItem> CreateLightItem(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> transformOffset = default(Offset<gfl.math.fb.SRT>),
      VectorOffset float_param_listOffset = default(VectorOffset),
      VectorOffset vector4f_param_listOffset = default(VectorOffset),
      VectorOffset texture_param_listOffset = default(VectorOffset),
      Offset<gfl.gfx2.fb.LightCurveSRT> transformCurveOffset = default(Offset<gfl.gfx2.fb.LightCurveSRT>),
      VectorOffset offset_param_listOffset = default(VectorOffset)) {
    builder.StartTable(8);
    LightItem.AddOffsetParamList(builder, offset_param_listOffset);
    LightItem.AddTransformCurve(builder, transformCurveOffset);
    LightItem.AddTextureParamList(builder, texture_param_listOffset);
    LightItem.AddVector4fParamList(builder, vector4f_param_listOffset);
    LightItem.AddFloatParamList(builder, float_param_listOffset);
    LightItem.AddTransform(builder, transformOffset);
    LightItem.AddType(builder, typeOffset);
    LightItem.AddName(builder, nameOffset);
    return LightItem.EndLightItem(builder);
  }

  public static void StartLightItem(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> transformOffset) { builder.AddOffset(2, transformOffset.Value, 0); }
  public static void AddFloatParamList(FlatBufferBuilder builder, VectorOffset floatParamListOffset) { builder.AddOffset(3, floatParamListOffset.Value, 0); }
  public static VectorOffset CreateFloatParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightFloatParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVector4fParamList(FlatBufferBuilder builder, VectorOffset vector4fParamListOffset) { builder.AddOffset(4, vector4fParamListOffset.Value, 0); }
  public static VectorOffset CreateVector4fParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVector4fParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightVector4fParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVector4fParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTextureParamList(FlatBufferBuilder builder, VectorOffset textureParamListOffset) { builder.AddOffset(5, textureParamListOffset.Value, 0); }
  public static VectorOffset CreateTextureParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightTextureParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTextureParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightTextureParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTextureParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransformCurve(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightCurveSRT> transformCurveOffset) { builder.AddOffset(6, transformCurveOffset.Value, 0); }
  public static void AddOffsetParamList(FlatBufferBuilder builder, VectorOffset offsetParamListOffset) { builder.AddOffset(7, offsetParamListOffset.Value, 0); }
  public static VectorOffset CreateOffsetParamListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightOffsetParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOffsetParamListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.LightOffsetParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOffsetParamListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.LightItem> EndLightItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.LightItem>(o);
  }
  public LightItemT UnPack() {
    var _o = new LightItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightItemT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Transform = this.Transform.HasValue ? this.Transform.Value.UnPack() : null;
    _o.FloatParamList = new List<gfl.gfx2.fb.LightFloatParamT>();
    for (var _j = 0; _j < this.FloatParamListLength; ++_j) {_o.FloatParamList.Add(this.FloatParamList(_j).HasValue ? this.FloatParamList(_j).Value.UnPack() : null);}
    _o.Vector4fParamList = new List<gfl.gfx2.fb.LightVector4fParamT>();
    for (var _j = 0; _j < this.Vector4fParamListLength; ++_j) {_o.Vector4fParamList.Add(this.Vector4fParamList(_j).HasValue ? this.Vector4fParamList(_j).Value.UnPack() : null);}
    _o.TextureParamList = new List<gfl.gfx2.fb.LightTextureParamT>();
    for (var _j = 0; _j < this.TextureParamListLength; ++_j) {_o.TextureParamList.Add(this.TextureParamList(_j).HasValue ? this.TextureParamList(_j).Value.UnPack() : null);}
    _o.TransformCurve = this.TransformCurve.HasValue ? this.TransformCurve.Value.UnPack() : null;
    _o.OffsetParamList = new List<gfl.gfx2.fb.LightOffsetParamT>();
    for (var _j = 0; _j < this.OffsetParamListLength; ++_j) {_o.OffsetParamList.Add(this.OffsetParamList(_j).HasValue ? this.OffsetParamList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.LightItem> Pack(FlatBufferBuilder builder, LightItemT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.LightItem>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _transform = _o.Transform == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Transform);
    var _float_param_list = default(VectorOffset);
    if (_o.FloatParamList != null) {
      var __float_param_list = new Offset<gfl.gfx2.fb.LightFloatParam>[_o.FloatParamList.Count];
      for (var _j = 0; _j < __float_param_list.Length; ++_j) { __float_param_list[_j] = gfl.gfx2.fb.LightFloatParam.Pack(builder, _o.FloatParamList[_j]); }
      _float_param_list = CreateFloatParamListVector(builder, __float_param_list);
    }
    var _vector4f_param_list = default(VectorOffset);
    if (_o.Vector4fParamList != null) {
      var __vector4f_param_list = new Offset<gfl.gfx2.fb.LightVector4fParam>[_o.Vector4fParamList.Count];
      for (var _j = 0; _j < __vector4f_param_list.Length; ++_j) { __vector4f_param_list[_j] = gfl.gfx2.fb.LightVector4fParam.Pack(builder, _o.Vector4fParamList[_j]); }
      _vector4f_param_list = CreateVector4fParamListVector(builder, __vector4f_param_list);
    }
    var _texture_param_list = default(VectorOffset);
    if (_o.TextureParamList != null) {
      var __texture_param_list = new Offset<gfl.gfx2.fb.LightTextureParam>[_o.TextureParamList.Count];
      for (var _j = 0; _j < __texture_param_list.Length; ++_j) { __texture_param_list[_j] = gfl.gfx2.fb.LightTextureParam.Pack(builder, _o.TextureParamList[_j]); }
      _texture_param_list = CreateTextureParamListVector(builder, __texture_param_list);
    }
    var _transformCurve = _o.TransformCurve == null ? default(Offset<gfl.gfx2.fb.LightCurveSRT>) : gfl.gfx2.fb.LightCurveSRT.Pack(builder, _o.TransformCurve);
    var _offset_param_list = default(VectorOffset);
    if (_o.OffsetParamList != null) {
      var __offset_param_list = new Offset<gfl.gfx2.fb.LightOffsetParam>[_o.OffsetParamList.Count];
      for (var _j = 0; _j < __offset_param_list.Length; ++_j) { __offset_param_list[_j] = gfl.gfx2.fb.LightOffsetParam.Pack(builder, _o.OffsetParamList[_j]); }
      _offset_param_list = CreateOffsetParamListVector(builder, __offset_param_list);
    }
    return CreateLightItem(
      builder,
      _name,
      _type,
      _transform,
      _float_param_list,
      _vector4f_param_list,
      _texture_param_list,
      _transformCurve,
      _offset_param_list);
  }
};

public class LightItemT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("transform")]
  public gfl.math.fb.SRTT Transform { get; set; }
  [Newtonsoft.Json.JsonProperty("float_param_list")]
  public List<gfl.gfx2.fb.LightFloatParamT> FloatParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("vector4f_param_list")]
  public List<gfl.gfx2.fb.LightVector4fParamT> Vector4fParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("texture_param_list")]
  public List<gfl.gfx2.fb.LightTextureParamT> TextureParamList { get; set; }
  [Newtonsoft.Json.JsonProperty("transformCurve")]
  public gfl.gfx2.fb.LightCurveSRTT TransformCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("offset_param_list")]
  public List<gfl.gfx2.fb.LightOffsetParamT> OffsetParamList { get; set; }

  public LightItemT() {
    this.Name = null;
    this.Type = null;
    this.Transform = null;
    this.FloatParamList = null;
    this.Vector4fParamList = null;
    this.TextureParamList = null;
    this.TransformCurve = null;
    this.OffsetParamList = null;
  }
}


}
