// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.gfx2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Blob2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blob2 GetRootAsBlob2(ByteBuffer _bb) { return GetRootAsBlob2(_bb, new Blob2()); }
  public static Blob2 GetRootAsBlob2(ByteBuffer _bb, Blob2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blob2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.gfx2.fb.Blob2> CreateBlob2(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Blob2.AddData(builder, dataOffset);
    return Blob2.EndBlob2(builder);
  }

  public static void StartBlob2(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.gfx2.fb.Blob2> EndBlob2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.Blob2>(o);
  }
  public Blob2T UnPack() {
    var _o = new Blob2T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blob2T _o) {
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.gfx2.fb.Blob2> Pack(FlatBufferBuilder builder, Blob2T _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.Blob2>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateBlob2(
      builder,
      _data);
  }
};

public class Blob2T
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public Blob2T() {
    this.Data = null;
  }
}

public struct VertexBufferItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VertexBufferItem GetRootAsVertexBufferItem(ByteBuffer _bb) { return GetRootAsVertexBufferItem(_bb, new VertexBufferItem()); }
  public static VertexBufferItem GetRootAsVertexBufferItem(ByteBuffer _bb, VertexBufferItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VertexBufferItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gfx2.fb.Blob2? VertexBufferList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gfx2.fb.Blob2?)(new gfl.gfx2.fb.Blob2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VertexBufferListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.VertexBufferItem> CreateVertexBufferItem(FlatBufferBuilder builder,
      VectorOffset vertex_buffer_listOffset = default(VectorOffset)) {
    builder.StartTable(1);
    VertexBufferItem.AddVertexBufferList(builder, vertex_buffer_listOffset);
    return VertexBufferItem.EndVertexBufferItem(builder);
  }

  public static void StartVertexBufferItem(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddVertexBufferList(FlatBufferBuilder builder, VectorOffset vertexBufferListOffset) { builder.AddOffset(0, vertexBufferListOffset.Value, 0); }
  public static VectorOffset CreateVertexBufferListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVertexBufferListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVertexBufferListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.VertexBufferItem> EndVertexBufferItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.VertexBufferItem>(o);
  }
  public VertexBufferItemT UnPack() {
    var _o = new VertexBufferItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VertexBufferItemT _o) {
    _o.VertexBufferList = new List<gfl.gfx2.fb.Blob2T>();
    for (var _j = 0; _j < this.VertexBufferListLength; ++_j) {_o.VertexBufferList.Add(this.VertexBufferList(_j).HasValue ? this.VertexBufferList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.VertexBufferItem> Pack(FlatBufferBuilder builder, VertexBufferItemT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.VertexBufferItem>);
    var _vertex_buffer_list = default(VectorOffset);
    if (_o.VertexBufferList != null) {
      var __vertex_buffer_list = new Offset<gfl.gfx2.fb.Blob2>[_o.VertexBufferList.Count];
      for (var _j = 0; _j < __vertex_buffer_list.Length; ++_j) { __vertex_buffer_list[_j] = gfl.gfx2.fb.Blob2.Pack(builder, _o.VertexBufferList[_j]); }
      _vertex_buffer_list = CreateVertexBufferListVector(builder, __vertex_buffer_list);
    }
    return CreateVertexBufferItem(
      builder,
      _vertex_buffer_list);
  }
};

public class VertexBufferItemT
{
  [Newtonsoft.Json.JsonProperty("vertex_buffer_list")]
  public List<gfl.gfx2.fb.Blob2T> VertexBufferList { get; set; }

  public VertexBufferItemT() {
    this.VertexBufferList = null;
  }
}

public struct MeshBufferItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshBufferItem GetRootAsMeshBufferItem(ByteBuffer _bb) { return GetRootAsMeshBufferItem(_bb, new MeshBufferItem()); }
  public static MeshBufferItem GetRootAsMeshBufferItem(ByteBuffer _bb, MeshBufferItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshBufferItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gfx2.fb.Blob2? IndexBufferList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.gfx2.fb.Blob2?)(new gfl.gfx2.fb.Blob2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IndexBufferListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.Blob2? VertexBufferList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.Blob2?)(new gfl.gfx2.fb.Blob2()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VertexBufferListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.gfx2.fb.VertexBufferItem? PartialVertexBufferList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.VertexBufferItem?)(new gfl.gfx2.fb.VertexBufferItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PartialVertexBufferListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.MeshBufferItem> CreateMeshBufferItem(FlatBufferBuilder builder,
      VectorOffset index_buffer_listOffset = default(VectorOffset),
      VectorOffset vertex_buffer_listOffset = default(VectorOffset),
      VectorOffset partial_vertex_buffer_listOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MeshBufferItem.AddPartialVertexBufferList(builder, partial_vertex_buffer_listOffset);
    MeshBufferItem.AddVertexBufferList(builder, vertex_buffer_listOffset);
    MeshBufferItem.AddIndexBufferList(builder, index_buffer_listOffset);
    return MeshBufferItem.EndMeshBufferItem(builder);
  }

  public static void StartMeshBufferItem(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIndexBufferList(FlatBufferBuilder builder, VectorOffset indexBufferListOffset) { builder.AddOffset(0, indexBufferListOffset.Value, 0); }
  public static VectorOffset CreateIndexBufferListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIndexBufferListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIndexBufferListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVertexBufferList(FlatBufferBuilder builder, VectorOffset vertexBufferListOffset) { builder.AddOffset(1, vertexBufferListOffset.Value, 0); }
  public static VectorOffset CreateVertexBufferListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVertexBufferListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.Blob2>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartVertexBufferListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPartialVertexBufferList(FlatBufferBuilder builder, VectorOffset partialVertexBufferListOffset) { builder.AddOffset(2, partialVertexBufferListOffset.Value, 0); }
  public static VectorOffset CreatePartialVertexBufferListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.VertexBufferItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePartialVertexBufferListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.VertexBufferItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartialVertexBufferListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.MeshBufferItem> EndMeshBufferItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.MeshBufferItem>(o);
  }
  public MeshBufferItemT UnPack() {
    var _o = new MeshBufferItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshBufferItemT _o) {
    _o.IndexBufferList = new List<gfl.gfx2.fb.Blob2T>();
    for (var _j = 0; _j < this.IndexBufferListLength; ++_j) {_o.IndexBufferList.Add(this.IndexBufferList(_j).HasValue ? this.IndexBufferList(_j).Value.UnPack() : null);}
    _o.VertexBufferList = new List<gfl.gfx2.fb.Blob2T>();
    for (var _j = 0; _j < this.VertexBufferListLength; ++_j) {_o.VertexBufferList.Add(this.VertexBufferList(_j).HasValue ? this.VertexBufferList(_j).Value.UnPack() : null);}
    _o.PartialVertexBufferList = new List<gfl.gfx2.fb.VertexBufferItemT>();
    for (var _j = 0; _j < this.PartialVertexBufferListLength; ++_j) {_o.PartialVertexBufferList.Add(this.PartialVertexBufferList(_j).HasValue ? this.PartialVertexBufferList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.MeshBufferItem> Pack(FlatBufferBuilder builder, MeshBufferItemT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.MeshBufferItem>);
    var _index_buffer_list = default(VectorOffset);
    if (_o.IndexBufferList != null) {
      var __index_buffer_list = new Offset<gfl.gfx2.fb.Blob2>[_o.IndexBufferList.Count];
      for (var _j = 0; _j < __index_buffer_list.Length; ++_j) { __index_buffer_list[_j] = gfl.gfx2.fb.Blob2.Pack(builder, _o.IndexBufferList[_j]); }
      _index_buffer_list = CreateIndexBufferListVector(builder, __index_buffer_list);
    }
    var _vertex_buffer_list = default(VectorOffset);
    if (_o.VertexBufferList != null) {
      var __vertex_buffer_list = new Offset<gfl.gfx2.fb.Blob2>[_o.VertexBufferList.Count];
      for (var _j = 0; _j < __vertex_buffer_list.Length; ++_j) { __vertex_buffer_list[_j] = gfl.gfx2.fb.Blob2.Pack(builder, _o.VertexBufferList[_j]); }
      _vertex_buffer_list = CreateVertexBufferListVector(builder, __vertex_buffer_list);
    }
    var _partial_vertex_buffer_list = default(VectorOffset);
    if (_o.PartialVertexBufferList != null) {
      var __partial_vertex_buffer_list = new Offset<gfl.gfx2.fb.VertexBufferItem>[_o.PartialVertexBufferList.Count];
      for (var _j = 0; _j < __partial_vertex_buffer_list.Length; ++_j) { __partial_vertex_buffer_list[_j] = gfl.gfx2.fb.VertexBufferItem.Pack(builder, _o.PartialVertexBufferList[_j]); }
      _partial_vertex_buffer_list = CreatePartialVertexBufferListVector(builder, __partial_vertex_buffer_list);
    }
    return CreateMeshBufferItem(
      builder,
      _index_buffer_list,
      _vertex_buffer_list,
      _partial_vertex_buffer_list);
  }
};

public class MeshBufferItemT
{
  [Newtonsoft.Json.JsonProperty("index_buffer_list")]
  public List<gfl.gfx2.fb.Blob2T> IndexBufferList { get; set; }
  [Newtonsoft.Json.JsonProperty("vertex_buffer_list")]
  public List<gfl.gfx2.fb.Blob2T> VertexBufferList { get; set; }
  [Newtonsoft.Json.JsonProperty("partial_vertex_buffer_list")]
  public List<gfl.gfx2.fb.VertexBufferItemT> PartialVertexBufferList { get; set; }

  public MeshBufferItemT() {
    this.IndexBufferList = null;
    this.VertexBufferList = null;
    this.PartialVertexBufferList = null;
  }
}

public struct MeshBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshBuffer GetRootAsMeshBuffer(ByteBuffer _bb) { return GetRootAsMeshBuffer(_bb, new MeshBuffer()); }
  public static MeshBuffer GetRootAsMeshBuffer(ByteBuffer _bb, MeshBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)1; } }
  public gfl.gfx2.fb.MeshBufferItem? ItemList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.MeshBufferItem?)(new gfl.gfx2.fb.MeshBufferItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ItemListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.gfx2.fb.MeshBuffer> CreateMeshBuffer(FlatBufferBuilder builder,
      uint version = 1,
      VectorOffset item_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MeshBuffer.AddItemList(builder, item_listOffset);
    MeshBuffer.AddVersion(builder, version);
    return MeshBuffer.EndMeshBuffer(builder);
  }

  public static void StartMeshBuffer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 1); }
  public static void AddItemList(FlatBufferBuilder builder, VectorOffset itemListOffset) { builder.AddOffset(1, itemListOffset.Value, 0); }
  public static VectorOffset CreateItemListVector(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.MeshBufferItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemListVectorBlock(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.MeshBufferItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.gfx2.fb.MeshBuffer> EndMeshBuffer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.gfx2.fb.MeshBuffer>(o);
  }
  public static void FinishMeshBufferBuffer(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.MeshBuffer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMeshBufferBuffer(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.MeshBuffer> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MeshBufferT UnPack() {
    var _o = new MeshBufferT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshBufferT _o) {
    _o.Version = this.Version;
    _o.ItemList = new List<gfl.gfx2.fb.MeshBufferItemT>();
    for (var _j = 0; _j < this.ItemListLength; ++_j) {_o.ItemList.Add(this.ItemList(_j).HasValue ? this.ItemList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.gfx2.fb.MeshBuffer> Pack(FlatBufferBuilder builder, MeshBufferT _o) {
    if (_o == null) return default(Offset<gfl.gfx2.fb.MeshBuffer>);
    var _item_list = default(VectorOffset);
    if (_o.ItemList != null) {
      var __item_list = new Offset<gfl.gfx2.fb.MeshBufferItem>[_o.ItemList.Count];
      for (var _j = 0; _j < __item_list.Length; ++_j) { __item_list[_j] = gfl.gfx2.fb.MeshBufferItem.Pack(builder, _o.ItemList[_j]); }
      _item_list = CreateItemListVector(builder, __item_list);
    }
    return CreateMeshBuffer(
      builder,
      _o.Version,
      _item_list);
  }
};

public class MeshBufferT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public uint Version { get; set; }
  [Newtonsoft.Json.JsonProperty("item_list")]
  public List<gfl.gfx2.fb.MeshBufferItemT> ItemList { get; set; }

  public MeshBufferT() {
    this.Version = 1;
    this.ItemList = null;
  }

  public static MeshBufferT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MeshBufferT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MeshBufferT DeserializeFromBinary(byte[] fbBuffer) {
    return MeshBuffer.GetRootAsMeshBuffer(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MeshBuffer.FinishMeshBufferBuffer(fbb, MeshBuffer.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
