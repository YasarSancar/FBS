// <auto-generated />

namespace gfl.gfx2.fb.mmr
{
    public abstract class Condition
    {
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum UnionType : uint
        {
            NONE = 0,
            Copy = 1,
            CopyIfExist = 2,
            SwitchCase = 3,
        }

        public static Condition.UnionType GetUnionType(Condition obj)
        {
            switch (obj)
            {
            default: return UnionType.NONE;
            case Copy _: return UnionType.Copy;
            case CopyIfExist _: return UnionType.CopyIfExist;
            case SwitchCase _: return UnionType.SwitchCase;
            }
        }

        public class Converter : Newtonsoft.Json.JsonConverter
        {
            public static UnionType UnionType { get; set; }

            public override bool CanConvert(System.Type objectType)
            {
                return objectType == typeof(Condition);
            }

            public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
            {
                switch (UnionType)
                {
                default: return null;
                case UnionType.Copy: return serializer.Deserialize<Copy>(reader);
                case UnionType.CopyIfExist: return serializer.Deserialize<CopyIfExist>(reader);
                case UnionType.SwitchCase: return serializer.Deserialize<SwitchCase>(reader);
                }
            }

            public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
            {
                serializer.Serialize(writer, value);
            }
        }

    }

    public class CaseValue
    {
        [Newtonsoft.Json.JsonProperty("case_")]
        public int Case { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("value")]
        public int Value { get; set; } = 0;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.CaseValue FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.CaseValue>(jsonText);
        }
    }

    public class Copy : gfl.gfx2.fb.mmr.Condition
    {
        [Newtonsoft.Json.JsonProperty("paramName")]
        public string ParamName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.Copy FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.Copy>(jsonText);
        }
    }

    public class CopyIfExist : gfl.gfx2.fb.mmr.Condition
    {
        [Newtonsoft.Json.JsonProperty("existParamName")]
        public string ExistParamName { get; set; }

        [Newtonsoft.Json.JsonProperty("copyParamName")]
        public string CopyParamName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.CopyIfExist FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.CopyIfExist>(jsonText);
        }
    }

    public class Parameter
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("maxValue")]
        public int MaxValue { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("defaultValue")]
        public int DefaultValue { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("condition_type")]
        public gfl.gfx2.fb.mmr.Condition.UnionType ConditionType
        {
            get => gfl.gfx2.fb.mmr.Condition.GetUnionType(this.Condition);
            private set => gfl.gfx2.fb.mmr.Condition.Converter.UnionType = value;
        }

        [Newtonsoft.Json.JsonProperty("condition"), Newtonsoft.Json.JsonConverter(typeof(gfl.gfx2.fb.mmr.Condition.Converter))]
        public gfl.gfx2.fb.mmr.Condition Condition { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.Parameter FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.Parameter>(jsonText);
        }
    }

    public class Rule
    {
        [Newtonsoft.Json.JsonProperty("version")]
        public uint Version { get; set; } = 1u;

        [Newtonsoft.Json.JsonProperty("parameters")]
        public System.Collections.Generic.List<gfl.gfx2.fb.mmr.Parameter> Parameters { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.Rule FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.Rule>(jsonText);
        }

        public byte[] ToFlatBuffers()
        {
            var jsonText = this.ToJson();
            return GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonToFlatBuffers(jsonText, BFBS);
        }

        public static gfl.gfx2.fb.mmr.Rule FromFlatBuffers(byte[] fb)
        {
            var jsonText = GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonFromFlatBuffers(fb, BFBS);
            return FromJson(jsonText);
        }

        public static readonly string FileIdentifier = "";

        public static readonly string FileExtension = "";

        public static readonly string BFBS_BASE64 = "GAAAAEJGQlMQABwABAAIAAwAEAAUABgAEAAAADQAAAAoAAAAHAAAABAAAACAAQAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACwAAAAGAAAAyAMAAAAFAABEBAAA7AEAAEgBAAAMAwAADAAUAAgADAAHABAADAAAAAAAAAEsAAAAFAAAAAQAAAC6/f//AAAAAQAAAAAEAAAA8AAAALAAAABsAAAAMAAAABkAAABnZmwuZ2Z4Mi5mYi5tbXIuQ29uZGl0aW9uAAAADAAcAAQAEAAIAAwADAAAACQAAACUAgAAEAAAAAMAAAAAAAAAAAAAACL+//8AAAAPBQAAAAoAAABTd2l0Y2hDYXNlAADM////IAAAAIgDAAAMAAAAAgAAAAAAAABW/v//AAAADwIAAAALAAAAQ29weUlmRXhpc3QADAAYAAQAEAAIAAwADAAAACAAAAAABAAADAAAAAEAAAAAAAAAlv7//wAAAA8BAAAABAAAAENvcHkAAAAADAAMAAQAAAAAAAgADAAAABAAAAAIAAAABAAEAAQAAAAEAAAATk9ORQAAAABg/P//GAAAAAgAAAABAAAAAgAAACQAAABcAAAAFAAAAGdmbC5nZngyLmZiLm1tci5SdWxlAAAAAAj9//8BAAYAFAAAAAQAAAAm/v//AAAODwMAAAAKAAAAcGFyYW1ldGVycwAAAAAOABgACAAMAAAABgAQAA4AAAAAAAQAGAAAAAwAAAABAAAAAAAAAI78//8AAAAIBwAAAHZlcnNpb24AAP3//yQAAAAIAAAAAQAAAAUAAAA0AAAAXAAAAJQAAAC8AAAA4AAAABkAAABnZmwuZ2Z4Mi5mYi5tbXIuUGFyYW1ldGVyAAAAuP3//wQADAAUAAAABAAAANL///8AAAAQAAAAAAkAAABjb25kaXRpb24AAAAQ////AwAKACAAAAAQAAAAAAAKAAwABwAAAAgACgAAAAAAAAEAAAAADgAAAGNvbmRpdGlvbl90eXBlAAAg/v//AgAIABAAAAAEAAAAYv3//wAAAAcMAAAAZGVmYXVsdFZhbHVlAAAAAEz+//8BAAYAEAAAAAQAAACO/f//AAAABwgAAABtYXhWYWx1ZQAAAAA8/v//AAAEABAAAAAEAAAAtv3//wAAAA0EAAAAbmFtZQAAAAAo/v//GAAAAAgAAAABAAAAAgAAADQAAABoAAAAGgAAAGdmbC5nZngyLmZiLm1tci5Td2l0Y2hDYXNlAAAMABIACAAMAAQABgAMAAAAAQAGACAAAAAQAAAAAAAKAAwABgAHAAgACgAAAAAADg8AAAAACgAAAGNhc2VWYWx1ZXMAAOD+//8AAAQAEAAAAAQAAABa/v//AAAADQkAAABwYXJhbU5hbWUAAADQ/v//GAAAAAgAAAABAAAAAgAAAEwAAAAkAAAAGQAAAGdmbC5nZngyLmZiLm1tci5DYXNlVmFsdWUAAAB8////AQAGABAAAAAEAAAAvv7//wAAAAcFAAAAdmFsdWUAAABo////AAAEABAAAAAEAAAA4v7//wAAAAcFAAAAY2FzZV8AAABU////GAAAAAgAAAABAAAAAgAAADQAAABoAAAAGwAAAGdmbC5nZngyLmZiLm1tci5Db3B5SWZFeGlzdAAMABAACAAMAAQABgAMAAAAAQAGABAAAAAEAAAATv///wAAAA0NAAAAY29weVBhcmFtTmFtZQAAAAwAEAAIAAwAAAAGAAwAAAAAAAQAEAAAAAQAAACG////AAAADQ4AAABleGlzdFBhcmFtTmFtZQAADAAQAAQACAAAAAwADAAAABQAAAAIAAAAAQAAAAEAAAAsAAAAFAAAAGdmbC5nZngyLmZiLm1tci5Db3B5AAAAAAwAEgAIAAwAAAAGAAwAAAAAAAQAGAAAAAwAAAAAAAYACAAHAAYAAAAAAAANCQAAAHBhcmFtTmFtZQAAAA==";

        public static byte[] BFBS => System.Convert.FromBase64String(BFBS_BASE64);
    }

    public class SwitchCase : gfl.gfx2.fb.mmr.Condition
    {
        [Newtonsoft.Json.JsonProperty("paramName")]
        public string ParamName { get; set; }

        [Newtonsoft.Json.JsonProperty("caseValues")]
        public System.Collections.Generic.List<gfl.gfx2.fb.mmr.CaseValue> CaseValues { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static gfl.gfx2.fb.mmr.SwitchCase FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<gfl.gfx2.fb.mmr.SwitchCase>(jsonText);
        }
    }
}
