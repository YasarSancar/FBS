// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.tml.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EventKind : uint
{
  Normal = 0,
  Awaitable = 1,
  CuePoint = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EventValueType : byte
{
  NONE = 0,
  EventValueType_Int = 1,
  EventValueType_Float = 2,
  EventValueType_Bool = 3,
  EventValueType_String = 4,
  EventValueType_Vector3 = 5,
};

public class EventValueTypeUnion {
  public EventValueType Type { get; set; }
  public object Value { get; set; }

  public EventValueTypeUnion() {
    this.Type = EventValueType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.tml.fb.EventValueType_IntT AsEventValueType_Int() { return this.As<gfl.tml.fb.EventValueType_IntT>(); }
  public gfl.tml.fb.EventValueType_FloatT AsEventValueType_Float() { return this.As<gfl.tml.fb.EventValueType_FloatT>(); }
  public gfl.tml.fb.EventValueType_BoolT AsEventValueType_Bool() { return this.As<gfl.tml.fb.EventValueType_BoolT>(); }
  public gfl.tml.fb.EventValueType_StringT AsEventValueType_String() { return this.As<gfl.tml.fb.EventValueType_StringT>(); }
  public gfl.tml.fb.EventValueType_Vector3T AsEventValueType_Vector3() { return this.As<gfl.tml.fb.EventValueType_Vector3T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, EventValueTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case EventValueType.EventValueType_Int: return gfl.tml.fb.EventValueType_Int.Pack(builder, _o.AsEventValueType_Int()).Value;
      case EventValueType.EventValueType_Float: return gfl.tml.fb.EventValueType_Float.Pack(builder, _o.AsEventValueType_Float()).Value;
      case EventValueType.EventValueType_Bool: return gfl.tml.fb.EventValueType_Bool.Pack(builder, _o.AsEventValueType_Bool()).Value;
      case EventValueType.EventValueType_String: return gfl.tml.fb.EventValueType_String.Pack(builder, _o.AsEventValueType_String()).Value;
      case EventValueType.EventValueType_Vector3: return gfl.tml.fb.EventValueType_Vector3.Pack(builder, _o.AsEventValueType_Vector3()).Value;
    }
  }
}

public class EventValueTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(EventValueTypeUnion) || objectType == typeof(System.Collections.Generic.List<EventValueTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<EventValueTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as EventValueTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, EventValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<EventValueTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as EventValueTypeUnion, serializer);
    }
  }
  public EventValueTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, EventValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case EventValueType.EventValueType_Int: _o.Value = serializer.Deserialize<gfl.tml.fb.EventValueType_IntT>(reader); break;
      case EventValueType.EventValueType_Float: _o.Value = serializer.Deserialize<gfl.tml.fb.EventValueType_FloatT>(reader); break;
      case EventValueType.EventValueType_Bool: _o.Value = serializer.Deserialize<gfl.tml.fb.EventValueType_BoolT>(reader); break;
      case EventValueType.EventValueType_String: _o.Value = serializer.Deserialize<gfl.tml.fb.EventValueType_StringT>(reader); break;
      case EventValueType.EventValueType_Vector3: _o.Value = serializer.Deserialize<gfl.tml.fb.EventValueType_Vector3T>(reader); break;
    }
    return _o;
  }
}

public struct Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<gfl.tml.fb.Vector3> CreateVector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.tml.fb.Vector3>(builder.Offset);
  }
  public Vector3T UnPack() {
    var _o = new Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<gfl.tml.fb.Vector3> Pack(FlatBufferBuilder builder, Vector3T _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.Vector3>);
    return CreateVector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct EventValueType_Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Int GetRootAsEventValueType_Int(ByteBuffer _bb) { return GetRootAsEventValueType_Int(_bb, new EventValueType_Int()); }
  public static EventValueType_Int GetRootAsEventValueType_Int(ByteBuffer _bb, EventValueType_Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.tml.fb.EventValueType_Int> CreateEventValueType_Int(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    EventValueType_Int.AddValue(builder, value);
    return EventValueType_Int.EndEventValueType_Int(builder);
  }

  public static void StartEventValueType_Int(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<gfl.tml.fb.EventValueType_Int> EndEventValueType_Int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValueType_Int>(o);
  }
  public EventValueType_IntT UnPack() {
    var _o = new EventValueType_IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_IntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.tml.fb.EventValueType_Int> Pack(FlatBufferBuilder builder, EventValueType_IntT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValueType_Int>);
    return CreateEventValueType_Int(
      builder,
      _o.Value);
  }
};

public class EventValueType_IntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public EventValueType_IntT() {
    this.Value = 0;
  }
}

public struct EventValueType_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Float GetRootAsEventValueType_Float(ByteBuffer _bb) { return GetRootAsEventValueType_Float(_bb, new EventValueType_Float()); }
  public static EventValueType_Float GetRootAsEventValueType_Float(ByteBuffer _bb, EventValueType_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.tml.fb.EventValueType_Float> CreateEventValueType_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    EventValueType_Float.AddValue(builder, value);
    return EventValueType_Float.EndEventValueType_Float(builder);
  }

  public static void StartEventValueType_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<gfl.tml.fb.EventValueType_Float> EndEventValueType_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValueType_Float>(o);
  }
  public EventValueType_FloatT UnPack() {
    var _o = new EventValueType_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.tml.fb.EventValueType_Float> Pack(FlatBufferBuilder builder, EventValueType_FloatT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValueType_Float>);
    return CreateEventValueType_Float(
      builder,
      _o.Value);
  }
};

public class EventValueType_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public EventValueType_FloatT() {
    this.Value = 0.0f;
  }
}

public struct EventValueType_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Bool GetRootAsEventValueType_Bool(ByteBuffer _bb) { return GetRootAsEventValueType_Bool(_bb, new EventValueType_Bool()); }
  public static EventValueType_Bool GetRootAsEventValueType_Bool(ByteBuffer _bb, EventValueType_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.tml.fb.EventValueType_Bool> CreateEventValueType_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    EventValueType_Bool.AddValue(builder, value);
    return EventValueType_Bool.EndEventValueType_Bool(builder);
  }

  public static void StartEventValueType_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.tml.fb.EventValueType_Bool> EndEventValueType_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValueType_Bool>(o);
  }
  public EventValueType_BoolT UnPack() {
    var _o = new EventValueType_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.tml.fb.EventValueType_Bool> Pack(FlatBufferBuilder builder, EventValueType_BoolT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValueType_Bool>);
    return CreateEventValueType_Bool(
      builder,
      _o.Value);
  }
};

public class EventValueType_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public EventValueType_BoolT() {
    this.Value = false;
  }
}

public struct EventValueType_String : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_String GetRootAsEventValueType_String(ByteBuffer _bb) { return GetRootAsEventValueType_String(_bb, new EventValueType_String()); }
  public static EventValueType_String GetRootAsEventValueType_String(ByteBuffer _bb, EventValueType_String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.tml.fb.EventValueType_String> CreateEventValueType_String(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    EventValueType_String.AddValue(builder, valueOffset);
    return EventValueType_String.EndEventValueType_String(builder);
  }

  public static void StartEventValueType_String(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<gfl.tml.fb.EventValueType_String> EndEventValueType_String(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValueType_String>(o);
  }
  public EventValueType_StringT UnPack() {
    var _o = new EventValueType_StringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_StringT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.tml.fb.EventValueType_String> Pack(FlatBufferBuilder builder, EventValueType_StringT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValueType_String>);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    return CreateEventValueType_String(
      builder,
      _value);
  }
};

public class EventValueType_StringT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }

  public EventValueType_StringT() {
    this.Value = null;
  }
}

public struct EventValueType_Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Vector3 GetRootAsEventValueType_Vector3(ByteBuffer _bb) { return GetRootAsEventValueType_Vector3(_bb, new EventValueType_Vector3()); }
  public static EventValueType_Vector3 GetRootAsEventValueType_Vector3(ByteBuffer _bb, EventValueType_Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.tml.fb.Vector3? Value { get { int o = __p.__offset(4); return o != 0 ? (gfl.tml.fb.Vector3?)(new gfl.tml.fb.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartEventValueType_Vector3(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.tml.fb.Vector3> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<gfl.tml.fb.EventValueType_Vector3> EndEventValueType_Vector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValueType_Vector3>(o);
  }
  public EventValueType_Vector3T UnPack() {
    var _o = new EventValueType_Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_Vector3T _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.tml.fb.EventValueType_Vector3> Pack(FlatBufferBuilder builder, EventValueType_Vector3T _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValueType_Vector3>);
    StartEventValueType_Vector3(builder);
    AddValue(builder, gfl.tml.fb.Vector3.Pack(builder, _o.Value));
    return EndEventValueType_Vector3(builder);
  }
};

public class EventValueType_Vector3T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.tml.fb.Vector3T Value { get; set; }

  public EventValueType_Vector3T() {
    this.Value = new gfl.tml.fb.Vector3T();
  }
}

public struct EventValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValue GetRootAsEventValue(ByteBuffer _bb) { return GetRootAsEventValue(_bb, new EventValue()); }
  public static EventValue GetRootAsEventValue(ByteBuffer _bb, EventValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.tml.fb.EventValueType ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.tml.fb.EventValueType)__p.bb.Get(o + __p.bb_pos) : gfl.tml.fb.EventValueType.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public string SuggestionsSource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuggestionsSourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSuggestionsSourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSuggestionsSourceArray() { return __p.__vector_as_array<byte>(10); }
  public bool AcceptOnlySuggestions { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ConstantSuggestions { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string DisplayName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<gfl.tml.fb.EventValue> CreateEventValue(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.tml.fb.EventValueType value_type = gfl.tml.fb.EventValueType.NONE,
      int valueOffset = 0,
      StringOffset suggestionsSourceOffset = default(StringOffset),
      bool acceptOnlySuggestions = false,
      bool constantSuggestions = false,
      StringOffset displayNameOffset = default(StringOffset)) {
    builder.StartTable(7);
    EventValue.AddDisplayName(builder, displayNameOffset);
    EventValue.AddSuggestionsSource(builder, suggestionsSourceOffset);
    EventValue.AddValue(builder, valueOffset);
    EventValue.AddName(builder, nameOffset);
    EventValue.AddConstantSuggestions(builder, constantSuggestions);
    EventValue.AddAcceptOnlySuggestions(builder, acceptOnlySuggestions);
    EventValue.AddValueType(builder, value_type);
    return EventValue.EndEventValue(builder);
  }

  public static void StartEventValue(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.tml.fb.EventValueType valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static void AddSuggestionsSource(FlatBufferBuilder builder, StringOffset suggestionsSourceOffset) { builder.AddOffset(3, suggestionsSourceOffset.Value, 0); }
  public static void AddAcceptOnlySuggestions(FlatBufferBuilder builder, bool acceptOnlySuggestions) { builder.AddBool(4, acceptOnlySuggestions, false); }
  public static void AddConstantSuggestions(FlatBufferBuilder builder, bool constantSuggestions) { builder.AddBool(5, constantSuggestions, false); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(6, displayNameOffset.Value, 0); }
  public static Offset<gfl.tml.fb.EventValue> EndEventValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.EventValue>(o);
  }
  public EventValueT UnPack() {
    var _o = new EventValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueT _o) {
    _o.Name = this.Name;
    _o.Value = new gfl.tml.fb.EventValueTypeUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.tml.fb.EventValueType.EventValueType_Int:
        _o.Value.Value = this.Value<gfl.tml.fb.EventValueType_Int>().HasValue ? this.Value<gfl.tml.fb.EventValueType_Int>().Value.UnPack() : null;
        break;
      case gfl.tml.fb.EventValueType.EventValueType_Float:
        _o.Value.Value = this.Value<gfl.tml.fb.EventValueType_Float>().HasValue ? this.Value<gfl.tml.fb.EventValueType_Float>().Value.UnPack() : null;
        break;
      case gfl.tml.fb.EventValueType.EventValueType_Bool:
        _o.Value.Value = this.Value<gfl.tml.fb.EventValueType_Bool>().HasValue ? this.Value<gfl.tml.fb.EventValueType_Bool>().Value.UnPack() : null;
        break;
      case gfl.tml.fb.EventValueType.EventValueType_String:
        _o.Value.Value = this.Value<gfl.tml.fb.EventValueType_String>().HasValue ? this.Value<gfl.tml.fb.EventValueType_String>().Value.UnPack() : null;
        break;
      case gfl.tml.fb.EventValueType.EventValueType_Vector3:
        _o.Value.Value = this.Value<gfl.tml.fb.EventValueType_Vector3>().HasValue ? this.Value<gfl.tml.fb.EventValueType_Vector3>().Value.UnPack() : null;
        break;
    }
    _o.SuggestionsSource = this.SuggestionsSource;
    _o.AcceptOnlySuggestions = this.AcceptOnlySuggestions;
    _o.ConstantSuggestions = this.ConstantSuggestions;
    _o.DisplayName = this.DisplayName;
  }
  public static Offset<gfl.tml.fb.EventValue> Pack(FlatBufferBuilder builder, EventValueT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.EventValue>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? gfl.tml.fb.EventValueType.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.tml.fb.EventValueTypeUnion.Pack(builder, _o.Value);
    var _suggestionsSource = _o.SuggestionsSource == null ? default(StringOffset) : builder.CreateString(_o.SuggestionsSource);
    var _displayName = _o.DisplayName == null ? default(StringOffset) : builder.CreateString(_o.DisplayName);
    return CreateEventValue(
      builder,
      _name,
      _value_type,
      _value,
      _suggestionsSource,
      _o.AcceptOnlySuggestions,
      _o.ConstantSuggestions,
      _displayName);
  }
};

public class EventValueT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.tml.fb.EventValueType ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.tml.fb.EventValueType.NONE;
    }
    set {
      this.Value = new gfl.tml.fb.EventValueTypeUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.tml.fb.EventValueTypeUnion_JsonConverter))]
  public gfl.tml.fb.EventValueTypeUnion Value { get; set; }
  [Newtonsoft.Json.JsonProperty("suggestionsSource")]
  public string SuggestionsSource { get; set; }
  [Newtonsoft.Json.JsonProperty("acceptOnlySuggestions")]
  public bool AcceptOnlySuggestions { get; set; }
  [Newtonsoft.Json.JsonProperty("constantSuggestions")]
  public bool ConstantSuggestions { get; set; }
  [Newtonsoft.Json.JsonProperty("displayName")]
  public string DisplayName { get; set; }

  public EventValueT() {
    this.Name = null;
    this.Value = null;
    this.SuggestionsSource = null;
    this.AcceptOnlySuggestions = false;
    this.ConstantSuggestions = false;
    this.DisplayName = null;
  }
}

public struct Event : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Event GetRootAsEvent(ByteBuffer _bb) { return GetRootAsEvent(_bb, new Event()); }
  public static Event GetRootAsEvent(ByteBuffer _bb, Event obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Track { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrackBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrackArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int BeginFrame { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndFrame { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Resizable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.tml.fb.EventKind Kind { get { int o = __p.__offset(14); return o != 0 ? (gfl.tml.fb.EventKind)__p.bb.GetUint(o + __p.bb_pos) : gfl.tml.fb.EventKind.Normal; } }
  public string Comment { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(16); }
  public bool IsExcluded { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.tml.fb.Vector3? Color { get { int o = __p.__offset(20); return o != 0 ? (gfl.tml.fb.Vector3?)(new gfl.tml.fb.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.tml.fb.EventValue? EventValueList(int j) { int o = __p.__offset(22); return o != 0 ? (gfl.tml.fb.EventValue?)(new gfl.tml.fb.EventValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventValueListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.tml.fb.Event> CreateEvent(FlatBufferBuilder builder,
      StringOffset trackOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int beginFrame = 0,
      int endFrame = 0,
      bool resizable = false,
      gfl.tml.fb.EventKind kind = gfl.tml.fb.EventKind.Normal,
      StringOffset commentOffset = default(StringOffset),
      bool isExcluded = false,
      gfl.tml.fb.Vector3T color = null,
      VectorOffset eventValueListOffset = default(VectorOffset)) {
    builder.StartTable(10);
    Event.AddEventValueList(builder, eventValueListOffset);
    Event.AddColor(builder, gfl.tml.fb.Vector3.Pack(builder, color));
    Event.AddComment(builder, commentOffset);
    Event.AddKind(builder, kind);
    Event.AddEndFrame(builder, endFrame);
    Event.AddBeginFrame(builder, beginFrame);
    Event.AddName(builder, nameOffset);
    Event.AddTrack(builder, trackOffset);
    Event.AddIsExcluded(builder, isExcluded);
    Event.AddResizable(builder, resizable);
    return Event.EndEvent(builder);
  }

  public static void StartEvent(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddTrack(FlatBufferBuilder builder, StringOffset trackOffset) { builder.AddOffset(0, trackOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddBeginFrame(FlatBufferBuilder builder, int beginFrame) { builder.AddInt(2, beginFrame, 0); }
  public static void AddEndFrame(FlatBufferBuilder builder, int endFrame) { builder.AddInt(3, endFrame, 0); }
  public static void AddResizable(FlatBufferBuilder builder, bool resizable) { builder.AddBool(4, resizable, false); }
  public static void AddKind(FlatBufferBuilder builder, gfl.tml.fb.EventKind kind) { builder.AddUint(5, (uint)kind, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(6, commentOffset.Value, 0); }
  public static void AddIsExcluded(FlatBufferBuilder builder, bool isExcluded) { builder.AddBool(7, isExcluded, false); }
  public static void AddColor(FlatBufferBuilder builder, Offset<gfl.tml.fb.Vector3> colorOffset) { builder.AddStruct(8, colorOffset.Value, 0); }
  public static void AddEventValueList(FlatBufferBuilder builder, VectorOffset eventValueListOffset) { builder.AddOffset(9, eventValueListOffset.Value, 0); }
  public static VectorOffset CreateEventValueListVector(FlatBufferBuilder builder, Offset<gfl.tml.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventValueListVectorBlock(FlatBufferBuilder builder, Offset<gfl.tml.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventValueListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.tml.fb.Event> EndEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.Event>(o);
  }
  public EventT UnPack() {
    var _o = new EventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventT _o) {
    _o.Track = this.Track;
    _o.Name = this.Name;
    _o.BeginFrame = this.BeginFrame;
    _o.EndFrame = this.EndFrame;
    _o.Resizable = this.Resizable;
    _o.Kind = this.Kind;
    _o.Comment = this.Comment;
    _o.IsExcluded = this.IsExcluded;
    _o.Color = this.Color.HasValue ? this.Color.Value.UnPack() : null;
    _o.EventValueList = new List<gfl.tml.fb.EventValueT>();
    for (var _j = 0; _j < this.EventValueListLength; ++_j) {_o.EventValueList.Add(this.EventValueList(_j).HasValue ? this.EventValueList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.tml.fb.Event> Pack(FlatBufferBuilder builder, EventT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.Event>);
    var _track = _o.Track == null ? default(StringOffset) : builder.CreateString(_o.Track);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _eventValueList = default(VectorOffset);
    if (_o.EventValueList != null) {
      var __eventValueList = new Offset<gfl.tml.fb.EventValue>[_o.EventValueList.Count];
      for (var _j = 0; _j < __eventValueList.Length; ++_j) { __eventValueList[_j] = gfl.tml.fb.EventValue.Pack(builder, _o.EventValueList[_j]); }
      _eventValueList = CreateEventValueListVector(builder, __eventValueList);
    }
    return CreateEvent(
      builder,
      _track,
      _name,
      _o.BeginFrame,
      _o.EndFrame,
      _o.Resizable,
      _o.Kind,
      _comment,
      _o.IsExcluded,
      _o.Color,
      _eventValueList);
  }
};

public class EventT
{
  [Newtonsoft.Json.JsonProperty("track")]
  public string Track { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("beginFrame")]
  public int BeginFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("endFrame")]
  public int EndFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("resizable")]
  public bool Resizable { get; set; }
  [Newtonsoft.Json.JsonProperty("kind")]
  public gfl.tml.fb.EventKind Kind { get; set; }
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("isExcluded")]
  public bool IsExcluded { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public gfl.tml.fb.Vector3T Color { get; set; }
  [Newtonsoft.Json.JsonProperty("eventValueList")]
  public List<gfl.tml.fb.EventValueT> EventValueList { get; set; }

  public EventT() {
    this.Track = null;
    this.Name = null;
    this.BeginFrame = 0;
    this.EndFrame = 0;
    this.Resizable = false;
    this.Kind = gfl.tml.fb.EventKind.Normal;
    this.Comment = null;
    this.IsExcluded = false;
    this.Color = new gfl.tml.fb.Vector3T();
    this.EventValueList = null;
  }
}

public struct SubTrack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SubTrack GetRootAsSubTrack(ByteBuffer _bb) { return GetRootAsSubTrack(_bb, new SubTrack()); }
  public static SubTrack GetRootAsSubTrack(ByteBuffer _bb, SubTrack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SubTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsDebug { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.tml.fb.Event? EventList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.tml.fb.Event?)(new gfl.tml.fb.Event()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.tml.fb.SubTrack> CreateSubTrack(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool isDebug = false,
      VectorOffset eventListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SubTrack.AddEventList(builder, eventListOffset);
    SubTrack.AddName(builder, nameOffset);
    SubTrack.AddIsDebug(builder, isDebug);
    return SubTrack.EndSubTrack(builder);
  }

  public static void StartSubTrack(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddIsDebug(FlatBufferBuilder builder, bool isDebug) { builder.AddBool(1, isDebug, false); }
  public static void AddEventList(FlatBufferBuilder builder, VectorOffset eventListOffset) { builder.AddOffset(2, eventListOffset.Value, 0); }
  public static VectorOffset CreateEventListVector(FlatBufferBuilder builder, Offset<gfl.tml.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventListVectorBlock(FlatBufferBuilder builder, Offset<gfl.tml.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.tml.fb.SubTrack> EndSubTrack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.SubTrack>(o);
  }
  public SubTrackT UnPack() {
    var _o = new SubTrackT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SubTrackT _o) {
    _o.Name = this.Name;
    _o.IsDebug = this.IsDebug;
    _o.EventList = new List<gfl.tml.fb.EventT>();
    for (var _j = 0; _j < this.EventListLength; ++_j) {_o.EventList.Add(this.EventList(_j).HasValue ? this.EventList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.tml.fb.SubTrack> Pack(FlatBufferBuilder builder, SubTrackT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.SubTrack>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _eventList = default(VectorOffset);
    if (_o.EventList != null) {
      var __eventList = new Offset<gfl.tml.fb.Event>[_o.EventList.Count];
      for (var _j = 0; _j < __eventList.Length; ++_j) { __eventList[_j] = gfl.tml.fb.Event.Pack(builder, _o.EventList[_j]); }
      _eventList = CreateEventListVector(builder, __eventList);
    }
    return CreateSubTrack(
      builder,
      _name,
      _o.IsDebug,
      _eventList);
  }
};

public class SubTrackT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("isDebug")]
  public bool IsDebug { get; set; }
  [Newtonsoft.Json.JsonProperty("eventList")]
  public List<gfl.tml.fb.EventT> EventList { get; set; }

  public SubTrackT() {
    this.Name = null;
    this.IsDebug = false;
    this.EventList = null;
  }
}

public struct Conditions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Conditions GetRootAsConditions(ByteBuffer _bb) { return GetRootAsConditions(_bb, new Conditions()); }
  public static Conditions GetRootAsConditions(ByteBuffer _bb, Conditions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Conditions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  public string SuggestionsSource { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuggestionsSourceBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSuggestionsSourceBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSuggestionsSourceArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.tml.fb.Conditions> CreateConditions(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset suggestionsSourceOffset = default(StringOffset)) {
    builder.StartTable(3);
    Conditions.AddSuggestionsSource(builder, suggestionsSourceOffset);
    Conditions.AddType(builder, typeOffset);
    Conditions.AddName(builder, nameOffset);
    return Conditions.EndConditions(builder);
  }

  public static void StartConditions(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddSuggestionsSource(FlatBufferBuilder builder, StringOffset suggestionsSourceOffset) { builder.AddOffset(2, suggestionsSourceOffset.Value, 0); }
  public static Offset<gfl.tml.fb.Conditions> EndConditions(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.Conditions>(o);
  }
  public ConditionsT UnPack() {
    var _o = new ConditionsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionsT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.SuggestionsSource = this.SuggestionsSource;
  }
  public static Offset<gfl.tml.fb.Conditions> Pack(FlatBufferBuilder builder, ConditionsT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.Conditions>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _suggestionsSource = _o.SuggestionsSource == null ? default(StringOffset) : builder.CreateString(_o.SuggestionsSource);
    return CreateConditions(
      builder,
      _name,
      _type,
      _suggestionsSource);
  }
};

public class ConditionsT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("suggestionsSource")]
  public string SuggestionsSource { get; set; }

  public ConditionsT() {
    this.Name = null;
    this.Type = null;
    this.SuggestionsSource = null;
  }
}

public struct Track : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Track GetRootAsTrack(ByteBuffer _bb) { return GetRootAsTrack(_bb, new Track()); }
  public static Track GetRootAsTrack(ByteBuffer _bb, Track obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Track __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.tml.fb.Vector3? Color { get { int o = __p.__offset(6); return o != 0 ? (gfl.tml.fb.Vector3?)(new gfl.tml.fb.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.tml.fb.SubTrack? SubTrackList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.tml.fb.SubTrack?)(new gfl.tml.fb.SubTrack()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubTrackListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.tml.fb.Conditions? ConditionsTable(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.tml.fb.Conditions?)(new gfl.tml.fb.Conditions()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionsTableLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ConditionsSource { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionsSourceBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetConditionsSourceBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetConditionsSourceArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<gfl.tml.fb.Track> CreateTrack(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.tml.fb.Vector3T color = null,
      VectorOffset subTrackListOffset = default(VectorOffset),
      VectorOffset conditionsTableOffset = default(VectorOffset),
      StringOffset conditionsSourceOffset = default(StringOffset)) {
    builder.StartTable(5);
    Track.AddConditionsSource(builder, conditionsSourceOffset);
    Track.AddConditionsTable(builder, conditionsTableOffset);
    Track.AddSubTrackList(builder, subTrackListOffset);
    Track.AddColor(builder, gfl.tml.fb.Vector3.Pack(builder, color));
    Track.AddName(builder, nameOffset);
    return Track.EndTrack(builder);
  }

  public static void StartTrack(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<gfl.tml.fb.Vector3> colorOffset) { builder.AddStruct(1, colorOffset.Value, 0); }
  public static void AddSubTrackList(FlatBufferBuilder builder, VectorOffset subTrackListOffset) { builder.AddOffset(2, subTrackListOffset.Value, 0); }
  public static VectorOffset CreateSubTrackListVector(FlatBufferBuilder builder, Offset<gfl.tml.fb.SubTrack>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubTrackListVectorBlock(FlatBufferBuilder builder, Offset<gfl.tml.fb.SubTrack>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubTrackListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionsTable(FlatBufferBuilder builder, VectorOffset conditionsTableOffset) { builder.AddOffset(3, conditionsTableOffset.Value, 0); }
  public static VectorOffset CreateConditionsTableVector(FlatBufferBuilder builder, Offset<gfl.tml.fb.Conditions>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionsTableVectorBlock(FlatBufferBuilder builder, Offset<gfl.tml.fb.Conditions>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionsTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionsSource(FlatBufferBuilder builder, StringOffset conditionsSourceOffset) { builder.AddOffset(4, conditionsSourceOffset.Value, 0); }
  public static Offset<gfl.tml.fb.Track> EndTrack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.Track>(o);
  }
  public TrackT UnPack() {
    var _o = new TrackT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackT _o) {
    _o.Name = this.Name;
    _o.Color = this.Color.HasValue ? this.Color.Value.UnPack() : null;
    _o.SubTrackList = new List<gfl.tml.fb.SubTrackT>();
    for (var _j = 0; _j < this.SubTrackListLength; ++_j) {_o.SubTrackList.Add(this.SubTrackList(_j).HasValue ? this.SubTrackList(_j).Value.UnPack() : null);}
    _o.ConditionsTable = new List<gfl.tml.fb.ConditionsT>();
    for (var _j = 0; _j < this.ConditionsTableLength; ++_j) {_o.ConditionsTable.Add(this.ConditionsTable(_j).HasValue ? this.ConditionsTable(_j).Value.UnPack() : null);}
    _o.ConditionsSource = this.ConditionsSource;
  }
  public static Offset<gfl.tml.fb.Track> Pack(FlatBufferBuilder builder, TrackT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.Track>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _subTrackList = default(VectorOffset);
    if (_o.SubTrackList != null) {
      var __subTrackList = new Offset<gfl.tml.fb.SubTrack>[_o.SubTrackList.Count];
      for (var _j = 0; _j < __subTrackList.Length; ++_j) { __subTrackList[_j] = gfl.tml.fb.SubTrack.Pack(builder, _o.SubTrackList[_j]); }
      _subTrackList = CreateSubTrackListVector(builder, __subTrackList);
    }
    var _conditionsTable = default(VectorOffset);
    if (_o.ConditionsTable != null) {
      var __conditionsTable = new Offset<gfl.tml.fb.Conditions>[_o.ConditionsTable.Count];
      for (var _j = 0; _j < __conditionsTable.Length; ++_j) { __conditionsTable[_j] = gfl.tml.fb.Conditions.Pack(builder, _o.ConditionsTable[_j]); }
      _conditionsTable = CreateConditionsTableVector(builder, __conditionsTable);
    }
    var _conditionsSource = _o.ConditionsSource == null ? default(StringOffset) : builder.CreateString(_o.ConditionsSource);
    return CreateTrack(
      builder,
      _name,
      _o.Color,
      _subTrackList,
      _conditionsTable,
      _conditionsSource);
  }
};

public class TrackT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public gfl.tml.fb.Vector3T Color { get; set; }
  [Newtonsoft.Json.JsonProperty("subTrackList")]
  public List<gfl.tml.fb.SubTrackT> SubTrackList { get; set; }
  [Newtonsoft.Json.JsonProperty("conditionsTable")]
  public List<gfl.tml.fb.ConditionsT> ConditionsTable { get; set; }
  [Newtonsoft.Json.JsonProperty("conditionsSource")]
  public string ConditionsSource { get; set; }

  public TrackT() {
    this.Name = null;
    this.Color = new gfl.tml.fb.Vector3T();
    this.SubTrackList = null;
    this.ConditionsTable = null;
    this.ConditionsSource = null;
  }
}

public struct TimelineData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TimelineData GetRootAsTimelineData(ByteBuffer _bb) { return GetRootAsTimelineData(_bb, new TimelineData()); }
  public static TimelineData GetRootAsTimelineData(ByteBuffer _bb, TimelineData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimelineData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.tml.fb.Track? TrackList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.tml.fb.Track?)(new gfl.tml.fb.Track()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TrackListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint FrameLength { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Fps { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)60; } }
  public uint NormalEventCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint AwaitableCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint CuePointCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<gfl.tml.fb.TimelineData> CreateTimelineData(FlatBufferBuilder builder,
      VectorOffset trackListOffset = default(VectorOffset),
      uint frameLength = 0,
      uint fps = 60,
      uint normalEventCount = 0,
      uint awaitableCount = 0,
      uint cuePointCount = 0) {
    builder.StartTable(6);
    TimelineData.AddCuePointCount(builder, cuePointCount);
    TimelineData.AddAwaitableCount(builder, awaitableCount);
    TimelineData.AddNormalEventCount(builder, normalEventCount);
    TimelineData.AddFps(builder, fps);
    TimelineData.AddFrameLength(builder, frameLength);
    TimelineData.AddTrackList(builder, trackListOffset);
    return TimelineData.EndTimelineData(builder);
  }

  public static void StartTimelineData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTrackList(FlatBufferBuilder builder, VectorOffset trackListOffset) { builder.AddOffset(0, trackListOffset.Value, 0); }
  public static VectorOffset CreateTrackListVector(FlatBufferBuilder builder, Offset<gfl.tml.fb.Track>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrackListVectorBlock(FlatBufferBuilder builder, Offset<gfl.tml.fb.Track>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTrackListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFrameLength(FlatBufferBuilder builder, uint frameLength) { builder.AddUint(1, frameLength, 0); }
  public static void AddFps(FlatBufferBuilder builder, uint fps) { builder.AddUint(2, fps, 60); }
  public static void AddNormalEventCount(FlatBufferBuilder builder, uint normalEventCount) { builder.AddUint(3, normalEventCount, 0); }
  public static void AddAwaitableCount(FlatBufferBuilder builder, uint awaitableCount) { builder.AddUint(4, awaitableCount, 0); }
  public static void AddCuePointCount(FlatBufferBuilder builder, uint cuePointCount) { builder.AddUint(5, cuePointCount, 0); }
  public static Offset<gfl.tml.fb.TimelineData> EndTimelineData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.TimelineData>(o);
  }
  public static void FinishTimelineDataBuffer(FlatBufferBuilder builder, Offset<gfl.tml.fb.TimelineData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTimelineDataBuffer(FlatBufferBuilder builder, Offset<gfl.tml.fb.TimelineData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TimelineDataT UnPack() {
    var _o = new TimelineDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimelineDataT _o) {
    _o.TrackList = new List<gfl.tml.fb.TrackT>();
    for (var _j = 0; _j < this.TrackListLength; ++_j) {_o.TrackList.Add(this.TrackList(_j).HasValue ? this.TrackList(_j).Value.UnPack() : null);}
    _o.FrameLength = this.FrameLength;
    _o.Fps = this.Fps;
    _o.NormalEventCount = this.NormalEventCount;
    _o.AwaitableCount = this.AwaitableCount;
    _o.CuePointCount = this.CuePointCount;
  }
  public static Offset<gfl.tml.fb.TimelineData> Pack(FlatBufferBuilder builder, TimelineDataT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.TimelineData>);
    var _trackList = default(VectorOffset);
    if (_o.TrackList != null) {
      var __trackList = new Offset<gfl.tml.fb.Track>[_o.TrackList.Count];
      for (var _j = 0; _j < __trackList.Length; ++_j) { __trackList[_j] = gfl.tml.fb.Track.Pack(builder, _o.TrackList[_j]); }
      _trackList = CreateTrackListVector(builder, __trackList);
    }
    return CreateTimelineData(
      builder,
      _trackList,
      _o.FrameLength,
      _o.Fps,
      _o.NormalEventCount,
      _o.AwaitableCount,
      _o.CuePointCount);
  }
};

public class TimelineDataT
{
  [Newtonsoft.Json.JsonProperty("trackList")]
  public List<gfl.tml.fb.TrackT> TrackList { get; set; }
  [Newtonsoft.Json.JsonProperty("frameLength")]
  public uint FrameLength { get; set; }
  [Newtonsoft.Json.JsonProperty("fps")]
  public uint Fps { get; set; }
  [Newtonsoft.Json.JsonProperty("normalEventCount")]
  public uint NormalEventCount { get; set; }
  [Newtonsoft.Json.JsonProperty("awaitableCount")]
  public uint AwaitableCount { get; set; }
  [Newtonsoft.Json.JsonProperty("cuePointCount")]
  public uint CuePointCount { get; set; }

  public TimelineDataT() {
    this.TrackList = null;
    this.FrameLength = 0;
    this.Fps = 60;
    this.NormalEventCount = 0;
    this.AwaitableCount = 0;
    this.CuePointCount = 0;
  }

  public static TimelineDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TimelineDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TimelineDataT DeserializeFromBinary(byte[] fbBuffer) {
    return TimelineData.GetRootAsTimelineData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TimelineData.FinishTimelineDataBuffer(fbb, TimelineData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
