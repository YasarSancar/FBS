// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.engine.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EventConditionType : ulong
{
  CONDITION_STATE = 0,
  CONDITION_TRIGGER = 1,
  CONDITION_CUSTOMFLAG = 2,
  CONDITION_INVALID = 3,
};

public struct EventCondition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventCondition GetRootAsEventCondition(ByteBuffer _bb) { return GetRootAsEventCondition(_bb, new EventCondition()); }
  public static EventCondition GetRootAsEventCondition(ByteBuffer _bb, EventCondition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventCondition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.engine.fb.EventConditionType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.engine.fb.EventConditionType)__p.bb.GetUlong(o + __p.bb_pos) : gfl.engine.fb.EventConditionType.CONDITION_STATE; } }
  public string EventObjectName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventObjectNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEventObjectNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEventObjectNameArray() { return __p.__vector_as_array<byte>(8); }
  public ulong EventObjectValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool IsInverted { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.engine.fb.EventCondition> CreateEventCondition(FlatBufferBuilder builder,
      StringOffset eventNameOffset = default(StringOffset),
      gfl.engine.fb.EventConditionType type = gfl.engine.fb.EventConditionType.CONDITION_STATE,
      StringOffset eventObjectNameOffset = default(StringOffset),
      ulong eventObjectValue = 0,
      bool isInverted = false) {
    builder.StartTable(5);
    EventCondition.AddEventObjectValue(builder, eventObjectValue);
    EventCondition.AddType(builder, type);
    EventCondition.AddEventObjectName(builder, eventObjectNameOffset);
    EventCondition.AddEventName(builder, eventNameOffset);
    EventCondition.AddIsInverted(builder, isInverted);
    return EventCondition.EndEventCondition(builder);
  }

  public static void StartEventCondition(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset eventNameOffset) { builder.AddOffset(0, eventNameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.engine.fb.EventConditionType type) { builder.AddUlong(1, (ulong)type, 0); }
  public static void AddEventObjectName(FlatBufferBuilder builder, StringOffset eventObjectNameOffset) { builder.AddOffset(2, eventObjectNameOffset.Value, 0); }
  public static void AddEventObjectValue(FlatBufferBuilder builder, ulong eventObjectValue) { builder.AddUlong(3, eventObjectValue, 0); }
  public static void AddIsInverted(FlatBufferBuilder builder, bool isInverted) { builder.AddBool(4, isInverted, false); }
  public static Offset<gfl.engine.fb.EventCondition> EndEventCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.EventCondition>(o);
  }
  public EventConditionT UnPack() {
    var _o = new EventConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventConditionT _o) {
    _o.EventName = this.EventName;
    _o.Type = this.Type;
    _o.EventObjectName = this.EventObjectName;
    _o.EventObjectValue = this.EventObjectValue;
    _o.IsInverted = this.IsInverted;
  }
  public static Offset<gfl.engine.fb.EventCondition> Pack(FlatBufferBuilder builder, EventConditionT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.EventCondition>);
    var _eventName = _o.EventName == null ? default(StringOffset) : builder.CreateString(_o.EventName);
    var _eventObjectName = _o.EventObjectName == null ? default(StringOffset) : builder.CreateString(_o.EventObjectName);
    return CreateEventCondition(
      builder,
      _eventName,
      _o.Type,
      _eventObjectName,
      _o.EventObjectValue,
      _o.IsInverted);
  }
};

public class EventConditionT
{
  [Newtonsoft.Json.JsonProperty("eventName")]
  public string EventName { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.engine.fb.EventConditionType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("eventObjectName")]
  public string EventObjectName { get; set; }
  [Newtonsoft.Json.JsonProperty("eventObjectValue")]
  public ulong EventObjectValue { get; set; }
  [Newtonsoft.Json.JsonProperty("isInverted")]
  public bool IsInverted { get; set; }

  public EventConditionT() {
    this.EventName = null;
    this.Type = gfl.engine.fb.EventConditionType.CONDITION_STATE;
    this.EventObjectName = null;
    this.EventObjectValue = 0;
    this.IsInverted = false;
  }
}

public struct EventConditionGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventConditionGroup GetRootAsEventConditionGroup(ByteBuffer _bb) { return GetRootAsEventConditionGroup(_bb, new EventConditionGroup()); }
  public static EventConditionGroup GetRootAsEventConditionGroup(ByteBuffer _bb, EventConditionGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventConditionGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.engine.fb.EventCondition? Conditions(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.engine.fb.EventCondition?)(new gfl.engine.fb.EventCondition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.engine.fb.EventConditionGroup> CreateEventConditionGroup(FlatBufferBuilder builder,
      VectorOffset conditionsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventConditionGroup.AddConditions(builder, conditionsOffset);
    return EventConditionGroup.EndEventConditionGroup(builder);
  }

  public static void StartEventConditionGroup(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddConditions(FlatBufferBuilder builder, VectorOffset conditionsOffset) { builder.AddOffset(0, conditionsOffset.Value, 0); }
  public static VectorOffset CreateConditionsVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventCondition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventCondition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.engine.fb.EventConditionGroup> EndEventConditionGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.EventConditionGroup>(o);
  }
  public EventConditionGroupT UnPack() {
    var _o = new EventConditionGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventConditionGroupT _o) {
    _o.Conditions = new List<gfl.engine.fb.EventConditionT>();
    for (var _j = 0; _j < this.ConditionsLength; ++_j) {_o.Conditions.Add(this.Conditions(_j).HasValue ? this.Conditions(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.engine.fb.EventConditionGroup> Pack(FlatBufferBuilder builder, EventConditionGroupT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.EventConditionGroup>);
    var _conditions = default(VectorOffset);
    if (_o.Conditions != null) {
      var __conditions = new Offset<gfl.engine.fb.EventCondition>[_o.Conditions.Count];
      for (var _j = 0; _j < __conditions.Length; ++_j) { __conditions[_j] = gfl.engine.fb.EventCondition.Pack(builder, _o.Conditions[_j]); }
      _conditions = CreateConditionsVector(builder, __conditions);
    }
    return CreateEventConditionGroup(
      builder,
      _conditions);
  }
};

public class EventConditionGroupT
{
  [Newtonsoft.Json.JsonProperty("conditions")]
  public List<gfl.engine.fb.EventConditionT> Conditions { get; set; }

  public EventConditionGroupT() {
    this.Conditions = null;
  }
}

public struct EventState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventState GetRootAsEventState(ByteBuffer _bb) { return GetRootAsEventState(_bb, new EventState()); }
  public static EventState GetRootAsEventState(ByteBuffer _bb, EventState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.engine.fb.EventConditionGroup? ConditionGroups(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.engine.fb.EventConditionGroup?)(new gfl.engine.fb.EventConditionGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionGroupsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Routes(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RoutesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.engine.fb.EventState> CreateEventState(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset conditionGroupsOffset = default(VectorOffset),
      VectorOffset routesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EventState.AddRoutes(builder, routesOffset);
    EventState.AddConditionGroups(builder, conditionGroupsOffset);
    EventState.AddName(builder, nameOffset);
    return EventState.EndEventState(builder);
  }

  public static void StartEventState(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddConditionGroups(FlatBufferBuilder builder, VectorOffset conditionGroupsOffset) { builder.AddOffset(1, conditionGroupsOffset.Value, 0); }
  public static VectorOffset CreateConditionGroupsVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventConditionGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionGroupsVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventConditionGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRoutes(FlatBufferBuilder builder, VectorOffset routesOffset) { builder.AddOffset(2, routesOffset.Value, 0); }
  public static VectorOffset CreateRoutesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoutesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRoutesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.engine.fb.EventState> EndEventState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.EventState>(o);
  }
  public EventStateT UnPack() {
    var _o = new EventStateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventStateT _o) {
    _o.Name = this.Name;
    _o.ConditionGroups = new List<gfl.engine.fb.EventConditionGroupT>();
    for (var _j = 0; _j < this.ConditionGroupsLength; ++_j) {_o.ConditionGroups.Add(this.ConditionGroups(_j).HasValue ? this.ConditionGroups(_j).Value.UnPack() : null);}
    _o.Routes = new List<string>();
    for (var _j = 0; _j < this.RoutesLength; ++_j) {_o.Routes.Add(this.Routes(_j));}
  }
  public static Offset<gfl.engine.fb.EventState> Pack(FlatBufferBuilder builder, EventStateT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.EventState>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _conditionGroups = default(VectorOffset);
    if (_o.ConditionGroups != null) {
      var __conditionGroups = new Offset<gfl.engine.fb.EventConditionGroup>[_o.ConditionGroups.Count];
      for (var _j = 0; _j < __conditionGroups.Length; ++_j) { __conditionGroups[_j] = gfl.engine.fb.EventConditionGroup.Pack(builder, _o.ConditionGroups[_j]); }
      _conditionGroups = CreateConditionGroupsVector(builder, __conditionGroups);
    }
    var _routes = default(VectorOffset);
    if (_o.Routes != null) {
      var __routes = new StringOffset[_o.Routes.Count];
      for (var _j = 0; _j < __routes.Length; ++_j) { __routes[_j] = builder.CreateString(_o.Routes[_j]); }
      _routes = CreateRoutesVector(builder, __routes);
    }
    return CreateEventState(
      builder,
      _name,
      _conditionGroups,
      _routes);
  }
};

public class EventStateT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("conditionGroups")]
  public List<gfl.engine.fb.EventConditionGroupT> ConditionGroups { get; set; }
  [Newtonsoft.Json.JsonProperty("routes")]
  public List<string> Routes { get; set; }

  public EventStateT() {
    this.Name = null;
    this.ConditionGroups = null;
    this.Routes = null;
  }
}

public struct EventPath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventPath GetRootAsEventPath(ByteBuffer _bb) { return GetRootAsEventPath(_bb, new EventPath()); }
  public static EventPath GetRootAsEventPath(ByteBuffer _bb, EventPath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventPath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.engine.fb.EventState? States(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.engine.fb.EventState?)(new gfl.engine.fb.EventState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StatesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Triggers(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TriggersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AttentionTakers(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttentionTakersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.engine.fb.Event? EventPaths(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.engine.fb.Event?)(new gfl.engine.fb.Event()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventPathsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string CustomFlags(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CustomFlagsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.engine.fb.EventPath> CreateEventPath(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset statesOffset = default(VectorOffset),
      VectorOffset triggersOffset = default(VectorOffset),
      VectorOffset attentionTakersOffset = default(VectorOffset),
      VectorOffset eventPathsOffset = default(VectorOffset),
      VectorOffset customFlagsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    EventPath.AddCustomFlags(builder, customFlagsOffset);
    EventPath.AddEventPaths(builder, eventPathsOffset);
    EventPath.AddAttentionTakers(builder, attentionTakersOffset);
    EventPath.AddTriggers(builder, triggersOffset);
    EventPath.AddStates(builder, statesOffset);
    EventPath.AddName(builder, nameOffset);
    return EventPath.EndEventPath(builder);
  }

  public static void StartEventPath(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddStates(FlatBufferBuilder builder, VectorOffset statesOffset) { builder.AddOffset(1, statesOffset.Value, 0); }
  public static VectorOffset CreateStatesVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventState>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriggers(FlatBufferBuilder builder, VectorOffset triggersOffset) { builder.AddOffset(2, triggersOffset.Value, 0); }
  public static VectorOffset CreateTriggersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTriggersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttentionTakers(FlatBufferBuilder builder, VectorOffset attentionTakersOffset) { builder.AddOffset(3, attentionTakersOffset.Value, 0); }
  public static VectorOffset CreateAttentionTakersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttentionTakersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttentionTakersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventPaths(FlatBufferBuilder builder, VectorOffset eventPathsOffset) { builder.AddOffset(4, eventPathsOffset.Value, 0); }
  public static VectorOffset CreateEventPathsVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventPathsVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomFlags(FlatBufferBuilder builder, VectorOffset customFlagsOffset) { builder.AddOffset(5, customFlagsOffset.Value, 0); }
  public static VectorOffset CreateCustomFlagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCustomFlagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomFlagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.engine.fb.EventPath> EndEventPath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.EventPath>(o);
  }
  public EventPathT UnPack() {
    var _o = new EventPathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventPathT _o) {
    _o.Name = this.Name;
    _o.States = new List<gfl.engine.fb.EventStateT>();
    for (var _j = 0; _j < this.StatesLength; ++_j) {_o.States.Add(this.States(_j).HasValue ? this.States(_j).Value.UnPack() : null);}
    _o.Triggers = new List<string>();
    for (var _j = 0; _j < this.TriggersLength; ++_j) {_o.Triggers.Add(this.Triggers(_j));}
    _o.AttentionTakers = new List<string>();
    for (var _j = 0; _j < this.AttentionTakersLength; ++_j) {_o.AttentionTakers.Add(this.AttentionTakers(_j));}
    _o.EventPaths = new List<gfl.engine.fb.EventT>();
    for (var _j = 0; _j < this.EventPathsLength; ++_j) {_o.EventPaths.Add(this.EventPaths(_j).HasValue ? this.EventPaths(_j).Value.UnPack() : null);}
    _o.CustomFlags = new List<string>();
    for (var _j = 0; _j < this.CustomFlagsLength; ++_j) {_o.CustomFlags.Add(this.CustomFlags(_j));}
  }
  public static Offset<gfl.engine.fb.EventPath> Pack(FlatBufferBuilder builder, EventPathT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.EventPath>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _states = default(VectorOffset);
    if (_o.States != null) {
      var __states = new Offset<gfl.engine.fb.EventState>[_o.States.Count];
      for (var _j = 0; _j < __states.Length; ++_j) { __states[_j] = gfl.engine.fb.EventState.Pack(builder, _o.States[_j]); }
      _states = CreateStatesVector(builder, __states);
    }
    var _triggers = default(VectorOffset);
    if (_o.Triggers != null) {
      var __triggers = new StringOffset[_o.Triggers.Count];
      for (var _j = 0; _j < __triggers.Length; ++_j) { __triggers[_j] = builder.CreateString(_o.Triggers[_j]); }
      _triggers = CreateTriggersVector(builder, __triggers);
    }
    var _attentionTakers = default(VectorOffset);
    if (_o.AttentionTakers != null) {
      var __attentionTakers = new StringOffset[_o.AttentionTakers.Count];
      for (var _j = 0; _j < __attentionTakers.Length; ++_j) { __attentionTakers[_j] = builder.CreateString(_o.AttentionTakers[_j]); }
      _attentionTakers = CreateAttentionTakersVector(builder, __attentionTakers);
    }
    var _eventPaths = default(VectorOffset);
    if (_o.EventPaths != null) {
      var __eventPaths = new Offset<gfl.engine.fb.Event>[_o.EventPaths.Count];
      for (var _j = 0; _j < __eventPaths.Length; ++_j) { __eventPaths[_j] = gfl.engine.fb.Event.Pack(builder, _o.EventPaths[_j]); }
      _eventPaths = CreateEventPathsVector(builder, __eventPaths);
    }
    var _customFlags = default(VectorOffset);
    if (_o.CustomFlags != null) {
      var __customFlags = new StringOffset[_o.CustomFlags.Count];
      for (var _j = 0; _j < __customFlags.Length; ++_j) { __customFlags[_j] = builder.CreateString(_o.CustomFlags[_j]); }
      _customFlags = CreateCustomFlagsVector(builder, __customFlags);
    }
    return CreateEventPath(
      builder,
      _name,
      _states,
      _triggers,
      _attentionTakers,
      _eventPaths,
      _customFlags);
  }
};

public class EventPathT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("states")]
  public List<gfl.engine.fb.EventStateT> States { get; set; }
  [Newtonsoft.Json.JsonProperty("triggers")]
  public List<string> Triggers { get; set; }
  [Newtonsoft.Json.JsonProperty("attentionTakers")]
  public List<string> AttentionTakers { get; set; }
  [Newtonsoft.Json.JsonProperty("eventPaths")]
  public List<gfl.engine.fb.EventT> EventPaths { get; set; }
  [Newtonsoft.Json.JsonProperty("customFlags")]
  public List<string> CustomFlags { get; set; }

  public EventPathT() {
    this.Name = null;
    this.States = null;
    this.Triggers = null;
    this.AttentionTakers = null;
    this.EventPaths = null;
    this.CustomFlags = null;
  }
}

public struct Event : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Event GetRootAsEvent(ByteBuffer _bb) { return GetRootAsEvent(_bb, new Event()); }
  public static Event GetRootAsEvent(ByteBuffer _bb, Event obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.engine.fb.EventState? States(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.engine.fb.EventState?)(new gfl.engine.fb.EventState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int StatesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Triggers(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TriggersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AttentionTakers(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttentionTakersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.engine.fb.EventPath? EventPaths(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.engine.fb.EventPath?)(new gfl.engine.fb.EventPath()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventPathsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string CustomFlags(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CustomFlagsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.engine.fb.Event> CreateEvent(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset statesOffset = default(VectorOffset),
      VectorOffset triggersOffset = default(VectorOffset),
      VectorOffset attentionTakersOffset = default(VectorOffset),
      VectorOffset eventPathsOffset = default(VectorOffset),
      VectorOffset customFlagsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Event.AddCustomFlags(builder, customFlagsOffset);
    Event.AddEventPaths(builder, eventPathsOffset);
    Event.AddAttentionTakers(builder, attentionTakersOffset);
    Event.AddTriggers(builder, triggersOffset);
    Event.AddStates(builder, statesOffset);
    Event.AddName(builder, nameOffset);
    return Event.EndEvent(builder);
  }

  public static void StartEvent(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddStates(FlatBufferBuilder builder, VectorOffset statesOffset) { builder.AddOffset(1, statesOffset.Value, 0); }
  public static VectorOffset CreateStatesVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStatesVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventState>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriggers(FlatBufferBuilder builder, VectorOffset triggersOffset) { builder.AddOffset(2, triggersOffset.Value, 0); }
  public static VectorOffset CreateTriggersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTriggersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTriggersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAttentionTakers(FlatBufferBuilder builder, VectorOffset attentionTakersOffset) { builder.AddOffset(3, attentionTakersOffset.Value, 0); }
  public static VectorOffset CreateAttentionTakersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttentionTakersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttentionTakersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventPaths(FlatBufferBuilder builder, VectorOffset eventPathsOffset) { builder.AddOffset(4, eventPathsOffset.Value, 0); }
  public static VectorOffset CreateEventPathsVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventPath>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventPathsVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventPath>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomFlags(FlatBufferBuilder builder, VectorOffset customFlagsOffset) { builder.AddOffset(5, customFlagsOffset.Value, 0); }
  public static VectorOffset CreateCustomFlagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCustomFlagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomFlagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.engine.fb.Event> EndEvent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.Event>(o);
  }
  public EventT UnPack() {
    var _o = new EventT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventT _o) {
    _o.Name = this.Name;
    _o.States = new List<gfl.engine.fb.EventStateT>();
    for (var _j = 0; _j < this.StatesLength; ++_j) {_o.States.Add(this.States(_j).HasValue ? this.States(_j).Value.UnPack() : null);}
    _o.Triggers = new List<string>();
    for (var _j = 0; _j < this.TriggersLength; ++_j) {_o.Triggers.Add(this.Triggers(_j));}
    _o.AttentionTakers = new List<string>();
    for (var _j = 0; _j < this.AttentionTakersLength; ++_j) {_o.AttentionTakers.Add(this.AttentionTakers(_j));}
    _o.EventPaths = new List<gfl.engine.fb.EventPathT>();
    for (var _j = 0; _j < this.EventPathsLength; ++_j) {_o.EventPaths.Add(this.EventPaths(_j).HasValue ? this.EventPaths(_j).Value.UnPack() : null);}
    _o.CustomFlags = new List<string>();
    for (var _j = 0; _j < this.CustomFlagsLength; ++_j) {_o.CustomFlags.Add(this.CustomFlags(_j));}
  }
  public static Offset<gfl.engine.fb.Event> Pack(FlatBufferBuilder builder, EventT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.Event>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _states = default(VectorOffset);
    if (_o.States != null) {
      var __states = new Offset<gfl.engine.fb.EventState>[_o.States.Count];
      for (var _j = 0; _j < __states.Length; ++_j) { __states[_j] = gfl.engine.fb.EventState.Pack(builder, _o.States[_j]); }
      _states = CreateStatesVector(builder, __states);
    }
    var _triggers = default(VectorOffset);
    if (_o.Triggers != null) {
      var __triggers = new StringOffset[_o.Triggers.Count];
      for (var _j = 0; _j < __triggers.Length; ++_j) { __triggers[_j] = builder.CreateString(_o.Triggers[_j]); }
      _triggers = CreateTriggersVector(builder, __triggers);
    }
    var _attentionTakers = default(VectorOffset);
    if (_o.AttentionTakers != null) {
      var __attentionTakers = new StringOffset[_o.AttentionTakers.Count];
      for (var _j = 0; _j < __attentionTakers.Length; ++_j) { __attentionTakers[_j] = builder.CreateString(_o.AttentionTakers[_j]); }
      _attentionTakers = CreateAttentionTakersVector(builder, __attentionTakers);
    }
    var _eventPaths = default(VectorOffset);
    if (_o.EventPaths != null) {
      var __eventPaths = new Offset<gfl.engine.fb.EventPath>[_o.EventPaths.Count];
      for (var _j = 0; _j < __eventPaths.Length; ++_j) { __eventPaths[_j] = gfl.engine.fb.EventPath.Pack(builder, _o.EventPaths[_j]); }
      _eventPaths = CreateEventPathsVector(builder, __eventPaths);
    }
    var _customFlags = default(VectorOffset);
    if (_o.CustomFlags != null) {
      var __customFlags = new StringOffset[_o.CustomFlags.Count];
      for (var _j = 0; _j < __customFlags.Length; ++_j) { __customFlags[_j] = builder.CreateString(_o.CustomFlags[_j]); }
      _customFlags = CreateCustomFlagsVector(builder, __customFlags);
    }
    return CreateEvent(
      builder,
      _name,
      _states,
      _triggers,
      _attentionTakers,
      _eventPaths,
      _customFlags);
  }
};

public class EventT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("states")]
  public List<gfl.engine.fb.EventStateT> States { get; set; }
  [Newtonsoft.Json.JsonProperty("triggers")]
  public List<string> Triggers { get; set; }
  [Newtonsoft.Json.JsonProperty("attentionTakers")]
  public List<string> AttentionTakers { get; set; }
  [Newtonsoft.Json.JsonProperty("eventPaths")]
  public List<gfl.engine.fb.EventPathT> EventPaths { get; set; }
  [Newtonsoft.Json.JsonProperty("customFlags")]
  public List<string> CustomFlags { get; set; }

  public EventT() {
    this.Name = null;
    this.States = null;
    this.Triggers = null;
    this.AttentionTakers = null;
    this.EventPaths = null;
    this.CustomFlags = null;
  }
}

public struct EventSystem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventSystem GetRootAsEventSystem(ByteBuffer _bb) { return GetRootAsEventSystem(_bb, new EventSystem()); }
  public static EventSystem GetRootAsEventSystem(ByteBuffer _bb, EventSystem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventSystem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)1; } }
  public gfl.engine.fb.Event? Events(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.engine.fb.Event?)(new gfl.engine.fb.Event()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.engine.fb.EventSystem> CreateEventSystem(FlatBufferBuilder builder,
      uint version = 1,
      VectorOffset eventsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    EventSystem.AddEvents(builder, eventsOffset);
    EventSystem.AddVersion(builder, version);
    return EventSystem.EndEventSystem(builder);
  }

  public static void StartEventSystem(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 1); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(1, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<gfl.engine.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventsVectorBlock(FlatBufferBuilder builder, Offset<gfl.engine.fb.Event>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.engine.fb.EventSystem> EndEventSystem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.engine.fb.EventSystem>(o);
  }
  public static void FinishEventSystemBuffer(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventSystem> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEventSystemBuffer(FlatBufferBuilder builder, Offset<gfl.engine.fb.EventSystem> offset) { builder.FinishSizePrefixed(offset.Value); }
  public EventSystemT UnPack() {
    var _o = new EventSystemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventSystemT _o) {
    _o.Version = this.Version;
    _o.Events = new List<gfl.engine.fb.EventT>();
    for (var _j = 0; _j < this.EventsLength; ++_j) {_o.Events.Add(this.Events(_j).HasValue ? this.Events(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.engine.fb.EventSystem> Pack(FlatBufferBuilder builder, EventSystemT _o) {
    if (_o == null) return default(Offset<gfl.engine.fb.EventSystem>);
    var _events = default(VectorOffset);
    if (_o.Events != null) {
      var __events = new Offset<gfl.engine.fb.Event>[_o.Events.Count];
      for (var _j = 0; _j < __events.Length; ++_j) { __events[_j] = gfl.engine.fb.Event.Pack(builder, _o.Events[_j]); }
      _events = CreateEventsVector(builder, __events);
    }
    return CreateEventSystem(
      builder,
      _o.Version,
      _events);
  }
};

public class EventSystemT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public uint Version { get; set; }
  [Newtonsoft.Json.JsonProperty("events")]
  public List<gfl.engine.fb.EventT> Events { get; set; }

  public EventSystemT() {
    this.Version = 1;
    this.Events = null;
  }

  public static EventSystemT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<EventSystemT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static EventSystemT DeserializeFromBinary(byte[] fbBuffer) {
    return EventSystem.GetRootAsEventSystem(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EventSystem.FinishEventSystemBuffer(fbb, EventSystem.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
