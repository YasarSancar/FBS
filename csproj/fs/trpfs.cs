// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.fs.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ArchiveStorage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ArchiveStorage GetRootAsArchiveStorage(ByteBuffer _bb) { return GetRootAsArchiveStorage(_bb, new ArchiveStorage()); }
  public static ArchiveStorage GetRootAsArchiveStorage(ByteBuffer _bb, ArchiveStorage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArchiveStorage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong PathHashs(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int PathHashsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetPathHashsBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetPathHashsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetPathHashsArray() { return __p.__vector_as_array<ulong>(4); }
  public ulong FileOffsets(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int FileOffsetsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetFileOffsetsBytes() { return __p.__vector_as_span<ulong>(6, 8); }
#else
  public ArraySegment<byte>? GetFileOffsetsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public ulong[] GetFileOffsetsArray() { return __p.__vector_as_array<ulong>(6); }

  public static Offset<gfl.fs.fb.ArchiveStorage> CreateArchiveStorage(FlatBufferBuilder builder,
      VectorOffset pathHashsOffset = default(VectorOffset),
      VectorOffset fileOffsetsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ArchiveStorage.AddFileOffsets(builder, fileOffsetsOffset);
    ArchiveStorage.AddPathHashs(builder, pathHashsOffset);
    return ArchiveStorage.EndArchiveStorage(builder);
  }

  public static void StartArchiveStorage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPathHashs(FlatBufferBuilder builder, VectorOffset pathHashsOffset) { builder.AddOffset(0, pathHashsOffset.Value, 0); }
  public static VectorOffset CreatePathHashsVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePathHashsVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartPathHashsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddFileOffsets(FlatBufferBuilder builder, VectorOffset fileOffsetsOffset) { builder.AddOffset(1, fileOffsetsOffset.Value, 0); }
  public static VectorOffset CreateFileOffsetsVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFileOffsetsVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartFileOffsetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<gfl.fs.fb.ArchiveStorage> EndArchiveStorage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.fs.fb.ArchiveStorage>(o);
  }
  public static void FinishArchiveStorageBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.ArchiveStorage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedArchiveStorageBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.ArchiveStorage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ArchiveStorageT UnPack() {
    var _o = new ArchiveStorageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArchiveStorageT _o) {
    _o.PathHashs = new List<ulong>();
    for (var _j = 0; _j < this.PathHashsLength; ++_j) {_o.PathHashs.Add(this.PathHashs(_j));}
    _o.FileOffsets = new List<ulong>();
    for (var _j = 0; _j < this.FileOffsetsLength; ++_j) {_o.FileOffsets.Add(this.FileOffsets(_j));}
  }
  public static Offset<gfl.fs.fb.ArchiveStorage> Pack(FlatBufferBuilder builder, ArchiveStorageT _o) {
    if (_o == null) return default(Offset<gfl.fs.fb.ArchiveStorage>);
    var _pathHashs = default(VectorOffset);
    if (_o.PathHashs != null) {
      var __pathHashs = _o.PathHashs.ToArray();
      _pathHashs = CreatePathHashsVector(builder, __pathHashs);
    }
    var _fileOffsets = default(VectorOffset);
    if (_o.FileOffsets != null) {
      var __fileOffsets = _o.FileOffsets.ToArray();
      _fileOffsets = CreateFileOffsetsVector(builder, __fileOffsets);
    }
    return CreateArchiveStorage(
      builder,
      _pathHashs,
      _fileOffsets);
  }
};

public class ArchiveStorageT
{
  [Newtonsoft.Json.JsonProperty("pathHashs")]
  public List<ulong> PathHashs { get; set; }
  [Newtonsoft.Json.JsonProperty("fileOffsets")]
  public List<ulong> FileOffsets { get; set; }

  public ArchiveStorageT() {
    this.PathHashs = null;
    this.FileOffsets = null;
  }

  public static ArchiveStorageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveStorageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ArchiveStorageT DeserializeFromBinary(byte[] fbBuffer) {
    return ArchiveStorage.GetRootAsArchiveStorage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ArchiveStorage.FinishArchiveStorageBuffer(fbb, ArchiveStorage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
