// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.fs.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FileInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FileInfo GetRootAsFileInfo(ByteBuffer _bb) { return GetRootAsFileInfo(_bb, new FileInfo()); }
  public static FileInfo GetRootAsFileInfo(ByteBuffer _bb, FileInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public gfl.fs.fb.FileMeta? FileMeta { get { int o = __p.__offset(6); return o != 0 ? (gfl.fs.fb.FileMeta?)(new gfl.fs.fb.FileMeta()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.fs.fb.FileInfo> CreateFileInfo(FlatBufferBuilder builder,
      ulong index = 0,
      Offset<gfl.fs.fb.FileMeta> fileMetaOffset = default(Offset<gfl.fs.fb.FileMeta>)) {
    builder.StartTable(2);
    FileInfo.AddIndex(builder, index);
    FileInfo.AddFileMeta(builder, fileMetaOffset);
    return FileInfo.EndFileInfo(builder);
  }

  public static void StartFileInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIndex(FlatBufferBuilder builder, ulong index) { builder.AddUlong(0, index, 0); }
  public static void AddFileMeta(FlatBufferBuilder builder, Offset<gfl.fs.fb.FileMeta> fileMetaOffset) { builder.AddOffset(1, fileMetaOffset.Value, 0); }
  public static Offset<gfl.fs.fb.FileInfo> EndFileInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.fs.fb.FileInfo>(o);
  }
  public FileInfoT UnPack() {
    var _o = new FileInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FileInfoT _o) {
    _o.Index = this.Index;
    _o.FileMeta = this.FileMeta.HasValue ? this.FileMeta.Value.UnPack() : null;
  }
  public static Offset<gfl.fs.fb.FileInfo> Pack(FlatBufferBuilder builder, FileInfoT _o) {
    if (_o == null) return default(Offset<gfl.fs.fb.FileInfo>);
    var _fileMeta = _o.FileMeta == null ? default(Offset<gfl.fs.fb.FileMeta>) : gfl.fs.fb.FileMeta.Pack(builder, _o.FileMeta);
    return CreateFileInfo(
      builder,
      _o.Index,
      _fileMeta);
  }
};

public class FileInfoT
{
  [Newtonsoft.Json.JsonProperty("index")]
  public ulong Index { get; set; }
  [Newtonsoft.Json.JsonProperty("fileMeta")]
  public gfl.fs.fb.FileMetaT FileMeta { get; set; }

  public FileInfoT() {
    this.Index = 0;
    this.FileMeta = null;
  }
}

public struct ArchiveInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ArchiveInfo GetRootAsArchiveInfo(ByteBuffer _bb) { return GetRootAsArchiveInfo(_bb, new ArchiveInfo()); }
  public static ArchiveInfo GetRootAsArchiveInfo(ByteBuffer _bb, ArchiveInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArchiveInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong Count { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<gfl.fs.fb.ArchiveInfo> CreateArchiveInfo(FlatBufferBuilder builder,
      ulong size = 0,
      ulong count = 0) {
    builder.StartTable(2);
    ArchiveInfo.AddCount(builder, count);
    ArchiveInfo.AddSize(builder, size);
    return ArchiveInfo.EndArchiveInfo(builder);
  }

  public static void StartArchiveInfo(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSize(FlatBufferBuilder builder, ulong size) { builder.AddUlong(0, size, 0); }
  public static void AddCount(FlatBufferBuilder builder, ulong count) { builder.AddUlong(1, count, 0); }
  public static Offset<gfl.fs.fb.ArchiveInfo> EndArchiveInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.fs.fb.ArchiveInfo>(o);
  }
  public ArchiveInfoT UnPack() {
    var _o = new ArchiveInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArchiveInfoT _o) {
    _o.Size = this.Size;
    _o.Count = this.Count;
  }
  public static Offset<gfl.fs.fb.ArchiveInfo> Pack(FlatBufferBuilder builder, ArchiveInfoT _o) {
    if (_o == null) return default(Offset<gfl.fs.fb.ArchiveInfo>);
    return CreateArchiveInfo(
      builder,
      _o.Size,
      _o.Count);
  }
};

public class ArchiveInfoT
{
  [Newtonsoft.Json.JsonProperty("size")]
  public ulong Size { get; set; }
  [Newtonsoft.Json.JsonProperty("count")]
  public ulong Count { get; set; }

  public ArchiveInfoT() {
    this.Size = 0;
    this.Count = 0;
  }
}

public struct PackFileDictionary : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PackFileDictionary GetRootAsPackFileDictionary(ByteBuffer _bb) { return GetRootAsPackFileDictionary(_bb, new PackFileDictionary()); }
  public static PackFileDictionary GetRootAsPackFileDictionary(ByteBuffer _bb, PackFileDictionary obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PackFileDictionary __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Hashs(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int HashsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetHashsBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetHashsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetHashsArray() { return __p.__vector_as_array<ulong>(4); }
  public string Paths(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.fs.fb.FileInfo? Datas(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.fs.fb.FileInfo?)(new gfl.fs.fb.FileInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatasLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.fs.fb.ArchiveInfo? Infos(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.fs.fb.ArchiveInfo?)(new gfl.fs.fb.ArchiveInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InfosLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.fs.fb.PackFileDictionary> CreatePackFileDictionary(FlatBufferBuilder builder,
      VectorOffset hashsOffset = default(VectorOffset),
      VectorOffset pathsOffset = default(VectorOffset),
      VectorOffset datasOffset = default(VectorOffset),
      VectorOffset infosOffset = default(VectorOffset)) {
    builder.StartTable(4);
    PackFileDictionary.AddInfos(builder, infosOffset);
    PackFileDictionary.AddDatas(builder, datasOffset);
    PackFileDictionary.AddPaths(builder, pathsOffset);
    PackFileDictionary.AddHashs(builder, hashsOffset);
    return PackFileDictionary.EndPackFileDictionary(builder);
  }

  public static void StartPackFileDictionary(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddHashs(FlatBufferBuilder builder, VectorOffset hashsOffset) { builder.AddOffset(0, hashsOffset.Value, 0); }
  public static VectorOffset CreateHashsVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHashsVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartHashsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPaths(FlatBufferBuilder builder, VectorOffset pathsOffset) { builder.AddOffset(1, pathsOffset.Value, 0); }
  public static VectorOffset CreatePathsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDatas(FlatBufferBuilder builder, VectorOffset datasOffset) { builder.AddOffset(2, datasOffset.Value, 0); }
  public static VectorOffset CreateDatasVector(FlatBufferBuilder builder, Offset<gfl.fs.fb.FileInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, Offset<gfl.fs.fb.FileInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInfos(FlatBufferBuilder builder, VectorOffset infosOffset) { builder.AddOffset(3, infosOffset.Value, 0); }
  public static VectorOffset CreateInfosVector(FlatBufferBuilder builder, Offset<gfl.fs.fb.ArchiveInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInfosVectorBlock(FlatBufferBuilder builder, Offset<gfl.fs.fb.ArchiveInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInfosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.fs.fb.PackFileDictionary> EndPackFileDictionary(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.fs.fb.PackFileDictionary>(o);
  }
  public static void FinishPackFileDictionaryBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.PackFileDictionary> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPackFileDictionaryBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.PackFileDictionary> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PackFileDictionaryT UnPack() {
    var _o = new PackFileDictionaryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PackFileDictionaryT _o) {
    _o.Hashs = new List<ulong>();
    for (var _j = 0; _j < this.HashsLength; ++_j) {_o.Hashs.Add(this.Hashs(_j));}
    _o.Paths = new List<string>();
    for (var _j = 0; _j < this.PathsLength; ++_j) {_o.Paths.Add(this.Paths(_j));}
    _o.Datas = new List<gfl.fs.fb.FileInfoT>();
    for (var _j = 0; _j < this.DatasLength; ++_j) {_o.Datas.Add(this.Datas(_j).HasValue ? this.Datas(_j).Value.UnPack() : null);}
    _o.Infos = new List<gfl.fs.fb.ArchiveInfoT>();
    for (var _j = 0; _j < this.InfosLength; ++_j) {_o.Infos.Add(this.Infos(_j).HasValue ? this.Infos(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.fs.fb.PackFileDictionary> Pack(FlatBufferBuilder builder, PackFileDictionaryT _o) {
    if (_o == null) return default(Offset<gfl.fs.fb.PackFileDictionary>);
    var _hashs = default(VectorOffset);
    if (_o.Hashs != null) {
      var __hashs = _o.Hashs.ToArray();
      _hashs = CreateHashsVector(builder, __hashs);
    }
    var _paths = default(VectorOffset);
    if (_o.Paths != null) {
      var __paths = new StringOffset[_o.Paths.Count];
      for (var _j = 0; _j < __paths.Length; ++_j) { __paths[_j] = builder.CreateString(_o.Paths[_j]); }
      _paths = CreatePathsVector(builder, __paths);
    }
    var _datas = default(VectorOffset);
    if (_o.Datas != null) {
      var __datas = new Offset<gfl.fs.fb.FileInfo>[_o.Datas.Count];
      for (var _j = 0; _j < __datas.Length; ++_j) { __datas[_j] = gfl.fs.fb.FileInfo.Pack(builder, _o.Datas[_j]); }
      _datas = CreateDatasVector(builder, __datas);
    }
    var _infos = default(VectorOffset);
    if (_o.Infos != null) {
      var __infos = new Offset<gfl.fs.fb.ArchiveInfo>[_o.Infos.Count];
      for (var _j = 0; _j < __infos.Length; ++_j) { __infos[_j] = gfl.fs.fb.ArchiveInfo.Pack(builder, _o.Infos[_j]); }
      _infos = CreateInfosVector(builder, __infos);
    }
    return CreatePackFileDictionary(
      builder,
      _hashs,
      _paths,
      _datas,
      _infos);
  }
};

public class PackFileDictionaryT
{
  [Newtonsoft.Json.JsonProperty("hashs")]
  public List<ulong> Hashs { get; set; }
  [Newtonsoft.Json.JsonProperty("paths")]
  public List<string> Paths { get; set; }
  [Newtonsoft.Json.JsonProperty("datas")]
  public List<gfl.fs.fb.FileInfoT> Datas { get; set; }
  [Newtonsoft.Json.JsonProperty("infos")]
  public List<gfl.fs.fb.ArchiveInfoT> Infos { get; set; }

  public PackFileDictionaryT() {
    this.Hashs = null;
    this.Paths = null;
    this.Datas = null;
    this.Infos = null;
  }

  public static PackFileDictionaryT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PackFileDictionaryT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PackFileDictionaryT DeserializeFromBinary(byte[] fbBuffer) {
    return PackFileDictionary.GetRootAsPackFileDictionary(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PackFileDictionary.FinishPackFileDictionaryBuffer(fbb, PackFileDictionary.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
