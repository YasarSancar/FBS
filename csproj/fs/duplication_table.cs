// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.fs.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HashToFilePathTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HashToFilePathTable GetRootAsHashToFilePathTable(ByteBuffer _bb) { return GetRootAsHashToFilePathTable(_bb, new HashToFilePathTable()); }
  public static HashToFilePathTable GetRootAsHashToFilePathTable(ByteBuffer _bb, HashToFilePathTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HashToFilePathTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Hashlist(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
  public int HashlistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetHashlistBytes() { return __p.__vector_as_span<ulong>(4, 8); }
#else
  public ArraySegment<byte>? GetHashlistBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ulong[] GetHashlistArray() { return __p.__vector_as_array<ulong>(4); }
  public string Pathlist(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PathlistLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.fs.fb.HashToFilePathTable> CreateHashToFilePathTable(FlatBufferBuilder builder,
      VectorOffset hashlistOffset = default(VectorOffset),
      VectorOffset pathlistOffset = default(VectorOffset)) {
    builder.StartTable(2);
    HashToFilePathTable.AddPathlist(builder, pathlistOffset);
    HashToFilePathTable.AddHashlist(builder, hashlistOffset);
    return HashToFilePathTable.EndHashToFilePathTable(builder);
  }

  public static void StartHashToFilePathTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddHashlist(FlatBufferBuilder builder, VectorOffset hashlistOffset) { builder.AddOffset(0, hashlistOffset.Value, 0); }
  public static VectorOffset CreateHashlistVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHashlistVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartHashlistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddPathlist(FlatBufferBuilder builder, VectorOffset pathlistOffset) { builder.AddOffset(1, pathlistOffset.Value, 0); }
  public static VectorOffset CreatePathlistVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePathlistVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPathlistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.fs.fb.HashToFilePathTable> EndHashToFilePathTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.fs.fb.HashToFilePathTable>(o);
  }
  public static void FinishHashToFilePathTableBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.HashToFilePathTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedHashToFilePathTableBuffer(FlatBufferBuilder builder, Offset<gfl.fs.fb.HashToFilePathTable> offset) { builder.FinishSizePrefixed(offset.Value); }
  public HashToFilePathTableT UnPack() {
    var _o = new HashToFilePathTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HashToFilePathTableT _o) {
    _o.Hashlist = new List<ulong>();
    for (var _j = 0; _j < this.HashlistLength; ++_j) {_o.Hashlist.Add(this.Hashlist(_j));}
    _o.Pathlist = new List<string>();
    for (var _j = 0; _j < this.PathlistLength; ++_j) {_o.Pathlist.Add(this.Pathlist(_j));}
  }
  public static Offset<gfl.fs.fb.HashToFilePathTable> Pack(FlatBufferBuilder builder, HashToFilePathTableT _o) {
    if (_o == null) return default(Offset<gfl.fs.fb.HashToFilePathTable>);
    var _hashlist = default(VectorOffset);
    if (_o.Hashlist != null) {
      var __hashlist = _o.Hashlist.ToArray();
      _hashlist = CreateHashlistVector(builder, __hashlist);
    }
    var _pathlist = default(VectorOffset);
    if (_o.Pathlist != null) {
      var __pathlist = new StringOffset[_o.Pathlist.Count];
      for (var _j = 0; _j < __pathlist.Length; ++_j) { __pathlist[_j] = builder.CreateString(_o.Pathlist[_j]); }
      _pathlist = CreatePathlistVector(builder, __pathlist);
    }
    return CreateHashToFilePathTable(
      builder,
      _hashlist,
      _pathlist);
  }
};

public class HashToFilePathTableT
{
  [Newtonsoft.Json.JsonProperty("hashlist")]
  public List<ulong> Hashlist { get; set; }
  [Newtonsoft.Json.JsonProperty("pathlist")]
  public List<string> Pathlist { get; set; }

  public HashToFilePathTableT() {
    this.Hashlist = null;
    this.Pathlist = null;
  }

  public static HashToFilePathTableT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<HashToFilePathTableT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static HashToFilePathTableT DeserializeFromBinary(byte[] fbBuffer) {
    return HashToFilePathTable.GetRootAsHashToFilePathTable(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    HashToFilePathTable.FinishHashToFilePathTableBuffer(fbb, HashToFilePathTable.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
