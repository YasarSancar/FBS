// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.debug_framework.fb.light
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightChangeOffsetTableData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightChangeOffsetTableData GetRootAsLightChangeOffsetTableData(ByteBuffer _bb) { return GetRootAsLightChangeOffsetTableData(_bb, new LightChangeOffsetTableData()); }
  public static LightChangeOffsetTableData GetRootAsLightChangeOffsetTableData(ByteBuffer _bb, LightChangeOffsetTableData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightChangeOffsetTableData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string OffsetTypeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetTypeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOffsetTypeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOffsetTypeNameArray() { return __p.__vector_as_array<byte>(4); }
  public float BlendWeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData> CreateLightChangeOffsetTableData(FlatBufferBuilder builder,
      StringOffset offsetTypeNameOffset = default(StringOffset),
      float blendWeight = 0.0f) {
    builder.StartTable(2);
    LightChangeOffsetTableData.AddBlendWeight(builder, blendWeight);
    LightChangeOffsetTableData.AddOffsetTypeName(builder, offsetTypeNameOffset);
    return LightChangeOffsetTableData.EndLightChangeOffsetTableData(builder);
  }

  public static void StartLightChangeOffsetTableData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOffsetTypeName(FlatBufferBuilder builder, StringOffset offsetTypeNameOffset) { builder.AddOffset(0, offsetTypeNameOffset.Value, 0); }
  public static void AddBlendWeight(FlatBufferBuilder builder, float blendWeight) { builder.AddFloat(1, blendWeight, 0.0f); }
  public static Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData> EndLightChangeOffsetTableData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData>(o);
  }
  public static void FinishLightChangeOffsetTableDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLightChangeOffsetTableDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LightChangeOffsetTableDataT UnPack() {
    var _o = new LightChangeOffsetTableDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightChangeOffsetTableDataT _o) {
    _o.OffsetTypeName = this.OffsetTypeName;
    _o.BlendWeight = this.BlendWeight;
  }
  public static Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData> Pack(FlatBufferBuilder builder, LightChangeOffsetTableDataT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.light.LightChangeOffsetTableData>);
    var _offsetTypeName = _o.OffsetTypeName == null ? default(StringOffset) : builder.CreateString(_o.OffsetTypeName);
    return CreateLightChangeOffsetTableData(
      builder,
      _offsetTypeName,
      _o.BlendWeight);
  }
};

public class LightChangeOffsetTableDataT
{
  [Newtonsoft.Json.JsonProperty("offsetTypeName")]
  public string OffsetTypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("blendWeight")]
  public float BlendWeight { get; set; }

  public LightChangeOffsetTableDataT() {
    this.OffsetTypeName = null;
    this.BlendWeight = 0.0f;
  }

  public static LightChangeOffsetTableDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LightChangeOffsetTableDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LightChangeOffsetTableDataT DeserializeFromBinary(byte[] fbBuffer) {
    return LightChangeOffsetTableData.GetRootAsLightChangeOffsetTableData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LightChangeOffsetTableData.FinishLightChangeOffsetTableDataBuffer(fbb, LightChangeOffsetTableData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
