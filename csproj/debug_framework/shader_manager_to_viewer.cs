// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.debug_framework.fb.shader.viewer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MessageType : byte
{
  NONE = 0,
  ReloadShaderMessage = 1,
  ReloadTechniqueDefListMessage = 2,
};

public class MessageTypeUnion {
  public MessageType Type { get; set; }
  public object Value { get; set; }

  public MessageTypeUnion() {
    this.Type = MessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.debug_framework.fb.shader.viewer.ReloadShaderMessageT AsReloadShaderMessage() { return this.As<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessageT>(); }
  public gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessageT AsReloadTechniqueDefListMessage() { return this.As<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessageT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MessageType.ReloadShaderMessage: return gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage.Pack(builder, _o.AsReloadShaderMessage()).Value;
      case MessageType.ReloadTechniqueDefListMessage: return gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage.Pack(builder, _o.AsReloadTechniqueDefListMessage()).Value;
    }
  }
}

public class MessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<MessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MessageTypeUnion, serializer);
    }
  }
  public MessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MessageType.ReloadShaderMessage: _o.Value = serializer.Deserialize<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessageT>(reader); break;
      case MessageType.ReloadTechniqueDefListMessage: _o.Value = serializer.Deserialize<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessageT>(reader); break;
    }
    return _o;
  }
}

public struct ReloadShaderMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ReloadShaderMessage GetRootAsReloadShaderMessage(ByteBuffer _bb) { return GetRootAsReloadShaderMessage(_bb, new ReloadShaderMessage()); }
  public static ReloadShaderMessage GetRootAsReloadShaderMessage(ByteBuffer _bb, ReloadShaderMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReloadShaderMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage> CreateReloadShaderMessage(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset file_pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    ReloadShaderMessage.AddFilePath(builder, file_pathOffset);
    ReloadShaderMessage.AddName(builder, nameOffset);
    return ReloadShaderMessage.EndReloadShaderMessage(builder);
  }

  public static void StartReloadShaderMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage> EndReloadShaderMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage>(o);
  }
  public ReloadShaderMessageT UnPack() {
    var _o = new ReloadShaderMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReloadShaderMessageT _o) {
    _o.Name = this.Name;
    _o.FilePath = this.FilePath;
  }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage> Pack(FlatBufferBuilder builder, ReloadShaderMessageT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateReloadShaderMessage(
      builder,
      _name,
      _file_path);
  }
};

public class ReloadShaderMessageT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("file_path")]
  public string FilePath { get; set; }

  public ReloadShaderMessageT() {
    this.Name = null;
    this.FilePath = null;
  }
}

public struct ReloadTechniqueDefListMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ReloadTechniqueDefListMessage GetRootAsReloadTechniqueDefListMessage(ByteBuffer _bb) { return GetRootAsReloadTechniqueDefListMessage(_bb, new ReloadTechniqueDefListMessage()); }
  public static ReloadTechniqueDefListMessage GetRootAsReloadTechniqueDefListMessage(ByteBuffer _bb, ReloadTechniqueDefListMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReloadTechniqueDefListMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage> CreateReloadTechniqueDefListMessage(FlatBufferBuilder builder,
      StringOffset file_pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    ReloadTechniqueDefListMessage.AddFilePath(builder, file_pathOffset);
    return ReloadTechniqueDefListMessage.EndReloadTechniqueDefListMessage(builder);
  }

  public static void StartReloadTechniqueDefListMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage> EndReloadTechniqueDefListMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage>(o);
  }
  public ReloadTechniqueDefListMessageT UnPack() {
    var _o = new ReloadTechniqueDefListMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReloadTechniqueDefListMessageT _o) {
    _o.FilePath = this.FilePath;
  }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage> Pack(FlatBufferBuilder builder, ReloadTechniqueDefListMessageT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage>);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateReloadTechniqueDefListMessage(
      builder,
      _file_path);
  }
};

public class ReloadTechniqueDefListMessageT
{
  [Newtonsoft.Json.JsonProperty("file_path")]
  public string FilePath { get; set; }

  public ReloadTechniqueDefListMessageT() {
    this.FilePath = null;
  }
}

public struct ShaderManagerToViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ShaderManagerToViewer GetRootAsShaderManagerToViewer(ByteBuffer _bb) { return GetRootAsShaderManagerToViewer(_bb, new ShaderManagerToViewer()); }
  public static ShaderManagerToViewer GetRootAsShaderManagerToViewer(ByteBuffer _bb, ShaderManagerToViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShaderManagerToViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.debug_framework.fb.shader.viewer.MessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (gfl.debug_framework.fb.shader.viewer.MessageType)__p.bb.Get(o + __p.bb_pos) : gfl.debug_framework.fb.shader.viewer.MessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer> CreateShaderManagerToViewer(FlatBufferBuilder builder,
      gfl.debug_framework.fb.shader.viewer.MessageType message_type = gfl.debug_framework.fb.shader.viewer.MessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    ShaderManagerToViewer.AddMessage(builder, messageOffset);
    ShaderManagerToViewer.AddMessageType(builder, message_type);
    return ShaderManagerToViewer.EndShaderManagerToViewer(builder);
  }

  public static void StartShaderManagerToViewer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, gfl.debug_framework.fb.shader.viewer.MessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer> EndShaderManagerToViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer>(o);
  }
  public static void FinishShaderManagerToViewerBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedShaderManagerToViewerBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ShaderManagerToViewerT UnPack() {
    var _o = new ShaderManagerToViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShaderManagerToViewerT _o) {
    _o.Message = new gfl.debug_framework.fb.shader.viewer.MessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case gfl.debug_framework.fb.shader.viewer.MessageType.ReloadShaderMessage:
        _o.Message.Value = this.Message<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage>().HasValue ? this.Message<gfl.debug_framework.fb.shader.viewer.ReloadShaderMessage>().Value.UnPack() : null;
        break;
      case gfl.debug_framework.fb.shader.viewer.MessageType.ReloadTechniqueDefListMessage:
        _o.Message.Value = this.Message<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage>().HasValue ? this.Message<gfl.debug_framework.fb.shader.viewer.ReloadTechniqueDefListMessage>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer> Pack(FlatBufferBuilder builder, ShaderManagerToViewerT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.shader.viewer.ShaderManagerToViewer>);
    var _message_type = _o.Message == null ? gfl.debug_framework.fb.shader.viewer.MessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : gfl.debug_framework.fb.shader.viewer.MessageTypeUnion.Pack(builder, _o.Message);
    return CreateShaderManagerToViewer(
      builder,
      _message_type,
      _message);
  }
};

public class ShaderManagerToViewerT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private gfl.debug_framework.fb.shader.viewer.MessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : gfl.debug_framework.fb.shader.viewer.MessageType.NONE;
    }
    set {
      this.Message = new gfl.debug_framework.fb.shader.viewer.MessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.debug_framework.fb.shader.viewer.MessageTypeUnion_JsonConverter))]
  public gfl.debug_framework.fb.shader.viewer.MessageTypeUnion Message { get; set; }

  public ShaderManagerToViewerT() {
    this.Message = null;
  }

  public static ShaderManagerToViewerT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ShaderManagerToViewerT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ShaderManagerToViewerT DeserializeFromBinary(byte[] fbBuffer) {
    return ShaderManagerToViewer.GetRootAsShaderManagerToViewer(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ShaderManagerToViewer.FinishShaderManagerToViewerBuffer(fbb, ShaderManagerToViewer.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
