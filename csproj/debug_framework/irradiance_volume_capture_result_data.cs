// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.debug_framework.fb.light
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct IrradianceVolumeCaptureResultData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IrradianceVolumeCaptureResultData GetRootAsIrradianceVolumeCaptureResultData(ByteBuffer _bb) { return GetRootAsIrradianceVolumeCaptureResultData(_bb, new IrradianceVolumeCaptureResultData()); }
  public static IrradianceVolumeCaptureResultData GetRootAsIrradianceVolumeCaptureResultData(ByteBuffer _bb, IrradianceVolumeCaptureResultData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IrradianceVolumeCaptureResultData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Filepath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilepathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilepathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilepathArray() { return __p.__vector_as_array<byte>(4); }
  public string LightName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLightNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLightNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData> CreateIrradianceVolumeCaptureResultData(FlatBufferBuilder builder,
      StringOffset filepathOffset = default(StringOffset),
      StringOffset light_nameOffset = default(StringOffset)) {
    builder.StartTable(2);
    IrradianceVolumeCaptureResultData.AddLightName(builder, light_nameOffset);
    IrradianceVolumeCaptureResultData.AddFilepath(builder, filepathOffset);
    return IrradianceVolumeCaptureResultData.EndIrradianceVolumeCaptureResultData(builder);
  }

  public static void StartIrradianceVolumeCaptureResultData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFilepath(FlatBufferBuilder builder, StringOffset filepathOffset) { builder.AddOffset(0, filepathOffset.Value, 0); }
  public static void AddLightName(FlatBufferBuilder builder, StringOffset lightNameOffset) { builder.AddOffset(1, lightNameOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData> EndIrradianceVolumeCaptureResultData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData>(o);
  }
  public static void FinishIrradianceVolumeCaptureResultDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedIrradianceVolumeCaptureResultDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public IrradianceVolumeCaptureResultDataT UnPack() {
    var _o = new IrradianceVolumeCaptureResultDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IrradianceVolumeCaptureResultDataT _o) {
    _o.Filepath = this.Filepath;
    _o.LightName = this.LightName;
  }
  public static Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData> Pack(FlatBufferBuilder builder, IrradianceVolumeCaptureResultDataT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.light.IrradianceVolumeCaptureResultData>);
    var _filepath = _o.Filepath == null ? default(StringOffset) : builder.CreateString(_o.Filepath);
    var _light_name = _o.LightName == null ? default(StringOffset) : builder.CreateString(_o.LightName);
    return CreateIrradianceVolumeCaptureResultData(
      builder,
      _filepath,
      _light_name);
  }
};

public class IrradianceVolumeCaptureResultDataT
{
  [Newtonsoft.Json.JsonProperty("filepath")]
  public string Filepath { get; set; }
  [Newtonsoft.Json.JsonProperty("light_name")]
  public string LightName { get; set; }

  public IrradianceVolumeCaptureResultDataT() {
    this.Filepath = null;
    this.LightName = null;
  }

  public static IrradianceVolumeCaptureResultDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<IrradianceVolumeCaptureResultDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static IrradianceVolumeCaptureResultDataT DeserializeFromBinary(byte[] fbBuffer) {
    return IrradianceVolumeCaptureResultData.GetRootAsIrradianceVolumeCaptureResultData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IrradianceVolumeCaptureResultData.FinishIrradianceVolumeCaptureResultDataBuffer(fbb, IrradianceVolumeCaptureResultData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
