// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.debug_framework.fb.light
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FloatOffsetParamData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FloatOffsetParamData GetRootAsFloatOffsetParamData(ByteBuffer _bb) { return GetRootAsFloatOffsetParamData(_bb, new FloatOffsetParamData()); }
  public static FloatOffsetParamData GetRootAsFloatOffsetParamData(ByteBuffer _bb, FloatOffsetParamData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatOffsetParamData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LightName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLightNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLightNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ParamaterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParamaterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetParamaterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetParamaterNameArray() { return __p.__vector_as_array<byte>(8); }
  public string OffsetTypeName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetTypeNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOffsetTypeNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOffsetTypeNameArray() { return __p.__vector_as_array<byte>(10); }
  public float Value { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string LightUniqueId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightUniqueIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLightUniqueIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLightUniqueIdArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<gfl.debug_framework.fb.light.FloatOffsetParamData> CreateFloatOffsetParamData(FlatBufferBuilder builder,
      StringOffset lightNameOffset = default(StringOffset),
      StringOffset typeNameOffset = default(StringOffset),
      StringOffset paramaterNameOffset = default(StringOffset),
      StringOffset offsetTypeNameOffset = default(StringOffset),
      float value = 0.0f,
      StringOffset lightUniqueIdOffset = default(StringOffset)) {
    builder.StartTable(6);
    FloatOffsetParamData.AddLightUniqueId(builder, lightUniqueIdOffset);
    FloatOffsetParamData.AddValue(builder, value);
    FloatOffsetParamData.AddOffsetTypeName(builder, offsetTypeNameOffset);
    FloatOffsetParamData.AddParamaterName(builder, paramaterNameOffset);
    FloatOffsetParamData.AddTypeName(builder, typeNameOffset);
    FloatOffsetParamData.AddLightName(builder, lightNameOffset);
    return FloatOffsetParamData.EndFloatOffsetParamData(builder);
  }

  public static void StartFloatOffsetParamData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddLightName(FlatBufferBuilder builder, StringOffset lightNameOffset) { builder.AddOffset(0, lightNameOffset.Value, 0); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(1, typeNameOffset.Value, 0); }
  public static void AddParamaterName(FlatBufferBuilder builder, StringOffset paramaterNameOffset) { builder.AddOffset(2, paramaterNameOffset.Value, 0); }
  public static void AddOffsetTypeName(FlatBufferBuilder builder, StringOffset offsetTypeNameOffset) { builder.AddOffset(3, offsetTypeNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(4, value, 0.0f); }
  public static void AddLightUniqueId(FlatBufferBuilder builder, StringOffset lightUniqueIdOffset) { builder.AddOffset(5, lightUniqueIdOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.light.FloatOffsetParamData> EndFloatOffsetParamData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.light.FloatOffsetParamData>(o);
  }
  public static void FinishFloatOffsetParamDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.FloatOffsetParamData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFloatOffsetParamDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.FloatOffsetParamData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public FloatOffsetParamDataT UnPack() {
    var _o = new FloatOffsetParamDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatOffsetParamDataT _o) {
    _o.LightName = this.LightName;
    _o.TypeName = this.TypeName;
    _o.ParamaterName = this.ParamaterName;
    _o.OffsetTypeName = this.OffsetTypeName;
    _o.Value = this.Value;
    _o.LightUniqueId = this.LightUniqueId;
  }
  public static Offset<gfl.debug_framework.fb.light.FloatOffsetParamData> Pack(FlatBufferBuilder builder, FloatOffsetParamDataT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.light.FloatOffsetParamData>);
    var _lightName = _o.LightName == null ? default(StringOffset) : builder.CreateString(_o.LightName);
    var _typeName = _o.TypeName == null ? default(StringOffset) : builder.CreateString(_o.TypeName);
    var _paramaterName = _o.ParamaterName == null ? default(StringOffset) : builder.CreateString(_o.ParamaterName);
    var _offsetTypeName = _o.OffsetTypeName == null ? default(StringOffset) : builder.CreateString(_o.OffsetTypeName);
    var _lightUniqueId = _o.LightUniqueId == null ? default(StringOffset) : builder.CreateString(_o.LightUniqueId);
    return CreateFloatOffsetParamData(
      builder,
      _lightName,
      _typeName,
      _paramaterName,
      _offsetTypeName,
      _o.Value,
      _lightUniqueId);
  }
};

public class FloatOffsetParamDataT
{
  [Newtonsoft.Json.JsonProperty("lightName")]
  public string LightName { get; set; }
  [Newtonsoft.Json.JsonProperty("typeName")]
  public string TypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("paramaterName")]
  public string ParamaterName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetTypeName")]
  public string OffsetTypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }
  [Newtonsoft.Json.JsonProperty("lightUniqueId")]
  public string LightUniqueId { get; set; }

  public FloatOffsetParamDataT() {
    this.LightName = null;
    this.TypeName = null;
    this.ParamaterName = null;
    this.OffsetTypeName = null;
    this.Value = 0.0f;
    this.LightUniqueId = null;
  }

  public static FloatOffsetParamDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<FloatOffsetParamDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static FloatOffsetParamDataT DeserializeFromBinary(byte[] fbBuffer) {
    return FloatOffsetParamData.GetRootAsFloatOffsetParamData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FloatOffsetParamData.FinishFloatOffsetParamDataBuffer(fbb, FloatOffsetParamData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
