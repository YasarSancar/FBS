// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.debug_framework.fb.light
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightCurveSRT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightCurveSRT GetRootAsLightCurveSRT(ByteBuffer _bb) { return GetRootAsLightCurveSRT(_bb, new LightCurveSRT()); }
  public static LightCurveSRT GetRootAsLightCurveSRT(ByteBuffer _bb, LightCurveSRT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightCurveSRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.gfx2.fb.RuntimeCurveFloat4? Scale { get { int o = __p.__offset(4); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.RuntimeCurveFloat4? Rotation { get { int o = __p.__offset(6); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.gfx2.fb.RuntimeCurveFloat4? Translation { get { int o = __p.__offset(8); return o != 0 ? (gfl.gfx2.fb.RuntimeCurveFloat4?)(new gfl.gfx2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.debug_framework.fb.light.LightCurveSRT> CreateLightCurveSRT(FlatBufferBuilder builder,
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> scaleOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> rotationOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>),
      Offset<gfl.gfx2.fb.RuntimeCurveFloat4> translationOffset = default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>)) {
    builder.StartTable(3);
    LightCurveSRT.AddTranslation(builder, translationOffset);
    LightCurveSRT.AddRotation(builder, rotationOffset);
    LightCurveSRT.AddScale(builder, scaleOffset);
    return LightCurveSRT.EndLightCurveSRT(builder);
  }

  public static void StartLightCurveSRT(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddScale(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> scaleOffset) { builder.AddOffset(0, scaleOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> rotationOffset) { builder.AddOffset(1, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<gfl.gfx2.fb.RuntimeCurveFloat4> translationOffset) { builder.AddOffset(2, translationOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.light.LightCurveSRT> EndLightCurveSRT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.light.LightCurveSRT>(o);
  }
  public LightCurveSRTT UnPack() {
    var _o = new LightCurveSRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightCurveSRTT _o) {
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
  }
  public static Offset<gfl.debug_framework.fb.light.LightCurveSRT> Pack(FlatBufferBuilder builder, LightCurveSRTT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.light.LightCurveSRT>);
    var _scale = _o.Scale == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Scale);
    var _rotation = _o.Rotation == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Rotation);
    var _translation = _o.Translation == null ? default(Offset<gfl.gfx2.fb.RuntimeCurveFloat4>) : gfl.gfx2.fb.RuntimeCurveFloat4.Pack(builder, _o.Translation);
    return CreateLightCurveSRT(
      builder,
      _scale,
      _rotation,
      _translation);
  }
};

public class LightCurveSRTT
{
  [Newtonsoft.Json.JsonProperty("scale")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("translation")]
  public gfl.gfx2.fb.RuntimeCurveFloat4T Translation { get; set; }

  public LightCurveSRTT() {
    this.Scale = null;
    this.Rotation = null;
    this.Translation = null;
  }
}

public struct SRTParamData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SRTParamData GetRootAsSRTParamData(ByteBuffer _bb) { return GetRootAsSRTParamData(_bb, new SRTParamData()); }
  public static SRTParamData GetRootAsSRTParamData(ByteBuffer _bb, SRTParamData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SRTParamData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LightName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLightNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLightNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.math.fb.SRT? Value { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.debug_framework.fb.light.LightCurveSRT? CurveValue { get { int o = __p.__offset(10); return o != 0 ? (gfl.debug_framework.fb.light.LightCurveSRT?)(new gfl.debug_framework.fb.light.LightCurveSRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string LightUniqueId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightUniqueIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLightUniqueIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLightUniqueIdArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<gfl.debug_framework.fb.light.SRTParamData> CreateSRTParamData(FlatBufferBuilder builder,
      StringOffset lightNameOffset = default(StringOffset),
      StringOffset typeNameOffset = default(StringOffset),
      Offset<gfl.math.fb.SRT> valueOffset = default(Offset<gfl.math.fb.SRT>),
      Offset<gfl.debug_framework.fb.light.LightCurveSRT> curveValueOffset = default(Offset<gfl.debug_framework.fb.light.LightCurveSRT>),
      StringOffset lightUniqueIdOffset = default(StringOffset)) {
    builder.StartTable(5);
    SRTParamData.AddLightUniqueId(builder, lightUniqueIdOffset);
    SRTParamData.AddCurveValue(builder, curveValueOffset);
    SRTParamData.AddValue(builder, valueOffset);
    SRTParamData.AddTypeName(builder, typeNameOffset);
    SRTParamData.AddLightName(builder, lightNameOffset);
    return SRTParamData.EndSRTParamData(builder);
  }

  public static void StartSRTParamData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLightName(FlatBufferBuilder builder, StringOffset lightNameOffset) { builder.AddOffset(0, lightNameOffset.Value, 0); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(1, typeNameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> valueOffset) { builder.AddOffset(2, valueOffset.Value, 0); }
  public static void AddCurveValue(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.LightCurveSRT> curveValueOffset) { builder.AddOffset(3, curveValueOffset.Value, 0); }
  public static void AddLightUniqueId(FlatBufferBuilder builder, StringOffset lightUniqueIdOffset) { builder.AddOffset(4, lightUniqueIdOffset.Value, 0); }
  public static Offset<gfl.debug_framework.fb.light.SRTParamData> EndSRTParamData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.debug_framework.fb.light.SRTParamData>(o);
  }
  public static void FinishSRTParamDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.SRTParamData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSRTParamDataBuffer(FlatBufferBuilder builder, Offset<gfl.debug_framework.fb.light.SRTParamData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SRTParamDataT UnPack() {
    var _o = new SRTParamDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SRTParamDataT _o) {
    _o.LightName = this.LightName;
    _o.TypeName = this.TypeName;
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
    _o.CurveValue = this.CurveValue.HasValue ? this.CurveValue.Value.UnPack() : null;
    _o.LightUniqueId = this.LightUniqueId;
  }
  public static Offset<gfl.debug_framework.fb.light.SRTParamData> Pack(FlatBufferBuilder builder, SRTParamDataT _o) {
    if (_o == null) return default(Offset<gfl.debug_framework.fb.light.SRTParamData>);
    var _lightName = _o.LightName == null ? default(StringOffset) : builder.CreateString(_o.LightName);
    var _typeName = _o.TypeName == null ? default(StringOffset) : builder.CreateString(_o.TypeName);
    var _value = _o.Value == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Value);
    var _curveValue = _o.CurveValue == null ? default(Offset<gfl.debug_framework.fb.light.LightCurveSRT>) : gfl.debug_framework.fb.light.LightCurveSRT.Pack(builder, _o.CurveValue);
    var _lightUniqueId = _o.LightUniqueId == null ? default(StringOffset) : builder.CreateString(_o.LightUniqueId);
    return CreateSRTParamData(
      builder,
      _lightName,
      _typeName,
      _value,
      _curveValue,
      _lightUniqueId);
  }
};

public class SRTParamDataT
{
  [Newtonsoft.Json.JsonProperty("lightName")]
  public string LightName { get; set; }
  [Newtonsoft.Json.JsonProperty("typeName")]
  public string TypeName { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.math.fb.SRTT Value { get; set; }
  [Newtonsoft.Json.JsonProperty("curveValue")]
  public gfl.debug_framework.fb.light.LightCurveSRTT CurveValue { get; set; }
  [Newtonsoft.Json.JsonProperty("lightUniqueId")]
  public string LightUniqueId { get; set; }

  public SRTParamDataT() {
    this.LightName = null;
    this.TypeName = null;
    this.Value = null;
    this.CurveValue = null;
    this.LightUniqueId = null;
  }

  public static SRTParamDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SRTParamDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SRTParamDataT DeserializeFromBinary(byte[] fbBuffer) {
    return SRTParamData.GetRootAsSRTParamData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SRTParamData.FinishSRTParamDataBuffer(fbb, SRTParamData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
