// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MoveToCameraViewPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MoveToCameraViewPoint GetRootAsMoveToCameraViewPoint(ByteBuffer _bb) { return GetRootAsMoveToCameraViewPoint(_bb, new MoveToCameraViewPoint()); }
  public static MoveToCameraViewPoint GetRootAsMoveToCameraViewPoint(ByteBuffer _bb, MoveToCameraViewPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveToCameraViewPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NodeId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNodeIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNodeIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint> CreateMoveToCameraViewPoint(FlatBufferBuilder builder,
      StringOffset nodeIdOffset = default(StringOffset)) {
    builder.StartTable(1);
    MoveToCameraViewPoint.AddNodeId(builder, nodeIdOffset);
    return MoveToCameraViewPoint.EndMoveToCameraViewPoint(builder);
  }

  public static void StartMoveToCameraViewPoint(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNodeId(FlatBufferBuilder builder, StringOffset nodeIdOffset) { builder.AddOffset(0, nodeIdOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint> EndMoveToCameraViewPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint>(o);
  }
  public static void FinishMoveToCameraViewPointBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMoveToCameraViewPointBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MoveToCameraViewPointT UnPack() {
    var _o = new MoveToCameraViewPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoveToCameraViewPointT _o) {
    _o.NodeId = this.NodeId;
  }
  public static Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint> Pack(FlatBufferBuilder builder, MoveToCameraViewPointT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.MoveToCameraViewPoint>);
    var _nodeId = _o.NodeId == null ? default(StringOffset) : builder.CreateString(_o.NodeId);
    return CreateMoveToCameraViewPoint(
      builder,
      _nodeId);
  }
};

public class MoveToCameraViewPointT
{
  [Newtonsoft.Json.JsonProperty("nodeId")]
  public string NodeId { get; set; }

  public MoveToCameraViewPointT() {
    this.NodeId = null;
  }

  public static MoveToCameraViewPointT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MoveToCameraViewPointT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MoveToCameraViewPointT DeserializeFromBinary(byte[] fbBuffer) {
    return MoveToCameraViewPoint.GetRootAsMoveToCameraViewPoint(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MoveToCameraViewPoint.FinishMoveToCameraViewPointBuffer(fbb, MoveToCameraViewPoint.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
