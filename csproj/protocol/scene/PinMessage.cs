// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum PinType : int
{
  Normal = 0,
  Flag = 1,
  Text = 2,
};

public struct PinMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PinMessage GetRootAsPinMessage(ByteBuffer _bb) { return GetRootAsPinMessage(_bb, new PinMessage()); }
  public static PinMessage GetRootAsPinMessage(ByteBuffer _bb, PinMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PinMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.math.fb.Vector3f? Position { get { int o = __p.__offset(4); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.math.fb.Vector4f? Color { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int Category { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.protocol.scene.fb.PinType Type { get { int o = __p.__offset(10); return o != 0 ? (gfl.protocol.scene.fb.PinType)__p.bb.GetInt(o + __p.bb_pos) : gfl.protocol.scene.fb.PinType.Normal; } }
  public bool IsEnable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Extra { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtraBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetExtraBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetExtraArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<gfl.protocol.scene.fb.PinMessage> CreatePinMessage(FlatBufferBuilder builder,
      gfl.math.fb.Vector3fT position = null,
      gfl.math.fb.Vector4fT color = null,
      int category = 0,
      gfl.protocol.scene.fb.PinType type = gfl.protocol.scene.fb.PinType.Normal,
      bool isEnable = false,
      StringOffset extraOffset = default(StringOffset)) {
    builder.StartTable(6);
    PinMessage.AddExtra(builder, extraOffset);
    PinMessage.AddType(builder, type);
    PinMessage.AddCategory(builder, category);
    PinMessage.AddColor(builder, gfl.math.fb.Vector4f.Pack(builder, color));
    PinMessage.AddPosition(builder, gfl.math.fb.Vector3f.Pack(builder, position));
    PinMessage.AddIsEnable(builder, isEnable);
    return PinMessage.EndPinMessage(builder);
  }

  public static void StartPinMessage(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddColor(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> colorOffset) { builder.AddStruct(1, colorOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, int category) { builder.AddInt(2, category, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.protocol.scene.fb.PinType type) { builder.AddInt(3, (int)type, 0); }
  public static void AddIsEnable(FlatBufferBuilder builder, bool isEnable) { builder.AddBool(4, isEnable, false); }
  public static void AddExtra(FlatBufferBuilder builder, StringOffset extraOffset) { builder.AddOffset(5, extraOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.PinMessage> EndPinMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.PinMessage>(o);
  }
  public static void FinishPinMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.PinMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPinMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.PinMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PinMessageT UnPack() {
    var _o = new PinMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PinMessageT _o) {
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Color = this.Color.HasValue ? this.Color.Value.UnPack() : null;
    _o.Category = this.Category;
    _o.Type = this.Type;
    _o.IsEnable = this.IsEnable;
    _o.Extra = this.Extra;
  }
  public static Offset<gfl.protocol.scene.fb.PinMessage> Pack(FlatBufferBuilder builder, PinMessageT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.PinMessage>);
    var _extra = _o.Extra == null ? default(StringOffset) : builder.CreateString(_o.Extra);
    return CreatePinMessage(
      builder,
      _o.Position,
      _o.Color,
      _o.Category,
      _o.Type,
      _o.IsEnable,
      _extra);
  }
};

public class PinMessageT
{
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.math.fb.Vector3fT Position { get; set; }
  [Newtonsoft.Json.JsonProperty("color")]
  public gfl.math.fb.Vector4fT Color { get; set; }
  [Newtonsoft.Json.JsonProperty("category")]
  public int Category { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.protocol.scene.fb.PinType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("isEnable")]
  public bool IsEnable { get; set; }
  [Newtonsoft.Json.JsonProperty("extra")]
  public string Extra { get; set; }

  public PinMessageT() {
    this.Position = new gfl.math.fb.Vector3fT();
    this.Color = new gfl.math.fb.Vector4fT();
    this.Category = 0;
    this.Type = gfl.protocol.scene.fb.PinType.Normal;
    this.IsEnable = false;
    this.Extra = null;
  }

  public static PinMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PinMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PinMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return PinMessage.GetRootAsPinMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PinMessage.FinishPinMessageBuffer(fbb, PinMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
