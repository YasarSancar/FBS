// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SceneMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SceneMessage GetRootAsSceneMessage(ByteBuffer _bb) { return GetRootAsSceneMessage(_bb, new SceneMessage()); }
  public static SceneMessage GetRootAsSceneMessage(ByteBuffer _bb, SceneMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TargetSceneId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetSceneIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTargetSceneIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTargetSceneIdArray() { return __p.__vector_as_array<byte>(4); }
  public string TargetGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetGroupIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTargetGroupIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTargetGroupIdArray() { return __p.__vector_as_array<byte>(6); }
  public string TargetObjectId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetObjectIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTargetObjectIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTargetObjectIdArray() { return __p.__vector_as_array<byte>(8); }
  public string MessageType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMessageTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMessageTypeArray() { return __p.__vector_as_array<byte>(10); }
  public byte Data(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(12); }
  public bool IsSystemMessage { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.protocol.scene.fb.SceneMessage> CreateSceneMessage(FlatBufferBuilder builder,
      StringOffset targetSceneIdOffset = default(StringOffset),
      StringOffset targetGroupIdOffset = default(StringOffset),
      StringOffset targetObjectIdOffset = default(StringOffset),
      StringOffset messageTypeOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset),
      bool isSystemMessage = false) {
    builder.StartTable(6);
    SceneMessage.AddData(builder, dataOffset);
    SceneMessage.AddMessageType(builder, messageTypeOffset);
    SceneMessage.AddTargetObjectId(builder, targetObjectIdOffset);
    SceneMessage.AddTargetGroupId(builder, targetGroupIdOffset);
    SceneMessage.AddTargetSceneId(builder, targetSceneIdOffset);
    SceneMessage.AddIsSystemMessage(builder, isSystemMessage);
    return SceneMessage.EndSceneMessage(builder);
  }

  public static void StartSceneMessage(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTargetSceneId(FlatBufferBuilder builder, StringOffset targetSceneIdOffset) { builder.AddOffset(0, targetSceneIdOffset.Value, 0); }
  public static void AddTargetGroupId(FlatBufferBuilder builder, StringOffset targetGroupIdOffset) { builder.AddOffset(1, targetGroupIdOffset.Value, 0); }
  public static void AddTargetObjectId(FlatBufferBuilder builder, StringOffset targetObjectIdOffset) { builder.AddOffset(2, targetObjectIdOffset.Value, 0); }
  public static void AddMessageType(FlatBufferBuilder builder, StringOffset messageTypeOffset) { builder.AddOffset(3, messageTypeOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(4, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddIsSystemMessage(FlatBufferBuilder builder, bool isSystemMessage) { builder.AddBool(5, isSystemMessage, false); }
  public static Offset<gfl.protocol.scene.fb.SceneMessage> EndSceneMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.SceneMessage>(o);
  }
  public static void FinishSceneMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.SceneMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSceneMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.SceneMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SceneMessageT UnPack() {
    var _o = new SceneMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SceneMessageT _o) {
    _o.TargetSceneId = this.TargetSceneId;
    _o.TargetGroupId = this.TargetGroupId;
    _o.TargetObjectId = this.TargetObjectId;
    _o.MessageType = this.MessageType;
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
    _o.IsSystemMessage = this.IsSystemMessage;
  }
  public static Offset<gfl.protocol.scene.fb.SceneMessage> Pack(FlatBufferBuilder builder, SceneMessageT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.SceneMessage>);
    var _targetSceneId = _o.TargetSceneId == null ? default(StringOffset) : builder.CreateString(_o.TargetSceneId);
    var _targetGroupId = _o.TargetGroupId == null ? default(StringOffset) : builder.CreateString(_o.TargetGroupId);
    var _targetObjectId = _o.TargetObjectId == null ? default(StringOffset) : builder.CreateString(_o.TargetObjectId);
    var _messageType = _o.MessageType == null ? default(StringOffset) : builder.CreateString(_o.MessageType);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateSceneMessage(
      builder,
      _targetSceneId,
      _targetGroupId,
      _targetObjectId,
      _messageType,
      _data,
      _o.IsSystemMessage);
  }
};

public class SceneMessageT
{
  [Newtonsoft.Json.JsonProperty("targetSceneId")]
  public string TargetSceneId { get; set; }
  [Newtonsoft.Json.JsonProperty("targetGroupId")]
  public string TargetGroupId { get; set; }
  [Newtonsoft.Json.JsonProperty("targetObjectId")]
  public string TargetObjectId { get; set; }
  [Newtonsoft.Json.JsonProperty("messageType")]
  public string MessageType { get; set; }
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }
  [Newtonsoft.Json.JsonProperty("isSystemMessage")]
  public bool IsSystemMessage { get; set; }

  public SceneMessageT() {
    this.TargetSceneId = null;
    this.TargetGroupId = null;
    this.TargetObjectId = null;
    this.MessageType = null;
    this.Data = null;
    this.IsSystemMessage = false;
  }

  public static SceneMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SceneMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SceneMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return SceneMessage.GetRootAsSceneMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SceneMessage.FinishSceneMessageBuffer(fbb, SceneMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
