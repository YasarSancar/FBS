// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ChangeNodeId : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ChangeNodeId GetRootAsChangeNodeId(ByteBuffer _bb) { return GetRootAsChangeNodeId(_bb, new ChangeNodeId()); }
  public static ChangeNodeId GetRootAsChangeNodeId(ByteBuffer _bb, ChangeNodeId obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChangeNodeId __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string OldId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOldIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOldIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOldIdArray() { return __p.__vector_as_array<byte>(4); }
  public string NewId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNewIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNewIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNewIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.protocol.scene.fb.ChangeNodeId> CreateChangeNodeId(FlatBufferBuilder builder,
      StringOffset oldIdOffset = default(StringOffset),
      StringOffset newIdOffset = default(StringOffset)) {
    builder.StartTable(2);
    ChangeNodeId.AddNewId(builder, newIdOffset);
    ChangeNodeId.AddOldId(builder, oldIdOffset);
    return ChangeNodeId.EndChangeNodeId(builder);
  }

  public static void StartChangeNodeId(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOldId(FlatBufferBuilder builder, StringOffset oldIdOffset) { builder.AddOffset(0, oldIdOffset.Value, 0); }
  public static void AddNewId(FlatBufferBuilder builder, StringOffset newIdOffset) { builder.AddOffset(1, newIdOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.ChangeNodeId> EndChangeNodeId(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.ChangeNodeId>(o);
  }
  public static void FinishChangeNodeIdBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.ChangeNodeId> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedChangeNodeIdBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.ChangeNodeId> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ChangeNodeIdT UnPack() {
    var _o = new ChangeNodeIdT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ChangeNodeIdT _o) {
    _o.OldId = this.OldId;
    _o.NewId = this.NewId;
  }
  public static Offset<gfl.protocol.scene.fb.ChangeNodeId> Pack(FlatBufferBuilder builder, ChangeNodeIdT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.ChangeNodeId>);
    var _oldId = _o.OldId == null ? default(StringOffset) : builder.CreateString(_o.OldId);
    var _newId = _o.NewId == null ? default(StringOffset) : builder.CreateString(_o.NewId);
    return CreateChangeNodeId(
      builder,
      _oldId,
      _newId);
  }
};

public class ChangeNodeIdT
{
  [Newtonsoft.Json.JsonProperty("oldId")]
  public string OldId { get; set; }
  [Newtonsoft.Json.JsonProperty("newId")]
  public string NewId { get; set; }

  public ChangeNodeIdT() {
    this.OldId = null;
    this.NewId = null;
  }

  public static ChangeNodeIdT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeNodeIdT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ChangeNodeIdT DeserializeFromBinary(byte[] fbBuffer) {
    return ChangeNodeId.GetRootAsChangeNodeId(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ChangeNodeId.FinishChangeNodeIdBuffer(fbb, ChangeNodeId.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
