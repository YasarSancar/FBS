// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum IssueMessageData : byte
{
  NONE = 0,
  ShowIssue = 1,
  HideIssue = 2,
  OpenIssue = 3,
};

public class IssueMessageDataUnion {
  public IssueMessageData Type { get; set; }
  public object Value { get; set; }

  public IssueMessageDataUnion() {
    this.Type = IssueMessageData.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.protocol.scene.fb.ShowIssueT AsShowIssue() { return this.As<gfl.protocol.scene.fb.ShowIssueT>(); }
  public gfl.protocol.scene.fb.HideIssueT AsHideIssue() { return this.As<gfl.protocol.scene.fb.HideIssueT>(); }
  public gfl.protocol.scene.fb.OpenIssueT AsOpenIssue() { return this.As<gfl.protocol.scene.fb.OpenIssueT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, IssueMessageDataUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case IssueMessageData.ShowIssue: return gfl.protocol.scene.fb.ShowIssue.Pack(builder, _o.AsShowIssue()).Value;
      case IssueMessageData.HideIssue: return gfl.protocol.scene.fb.HideIssue.Pack(builder, _o.AsHideIssue()).Value;
      case IssueMessageData.OpenIssue: return gfl.protocol.scene.fb.OpenIssue.Pack(builder, _o.AsOpenIssue()).Value;
    }
  }
}

public class IssueMessageDataUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(IssueMessageDataUnion) || objectType == typeof(System.Collections.Generic.List<IssueMessageDataUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<IssueMessageDataUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as IssueMessageDataUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, IssueMessageDataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<IssueMessageDataUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as IssueMessageDataUnion, serializer);
    }
  }
  public IssueMessageDataUnion ReadJson(Newtonsoft.Json.JsonReader reader, IssueMessageDataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case IssueMessageData.ShowIssue: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.ShowIssueT>(reader); break;
      case IssueMessageData.HideIssue: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.HideIssueT>(reader); break;
      case IssueMessageData.OpenIssue: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.OpenIssueT>(reader); break;
    }
    return _o;
  }
}

public struct ShowIssue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ShowIssue GetRootAsShowIssue(ByteBuffer _bb) { return GetRootAsShowIssue(_bb, new ShowIssue()); }
  public static ShowIssue GetRootAsShowIssue(ByteBuffer _bb, ShowIssue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShowIssue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string IssueKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIssueKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIssueKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIssueKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string IssueSummary { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIssueSummaryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIssueSummaryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIssueSummaryArray() { return __p.__vector_as_array<byte>(6); }
  public string SceneName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSceneNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSceneNameArray() { return __p.__vector_as_array<byte>(8); }
  public string ObjectName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetObjectNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetObjectNameArray() { return __p.__vector_as_array<byte>(10); }
  public gfl.math.fb.Vector3f? Location { get { int o = __p.__offset(12); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.protocol.scene.fb.ShowIssue> CreateShowIssue(FlatBufferBuilder builder,
      StringOffset issueKeyOffset = default(StringOffset),
      StringOffset issueSummaryOffset = default(StringOffset),
      StringOffset sceneNameOffset = default(StringOffset),
      StringOffset objectNameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT location = null) {
    builder.StartTable(5);
    ShowIssue.AddLocation(builder, gfl.math.fb.Vector3f.Pack(builder, location));
    ShowIssue.AddObjectName(builder, objectNameOffset);
    ShowIssue.AddSceneName(builder, sceneNameOffset);
    ShowIssue.AddIssueSummary(builder, issueSummaryOffset);
    ShowIssue.AddIssueKey(builder, issueKeyOffset);
    return ShowIssue.EndShowIssue(builder);
  }

  public static void StartShowIssue(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddIssueKey(FlatBufferBuilder builder, StringOffset issueKeyOffset) { builder.AddOffset(0, issueKeyOffset.Value, 0); }
  public static void AddIssueSummary(FlatBufferBuilder builder, StringOffset issueSummaryOffset) { builder.AddOffset(1, issueSummaryOffset.Value, 0); }
  public static void AddSceneName(FlatBufferBuilder builder, StringOffset sceneNameOffset) { builder.AddOffset(2, sceneNameOffset.Value, 0); }
  public static void AddObjectName(FlatBufferBuilder builder, StringOffset objectNameOffset) { builder.AddOffset(3, objectNameOffset.Value, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> locationOffset) { builder.AddStruct(4, locationOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.ShowIssue> EndShowIssue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.ShowIssue>(o);
  }
  public ShowIssueT UnPack() {
    var _o = new ShowIssueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShowIssueT _o) {
    _o.IssueKey = this.IssueKey;
    _o.IssueSummary = this.IssueSummary;
    _o.SceneName = this.SceneName;
    _o.ObjectName = this.ObjectName;
    _o.Location = this.Location.HasValue ? this.Location.Value.UnPack() : null;
  }
  public static Offset<gfl.protocol.scene.fb.ShowIssue> Pack(FlatBufferBuilder builder, ShowIssueT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.ShowIssue>);
    var _issueKey = _o.IssueKey == null ? default(StringOffset) : builder.CreateString(_o.IssueKey);
    var _issueSummary = _o.IssueSummary == null ? default(StringOffset) : builder.CreateString(_o.IssueSummary);
    var _sceneName = _o.SceneName == null ? default(StringOffset) : builder.CreateString(_o.SceneName);
    var _objectName = _o.ObjectName == null ? default(StringOffset) : builder.CreateString(_o.ObjectName);
    return CreateShowIssue(
      builder,
      _issueKey,
      _issueSummary,
      _sceneName,
      _objectName,
      _o.Location);
  }
};

public class ShowIssueT
{
  [Newtonsoft.Json.JsonProperty("issueKey")]
  public string IssueKey { get; set; }
  [Newtonsoft.Json.JsonProperty("issueSummary")]
  public string IssueSummary { get; set; }
  [Newtonsoft.Json.JsonProperty("sceneName")]
  public string SceneName { get; set; }
  [Newtonsoft.Json.JsonProperty("objectName")]
  public string ObjectName { get; set; }
  [Newtonsoft.Json.JsonProperty("location")]
  public gfl.math.fb.Vector3fT Location { get; set; }

  public ShowIssueT() {
    this.IssueKey = null;
    this.IssueSummary = null;
    this.SceneName = null;
    this.ObjectName = null;
    this.Location = new gfl.math.fb.Vector3fT();
  }
}

public struct HideIssue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HideIssue GetRootAsHideIssue(ByteBuffer _bb) { return GetRootAsHideIssue(_bb, new HideIssue()); }
  public static HideIssue GetRootAsHideIssue(ByteBuffer _bb, HideIssue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HideIssue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string IssueKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIssueKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIssueKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIssueKeyArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.protocol.scene.fb.HideIssue> CreateHideIssue(FlatBufferBuilder builder,
      StringOffset issueKeyOffset = default(StringOffset)) {
    builder.StartTable(1);
    HideIssue.AddIssueKey(builder, issueKeyOffset);
    return HideIssue.EndHideIssue(builder);
  }

  public static void StartHideIssue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddIssueKey(FlatBufferBuilder builder, StringOffset issueKeyOffset) { builder.AddOffset(0, issueKeyOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.HideIssue> EndHideIssue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.HideIssue>(o);
  }
  public HideIssueT UnPack() {
    var _o = new HideIssueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HideIssueT _o) {
    _o.IssueKey = this.IssueKey;
  }
  public static Offset<gfl.protocol.scene.fb.HideIssue> Pack(FlatBufferBuilder builder, HideIssueT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.HideIssue>);
    var _issueKey = _o.IssueKey == null ? default(StringOffset) : builder.CreateString(_o.IssueKey);
    return CreateHideIssue(
      builder,
      _issueKey);
  }
};

public class HideIssueT
{
  [Newtonsoft.Json.JsonProperty("issueKey")]
  public string IssueKey { get; set; }

  public HideIssueT() {
    this.IssueKey = null;
  }
}

public struct OpenIssue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OpenIssue GetRootAsOpenIssue(ByteBuffer _bb) { return GetRootAsOpenIssue(_bb, new OpenIssue()); }
  public static OpenIssue GetRootAsOpenIssue(ByteBuffer _bb, OpenIssue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OpenIssue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string IssueKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIssueKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIssueKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIssueKeyArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.protocol.scene.fb.OpenIssue> CreateOpenIssue(FlatBufferBuilder builder,
      StringOffset issueKeyOffset = default(StringOffset)) {
    builder.StartTable(1);
    OpenIssue.AddIssueKey(builder, issueKeyOffset);
    return OpenIssue.EndOpenIssue(builder);
  }

  public static void StartOpenIssue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddIssueKey(FlatBufferBuilder builder, StringOffset issueKeyOffset) { builder.AddOffset(0, issueKeyOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.OpenIssue> EndOpenIssue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.OpenIssue>(o);
  }
  public OpenIssueT UnPack() {
    var _o = new OpenIssueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OpenIssueT _o) {
    _o.IssueKey = this.IssueKey;
  }
  public static Offset<gfl.protocol.scene.fb.OpenIssue> Pack(FlatBufferBuilder builder, OpenIssueT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.OpenIssue>);
    var _issueKey = _o.IssueKey == null ? default(StringOffset) : builder.CreateString(_o.IssueKey);
    return CreateOpenIssue(
      builder,
      _issueKey);
  }
};

public class OpenIssueT
{
  [Newtonsoft.Json.JsonProperty("issueKey")]
  public string IssueKey { get; set; }

  public OpenIssueT() {
    this.IssueKey = null;
  }
}

public struct IssueMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IssueMessage GetRootAsIssueMessage(ByteBuffer _bb) { return GetRootAsIssueMessage(_bb, new IssueMessage()); }
  public static IssueMessage GetRootAsIssueMessage(ByteBuffer _bb, IssueMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IssueMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.protocol.scene.fb.IssueMessageData DataType { get { int o = __p.__offset(4); return o != 0 ? (gfl.protocol.scene.fb.IssueMessageData)__p.bb.Get(o + __p.bb_pos) : gfl.protocol.scene.fb.IssueMessageData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.protocol.scene.fb.IssueMessage> CreateIssueMessage(FlatBufferBuilder builder,
      gfl.protocol.scene.fb.IssueMessageData data_type = gfl.protocol.scene.fb.IssueMessageData.NONE,
      int dataOffset = 0) {
    builder.StartTable(2);
    IssueMessage.AddData(builder, dataOffset);
    IssueMessage.AddDataType(builder, data_type);
    return IssueMessage.EndIssueMessage(builder);
  }

  public static void StartIssueMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDataType(FlatBufferBuilder builder, gfl.protocol.scene.fb.IssueMessageData dataType) { builder.AddByte(0, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
  public static Offset<gfl.protocol.scene.fb.IssueMessage> EndIssueMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.IssueMessage>(o);
  }
  public static void FinishIssueMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.IssueMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedIssueMessageBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.IssueMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public IssueMessageT UnPack() {
    var _o = new IssueMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IssueMessageT _o) {
    _o.Data = new gfl.protocol.scene.fb.IssueMessageDataUnion();
    _o.Data.Type = this.DataType;
    switch (this.DataType) {
      default: break;
      case gfl.protocol.scene.fb.IssueMessageData.ShowIssue:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.ShowIssue>().HasValue ? this.Data<gfl.protocol.scene.fb.ShowIssue>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.IssueMessageData.HideIssue:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.HideIssue>().HasValue ? this.Data<gfl.protocol.scene.fb.HideIssue>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.IssueMessageData.OpenIssue:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.OpenIssue>().HasValue ? this.Data<gfl.protocol.scene.fb.OpenIssue>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.protocol.scene.fb.IssueMessage> Pack(FlatBufferBuilder builder, IssueMessageT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.IssueMessage>);
    var _data_type = _o.Data == null ? gfl.protocol.scene.fb.IssueMessageData.NONE : _o.Data.Type;
    var _data = _o.Data == null ? 0 : gfl.protocol.scene.fb.IssueMessageDataUnion.Pack(builder, _o.Data);
    return CreateIssueMessage(
      builder,
      _data_type,
      _data);
  }
};

public class IssueMessageT
{
  [Newtonsoft.Json.JsonProperty("data_type")]
  private gfl.protocol.scene.fb.IssueMessageData DataType {
    get {
      return this.Data != null ? this.Data.Type : gfl.protocol.scene.fb.IssueMessageData.NONE;
    }
    set {
      this.Data = new gfl.protocol.scene.fb.IssueMessageDataUnion();
      this.Data.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("data")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.protocol.scene.fb.IssueMessageDataUnion_JsonConverter))]
  public gfl.protocol.scene.fb.IssueMessageDataUnion Data { get; set; }

  public IssueMessageT() {
    this.Data = null;
  }

  public static IssueMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static IssueMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return IssueMessage.GetRootAsIssueMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IssueMessage.FinishIssueMessageBuffer(fbb, IssueMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
