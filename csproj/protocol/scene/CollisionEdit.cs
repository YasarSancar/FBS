// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CollisionObjectType : byte
{
  Body = 0,
  Character = 1,
};

public struct CollisionEdit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CollisionEdit GetRootAsCollisionEdit(ByteBuffer _bb) { return GetRootAsCollisionEdit(_bb, new CollisionEdit()); }
  public static CollisionEdit GetRootAsCollisionEdit(ByteBuffer _bb, CollisionEdit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollisionEdit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NodeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNodeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNodeNameArray() { return __p.__vector_as_array<byte>(4); }
  public string CollisionName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollisionNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCollisionNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCollisionNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.protocol.scene.fb.CollisionObjectType ObjectType { get { int o = __p.__offset(8); return o != 0 ? (gfl.protocol.scene.fb.CollisionObjectType)__p.bb.Get(o + __p.bb_pos) : gfl.protocol.scene.fb.CollisionObjectType.Body; } }

  public static Offset<gfl.protocol.scene.fb.CollisionEdit> CreateCollisionEdit(FlatBufferBuilder builder,
      StringOffset nodeNameOffset = default(StringOffset),
      StringOffset collisionNameOffset = default(StringOffset),
      gfl.protocol.scene.fb.CollisionObjectType objectType = gfl.protocol.scene.fb.CollisionObjectType.Body) {
    builder.StartTable(3);
    CollisionEdit.AddCollisionName(builder, collisionNameOffset);
    CollisionEdit.AddNodeName(builder, nodeNameOffset);
    CollisionEdit.AddObjectType(builder, objectType);
    return CollisionEdit.EndCollisionEdit(builder);
  }

  public static void StartCollisionEdit(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNodeName(FlatBufferBuilder builder, StringOffset nodeNameOffset) { builder.AddOffset(0, nodeNameOffset.Value, 0); }
  public static void AddCollisionName(FlatBufferBuilder builder, StringOffset collisionNameOffset) { builder.AddOffset(1, collisionNameOffset.Value, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, gfl.protocol.scene.fb.CollisionObjectType objectType) { builder.AddByte(2, (byte)objectType, 0); }
  public static Offset<gfl.protocol.scene.fb.CollisionEdit> EndCollisionEdit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.CollisionEdit>(o);
  }
  public static void FinishCollisionEditBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CollisionEdit> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCollisionEditBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CollisionEdit> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CollisionEditT UnPack() {
    var _o = new CollisionEditT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollisionEditT _o) {
    _o.NodeName = this.NodeName;
    _o.CollisionName = this.CollisionName;
    _o.ObjectType = this.ObjectType;
  }
  public static Offset<gfl.protocol.scene.fb.CollisionEdit> Pack(FlatBufferBuilder builder, CollisionEditT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.CollisionEdit>);
    var _nodeName = _o.NodeName == null ? default(StringOffset) : builder.CreateString(_o.NodeName);
    var _collisionName = _o.CollisionName == null ? default(StringOffset) : builder.CreateString(_o.CollisionName);
    return CreateCollisionEdit(
      builder,
      _nodeName,
      _collisionName,
      _o.ObjectType);
  }
};

public class CollisionEditT
{
  [Newtonsoft.Json.JsonProperty("nodeName")]
  public string NodeName { get; set; }
  [Newtonsoft.Json.JsonProperty("collisionName")]
  public string CollisionName { get; set; }
  [Newtonsoft.Json.JsonProperty("objectType")]
  public gfl.protocol.scene.fb.CollisionObjectType ObjectType { get; set; }

  public CollisionEditT() {
    this.NodeName = null;
    this.CollisionName = null;
    this.ObjectType = gfl.protocol.scene.fb.CollisionObjectType.Body;
  }

  public static CollisionEditT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CollisionEditT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CollisionEditT DeserializeFromBinary(byte[] fbBuffer) {
    return CollisionEdit.GetRootAsCollisionEdit(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CollisionEdit.FinishCollisionEditBuffer(fbb, CollisionEdit.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
