// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Data : byte
{
  NONE = 0,
  Binary = 1,
  Bool = 2,
  BoolArray = 3,
  Int = 4,
  IntArray = 5,
  Long = 6,
  LongArray = 7,
  Float = 8,
  FloatArray = 9,
  String = 10,
  StringArray = 11,
  Vector3f = 12,
  Vector4f = 13,
  SRT = 14,
};

public class DataUnion {
  public Data Type { get; set; }
  public object Value { get; set; }

  public DataUnion() {
    this.Type = Data.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.protocol.scene.fb.BinaryT AsBinary() { return this.As<gfl.protocol.scene.fb.BinaryT>(); }
  public gfl.protocol.scene.fb.BoolT AsBool() { return this.As<gfl.protocol.scene.fb.BoolT>(); }
  public gfl.protocol.scene.fb.BoolArrayT AsBoolArray() { return this.As<gfl.protocol.scene.fb.BoolArrayT>(); }
  public gfl.protocol.scene.fb.IntT AsInt() { return this.As<gfl.protocol.scene.fb.IntT>(); }
  public gfl.protocol.scene.fb.IntArrayT AsIntArray() { return this.As<gfl.protocol.scene.fb.IntArrayT>(); }
  public gfl.protocol.scene.fb.LongT AsLong() { return this.As<gfl.protocol.scene.fb.LongT>(); }
  public gfl.protocol.scene.fb.LongArrayT AsLongArray() { return this.As<gfl.protocol.scene.fb.LongArrayT>(); }
  public gfl.protocol.scene.fb.FloatT AsFloat() { return this.As<gfl.protocol.scene.fb.FloatT>(); }
  public gfl.protocol.scene.fb.FloatArrayT AsFloatArray() { return this.As<gfl.protocol.scene.fb.FloatArrayT>(); }
  public gfl.protocol.scene.fb.StringT AsString() { return this.As<gfl.protocol.scene.fb.StringT>(); }
  public gfl.protocol.scene.fb.StringArrayT AsStringArray() { return this.As<gfl.protocol.scene.fb.StringArrayT>(); }
  public gfl.protocol.scene.fb.Vector3fT AsVector3f() { return this.As<gfl.protocol.scene.fb.Vector3fT>(); }
  public gfl.protocol.scene.fb.Vector4fT AsVector4f() { return this.As<gfl.protocol.scene.fb.Vector4fT>(); }
  public gfl.protocol.scene.fb.SRTT AsSRT() { return this.As<gfl.protocol.scene.fb.SRTT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, DataUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Data.Binary: return gfl.protocol.scene.fb.Binary.Pack(builder, _o.AsBinary()).Value;
      case Data.Bool: return gfl.protocol.scene.fb.Bool.Pack(builder, _o.AsBool()).Value;
      case Data.BoolArray: return gfl.protocol.scene.fb.BoolArray.Pack(builder, _o.AsBoolArray()).Value;
      case Data.Int: return gfl.protocol.scene.fb.Int.Pack(builder, _o.AsInt()).Value;
      case Data.IntArray: return gfl.protocol.scene.fb.IntArray.Pack(builder, _o.AsIntArray()).Value;
      case Data.Long: return gfl.protocol.scene.fb.Long.Pack(builder, _o.AsLong()).Value;
      case Data.LongArray: return gfl.protocol.scene.fb.LongArray.Pack(builder, _o.AsLongArray()).Value;
      case Data.Float: return gfl.protocol.scene.fb.Float.Pack(builder, _o.AsFloat()).Value;
      case Data.FloatArray: return gfl.protocol.scene.fb.FloatArray.Pack(builder, _o.AsFloatArray()).Value;
      case Data.String: return gfl.protocol.scene.fb.String.Pack(builder, _o.AsString()).Value;
      case Data.StringArray: return gfl.protocol.scene.fb.StringArray.Pack(builder, _o.AsStringArray()).Value;
      case Data.Vector3f: return gfl.protocol.scene.fb.Vector3f.Pack(builder, _o.AsVector3f()).Value;
      case Data.Vector4f: return gfl.protocol.scene.fb.Vector4f.Pack(builder, _o.AsVector4f()).Value;
      case Data.SRT: return gfl.protocol.scene.fb.SRT.Pack(builder, _o.AsSRT()).Value;
    }
  }
}

public class DataUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(DataUnion) || objectType == typeof(System.Collections.Generic.List<DataUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<DataUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as DataUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, DataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<DataUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as DataUnion, serializer);
    }
  }
  public DataUnion ReadJson(Newtonsoft.Json.JsonReader reader, DataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case Data.Binary: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.BinaryT>(reader); break;
      case Data.Bool: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.BoolT>(reader); break;
      case Data.BoolArray: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.BoolArrayT>(reader); break;
      case Data.Int: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.IntT>(reader); break;
      case Data.IntArray: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.IntArrayT>(reader); break;
      case Data.Long: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.LongT>(reader); break;
      case Data.LongArray: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.LongArrayT>(reader); break;
      case Data.Float: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.FloatT>(reader); break;
      case Data.FloatArray: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.FloatArrayT>(reader); break;
      case Data.String: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.StringT>(reader); break;
      case Data.StringArray: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.StringArrayT>(reader); break;
      case Data.Vector3f: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.Vector3fT>(reader); break;
      case Data.Vector4f: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.Vector4fT>(reader); break;
      case Data.SRT: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.SRTT>(reader); break;
    }
    return _o;
  }
}

public struct Binary : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Binary GetRootAsBinary(ByteBuffer _bb) { return GetRootAsBinary(_bb, new Binary()); }
  public static Binary GetRootAsBinary(ByteBuffer _bb, Binary obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Binary __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.protocol.scene.fb.Binary> CreateBinary(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Binary.AddData(builder, dataOffset);
    return Binary.EndBinary(builder);
  }

  public static void StartBinary(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.protocol.scene.fb.Binary> EndBinary(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Binary>(o);
  }
  public BinaryT UnPack() {
    var _o = new BinaryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BinaryT _o) {
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.Binary> Pack(FlatBufferBuilder builder, BinaryT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Binary>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateBinary(
      builder,
      _data);
  }
};

public class BinaryT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public BinaryT() {
    this.Data = null;
  }
}

public struct Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Bool GetRootAsBool(ByteBuffer _bb) { return GetRootAsBool(_bb, new Bool()); }
  public static Bool GetRootAsBool(ByteBuffer _bb, Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Data { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.protocol.scene.fb.Bool> CreateBool(FlatBufferBuilder builder,
      bool data = false) {
    builder.StartTable(1);
    Bool.AddData(builder, data);
    return Bool.EndBool(builder);
  }

  public static void StartBool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, bool data) { builder.AddBool(0, data, false); }
  public static Offset<gfl.protocol.scene.fb.Bool> EndBool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Bool>(o);
  }
  public BoolT UnPack() {
    var _o = new BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoolT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.protocol.scene.fb.Bool> Pack(FlatBufferBuilder builder, BoolT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Bool>);
    return CreateBool(
      builder,
      _o.Data);
  }
};

public class BoolT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public bool Data { get; set; }

  public BoolT() {
    this.Data = false;
  }
}

public struct BoolArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BoolArray GetRootAsBoolArray(ByteBuffer _bb) { return GetRootAsBoolArray(_bb, new BoolArray()); }
  public static BoolArray GetRootAsBoolArray(ByteBuffer _bb, BoolArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BoolArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Data(int j) { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetDataBytes() { return __p.__vector_as_span<bool>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public bool[] GetDataArray() { return __p.__vector_as_array<bool>(4); }

  public static Offset<gfl.protocol.scene.fb.BoolArray> CreateBoolArray(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BoolArray.AddData(builder, dataOffset);
    return BoolArray.EndBoolArray(builder);
  }

  public static void StartBoolArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.protocol.scene.fb.BoolArray> EndBoolArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.BoolArray>(o);
  }
  public BoolArrayT UnPack() {
    var _o = new BoolArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoolArrayT _o) {
    _o.Data = new List<bool>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.BoolArray> Pack(FlatBufferBuilder builder, BoolArrayT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.BoolArray>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateBoolArray(
      builder,
      _data);
  }
};

public class BoolArrayT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<bool> Data { get; set; }

  public BoolArrayT() {
    this.Data = null;
  }
}

public struct Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Int GetRootAsInt(ByteBuffer _bb) { return GetRootAsInt(_bb, new Int()); }
  public static Int GetRootAsInt(ByteBuffer _bb, Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.protocol.scene.fb.Int> CreateInt(FlatBufferBuilder builder,
      int data = 0) {
    builder.StartTable(1);
    Int.AddData(builder, data);
    return Int.EndInt(builder);
  }

  public static void StartInt(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, int data) { builder.AddInt(0, data, 0); }
  public static Offset<gfl.protocol.scene.fb.Int> EndInt(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Int>(o);
  }
  public IntT UnPack() {
    var _o = new IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.protocol.scene.fb.Int> Pack(FlatBufferBuilder builder, IntT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Int>);
    return CreateInt(
      builder,
      _o.Data);
  }
};

public class IntT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public int Data { get; set; }

  public IntT() {
    this.Data = 0;
  }
}

public struct IntArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IntArray GetRootAsIntArray(ByteBuffer _bb) { return GetRootAsIntArray(_bb, new IntArray()); }
  public static IntArray GetRootAsIntArray(ByteBuffer _bb, IntArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IntArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDataBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetDataArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<gfl.protocol.scene.fb.IntArray> CreateIntArray(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    IntArray.AddData(builder, dataOffset);
    return IntArray.EndIntArray(builder);
  }

  public static void StartIntArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.protocol.scene.fb.IntArray> EndIntArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.IntArray>(o);
  }
  public IntArrayT UnPack() {
    var _o = new IntArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntArrayT _o) {
    _o.Data = new List<int>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.IntArray> Pack(FlatBufferBuilder builder, IntArrayT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.IntArray>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateIntArray(
      builder,
      _data);
  }
};

public class IntArrayT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<int> Data { get; set; }

  public IntArrayT() {
    this.Data = null;
  }
}

public struct Long : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Long GetRootAsLong(ByteBuffer _bb) { return GetRootAsLong(_bb, new Long()); }
  public static Long GetRootAsLong(ByteBuffer _bb, Long obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Long __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<gfl.protocol.scene.fb.Long> CreateLong(FlatBufferBuilder builder,
      long data = 0) {
    builder.StartTable(1);
    Long.AddData(builder, data);
    return Long.EndLong(builder);
  }

  public static void StartLong(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, long data) { builder.AddLong(0, data, 0); }
  public static Offset<gfl.protocol.scene.fb.Long> EndLong(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Long>(o);
  }
  public LongT UnPack() {
    var _o = new LongT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LongT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.protocol.scene.fb.Long> Pack(FlatBufferBuilder builder, LongT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Long>);
    return CreateLong(
      builder,
      _o.Data);
  }
};

public class LongT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public long Data { get; set; }

  public LongT() {
    this.Data = 0;
  }
}

public struct LongArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LongArray GetRootAsLongArray(ByteBuffer _bb) { return GetRootAsLongArray(_bb, new LongArray()); }
  public static LongArray GetRootAsLongArray(ByteBuffer _bb, LongArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LongArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<long> GetDataBytes() { return __p.__vector_as_span<long>(4, 8); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public long[] GetDataArray() { return __p.__vector_as_array<long>(4); }

  public static Offset<gfl.protocol.scene.fb.LongArray> CreateLongArray(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LongArray.AddData(builder, dataOffset);
    return LongArray.EndLongArray(builder);
  }

  public static void StartLongArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<gfl.protocol.scene.fb.LongArray> EndLongArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.LongArray>(o);
  }
  public LongArrayT UnPack() {
    var _o = new LongArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LongArrayT _o) {
    _o.Data = new List<long>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.LongArray> Pack(FlatBufferBuilder builder, LongArrayT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.LongArray>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateLongArray(
      builder,
      _data);
  }
};

public class LongArrayT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<long> Data { get; set; }

  public LongArrayT() {
    this.Data = null;
  }
}

public struct Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Float GetRootAsFloat(ByteBuffer _bb) { return GetRootAsFloat(_bb, new Float()); }
  public static Float GetRootAsFloat(ByteBuffer _bb, Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Data { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.protocol.scene.fb.Float> CreateFloat(FlatBufferBuilder builder,
      float data = 0.0f) {
    builder.StartTable(1);
    Float.AddData(builder, data);
    return Float.EndFloat(builder);
  }

  public static void StartFloat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, float data) { builder.AddFloat(0, data, 0.0f); }
  public static Offset<gfl.protocol.scene.fb.Float> EndFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Float>(o);
  }
  public FloatT UnPack() {
    var _o = new FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.protocol.scene.fb.Float> Pack(FlatBufferBuilder builder, FloatT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Float>);
    return CreateFloat(
      builder,
      _o.Data);
  }
};

public class FloatT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public float Data { get; set; }

  public FloatT() {
    this.Data = 0.0f;
  }
}

public struct FloatArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FloatArray GetRootAsFloatArray(ByteBuffer _bb) { return GetRootAsFloatArray(_bb, new FloatArray()); }
  public static FloatArray GetRootAsFloatArray(ByteBuffer _bb, FloatArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetDataBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetDataArray() { return __p.__vector_as_array<float>(4); }

  public static Offset<gfl.protocol.scene.fb.FloatArray> CreateFloatArray(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    FloatArray.AddData(builder, dataOffset);
    return FloatArray.EndFloatArray(builder);
  }

  public static void StartFloatArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.protocol.scene.fb.FloatArray> EndFloatArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.FloatArray>(o);
  }
  public FloatArrayT UnPack() {
    var _o = new FloatArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatArrayT _o) {
    _o.Data = new List<float>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.FloatArray> Pack(FlatBufferBuilder builder, FloatArrayT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.FloatArray>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateFloatArray(
      builder,
      _data);
  }
};

public class FloatArrayT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<float> Data { get; set; }

  public FloatArrayT() {
    this.Data = null;
  }
}

public struct String : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static String GetRootAsString(ByteBuffer _bb) { return GetRootAsString(_bb, new String()); }
  public static String GetRootAsString(ByteBuffer _bb, String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Data { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.protocol.scene.fb.String> CreateString(FlatBufferBuilder builder,
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(1);
    String.AddData(builder, dataOffset);
    return String.EndString(builder);
  }

  public static void StartString(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.String> EndString(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.String>(o);
  }
  public StringT UnPack() {
    var _o = new StringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StringT _o) {
    _o.Data = this.Data;
  }
  public static Offset<gfl.protocol.scene.fb.String> Pack(FlatBufferBuilder builder, StringT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.String>);
    var _data = _o.Data == null ? default(StringOffset) : builder.CreateString(_o.Data);
    return CreateString(
      builder,
      _data);
  }
};

public class StringT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public string Data { get; set; }

  public StringT() {
    this.Data = null;
  }
}

public struct StringArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StringArray GetRootAsStringArray(ByteBuffer _bb) { return GetRootAsStringArray(_bb, new StringArray()); }
  public static StringArray GetRootAsStringArray(ByteBuffer _bb, StringArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.protocol.scene.fb.StringArray> CreateStringArray(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StringArray.AddData(builder, dataOffset);
    return StringArray.EndStringArray(builder);
  }

  public static void StartStringArray(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.protocol.scene.fb.StringArray> EndStringArray(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.StringArray>(o);
  }
  public StringArrayT UnPack() {
    var _o = new StringArrayT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StringArrayT _o) {
    _o.Data = new List<string>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.StringArray> Pack(FlatBufferBuilder builder, StringArrayT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.StringArray>);
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = new StringOffset[_o.Data.Count];
      for (var _j = 0; _j < __data.Length; ++_j) { __data[_j] = builder.CreateString(_o.Data[_j]); }
      _data = CreateDataVector(builder, __data);
    }
    return CreateStringArray(
      builder,
      _data);
  }
};

public class StringArrayT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public List<string> Data { get; set; }

  public StringArrayT() {
    this.Data = null;
  }
}

public struct Vector3f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Vector3f GetRootAsVector3f(ByteBuffer _bb) { return GetRootAsVector3f(_bb, new Vector3f()); }
  public static Vector3f GetRootAsVector3f(ByteBuffer _bb, Vector3f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vector3f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.math.fb.Vector3f? Data { get { int o = __p.__offset(4); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartVector3f(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> dataOffset) { builder.AddStruct(0, dataOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.Vector3f> EndVector3f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Vector3f>(o);
  }
  public Vector3fT UnPack() {
    var _o = new Vector3fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3fT _o) {
    _o.Data = this.Data.HasValue ? this.Data.Value.UnPack() : null;
  }
  public static Offset<gfl.protocol.scene.fb.Vector3f> Pack(FlatBufferBuilder builder, Vector3fT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Vector3f>);
    StartVector3f(builder);
    AddData(builder, gfl.math.fb.Vector3f.Pack(builder, _o.Data));
    return EndVector3f(builder);
  }
};

public class Vector3fT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public gfl.math.fb.Vector3fT Data { get; set; }

  public Vector3fT() {
    this.Data = new gfl.math.fb.Vector3fT();
  }
}

public struct Vector4f : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Vector4f GetRootAsVector4f(ByteBuffer _bb) { return GetRootAsVector4f(_bb, new Vector4f()); }
  public static Vector4f GetRootAsVector4f(ByteBuffer _bb, Vector4f obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vector4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.math.fb.Vector4f? Data { get { int o = __p.__offset(4); return o != 0 ? (gfl.math.fb.Vector4f?)(new gfl.math.fb.Vector4f()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartVector4f(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector4f> dataOffset) { builder.AddStruct(0, dataOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.Vector4f> EndVector4f(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.Vector4f>(o);
  }
  public Vector4fT UnPack() {
    var _o = new Vector4fT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector4fT _o) {
    _o.Data = this.Data.HasValue ? this.Data.Value.UnPack() : null;
  }
  public static Offset<gfl.protocol.scene.fb.Vector4f> Pack(FlatBufferBuilder builder, Vector4fT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.Vector4f>);
    StartVector4f(builder);
    AddData(builder, gfl.math.fb.Vector4f.Pack(builder, _o.Data));
    return EndVector4f(builder);
  }
};

public class Vector4fT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public gfl.math.fb.Vector4fT Data { get; set; }

  public Vector4fT() {
    this.Data = new gfl.math.fb.Vector4fT();
  }
}

public struct SRT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SRT GetRootAsSRT(ByteBuffer _bb) { return GetRootAsSRT(_bb, new SRT()); }
  public static SRT GetRootAsSRT(ByteBuffer _bb, SRT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.math.fb.SRT? Data { get { int o = __p.__offset(4); return o != 0 ? (gfl.math.fb.SRT?)(new gfl.math.fb.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.protocol.scene.fb.SRT> CreateSRT(FlatBufferBuilder builder,
      Offset<gfl.math.fb.SRT> dataOffset = default(Offset<gfl.math.fb.SRT>)) {
    builder.StartTable(1);
    SRT.AddData(builder, dataOffset);
    return SRT.EndSRT(builder);
  }

  public static void StartSRT(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddData(FlatBufferBuilder builder, Offset<gfl.math.fb.SRT> dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.SRT> EndSRT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.SRT>(o);
  }
  public SRTT UnPack() {
    var _o = new SRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SRTT _o) {
    _o.Data = this.Data.HasValue ? this.Data.Value.UnPack() : null;
  }
  public static Offset<gfl.protocol.scene.fb.SRT> Pack(FlatBufferBuilder builder, SRTT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.SRT>);
    var _data = _o.Data == null ? default(Offset<gfl.math.fb.SRT>) : gfl.math.fb.SRT.Pack(builder, _o.Data);
    return CreateSRT(
      builder,
      _data);
  }
};

public class SRTT
{
  [Newtonsoft.Json.JsonProperty("data")]
  public gfl.math.fb.SRTT Data { get; set; }

  public SRTT() {
    this.Data = null;
  }
}

public struct UpdateProperty : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UpdateProperty GetRootAsUpdateProperty(ByteBuffer _bb) { return GetRootAsUpdateProperty(_bb, new UpdateProperty()); }
  public static UpdateProperty GetRootAsUpdateProperty(ByteBuffer _bb, UpdateProperty obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UpdateProperty __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PropertyName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPropertyNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPropertyNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPropertyNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.protocol.scene.fb.Data DataType { get { int o = __p.__offset(6); return o != 0 ? (gfl.protocol.scene.fb.Data)__p.bb.Get(o + __p.bb_pos) : gfl.protocol.scene.fb.Data.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.protocol.scene.fb.UpdateProperty> CreateUpdateProperty(FlatBufferBuilder builder,
      StringOffset propertyNameOffset = default(StringOffset),
      gfl.protocol.scene.fb.Data data_type = gfl.protocol.scene.fb.Data.NONE,
      int dataOffset = 0) {
    builder.StartTable(3);
    UpdateProperty.AddData(builder, dataOffset);
    UpdateProperty.AddPropertyName(builder, propertyNameOffset);
    UpdateProperty.AddDataType(builder, data_type);
    return UpdateProperty.EndUpdateProperty(builder);
  }

  public static void StartUpdateProperty(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPropertyName(FlatBufferBuilder builder, StringOffset propertyNameOffset) { builder.AddOffset(0, propertyNameOffset.Value, 0); }
  public static void AddDataType(FlatBufferBuilder builder, gfl.protocol.scene.fb.Data dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<gfl.protocol.scene.fb.UpdateProperty> EndUpdateProperty(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.UpdateProperty>(o);
  }
  public static void FinishUpdatePropertyBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.UpdateProperty> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUpdatePropertyBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.UpdateProperty> offset) { builder.FinishSizePrefixed(offset.Value); }
  public UpdatePropertyT UnPack() {
    var _o = new UpdatePropertyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UpdatePropertyT _o) {
    _o.PropertyName = this.PropertyName;
    _o.Data = new gfl.protocol.scene.fb.DataUnion();
    _o.Data.Type = this.DataType;
    switch (this.DataType) {
      default: break;
      case gfl.protocol.scene.fb.Data.Binary:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Binary>().HasValue ? this.Data<gfl.protocol.scene.fb.Binary>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Bool:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Bool>().HasValue ? this.Data<gfl.protocol.scene.fb.Bool>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.BoolArray:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.BoolArray>().HasValue ? this.Data<gfl.protocol.scene.fb.BoolArray>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Int:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Int>().HasValue ? this.Data<gfl.protocol.scene.fb.Int>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.IntArray:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.IntArray>().HasValue ? this.Data<gfl.protocol.scene.fb.IntArray>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Long:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Long>().HasValue ? this.Data<gfl.protocol.scene.fb.Long>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.LongArray:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.LongArray>().HasValue ? this.Data<gfl.protocol.scene.fb.LongArray>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Float:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Float>().HasValue ? this.Data<gfl.protocol.scene.fb.Float>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.FloatArray:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.FloatArray>().HasValue ? this.Data<gfl.protocol.scene.fb.FloatArray>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.String:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.String>().HasValue ? this.Data<gfl.protocol.scene.fb.String>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.StringArray:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.StringArray>().HasValue ? this.Data<gfl.protocol.scene.fb.StringArray>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Vector3f:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Vector3f>().HasValue ? this.Data<gfl.protocol.scene.fb.Vector3f>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.Vector4f:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.Vector4f>().HasValue ? this.Data<gfl.protocol.scene.fb.Vector4f>().Value.UnPack() : null;
        break;
      case gfl.protocol.scene.fb.Data.SRT:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.SRT>().HasValue ? this.Data<gfl.protocol.scene.fb.SRT>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.protocol.scene.fb.UpdateProperty> Pack(FlatBufferBuilder builder, UpdatePropertyT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.UpdateProperty>);
    var _propertyName = _o.PropertyName == null ? default(StringOffset) : builder.CreateString(_o.PropertyName);
    var _data_type = _o.Data == null ? gfl.protocol.scene.fb.Data.NONE : _o.Data.Type;
    var _data = _o.Data == null ? 0 : gfl.protocol.scene.fb.DataUnion.Pack(builder, _o.Data);
    return CreateUpdateProperty(
      builder,
      _propertyName,
      _data_type,
      _data);
  }
};

public class UpdatePropertyT
{
  [Newtonsoft.Json.JsonProperty("propertyName")]
  public string PropertyName { get; set; }
  [Newtonsoft.Json.JsonProperty("data_type")]
  private gfl.protocol.scene.fb.Data DataType {
    get {
      return this.Data != null ? this.Data.Type : gfl.protocol.scene.fb.Data.NONE;
    }
    set {
      this.Data = new gfl.protocol.scene.fb.DataUnion();
      this.Data.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("data")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.protocol.scene.fb.DataUnion_JsonConverter))]
  public gfl.protocol.scene.fb.DataUnion Data { get; set; }

  public UpdatePropertyT() {
    this.PropertyName = null;
    this.Data = null;
  }

  public static UpdatePropertyT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePropertyT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static UpdatePropertyT DeserializeFromBinary(byte[] fbBuffer) {
    return UpdateProperty.GetRootAsUpdateProperty(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    UpdateProperty.FinishUpdatePropertyBuffer(fbb, UpdateProperty.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
