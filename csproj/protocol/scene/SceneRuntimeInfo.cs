// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SceneRuntimeInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SceneRuntimeInfo GetRootAsSceneRuntimeInfo(ByteBuffer _bb) { return GetRootAsSceneRuntimeInfo(_bb, new SceneRuntimeInfo()); }
  public static SceneRuntimeInfo GetRootAsSceneRuntimeInfo(ByteBuffer _bb, SceneRuntimeInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneRuntimeInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TimerLevelNames(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TimerLevelNamesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.protocol.scene.fb.SceneRuntimeInfo> CreateSceneRuntimeInfo(FlatBufferBuilder builder,
      VectorOffset timerLevelNamesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SceneRuntimeInfo.AddTimerLevelNames(builder, timerLevelNamesOffset);
    return SceneRuntimeInfo.EndSceneRuntimeInfo(builder);
  }

  public static void StartSceneRuntimeInfo(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTimerLevelNames(FlatBufferBuilder builder, VectorOffset timerLevelNamesOffset) { builder.AddOffset(0, timerLevelNamesOffset.Value, 0); }
  public static VectorOffset CreateTimerLevelNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTimerLevelNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimerLevelNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.protocol.scene.fb.SceneRuntimeInfo> EndSceneRuntimeInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.SceneRuntimeInfo>(o);
  }
  public static void FinishSceneRuntimeInfoBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.SceneRuntimeInfo> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSceneRuntimeInfoBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.SceneRuntimeInfo> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SceneRuntimeInfoT UnPack() {
    var _o = new SceneRuntimeInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SceneRuntimeInfoT _o) {
    _o.TimerLevelNames = new List<string>();
    for (var _j = 0; _j < this.TimerLevelNamesLength; ++_j) {_o.TimerLevelNames.Add(this.TimerLevelNames(_j));}
  }
  public static Offset<gfl.protocol.scene.fb.SceneRuntimeInfo> Pack(FlatBufferBuilder builder, SceneRuntimeInfoT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.SceneRuntimeInfo>);
    var _timerLevelNames = default(VectorOffset);
    if (_o.TimerLevelNames != null) {
      var __timerLevelNames = new StringOffset[_o.TimerLevelNames.Count];
      for (var _j = 0; _j < __timerLevelNames.Length; ++_j) { __timerLevelNames[_j] = builder.CreateString(_o.TimerLevelNames[_j]); }
      _timerLevelNames = CreateTimerLevelNamesVector(builder, __timerLevelNames);
    }
    return CreateSceneRuntimeInfo(
      builder,
      _timerLevelNames);
  }
};

public class SceneRuntimeInfoT
{
  [Newtonsoft.Json.JsonProperty("timerLevelNames")]
  public List<string> TimerLevelNames { get; set; }

  public SceneRuntimeInfoT() {
    this.TimerLevelNames = null;
  }

  public static SceneRuntimeInfoT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SceneRuntimeInfoT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SceneRuntimeInfoT DeserializeFromBinary(byte[] fbBuffer) {
    return SceneRuntimeInfo.GetRootAsSceneRuntimeInfo(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SceneRuntimeInfo.FinishSceneRuntimeInfoBuffer(fbb, SceneRuntimeInfo.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
