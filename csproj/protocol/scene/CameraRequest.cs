// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CameraRequestData : byte
{
  NONE = 0,
  FocusToTarget = 1,
};

public class CameraRequestDataUnion {
  public CameraRequestData Type { get; set; }
  public object Value { get; set; }

  public CameraRequestDataUnion() {
    this.Type = CameraRequestData.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.protocol.scene.fb.FocusToTargetT AsFocusToTarget() { return this.As<gfl.protocol.scene.fb.FocusToTargetT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, CameraRequestDataUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case CameraRequestData.FocusToTarget: return gfl.protocol.scene.fb.FocusToTarget.Pack(builder, _o.AsFocusToTarget()).Value;
    }
  }
}

public class CameraRequestDataUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(CameraRequestDataUnion) || objectType == typeof(System.Collections.Generic.List<CameraRequestDataUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<CameraRequestDataUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as CameraRequestDataUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, CameraRequestDataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<CameraRequestDataUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as CameraRequestDataUnion, serializer);
    }
  }
  public CameraRequestDataUnion ReadJson(Newtonsoft.Json.JsonReader reader, CameraRequestDataUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case CameraRequestData.FocusToTarget: _o.Value = serializer.Deserialize<gfl.protocol.scene.fb.FocusToTargetT>(reader); break;
    }
    return _o;
  }
}

public struct FocusToTarget : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FocusToTarget GetRootAsFocusToTarget(ByteBuffer _bb) { return GetRootAsFocusToTarget(_bb, new FocusToTarget()); }
  public static FocusToTarget GetRootAsFocusToTarget(ByteBuffer _bb, FocusToTarget obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FocusToTarget __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string UseCameraName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUseCameraNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUseCameraNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUseCameraNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.math.fb.Vector3f? Location { get { int o = __p.__offset(6); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string TargetId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTargetIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTargetIdArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.protocol.scene.fb.FocusToTarget> CreateFocusToTarget(FlatBufferBuilder builder,
      StringOffset useCameraNameOffset = default(StringOffset),
      gfl.math.fb.Vector3fT location = null,
      StringOffset targetIdOffset = default(StringOffset)) {
    builder.StartTable(3);
    FocusToTarget.AddTargetId(builder, targetIdOffset);
    FocusToTarget.AddLocation(builder, gfl.math.fb.Vector3f.Pack(builder, location));
    FocusToTarget.AddUseCameraName(builder, useCameraNameOffset);
    return FocusToTarget.EndFocusToTarget(builder);
  }

  public static void StartFocusToTarget(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUseCameraName(FlatBufferBuilder builder, StringOffset useCameraNameOffset) { builder.AddOffset(0, useCameraNameOffset.Value, 0); }
  public static void AddLocation(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> locationOffset) { builder.AddStruct(1, locationOffset.Value, 0); }
  public static void AddTargetId(FlatBufferBuilder builder, StringOffset targetIdOffset) { builder.AddOffset(2, targetIdOffset.Value, 0); }
  public static Offset<gfl.protocol.scene.fb.FocusToTarget> EndFocusToTarget(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.FocusToTarget>(o);
  }
  public FocusToTargetT UnPack() {
    var _o = new FocusToTargetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FocusToTargetT _o) {
    _o.UseCameraName = this.UseCameraName;
    _o.Location = this.Location.HasValue ? this.Location.Value.UnPack() : null;
    _o.TargetId = this.TargetId;
  }
  public static Offset<gfl.protocol.scene.fb.FocusToTarget> Pack(FlatBufferBuilder builder, FocusToTargetT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.FocusToTarget>);
    var _useCameraName = _o.UseCameraName == null ? default(StringOffset) : builder.CreateString(_o.UseCameraName);
    var _targetId = _o.TargetId == null ? default(StringOffset) : builder.CreateString(_o.TargetId);
    return CreateFocusToTarget(
      builder,
      _useCameraName,
      _o.Location,
      _targetId);
  }
};

public class FocusToTargetT
{
  [Newtonsoft.Json.JsonProperty("useCameraName")]
  public string UseCameraName { get; set; }
  [Newtonsoft.Json.JsonProperty("location")]
  public gfl.math.fb.Vector3fT Location { get; set; }
  [Newtonsoft.Json.JsonProperty("targetId")]
  public string TargetId { get; set; }

  public FocusToTargetT() {
    this.UseCameraName = null;
    this.Location = new gfl.math.fb.Vector3fT();
    this.TargetId = null;
  }
}

public struct CameraRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraRequest GetRootAsCameraRequest(ByteBuffer _bb) { return GetRootAsCameraRequest(_bb, new CameraRequest()); }
  public static CameraRequest GetRootAsCameraRequest(ByteBuffer _bb, CameraRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.protocol.scene.fb.CameraRequestData DataType { get { int o = __p.__offset(4); return o != 0 ? (gfl.protocol.scene.fb.CameraRequestData)__p.bb.Get(o + __p.bb_pos) : gfl.protocol.scene.fb.CameraRequestData.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.protocol.scene.fb.CameraRequest> CreateCameraRequest(FlatBufferBuilder builder,
      gfl.protocol.scene.fb.CameraRequestData data_type = gfl.protocol.scene.fb.CameraRequestData.NONE,
      int dataOffset = 0) {
    builder.StartTable(2);
    CameraRequest.AddData(builder, dataOffset);
    CameraRequest.AddDataType(builder, data_type);
    return CameraRequest.EndCameraRequest(builder);
  }

  public static void StartCameraRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDataType(FlatBufferBuilder builder, gfl.protocol.scene.fb.CameraRequestData dataType) { builder.AddByte(0, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
  public static Offset<gfl.protocol.scene.fb.CameraRequest> EndCameraRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.CameraRequest>(o);
  }
  public static void FinishCameraRequestBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CameraRequest> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCameraRequestBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CameraRequest> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CameraRequestT UnPack() {
    var _o = new CameraRequestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraRequestT _o) {
    _o.Data = new gfl.protocol.scene.fb.CameraRequestDataUnion();
    _o.Data.Type = this.DataType;
    switch (this.DataType) {
      default: break;
      case gfl.protocol.scene.fb.CameraRequestData.FocusToTarget:
        _o.Data.Value = this.Data<gfl.protocol.scene.fb.FocusToTarget>().HasValue ? this.Data<gfl.protocol.scene.fb.FocusToTarget>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.protocol.scene.fb.CameraRequest> Pack(FlatBufferBuilder builder, CameraRequestT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.CameraRequest>);
    var _data_type = _o.Data == null ? gfl.protocol.scene.fb.CameraRequestData.NONE : _o.Data.Type;
    var _data = _o.Data == null ? 0 : gfl.protocol.scene.fb.CameraRequestDataUnion.Pack(builder, _o.Data);
    return CreateCameraRequest(
      builder,
      _data_type,
      _data);
  }
};

public class CameraRequestT
{
  [Newtonsoft.Json.JsonProperty("data_type")]
  private gfl.protocol.scene.fb.CameraRequestData DataType {
    get {
      return this.Data != null ? this.Data.Type : gfl.protocol.scene.fb.CameraRequestData.NONE;
    }
    set {
      this.Data = new gfl.protocol.scene.fb.CameraRequestDataUnion();
      this.Data.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("data")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.protocol.scene.fb.CameraRequestDataUnion_JsonConverter))]
  public gfl.protocol.scene.fb.CameraRequestDataUnion Data { get; set; }

  public CameraRequestT() {
    this.Data = null;
  }

  public static CameraRequestT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CameraRequestT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CameraRequestT DeserializeFromBinary(byte[] fbBuffer) {
    return CameraRequest.GetRootAsCameraRequest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CameraRequest.FinishCameraRequestBuffer(fbb, CameraRequest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
