// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CreateNewScene : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CreateNewScene GetRootAsCreateNewScene(ByteBuffer _bb) { return GetRootAsCreateNewScene(_bb, new CreateNewScene()); }
  public static CreateNewScene GetRootAsCreateNewScene(ByteBuffer _bb, CreateNewScene obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CreateNewScene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NodeId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNodeIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNodeIdArray() { return __p.__vector_as_array<byte>(4); }
  public string SceneName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSceneNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSceneNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsLoaded { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int MemorySize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScenePath { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenePathBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetScenePathBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetScenePathArray() { return __p.__vector_as_array<byte>(12); }
  public bool LoadAtStart { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<gfl.protocol.scene.fb.CreateNewScene> CreateCreateNewScene(FlatBufferBuilder builder,
      StringOffset nodeIdOffset = default(StringOffset),
      StringOffset sceneNameOffset = default(StringOffset),
      bool isLoaded = false,
      int memorySize = 0,
      StringOffset scenePathOffset = default(StringOffset),
      bool loadAtStart = true) {
    builder.StartTable(6);
    CreateNewScene.AddScenePath(builder, scenePathOffset);
    CreateNewScene.AddMemorySize(builder, memorySize);
    CreateNewScene.AddSceneName(builder, sceneNameOffset);
    CreateNewScene.AddNodeId(builder, nodeIdOffset);
    CreateNewScene.AddLoadAtStart(builder, loadAtStart);
    CreateNewScene.AddIsLoaded(builder, isLoaded);
    return CreateNewScene.EndCreateNewScene(builder);
  }

  public static void StartCreateNewScene(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddNodeId(FlatBufferBuilder builder, StringOffset nodeIdOffset) { builder.AddOffset(0, nodeIdOffset.Value, 0); }
  public static void AddSceneName(FlatBufferBuilder builder, StringOffset sceneNameOffset) { builder.AddOffset(1, sceneNameOffset.Value, 0); }
  public static void AddIsLoaded(FlatBufferBuilder builder, bool isLoaded) { builder.AddBool(2, isLoaded, false); }
  public static void AddMemorySize(FlatBufferBuilder builder, int memorySize) { builder.AddInt(3, memorySize, 0); }
  public static void AddScenePath(FlatBufferBuilder builder, StringOffset scenePathOffset) { builder.AddOffset(4, scenePathOffset.Value, 0); }
  public static void AddLoadAtStart(FlatBufferBuilder builder, bool loadAtStart) { builder.AddBool(5, loadAtStart, true); }
  public static Offset<gfl.protocol.scene.fb.CreateNewScene> EndCreateNewScene(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.CreateNewScene>(o);
  }
  public static void FinishCreateNewSceneBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CreateNewScene> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCreateNewSceneBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.CreateNewScene> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CreateNewSceneT UnPack() {
    var _o = new CreateNewSceneT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CreateNewSceneT _o) {
    _o.NodeId = this.NodeId;
    _o.SceneName = this.SceneName;
    _o.IsLoaded = this.IsLoaded;
    _o.MemorySize = this.MemorySize;
    _o.ScenePath = this.ScenePath;
    _o.LoadAtStart = this.LoadAtStart;
  }
  public static Offset<gfl.protocol.scene.fb.CreateNewScene> Pack(FlatBufferBuilder builder, CreateNewSceneT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.CreateNewScene>);
    var _nodeId = _o.NodeId == null ? default(StringOffset) : builder.CreateString(_o.NodeId);
    var _sceneName = _o.SceneName == null ? default(StringOffset) : builder.CreateString(_o.SceneName);
    var _scenePath = _o.ScenePath == null ? default(StringOffset) : builder.CreateString(_o.ScenePath);
    return CreateCreateNewScene(
      builder,
      _nodeId,
      _sceneName,
      _o.IsLoaded,
      _o.MemorySize,
      _scenePath,
      _o.LoadAtStart);
  }
};

public class CreateNewSceneT
{
  [Newtonsoft.Json.JsonProperty("nodeId")]
  public string NodeId { get; set; }
  [Newtonsoft.Json.JsonProperty("sceneName")]
  public string SceneName { get; set; }
  [Newtonsoft.Json.JsonProperty("isLoaded")]
  public bool IsLoaded { get; set; }
  [Newtonsoft.Json.JsonProperty("memorySize")]
  public int MemorySize { get; set; }
  [Newtonsoft.Json.JsonProperty("scenePath")]
  public string ScenePath { get; set; }
  [Newtonsoft.Json.JsonProperty("loadAtStart")]
  public bool LoadAtStart { get; set; }

  public CreateNewSceneT() {
    this.NodeId = null;
    this.SceneName = null;
    this.IsLoaded = false;
    this.MemorySize = 0;
    this.ScenePath = null;
    this.LoadAtStart = true;
  }

  public static CreateNewSceneT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateNewSceneT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CreateNewSceneT DeserializeFromBinary(byte[] fbBuffer) {
    return CreateNewScene.GetRootAsCreateNewScene(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CreateNewScene.FinishCreateNewSceneBuffer(fbb, CreateNewScene.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
