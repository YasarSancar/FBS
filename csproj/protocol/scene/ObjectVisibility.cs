// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.protocol.scene.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ObjectVisibility : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ObjectVisibility GetRootAsObjectVisibility(ByteBuffer _bb) { return GetRootAsObjectVisibility(_bb, new ObjectVisibility()); }
  public static ObjectVisibility GetRootAsObjectVisibility(ByteBuffer _bb, ObjectVisibility obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectVisibility __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NodeId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNodeIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNodeIdArray() { return __p.__vector_as_array<byte>(4); }
  public bool IsVisible { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.protocol.scene.fb.ObjectVisibility> CreateObjectVisibility(FlatBufferBuilder builder,
      StringOffset nodeIdOffset = default(StringOffset),
      bool isVisible = false) {
    builder.StartTable(2);
    ObjectVisibility.AddNodeId(builder, nodeIdOffset);
    ObjectVisibility.AddIsVisible(builder, isVisible);
    return ObjectVisibility.EndObjectVisibility(builder);
  }

  public static void StartObjectVisibility(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNodeId(FlatBufferBuilder builder, StringOffset nodeIdOffset) { builder.AddOffset(0, nodeIdOffset.Value, 0); }
  public static void AddIsVisible(FlatBufferBuilder builder, bool isVisible) { builder.AddBool(1, isVisible, false); }
  public static Offset<gfl.protocol.scene.fb.ObjectVisibility> EndObjectVisibility(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.protocol.scene.fb.ObjectVisibility>(o);
  }
  public static void FinishObjectVisibilityBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.ObjectVisibility> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedObjectVisibilityBuffer(FlatBufferBuilder builder, Offset<gfl.protocol.scene.fb.ObjectVisibility> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ObjectVisibilityT UnPack() {
    var _o = new ObjectVisibilityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectVisibilityT _o) {
    _o.NodeId = this.NodeId;
    _o.IsVisible = this.IsVisible;
  }
  public static Offset<gfl.protocol.scene.fb.ObjectVisibility> Pack(FlatBufferBuilder builder, ObjectVisibilityT _o) {
    if (_o == null) return default(Offset<gfl.protocol.scene.fb.ObjectVisibility>);
    var _nodeId = _o.NodeId == null ? default(StringOffset) : builder.CreateString(_o.NodeId);
    return CreateObjectVisibility(
      builder,
      _nodeId,
      _o.IsVisible);
  }
};

public class ObjectVisibilityT
{
  [Newtonsoft.Json.JsonProperty("nodeId")]
  public string NodeId { get; set; }
  [Newtonsoft.Json.JsonProperty("isVisible")]
  public bool IsVisible { get; set; }

  public ObjectVisibilityT() {
    this.NodeId = null;
    this.IsVisible = false;
  }

  public static ObjectVisibilityT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectVisibilityT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ObjectVisibilityT DeserializeFromBinary(byte[] fbBuffer) {
    return ObjectVisibility.GetRootAsObjectVisibility(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ObjectVisibility.FinishObjectVisibilityBuffer(fbb, ObjectVisibility.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
