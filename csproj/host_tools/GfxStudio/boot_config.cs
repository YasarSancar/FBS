// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GfxStudio
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BootConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BootConfig GetRootAsBootConfig(ByteBuffer _bb) { return GetRootAsBootConfig(_bb, new BootConfig()); }
  public static BootConfig GetRootAsBootConfig(ByteBuffer _bb, BootConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BootConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string UserGuideURL { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserGuideURLBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUserGuideURLBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUserGuideURLArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<GfxStudio.BootConfig> CreateBootConfig(FlatBufferBuilder builder,
      StringOffset UserGuideURLOffset = default(StringOffset)) {
    builder.StartTable(1);
    BootConfig.AddUserGuideURL(builder, UserGuideURLOffset);
    return BootConfig.EndBootConfig(builder);
  }

  public static void StartBootConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUserGuideURL(FlatBufferBuilder builder, StringOffset UserGuideURLOffset) { builder.AddOffset(0, UserGuideURLOffset.Value, 0); }
  public static Offset<GfxStudio.BootConfig> EndBootConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.BootConfig>(o);
  }
  public static void FinishBootConfigBuffer(FlatBufferBuilder builder, Offset<GfxStudio.BootConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBootConfigBuffer(FlatBufferBuilder builder, Offset<GfxStudio.BootConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public BootConfigT UnPack() {
    var _o = new BootConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BootConfigT _o) {
    _o.UserGuideURL = this.UserGuideURL;
  }
  public static Offset<GfxStudio.BootConfig> Pack(FlatBufferBuilder builder, BootConfigT _o) {
    if (_o == null) return default(Offset<GfxStudio.BootConfig>);
    var _UserGuideURL = _o.UserGuideURL == null ? default(StringOffset) : builder.CreateString(_o.UserGuideURL);
    return CreateBootConfig(
      builder,
      _UserGuideURL);
  }
};

public class BootConfigT
{
  [Newtonsoft.Json.JsonProperty("UserGuideURL")]
  public string UserGuideURL { get; set; }

  public BootConfigT() {
    this.UserGuideURL = null;
  }

  public static BootConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<BootConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static BootConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return BootConfig.GetRootAsBootConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BootConfig.FinishBootConfigBuffer(fbb, BootConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
