// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GfxStudio.UI
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EventEditorConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventEditorConfig GetRootAsEventEditorConfig(ByteBuffer _bb) { return GetRootAsEventEditorConfig(_bb, new EventEditorConfig()); }
  public static EventEditorConfig GetRootAsEventEditorConfig(ByteBuffer _bb, EventEditorConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventEditorConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float TimelineScale { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }

  public static Offset<GfxStudio.UI.EventEditorConfig> CreateEventEditorConfig(FlatBufferBuilder builder,
      float TimelineScale = 1.0f) {
    builder.StartTable(1);
    EventEditorConfig.AddTimelineScale(builder, TimelineScale);
    return EventEditorConfig.EndEventEditorConfig(builder);
  }

  public static void StartEventEditorConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTimelineScale(FlatBufferBuilder builder, float TimelineScale) { builder.AddFloat(0, TimelineScale, 1.0f); }
  public static Offset<GfxStudio.UI.EventEditorConfig> EndEventEditorConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.EventEditorConfig>(o);
  }
  public static void FinishEventEditorConfigBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.EventEditorConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEventEditorConfigBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.EventEditorConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public EventEditorConfigT UnPack() {
    var _o = new EventEditorConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventEditorConfigT _o) {
    _o.TimelineScale = this.TimelineScale;
  }
  public static Offset<GfxStudio.UI.EventEditorConfig> Pack(FlatBufferBuilder builder, EventEditorConfigT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.EventEditorConfig>);
    return CreateEventEditorConfig(
      builder,
      _o.TimelineScale);
  }
};

public class EventEditorConfigT
{
  [Newtonsoft.Json.JsonProperty("TimelineScale")]
  public float TimelineScale { get; set; }

  public EventEditorConfigT() {
    this.TimelineScale = 1.0f;
  }

  public static EventEditorConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<EventEditorConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static EventEditorConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return EventEditorConfig.GetRootAsEventEditorConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EventEditorConfig.FinishEventEditorConfigBuffer(fbb, EventEditorConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
