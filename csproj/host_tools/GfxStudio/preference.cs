// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GfxStudio.UI.Preference.FB
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Version : sbyte
{
  CurrentVersion = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LookAtInterpolationType : uint
{
  Linear = 0,
  EaseInOutQuad = 1,
  EaseInOutCubic = 2,
  EaseInOutQuart = 3,
  EaseInOutQuint = 4,
  EaseInOutSine = 5,
};

public struct Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb) { return GetRootAsVector3(_bb, new Vector3()); }
  public static Vector3 GetRootAsVector3(ByteBuffer _bb, Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GfxStudio.UI.Preference.FB.Vector3> CreateVector3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartTable(3);
    Vector3.AddZ(builder, z);
    Vector3.AddY(builder, y);
    Vector3.AddX(builder, x);
    return Vector3.EndVector3(builder);
  }

  public static void StartVector3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<GfxStudio.UI.Preference.FB.Vector3> EndVector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.Vector3>(o);
  }
  public Vector3T UnPack() {
    var _o = new Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<GfxStudio.UI.Preference.FB.Vector3> Pack(FlatBufferBuilder builder, Vector3T _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.Vector3>);
    return CreateVector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct General : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static General GetRootAsGeneral(ByteBuffer _bb) { return GetRootAsGeneral(_bb, new General()); }
  public static General GetRootAsGeneral(ByteBuffer _bb, General obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public General __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ViewerPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetViewerPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetViewerPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetViewerPathArray() { return __p.__vector_as_array<byte>(4); }
  public bool ViewerTopMost { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ViewerFovy { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ViewerNear { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ViewerFar { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GfxStudio.UI.Preference.FB.General> CreateGeneral(FlatBufferBuilder builder,
      StringOffset viewerPathOffset = default(StringOffset),
      bool viewerTopMost = false,
      float viewerFovy = 0.0f,
      float viewerNear = 0.0f,
      float viewerFar = 0.0f) {
    builder.StartTable(5);
    General.AddViewerFar(builder, viewerFar);
    General.AddViewerNear(builder, viewerNear);
    General.AddViewerFovy(builder, viewerFovy);
    General.AddViewerPath(builder, viewerPathOffset);
    General.AddViewerTopMost(builder, viewerTopMost);
    return General.EndGeneral(builder);
  }

  public static void StartGeneral(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddViewerPath(FlatBufferBuilder builder, StringOffset viewerPathOffset) { builder.AddOffset(0, viewerPathOffset.Value, 0); }
  public static void AddViewerTopMost(FlatBufferBuilder builder, bool viewerTopMost) { builder.AddBool(1, viewerTopMost, false); }
  public static void AddViewerFovy(FlatBufferBuilder builder, float viewerFovy) { builder.AddFloat(2, viewerFovy, 0.0f); }
  public static void AddViewerNear(FlatBufferBuilder builder, float viewerNear) { builder.AddFloat(3, viewerNear, 0.0f); }
  public static void AddViewerFar(FlatBufferBuilder builder, float viewerFar) { builder.AddFloat(4, viewerFar, 0.0f); }
  public static Offset<GfxStudio.UI.Preference.FB.General> EndGeneral(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.General>(o);
  }
  public GeneralT UnPack() {
    var _o = new GeneralT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GeneralT _o) {
    _o.ViewerPath = this.ViewerPath;
    _o.ViewerTopMost = this.ViewerTopMost;
    _o.ViewerFovy = this.ViewerFovy;
    _o.ViewerNear = this.ViewerNear;
    _o.ViewerFar = this.ViewerFar;
  }
  public static Offset<GfxStudio.UI.Preference.FB.General> Pack(FlatBufferBuilder builder, GeneralT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.General>);
    var _viewerPath = _o.ViewerPath == null ? default(StringOffset) : builder.CreateString(_o.ViewerPath);
    return CreateGeneral(
      builder,
      _viewerPath,
      _o.ViewerTopMost,
      _o.ViewerFovy,
      _o.ViewerNear,
      _o.ViewerFar);
  }
};

public class GeneralT
{
  [Newtonsoft.Json.JsonProperty("viewerPath")]
  public string ViewerPath { get; set; }
  [Newtonsoft.Json.JsonProperty("viewerTopMost")]
  public bool ViewerTopMost { get; set; }
  [Newtonsoft.Json.JsonProperty("viewerFovy")]
  public float ViewerFovy { get; set; }
  [Newtonsoft.Json.JsonProperty("viewerNear")]
  public float ViewerNear { get; set; }
  [Newtonsoft.Json.JsonProperty("viewerFar")]
  public float ViewerFar { get; set; }

  public GeneralT() {
    this.ViewerPath = null;
    this.ViewerTopMost = false;
    this.ViewerFovy = 0.0f;
    this.ViewerNear = 0.0f;
    this.ViewerFar = 0.0f;
  }
}

public struct Presets : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Presets GetRootAsPresets(ByteBuffer _bb) { return GetRootAsPresets(_bb, new Presets()); }
  public static Presets GetRootAsPresets(ByteBuffer _bb, Presets obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Presets __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AnimationEventDirectory { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationEventDirectoryBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAnimationEventDirectoryBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAnimationEventDirectoryArray() { return __p.__vector_as_array<byte>(4); }
  public string AnimationStateDirectory { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationStateDirectoryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAnimationStateDirectoryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAnimationStateDirectoryArray() { return __p.__vector_as_array<byte>(6); }
  public string AnimationTagDirectory { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationTagDirectoryBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAnimationTagDirectoryBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAnimationTagDirectoryArray() { return __p.__vector_as_array<byte>(8); }
  public string LightDirectory { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightDirectoryBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLightDirectoryBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLightDirectoryArray() { return __p.__vector_as_array<byte>(10); }
  public string ImplicitVolumeDirectory { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImplicitVolumeDirectoryBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetImplicitVolumeDirectoryBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetImplicitVolumeDirectoryArray() { return __p.__vector_as_array<byte>(12); }
  public string AttachmentDirectory { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttachmentDirectoryBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAttachmentDirectoryBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAttachmentDirectoryArray() { return __p.__vector_as_array<byte>(14); }
  public string PostEffectDirectory { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostEffectDirectoryBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPostEffectDirectoryBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPostEffectDirectoryArray() { return __p.__vector_as_array<byte>(16); }
  public string MaterialDirectory { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialDirectoryBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMaterialDirectoryBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMaterialDirectoryArray() { return __p.__vector_as_array<byte>(18); }
  public string AnimationEventTrackDirectory { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationEventTrackDirectoryBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAnimationEventTrackDirectoryBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAnimationEventTrackDirectoryArray() { return __p.__vector_as_array<byte>(20); }
  public string AnimationPreviewDirectory { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationPreviewDirectoryBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAnimationPreviewDirectoryBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAnimationPreviewDirectoryArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<GfxStudio.UI.Preference.FB.Presets> CreatePresets(FlatBufferBuilder builder,
      StringOffset animationEventDirectoryOffset = default(StringOffset),
      StringOffset animationStateDirectoryOffset = default(StringOffset),
      StringOffset animationTagDirectoryOffset = default(StringOffset),
      StringOffset lightDirectoryOffset = default(StringOffset),
      StringOffset implicitVolumeDirectoryOffset = default(StringOffset),
      StringOffset attachmentDirectoryOffset = default(StringOffset),
      StringOffset postEffectDirectoryOffset = default(StringOffset),
      StringOffset materialDirectoryOffset = default(StringOffset),
      StringOffset animationEventTrackDirectoryOffset = default(StringOffset),
      StringOffset animationPreviewDirectoryOffset = default(StringOffset)) {
    builder.StartTable(10);
    Presets.AddAnimationPreviewDirectory(builder, animationPreviewDirectoryOffset);
    Presets.AddAnimationEventTrackDirectory(builder, animationEventTrackDirectoryOffset);
    Presets.AddMaterialDirectory(builder, materialDirectoryOffset);
    Presets.AddPostEffectDirectory(builder, postEffectDirectoryOffset);
    Presets.AddAttachmentDirectory(builder, attachmentDirectoryOffset);
    Presets.AddImplicitVolumeDirectory(builder, implicitVolumeDirectoryOffset);
    Presets.AddLightDirectory(builder, lightDirectoryOffset);
    Presets.AddAnimationTagDirectory(builder, animationTagDirectoryOffset);
    Presets.AddAnimationStateDirectory(builder, animationStateDirectoryOffset);
    Presets.AddAnimationEventDirectory(builder, animationEventDirectoryOffset);
    return Presets.EndPresets(builder);
  }

  public static void StartPresets(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddAnimationEventDirectory(FlatBufferBuilder builder, StringOffset animationEventDirectoryOffset) { builder.AddOffset(0, animationEventDirectoryOffset.Value, 0); }
  public static void AddAnimationStateDirectory(FlatBufferBuilder builder, StringOffset animationStateDirectoryOffset) { builder.AddOffset(1, animationStateDirectoryOffset.Value, 0); }
  public static void AddAnimationTagDirectory(FlatBufferBuilder builder, StringOffset animationTagDirectoryOffset) { builder.AddOffset(2, animationTagDirectoryOffset.Value, 0); }
  public static void AddLightDirectory(FlatBufferBuilder builder, StringOffset lightDirectoryOffset) { builder.AddOffset(3, lightDirectoryOffset.Value, 0); }
  public static void AddImplicitVolumeDirectory(FlatBufferBuilder builder, StringOffset implicitVolumeDirectoryOffset) { builder.AddOffset(4, implicitVolumeDirectoryOffset.Value, 0); }
  public static void AddAttachmentDirectory(FlatBufferBuilder builder, StringOffset attachmentDirectoryOffset) { builder.AddOffset(5, attachmentDirectoryOffset.Value, 0); }
  public static void AddPostEffectDirectory(FlatBufferBuilder builder, StringOffset postEffectDirectoryOffset) { builder.AddOffset(6, postEffectDirectoryOffset.Value, 0); }
  public static void AddMaterialDirectory(FlatBufferBuilder builder, StringOffset materialDirectoryOffset) { builder.AddOffset(7, materialDirectoryOffset.Value, 0); }
  public static void AddAnimationEventTrackDirectory(FlatBufferBuilder builder, StringOffset animationEventTrackDirectoryOffset) { builder.AddOffset(8, animationEventTrackDirectoryOffset.Value, 0); }
  public static void AddAnimationPreviewDirectory(FlatBufferBuilder builder, StringOffset animationPreviewDirectoryOffset) { builder.AddOffset(9, animationPreviewDirectoryOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.Presets> EndPresets(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.Presets>(o);
  }
  public PresetsT UnPack() {
    var _o = new PresetsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetsT _o) {
    _o.AnimationEventDirectory = this.AnimationEventDirectory;
    _o.AnimationStateDirectory = this.AnimationStateDirectory;
    _o.AnimationTagDirectory = this.AnimationTagDirectory;
    _o.LightDirectory = this.LightDirectory;
    _o.ImplicitVolumeDirectory = this.ImplicitVolumeDirectory;
    _o.AttachmentDirectory = this.AttachmentDirectory;
    _o.PostEffectDirectory = this.PostEffectDirectory;
    _o.MaterialDirectory = this.MaterialDirectory;
    _o.AnimationEventTrackDirectory = this.AnimationEventTrackDirectory;
    _o.AnimationPreviewDirectory = this.AnimationPreviewDirectory;
  }
  public static Offset<GfxStudio.UI.Preference.FB.Presets> Pack(FlatBufferBuilder builder, PresetsT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.Presets>);
    var _animationEventDirectory = _o.AnimationEventDirectory == null ? default(StringOffset) : builder.CreateString(_o.AnimationEventDirectory);
    var _animationStateDirectory = _o.AnimationStateDirectory == null ? default(StringOffset) : builder.CreateString(_o.AnimationStateDirectory);
    var _animationTagDirectory = _o.AnimationTagDirectory == null ? default(StringOffset) : builder.CreateString(_o.AnimationTagDirectory);
    var _lightDirectory = _o.LightDirectory == null ? default(StringOffset) : builder.CreateString(_o.LightDirectory);
    var _implicitVolumeDirectory = _o.ImplicitVolumeDirectory == null ? default(StringOffset) : builder.CreateString(_o.ImplicitVolumeDirectory);
    var _attachmentDirectory = _o.AttachmentDirectory == null ? default(StringOffset) : builder.CreateString(_o.AttachmentDirectory);
    var _postEffectDirectory = _o.PostEffectDirectory == null ? default(StringOffset) : builder.CreateString(_o.PostEffectDirectory);
    var _materialDirectory = _o.MaterialDirectory == null ? default(StringOffset) : builder.CreateString(_o.MaterialDirectory);
    var _animationEventTrackDirectory = _o.AnimationEventTrackDirectory == null ? default(StringOffset) : builder.CreateString(_o.AnimationEventTrackDirectory);
    var _animationPreviewDirectory = _o.AnimationPreviewDirectory == null ? default(StringOffset) : builder.CreateString(_o.AnimationPreviewDirectory);
    return CreatePresets(
      builder,
      _animationEventDirectory,
      _animationStateDirectory,
      _animationTagDirectory,
      _lightDirectory,
      _implicitVolumeDirectory,
      _attachmentDirectory,
      _postEffectDirectory,
      _materialDirectory,
      _animationEventTrackDirectory,
      _animationPreviewDirectory);
  }
};

public class PresetsT
{
  [Newtonsoft.Json.JsonProperty("animationEventDirectory")]
  public string AnimationEventDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("animationStateDirectory")]
  public string AnimationStateDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("animationTagDirectory")]
  public string AnimationTagDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("lightDirectory")]
  public string LightDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("implicitVolumeDirectory")]
  public string ImplicitVolumeDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("attachmentDirectory")]
  public string AttachmentDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("postEffectDirectory")]
  public string PostEffectDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("materialDirectory")]
  public string MaterialDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("animationEventTrackDirectory")]
  public string AnimationEventTrackDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("animationPreviewDirectory")]
  public string AnimationPreviewDirectory { get; set; }

  public PresetsT() {
    this.AnimationEventDirectory = null;
    this.AnimationStateDirectory = null;
    this.AnimationTagDirectory = null;
    this.LightDirectory = null;
    this.ImplicitVolumeDirectory = null;
    this.AttachmentDirectory = null;
    this.PostEffectDirectory = null;
    this.MaterialDirectory = null;
    this.AnimationEventTrackDirectory = null;
    this.AnimationPreviewDirectory = null;
  }
}

public struct PreloadModel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PreloadModel GetRootAsPreloadModel(ByteBuffer _bb) { return GetRootAsPreloadModel(_bb, new PreloadModel()); }
  public static PreloadModel GetRootAsPreloadModel(ByteBuffer _bb, PreloadModel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreloadModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrmdlPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrmdlPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrmdlPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrmdlPathArray() { return __p.__vector_as_array<byte>(4); }
  public bool DefaultDisp { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GfxStudio.UI.Preference.FB.Vector3? Scale { get { int o = __p.__offset(8); return o != 0 ? (GfxStudio.UI.Preference.FB.Vector3?)(new GfxStudio.UI.Preference.FB.Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.Vector3? Rotation { get { int o = __p.__offset(10); return o != 0 ? (GfxStudio.UI.Preference.FB.Vector3?)(new GfxStudio.UI.Preference.FB.Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.Vector3? Translation { get { int o = __p.__offset(12); return o != 0 ? (GfxStudio.UI.Preference.FB.Vector3?)(new GfxStudio.UI.Preference.FB.Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GfxStudio.UI.Preference.FB.PreloadModel> CreatePreloadModel(FlatBufferBuilder builder,
      StringOffset trmdlPathOffset = default(StringOffset),
      bool defaultDisp = false,
      Offset<GfxStudio.UI.Preference.FB.Vector3> scaleOffset = default(Offset<GfxStudio.UI.Preference.FB.Vector3>),
      Offset<GfxStudio.UI.Preference.FB.Vector3> rotationOffset = default(Offset<GfxStudio.UI.Preference.FB.Vector3>),
      Offset<GfxStudio.UI.Preference.FB.Vector3> translationOffset = default(Offset<GfxStudio.UI.Preference.FB.Vector3>)) {
    builder.StartTable(5);
    PreloadModel.AddTranslation(builder, translationOffset);
    PreloadModel.AddRotation(builder, rotationOffset);
    PreloadModel.AddScale(builder, scaleOffset);
    PreloadModel.AddTrmdlPath(builder, trmdlPathOffset);
    PreloadModel.AddDefaultDisp(builder, defaultDisp);
    return PreloadModel.EndPreloadModel(builder);
  }

  public static void StartPreloadModel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTrmdlPath(FlatBufferBuilder builder, StringOffset trmdlPathOffset) { builder.AddOffset(0, trmdlPathOffset.Value, 0); }
  public static void AddDefaultDisp(FlatBufferBuilder builder, bool defaultDisp) { builder.AddBool(1, defaultDisp, false); }
  public static void AddScale(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Vector3> scaleOffset) { builder.AddOffset(2, scaleOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Vector3> rotationOffset) { builder.AddOffset(3, rotationOffset.Value, 0); }
  public static void AddTranslation(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Vector3> translationOffset) { builder.AddOffset(4, translationOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.PreloadModel> EndPreloadModel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.PreloadModel>(o);
  }
  public PreloadModelT UnPack() {
    var _o = new PreloadModelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreloadModelT _o) {
    _o.TrmdlPath = this.TrmdlPath;
    _o.DefaultDisp = this.DefaultDisp;
    _o.Scale = this.Scale.HasValue ? this.Scale.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Translation = this.Translation.HasValue ? this.Translation.Value.UnPack() : null;
  }
  public static Offset<GfxStudio.UI.Preference.FB.PreloadModel> Pack(FlatBufferBuilder builder, PreloadModelT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.PreloadModel>);
    var _trmdlPath = _o.TrmdlPath == null ? default(StringOffset) : builder.CreateString(_o.TrmdlPath);
    var _scale = _o.Scale == null ? default(Offset<GfxStudio.UI.Preference.FB.Vector3>) : GfxStudio.UI.Preference.FB.Vector3.Pack(builder, _o.Scale);
    var _rotation = _o.Rotation == null ? default(Offset<GfxStudio.UI.Preference.FB.Vector3>) : GfxStudio.UI.Preference.FB.Vector3.Pack(builder, _o.Rotation);
    var _translation = _o.Translation == null ? default(Offset<GfxStudio.UI.Preference.FB.Vector3>) : GfxStudio.UI.Preference.FB.Vector3.Pack(builder, _o.Translation);
    return CreatePreloadModel(
      builder,
      _trmdlPath,
      _o.DefaultDisp,
      _scale,
      _rotation,
      _translation);
  }
};

public class PreloadModelT
{
  [Newtonsoft.Json.JsonProperty("trmdlPath")]
  public string TrmdlPath { get; set; }
  [Newtonsoft.Json.JsonProperty("defaultDisp")]
  public bool DefaultDisp { get; set; }
  [Newtonsoft.Json.JsonProperty("scale")]
  public GfxStudio.UI.Preference.FB.Vector3T Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation")]
  public GfxStudio.UI.Preference.FB.Vector3T Rotation { get; set; }
  [Newtonsoft.Json.JsonProperty("translation")]
  public GfxStudio.UI.Preference.FB.Vector3T Translation { get; set; }

  public PreloadModelT() {
    this.TrmdlPath = null;
    this.DefaultDisp = false;
    this.Scale = null;
    this.Rotation = null;
    this.Translation = null;
  }
}

public struct ModelViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelViewer GetRootAsModelViewer(ByteBuffer _bb) { return GetRootAsModelViewer(_bb, new ModelViewer()); }
  public static ModelViewer GetRootAsModelViewer(ByteBuffer _bb, ModelViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GfxStudio.UI.Preference.FB.PreloadModel? PreloadModelList(int j) { int o = __p.__offset(4); return o != 0 ? (GfxStudio.UI.Preference.FB.PreloadModel?)(new GfxStudio.UI.Preference.FB.PreloadModel()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PreloadModelListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PreloadAnimationList(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PreloadAnimationListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsLocatorDefaultLoadPreset { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ConvertOptionFilePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConvertOptionFilePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetConvertOptionFilePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetConvertOptionFilePathArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GfxStudio.UI.Preference.FB.ModelViewer> CreateModelViewer(FlatBufferBuilder builder,
      VectorOffset preloadModelListOffset = default(VectorOffset),
      VectorOffset preloadAnimationListOffset = default(VectorOffset),
      bool isLocatorDefaultLoadPreset = false,
      StringOffset convertOptionFilePathOffset = default(StringOffset)) {
    builder.StartTable(4);
    ModelViewer.AddConvertOptionFilePath(builder, convertOptionFilePathOffset);
    ModelViewer.AddPreloadAnimationList(builder, preloadAnimationListOffset);
    ModelViewer.AddPreloadModelList(builder, preloadModelListOffset);
    ModelViewer.AddIsLocatorDefaultLoadPreset(builder, isLocatorDefaultLoadPreset);
    return ModelViewer.EndModelViewer(builder);
  }

  public static void StartModelViewer(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPreloadModelList(FlatBufferBuilder builder, VectorOffset preloadModelListOffset) { builder.AddOffset(0, preloadModelListOffset.Value, 0); }
  public static VectorOffset CreatePreloadModelListVector(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.PreloadModel>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreloadModelListVectorBlock(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.PreloadModel>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPreloadModelListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPreloadAnimationList(FlatBufferBuilder builder, VectorOffset preloadAnimationListOffset) { builder.AddOffset(1, preloadAnimationListOffset.Value, 0); }
  public static VectorOffset CreatePreloadAnimationListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreloadAnimationListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPreloadAnimationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsLocatorDefaultLoadPreset(FlatBufferBuilder builder, bool isLocatorDefaultLoadPreset) { builder.AddBool(2, isLocatorDefaultLoadPreset, false); }
  public static void AddConvertOptionFilePath(FlatBufferBuilder builder, StringOffset convertOptionFilePathOffset) { builder.AddOffset(3, convertOptionFilePathOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.ModelViewer> EndModelViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.ModelViewer>(o);
  }
  public ModelViewerT UnPack() {
    var _o = new ModelViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelViewerT _o) {
    _o.PreloadModelList = new List<GfxStudio.UI.Preference.FB.PreloadModelT>();
    for (var _j = 0; _j < this.PreloadModelListLength; ++_j) {_o.PreloadModelList.Add(this.PreloadModelList(_j).HasValue ? this.PreloadModelList(_j).Value.UnPack() : null);}
    _o.PreloadAnimationList = new List<string>();
    for (var _j = 0; _j < this.PreloadAnimationListLength; ++_j) {_o.PreloadAnimationList.Add(this.PreloadAnimationList(_j));}
    _o.IsLocatorDefaultLoadPreset = this.IsLocatorDefaultLoadPreset;
    _o.ConvertOptionFilePath = this.ConvertOptionFilePath;
  }
  public static Offset<GfxStudio.UI.Preference.FB.ModelViewer> Pack(FlatBufferBuilder builder, ModelViewerT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.ModelViewer>);
    var _preloadModelList = default(VectorOffset);
    if (_o.PreloadModelList != null) {
      var __preloadModelList = new Offset<GfxStudio.UI.Preference.FB.PreloadModel>[_o.PreloadModelList.Count];
      for (var _j = 0; _j < __preloadModelList.Length; ++_j) { __preloadModelList[_j] = GfxStudio.UI.Preference.FB.PreloadModel.Pack(builder, _o.PreloadModelList[_j]); }
      _preloadModelList = CreatePreloadModelListVector(builder, __preloadModelList);
    }
    var _preloadAnimationList = default(VectorOffset);
    if (_o.PreloadAnimationList != null) {
      var __preloadAnimationList = new StringOffset[_o.PreloadAnimationList.Count];
      for (var _j = 0; _j < __preloadAnimationList.Length; ++_j) { __preloadAnimationList[_j] = builder.CreateString(_o.PreloadAnimationList[_j]); }
      _preloadAnimationList = CreatePreloadAnimationListVector(builder, __preloadAnimationList);
    }
    var _convertOptionFilePath = _o.ConvertOptionFilePath == null ? default(StringOffset) : builder.CreateString(_o.ConvertOptionFilePath);
    return CreateModelViewer(
      builder,
      _preloadModelList,
      _preloadAnimationList,
      _o.IsLocatorDefaultLoadPreset,
      _convertOptionFilePath);
  }
};

public class ModelViewerT
{
  [Newtonsoft.Json.JsonProperty("preloadModelList")]
  public List<GfxStudio.UI.Preference.FB.PreloadModelT> PreloadModelList { get; set; }
  [Newtonsoft.Json.JsonProperty("preloadAnimationList")]
  public List<string> PreloadAnimationList { get; set; }
  [Newtonsoft.Json.JsonProperty("isLocatorDefaultLoadPreset")]
  public bool IsLocatorDefaultLoadPreset { get; set; }
  [Newtonsoft.Json.JsonProperty("convertOptionFilePath")]
  public string ConvertOptionFilePath { get; set; }

  public ModelViewerT() {
    this.PreloadModelList = null;
    this.PreloadAnimationList = null;
    this.IsLocatorDefaultLoadPreset = false;
    this.ConvertOptionFilePath = null;
  }
}

public struct AnimationConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationConfig GetRootAsAnimationConfig(ByteBuffer _bb) { return GetRootAsAnimationConfig(_bb, new AnimationConfig()); }
  public static AnimationConfig GetRootAsAnimationConfig(ByteBuffer _bb, AnimationConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LookAtImportStartFrame { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LookAtImportFrameInterval { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float LookAtInterpolationTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GfxStudio.UI.Preference.FB.LookAtInterpolationType LookAtInterpolationType { get { int o = __p.__offset(10); return o != 0 ? (GfxStudio.UI.Preference.FB.LookAtInterpolationType)__p.bb.GetUint(o + __p.bb_pos) : GfxStudio.UI.Preference.FB.LookAtInterpolationType.Linear; } }
  public GfxStudio.UI.Preference.FB.Vector3? LookAtPosition { get { int o = __p.__offset(12); return o != 0 ? (GfxStudio.UI.Preference.FB.Vector3?)(new GfxStudio.UI.Preference.FB.Vector3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GfxStudio.UI.Preference.FB.AnimationConfig> CreateAnimationConfig(FlatBufferBuilder builder,
      int lookAtImportStartFrame = 0,
      int lookAtImportFrameInterval = 0,
      float lookAtInterpolationTime = 0.0f,
      GfxStudio.UI.Preference.FB.LookAtInterpolationType lookAtInterpolationType = GfxStudio.UI.Preference.FB.LookAtInterpolationType.Linear,
      Offset<GfxStudio.UI.Preference.FB.Vector3> lookAtPositionOffset = default(Offset<GfxStudio.UI.Preference.FB.Vector3>)) {
    builder.StartTable(5);
    AnimationConfig.AddLookAtPosition(builder, lookAtPositionOffset);
    AnimationConfig.AddLookAtInterpolationType(builder, lookAtInterpolationType);
    AnimationConfig.AddLookAtInterpolationTime(builder, lookAtInterpolationTime);
    AnimationConfig.AddLookAtImportFrameInterval(builder, lookAtImportFrameInterval);
    AnimationConfig.AddLookAtImportStartFrame(builder, lookAtImportStartFrame);
    return AnimationConfig.EndAnimationConfig(builder);
  }

  public static void StartAnimationConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddLookAtImportStartFrame(FlatBufferBuilder builder, int lookAtImportStartFrame) { builder.AddInt(0, lookAtImportStartFrame, 0); }
  public static void AddLookAtImportFrameInterval(FlatBufferBuilder builder, int lookAtImportFrameInterval) { builder.AddInt(1, lookAtImportFrameInterval, 0); }
  public static void AddLookAtInterpolationTime(FlatBufferBuilder builder, float lookAtInterpolationTime) { builder.AddFloat(2, lookAtInterpolationTime, 0.0f); }
  public static void AddLookAtInterpolationType(FlatBufferBuilder builder, GfxStudio.UI.Preference.FB.LookAtInterpolationType lookAtInterpolationType) { builder.AddUint(3, (uint)lookAtInterpolationType, 0); }
  public static void AddLookAtPosition(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Vector3> lookAtPositionOffset) { builder.AddOffset(4, lookAtPositionOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.AnimationConfig> EndAnimationConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.AnimationConfig>(o);
  }
  public AnimationConfigT UnPack() {
    var _o = new AnimationConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationConfigT _o) {
    _o.LookAtImportStartFrame = this.LookAtImportStartFrame;
    _o.LookAtImportFrameInterval = this.LookAtImportFrameInterval;
    _o.LookAtInterpolationTime = this.LookAtInterpolationTime;
    _o.LookAtInterpolationType = this.LookAtInterpolationType;
    _o.LookAtPosition = this.LookAtPosition.HasValue ? this.LookAtPosition.Value.UnPack() : null;
  }
  public static Offset<GfxStudio.UI.Preference.FB.AnimationConfig> Pack(FlatBufferBuilder builder, AnimationConfigT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.AnimationConfig>);
    var _lookAtPosition = _o.LookAtPosition == null ? default(Offset<GfxStudio.UI.Preference.FB.Vector3>) : GfxStudio.UI.Preference.FB.Vector3.Pack(builder, _o.LookAtPosition);
    return CreateAnimationConfig(
      builder,
      _o.LookAtImportStartFrame,
      _o.LookAtImportFrameInterval,
      _o.LookAtInterpolationTime,
      _o.LookAtInterpolationType,
      _lookAtPosition);
  }
};

public class AnimationConfigT
{
  [Newtonsoft.Json.JsonProperty("lookAtImportStartFrame")]
  public int LookAtImportStartFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("lookAtImportFrameInterval")]
  public int LookAtImportFrameInterval { get; set; }
  [Newtonsoft.Json.JsonProperty("lookAtInterpolationTime")]
  public float LookAtInterpolationTime { get; set; }
  [Newtonsoft.Json.JsonProperty("lookAtInterpolationType")]
  public GfxStudio.UI.Preference.FB.LookAtInterpolationType LookAtInterpolationType { get; set; }
  [Newtonsoft.Json.JsonProperty("lookAtPosition")]
  public GfxStudio.UI.Preference.FB.Vector3T LookAtPosition { get; set; }

  public AnimationConfigT() {
    this.LookAtImportStartFrame = 0;
    this.LookAtImportFrameInterval = 0;
    this.LookAtInterpolationTime = 0.0f;
    this.LookAtInterpolationType = GfxStudio.UI.Preference.FB.LookAtInterpolationType.Linear;
    this.LookAtPosition = null;
  }
}

public struct CollisionFilter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CollisionFilter GetRootAsCollisionFilter(ByteBuffer _bb) { return GetRootAsCollisionFilter(_bb, new CollisionFilter()); }
  public static CollisionFilter GetRootAsCollisionFilter(ByteBuffer _bb, CollisionFilter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollisionFilter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Filter { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GfxStudio.UI.Preference.FB.CollisionFilter> CreateCollisionFilter(FlatBufferBuilder builder,
      int filter = 0) {
    builder.StartTable(1);
    CollisionFilter.AddFilter(builder, filter);
    return CollisionFilter.EndCollisionFilter(builder);
  }

  public static void StartCollisionFilter(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilter(FlatBufferBuilder builder, int filter) { builder.AddInt(0, filter, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.CollisionFilter> EndCollisionFilter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.CollisionFilter>(o);
  }
  public CollisionFilterT UnPack() {
    var _o = new CollisionFilterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollisionFilterT _o) {
    _o.Filter = this.Filter;
  }
  public static Offset<GfxStudio.UI.Preference.FB.CollisionFilter> Pack(FlatBufferBuilder builder, CollisionFilterT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.CollisionFilter>);
    return CreateCollisionFilter(
      builder,
      _o.Filter);
  }
};

public class CollisionFilterT
{
  [Newtonsoft.Json.JsonProperty("filter")]
  public int Filter { get; set; }

  public CollisionFilterT() {
    this.Filter = 0;
  }
}

public struct Physics : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Physics GetRootAsPhysics(ByteBuffer _bb) { return GetRootAsPhysics(_bb, new Physics()); }
  public static Physics GetRootAsPhysics(ByteBuffer _bb, Physics obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Physics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GfxStudio.UI.Preference.FB.CollisionFilter? CollisionFilterList(int j) { int o = __p.__offset(4); return o != 0 ? (GfxStudio.UI.Preference.FB.CollisionFilter?)(new GfxStudio.UI.Preference.FB.CollisionFilter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CollisionFilterListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GfxStudio.UI.Preference.FB.Physics> CreatePhysics(FlatBufferBuilder builder,
      VectorOffset collisionFilterListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Physics.AddCollisionFilterList(builder, collisionFilterListOffset);
    return Physics.EndPhysics(builder);
  }

  public static void StartPhysics(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCollisionFilterList(FlatBufferBuilder builder, VectorOffset collisionFilterListOffset) { builder.AddOffset(0, collisionFilterListOffset.Value, 0); }
  public static VectorOffset CreateCollisionFilterListVector(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.CollisionFilter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCollisionFilterListVectorBlock(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.CollisionFilter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCollisionFilterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GfxStudio.UI.Preference.FB.Physics> EndPhysics(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.Physics>(o);
  }
  public PhysicsT UnPack() {
    var _o = new PhysicsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhysicsT _o) {
    _o.CollisionFilterList = new List<GfxStudio.UI.Preference.FB.CollisionFilterT>();
    for (var _j = 0; _j < this.CollisionFilterListLength; ++_j) {_o.CollisionFilterList.Add(this.CollisionFilterList(_j).HasValue ? this.CollisionFilterList(_j).Value.UnPack() : null);}
  }
  public static Offset<GfxStudio.UI.Preference.FB.Physics> Pack(FlatBufferBuilder builder, PhysicsT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.Physics>);
    var _collisionFilterList = default(VectorOffset);
    if (_o.CollisionFilterList != null) {
      var __collisionFilterList = new Offset<GfxStudio.UI.Preference.FB.CollisionFilter>[_o.CollisionFilterList.Count];
      for (var _j = 0; _j < __collisionFilterList.Length; ++_j) { __collisionFilterList[_j] = GfxStudio.UI.Preference.FB.CollisionFilter.Pack(builder, _o.CollisionFilterList[_j]); }
      _collisionFilterList = CreateCollisionFilterListVector(builder, __collisionFilterList);
    }
    return CreatePhysics(
      builder,
      _collisionFilterList);
  }
};

public class PhysicsT
{
  [Newtonsoft.Json.JsonProperty("collisionFilterList")]
  public List<GfxStudio.UI.Preference.FB.CollisionFilterT> CollisionFilterList { get; set; }

  public PhysicsT() {
    this.CollisionFilterList = null;
  }
}

public struct PreloadTerrain : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PreloadTerrain GetRootAsPreloadTerrain(ByteBuffer _bb) { return GetRootAsPreloadTerrain(_bb, new PreloadTerrain()); }
  public static PreloadTerrain GetRootAsPreloadTerrain(ByteBuffer _bb, PreloadTerrain obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PreloadTerrain __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrtrrPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrtrrPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrtrrPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrtrrPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<GfxStudio.UI.Preference.FB.PreloadTerrain> CreatePreloadTerrain(FlatBufferBuilder builder,
      StringOffset trtrrPathOffset = default(StringOffset)) {
    builder.StartTable(1);
    PreloadTerrain.AddTrtrrPath(builder, trtrrPathOffset);
    return PreloadTerrain.EndPreloadTerrain(builder);
  }

  public static void StartPreloadTerrain(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTrtrrPath(FlatBufferBuilder builder, StringOffset trtrrPathOffset) { builder.AddOffset(0, trtrrPathOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.PreloadTerrain> EndPreloadTerrain(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.PreloadTerrain>(o);
  }
  public PreloadTerrainT UnPack() {
    var _o = new PreloadTerrainT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreloadTerrainT _o) {
    _o.TrtrrPath = this.TrtrrPath;
  }
  public static Offset<GfxStudio.UI.Preference.FB.PreloadTerrain> Pack(FlatBufferBuilder builder, PreloadTerrainT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.PreloadTerrain>);
    var _trtrrPath = _o.TrtrrPath == null ? default(StringOffset) : builder.CreateString(_o.TrtrrPath);
    return CreatePreloadTerrain(
      builder,
      _trtrrPath);
  }
};

public class PreloadTerrainT
{
  [Newtonsoft.Json.JsonProperty("trtrrPath")]
  public string TrtrrPath { get; set; }

  public PreloadTerrainT() {
    this.TrtrrPath = null;
  }
}

public struct TerrainViewer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TerrainViewer GetRootAsTerrainViewer(ByteBuffer _bb) { return GetRootAsTerrainViewer(_bb, new TerrainViewer()); }
  public static TerrainViewer GetRootAsTerrainViewer(ByteBuffer _bb, TerrainViewer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TerrainViewer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GfxStudio.UI.Preference.FB.PreloadTerrain? PreloadTerrainList(int j) { int o = __p.__offset(4); return o != 0 ? (GfxStudio.UI.Preference.FB.PreloadTerrain?)(new GfxStudio.UI.Preference.FB.PreloadTerrain()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PreloadTerrainListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GfxStudio.UI.Preference.FB.TerrainViewer> CreateTerrainViewer(FlatBufferBuilder builder,
      VectorOffset preloadTerrainListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TerrainViewer.AddPreloadTerrainList(builder, preloadTerrainListOffset);
    return TerrainViewer.EndTerrainViewer(builder);
  }

  public static void StartTerrainViewer(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPreloadTerrainList(FlatBufferBuilder builder, VectorOffset preloadTerrainListOffset) { builder.AddOffset(0, preloadTerrainListOffset.Value, 0); }
  public static VectorOffset CreatePreloadTerrainListVector(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.PreloadTerrain>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreloadTerrainListVectorBlock(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.PreloadTerrain>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPreloadTerrainListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GfxStudio.UI.Preference.FB.TerrainViewer> EndTerrainViewer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.TerrainViewer>(o);
  }
  public TerrainViewerT UnPack() {
    var _o = new TerrainViewerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TerrainViewerT _o) {
    _o.PreloadTerrainList = new List<GfxStudio.UI.Preference.FB.PreloadTerrainT>();
    for (var _j = 0; _j < this.PreloadTerrainListLength; ++_j) {_o.PreloadTerrainList.Add(this.PreloadTerrainList(_j).HasValue ? this.PreloadTerrainList(_j).Value.UnPack() : null);}
  }
  public static Offset<GfxStudio.UI.Preference.FB.TerrainViewer> Pack(FlatBufferBuilder builder, TerrainViewerT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.TerrainViewer>);
    var _preloadTerrainList = default(VectorOffset);
    if (_o.PreloadTerrainList != null) {
      var __preloadTerrainList = new Offset<GfxStudio.UI.Preference.FB.PreloadTerrain>[_o.PreloadTerrainList.Count];
      for (var _j = 0; _j < __preloadTerrainList.Length; ++_j) { __preloadTerrainList[_j] = GfxStudio.UI.Preference.FB.PreloadTerrain.Pack(builder, _o.PreloadTerrainList[_j]); }
      _preloadTerrainList = CreatePreloadTerrainListVector(builder, __preloadTerrainList);
    }
    return CreateTerrainViewer(
      builder,
      _preloadTerrainList);
  }
};

public class TerrainViewerT
{
  [Newtonsoft.Json.JsonProperty("preloadTerrainList")]
  public List<GfxStudio.UI.Preference.FB.PreloadTerrainT> PreloadTerrainList { get; set; }

  public TerrainViewerT() {
    this.PreloadTerrainList = null;
  }
}

public struct AudioConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioConfig GetRootAsAudioConfig(ByteBuffer _bb) { return GetRootAsAudioConfig(_bb, new AudioConfig()); }
  public static AudioConfig GetRootAsAudioConfig(ByteBuffer _bb, AudioConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string BankPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBankPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBankPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBankPathArray() { return __p.__vector_as_array<byte>(4); }
  public string InitEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetInitEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetInitEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public string PackageNames(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PackageNamesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string InitObjectEventName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitObjectEventNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetInitObjectEventNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetInitObjectEventNameArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GfxStudio.UI.Preference.FB.AudioConfig> CreateAudioConfig(FlatBufferBuilder builder,
      StringOffset bankPathOffset = default(StringOffset),
      StringOffset initEventNameOffset = default(StringOffset),
      VectorOffset packageNamesOffset = default(VectorOffset),
      StringOffset initObjectEventNameOffset = default(StringOffset)) {
    builder.StartTable(4);
    AudioConfig.AddInitObjectEventName(builder, initObjectEventNameOffset);
    AudioConfig.AddPackageNames(builder, packageNamesOffset);
    AudioConfig.AddInitEventName(builder, initEventNameOffset);
    AudioConfig.AddBankPath(builder, bankPathOffset);
    return AudioConfig.EndAudioConfig(builder);
  }

  public static void StartAudioConfig(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddBankPath(FlatBufferBuilder builder, StringOffset bankPathOffset) { builder.AddOffset(0, bankPathOffset.Value, 0); }
  public static void AddInitEventName(FlatBufferBuilder builder, StringOffset initEventNameOffset) { builder.AddOffset(1, initEventNameOffset.Value, 0); }
  public static void AddPackageNames(FlatBufferBuilder builder, VectorOffset packageNamesOffset) { builder.AddOffset(2, packageNamesOffset.Value, 0); }
  public static VectorOffset CreatePackageNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackageNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPackageNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInitObjectEventName(FlatBufferBuilder builder, StringOffset initObjectEventNameOffset) { builder.AddOffset(3, initObjectEventNameOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.AudioConfig> EndAudioConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.AudioConfig>(o);
  }
  public AudioConfigT UnPack() {
    var _o = new AudioConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioConfigT _o) {
    _o.BankPath = this.BankPath;
    _o.InitEventName = this.InitEventName;
    _o.PackageNames = new List<string>();
    for (var _j = 0; _j < this.PackageNamesLength; ++_j) {_o.PackageNames.Add(this.PackageNames(_j));}
    _o.InitObjectEventName = this.InitObjectEventName;
  }
  public static Offset<GfxStudio.UI.Preference.FB.AudioConfig> Pack(FlatBufferBuilder builder, AudioConfigT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.AudioConfig>);
    var _bankPath = _o.BankPath == null ? default(StringOffset) : builder.CreateString(_o.BankPath);
    var _initEventName = _o.InitEventName == null ? default(StringOffset) : builder.CreateString(_o.InitEventName);
    var _packageNames = default(VectorOffset);
    if (_o.PackageNames != null) {
      var __packageNames = new StringOffset[_o.PackageNames.Count];
      for (var _j = 0; _j < __packageNames.Length; ++_j) { __packageNames[_j] = builder.CreateString(_o.PackageNames[_j]); }
      _packageNames = CreatePackageNamesVector(builder, __packageNames);
    }
    var _initObjectEventName = _o.InitObjectEventName == null ? default(StringOffset) : builder.CreateString(_o.InitObjectEventName);
    return CreateAudioConfig(
      builder,
      _bankPath,
      _initEventName,
      _packageNames,
      _initObjectEventName);
  }
};

public class AudioConfigT
{
  [Newtonsoft.Json.JsonProperty("bankPath")]
  public string BankPath { get; set; }
  [Newtonsoft.Json.JsonProperty("initEventName")]
  public string InitEventName { get; set; }
  [Newtonsoft.Json.JsonProperty("packageNames")]
  public List<string> PackageNames { get; set; }
  [Newtonsoft.Json.JsonProperty("initObjectEventName")]
  public string InitObjectEventName { get; set; }

  public AudioConfigT() {
    this.BankPath = null;
    this.InitEventName = null;
    this.PackageNames = null;
    this.InitObjectEventName = null;
  }
}

public struct ShaderManagerConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ShaderManagerConfig GetRootAsShaderManagerConfig(ByteBuffer _bb) { return GetRootAsShaderManagerConfig(_bb, new ShaderManagerConfig()); }
  public static ShaderManagerConfig GetRootAsShaderManagerConfig(ByteBuffer _bb, ShaderManagerConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShaderManagerConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string RootDirectory { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRootDirectoryBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRootDirectoryBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRootDirectoryArray() { return __p.__vector_as_array<byte>(4); }
  public string OutputDirectory { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOutputDirectoryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOutputDirectoryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOutputDirectoryArray() { return __p.__vector_as_array<byte>(6); }
  public string CacheDirectory { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCacheDirectoryBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCacheDirectoryBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCacheDirectoryArray() { return __p.__vector_as_array<byte>(8); }
  public string DebugInfoDirectory { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDebugInfoDirectoryBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDebugInfoDirectoryBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDebugInfoDirectoryArray() { return __p.__vector_as_array<byte>(10); }
  public string StatisticsDirectory { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatisticsDirectoryBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStatisticsDirectoryBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStatisticsDirectoryArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig> CreateShaderManagerConfig(FlatBufferBuilder builder,
      StringOffset rootDirectoryOffset = default(StringOffset),
      StringOffset outputDirectoryOffset = default(StringOffset),
      StringOffset cacheDirectoryOffset = default(StringOffset),
      StringOffset debugInfoDirectoryOffset = default(StringOffset),
      StringOffset statisticsDirectoryOffset = default(StringOffset)) {
    builder.StartTable(5);
    ShaderManagerConfig.AddStatisticsDirectory(builder, statisticsDirectoryOffset);
    ShaderManagerConfig.AddDebugInfoDirectory(builder, debugInfoDirectoryOffset);
    ShaderManagerConfig.AddCacheDirectory(builder, cacheDirectoryOffset);
    ShaderManagerConfig.AddOutputDirectory(builder, outputDirectoryOffset);
    ShaderManagerConfig.AddRootDirectory(builder, rootDirectoryOffset);
    return ShaderManagerConfig.EndShaderManagerConfig(builder);
  }

  public static void StartShaderManagerConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddRootDirectory(FlatBufferBuilder builder, StringOffset rootDirectoryOffset) { builder.AddOffset(0, rootDirectoryOffset.Value, 0); }
  public static void AddOutputDirectory(FlatBufferBuilder builder, StringOffset outputDirectoryOffset) { builder.AddOffset(1, outputDirectoryOffset.Value, 0); }
  public static void AddCacheDirectory(FlatBufferBuilder builder, StringOffset cacheDirectoryOffset) { builder.AddOffset(2, cacheDirectoryOffset.Value, 0); }
  public static void AddDebugInfoDirectory(FlatBufferBuilder builder, StringOffset debugInfoDirectoryOffset) { builder.AddOffset(3, debugInfoDirectoryOffset.Value, 0); }
  public static void AddStatisticsDirectory(FlatBufferBuilder builder, StringOffset statisticsDirectoryOffset) { builder.AddOffset(4, statisticsDirectoryOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig> EndShaderManagerConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig>(o);
  }
  public ShaderManagerConfigT UnPack() {
    var _o = new ShaderManagerConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ShaderManagerConfigT _o) {
    _o.RootDirectory = this.RootDirectory;
    _o.OutputDirectory = this.OutputDirectory;
    _o.CacheDirectory = this.CacheDirectory;
    _o.DebugInfoDirectory = this.DebugInfoDirectory;
    _o.StatisticsDirectory = this.StatisticsDirectory;
  }
  public static Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig> Pack(FlatBufferBuilder builder, ShaderManagerConfigT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig>);
    var _rootDirectory = _o.RootDirectory == null ? default(StringOffset) : builder.CreateString(_o.RootDirectory);
    var _outputDirectory = _o.OutputDirectory == null ? default(StringOffset) : builder.CreateString(_o.OutputDirectory);
    var _cacheDirectory = _o.CacheDirectory == null ? default(StringOffset) : builder.CreateString(_o.CacheDirectory);
    var _debugInfoDirectory = _o.DebugInfoDirectory == null ? default(StringOffset) : builder.CreateString(_o.DebugInfoDirectory);
    var _statisticsDirectory = _o.StatisticsDirectory == null ? default(StringOffset) : builder.CreateString(_o.StatisticsDirectory);
    return CreateShaderManagerConfig(
      builder,
      _rootDirectory,
      _outputDirectory,
      _cacheDirectory,
      _debugInfoDirectory,
      _statisticsDirectory);
  }
};

public class ShaderManagerConfigT
{
  [Newtonsoft.Json.JsonProperty("rootDirectory")]
  public string RootDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("outputDirectory")]
  public string OutputDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("cacheDirectory")]
  public string CacheDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("debugInfoDirectory")]
  public string DebugInfoDirectory { get; set; }
  [Newtonsoft.Json.JsonProperty("statisticsDirectory")]
  public string StatisticsDirectory { get; set; }

  public ShaderManagerConfigT() {
    this.RootDirectory = null;
    this.OutputDirectory = null;
    this.CacheDirectory = null;
    this.DebugInfoDirectory = null;
    this.StatisticsDirectory = null;
  }
}

public struct Preference : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Preference GetRootAsPreference(ByteBuffer _bb) { return GetRootAsPreference(_bb, new Preference()); }
  public static Preference GetRootAsPreference(ByteBuffer _bb, Preference obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Preference __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GfxStudio.UI.Preference.FB.Version Version { get { int o = __p.__offset(4); return o != 0 ? (GfxStudio.UI.Preference.FB.Version)__p.bb.GetSbyte(o + __p.bb_pos) : GfxStudio.UI.Preference.FB.Version.CurrentVersion; } }
  public GfxStudio.UI.Preference.FB.General? PrefGeneral { get { int o = __p.__offset(6); return o != 0 ? (GfxStudio.UI.Preference.FB.General?)(new GfxStudio.UI.Preference.FB.General()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.ModelViewer? PrefModelViewer { get { int o = __p.__offset(8); return o != 0 ? (GfxStudio.UI.Preference.FB.ModelViewer?)(new GfxStudio.UI.Preference.FB.ModelViewer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string PrefLightList(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefLightListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GfxStudio.UI.Preference.FB.Presets? PrefPresets { get { int o = __p.__offset(12); return o != 0 ? (GfxStudio.UI.Preference.FB.Presets?)(new GfxStudio.UI.Preference.FB.Presets()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.AnimationConfig? PrefAnimationConfig { get { int o = __p.__offset(14); return o != 0 ? (GfxStudio.UI.Preference.FB.AnimationConfig?)(new GfxStudio.UI.Preference.FB.AnimationConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.Physics? PrefPhysics { get { int o = __p.__offset(16); return o != 0 ? (GfxStudio.UI.Preference.FB.Physics?)(new GfxStudio.UI.Preference.FB.Physics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.TerrainViewer? PrefTerrainViewer { get { int o = __p.__offset(18); return o != 0 ? (GfxStudio.UI.Preference.FB.TerrainViewer?)(new GfxStudio.UI.Preference.FB.TerrainViewer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public GfxStudio.UI.Preference.FB.AudioConfig? PrefAudio { get { int o = __p.__offset(20); return o != 0 ? (GfxStudio.UI.Preference.FB.AudioConfig?)(new GfxStudio.UI.Preference.FB.AudioConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string PrefLightAnimationList(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefLightAnimationListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PrefAreaLightList(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefAreaLightListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PrefOffsetLightList(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PrefOffsetLightListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GfxStudio.UI.Preference.FB.ShaderManagerConfig? PrefShaderManager { get { int o = __p.__offset(28); return o != 0 ? (GfxStudio.UI.Preference.FB.ShaderManagerConfig?)(new GfxStudio.UI.Preference.FB.ShaderManagerConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<GfxStudio.UI.Preference.FB.Preference> CreatePreference(FlatBufferBuilder builder,
      GfxStudio.UI.Preference.FB.Version version = GfxStudio.UI.Preference.FB.Version.CurrentVersion,
      Offset<GfxStudio.UI.Preference.FB.General> prefGeneralOffset = default(Offset<GfxStudio.UI.Preference.FB.General>),
      Offset<GfxStudio.UI.Preference.FB.ModelViewer> prefModelViewerOffset = default(Offset<GfxStudio.UI.Preference.FB.ModelViewer>),
      VectorOffset prefLightListOffset = default(VectorOffset),
      Offset<GfxStudio.UI.Preference.FB.Presets> prefPresetsOffset = default(Offset<GfxStudio.UI.Preference.FB.Presets>),
      Offset<GfxStudio.UI.Preference.FB.AnimationConfig> prefAnimationConfigOffset = default(Offset<GfxStudio.UI.Preference.FB.AnimationConfig>),
      Offset<GfxStudio.UI.Preference.FB.Physics> prefPhysicsOffset = default(Offset<GfxStudio.UI.Preference.FB.Physics>),
      Offset<GfxStudio.UI.Preference.FB.TerrainViewer> prefTerrainViewerOffset = default(Offset<GfxStudio.UI.Preference.FB.TerrainViewer>),
      Offset<GfxStudio.UI.Preference.FB.AudioConfig> prefAudioOffset = default(Offset<GfxStudio.UI.Preference.FB.AudioConfig>),
      VectorOffset prefLightAnimationListOffset = default(VectorOffset),
      VectorOffset prefAreaLightListOffset = default(VectorOffset),
      VectorOffset prefOffsetLightListOffset = default(VectorOffset),
      Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig> prefShaderManagerOffset = default(Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig>)) {
    builder.StartTable(13);
    Preference.AddPrefShaderManager(builder, prefShaderManagerOffset);
    Preference.AddPrefOffsetLightList(builder, prefOffsetLightListOffset);
    Preference.AddPrefAreaLightList(builder, prefAreaLightListOffset);
    Preference.AddPrefLightAnimationList(builder, prefLightAnimationListOffset);
    Preference.AddPrefAudio(builder, prefAudioOffset);
    Preference.AddPrefTerrainViewer(builder, prefTerrainViewerOffset);
    Preference.AddPrefPhysics(builder, prefPhysicsOffset);
    Preference.AddPrefAnimationConfig(builder, prefAnimationConfigOffset);
    Preference.AddPrefPresets(builder, prefPresetsOffset);
    Preference.AddPrefLightList(builder, prefLightListOffset);
    Preference.AddPrefModelViewer(builder, prefModelViewerOffset);
    Preference.AddPrefGeneral(builder, prefGeneralOffset);
    Preference.AddVersion(builder, version);
    return Preference.EndPreference(builder);
  }

  public static void StartPreference(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddVersion(FlatBufferBuilder builder, GfxStudio.UI.Preference.FB.Version version) { builder.AddSbyte(0, (sbyte)version, 1); }
  public static void AddPrefGeneral(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.General> prefGeneralOffset) { builder.AddOffset(1, prefGeneralOffset.Value, 0); }
  public static void AddPrefModelViewer(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.ModelViewer> prefModelViewerOffset) { builder.AddOffset(2, prefModelViewerOffset.Value, 0); }
  public static void AddPrefLightList(FlatBufferBuilder builder, VectorOffset prefLightListOffset) { builder.AddOffset(3, prefLightListOffset.Value, 0); }
  public static VectorOffset CreatePrefLightListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefLightListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefLightListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefPresets(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Presets> prefPresetsOffset) { builder.AddOffset(4, prefPresetsOffset.Value, 0); }
  public static void AddPrefAnimationConfig(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.AnimationConfig> prefAnimationConfigOffset) { builder.AddOffset(5, prefAnimationConfigOffset.Value, 0); }
  public static void AddPrefPhysics(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Physics> prefPhysicsOffset) { builder.AddOffset(6, prefPhysicsOffset.Value, 0); }
  public static void AddPrefTerrainViewer(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.TerrainViewer> prefTerrainViewerOffset) { builder.AddOffset(7, prefTerrainViewerOffset.Value, 0); }
  public static void AddPrefAudio(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.AudioConfig> prefAudioOffset) { builder.AddOffset(8, prefAudioOffset.Value, 0); }
  public static void AddPrefLightAnimationList(FlatBufferBuilder builder, VectorOffset prefLightAnimationListOffset) { builder.AddOffset(9, prefLightAnimationListOffset.Value, 0); }
  public static VectorOffset CreatePrefLightAnimationListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefLightAnimationListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefLightAnimationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefAreaLightList(FlatBufferBuilder builder, VectorOffset prefAreaLightListOffset) { builder.AddOffset(10, prefAreaLightListOffset.Value, 0); }
  public static VectorOffset CreatePrefAreaLightListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefAreaLightListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefAreaLightListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefOffsetLightList(FlatBufferBuilder builder, VectorOffset prefOffsetLightListOffset) { builder.AddOffset(11, prefOffsetLightListOffset.Value, 0); }
  public static VectorOffset CreatePrefOffsetLightListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePrefOffsetLightListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPrefOffsetLightListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPrefShaderManager(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig> prefShaderManagerOffset) { builder.AddOffset(12, prefShaderManagerOffset.Value, 0); }
  public static Offset<GfxStudio.UI.Preference.FB.Preference> EndPreference(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.Preference.FB.Preference>(o);
  }
  public static void FinishPreferenceBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Preference> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPreferenceBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.Preference.FB.Preference> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PreferenceT UnPack() {
    var _o = new PreferenceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PreferenceT _o) {
    _o.Version = this.Version;
    _o.PrefGeneral = this.PrefGeneral.HasValue ? this.PrefGeneral.Value.UnPack() : null;
    _o.PrefModelViewer = this.PrefModelViewer.HasValue ? this.PrefModelViewer.Value.UnPack() : null;
    _o.PrefLightList = new List<string>();
    for (var _j = 0; _j < this.PrefLightListLength; ++_j) {_o.PrefLightList.Add(this.PrefLightList(_j));}
    _o.PrefPresets = this.PrefPresets.HasValue ? this.PrefPresets.Value.UnPack() : null;
    _o.PrefAnimationConfig = this.PrefAnimationConfig.HasValue ? this.PrefAnimationConfig.Value.UnPack() : null;
    _o.PrefPhysics = this.PrefPhysics.HasValue ? this.PrefPhysics.Value.UnPack() : null;
    _o.PrefTerrainViewer = this.PrefTerrainViewer.HasValue ? this.PrefTerrainViewer.Value.UnPack() : null;
    _o.PrefAudio = this.PrefAudio.HasValue ? this.PrefAudio.Value.UnPack() : null;
    _o.PrefLightAnimationList = new List<string>();
    for (var _j = 0; _j < this.PrefLightAnimationListLength; ++_j) {_o.PrefLightAnimationList.Add(this.PrefLightAnimationList(_j));}
    _o.PrefAreaLightList = new List<string>();
    for (var _j = 0; _j < this.PrefAreaLightListLength; ++_j) {_o.PrefAreaLightList.Add(this.PrefAreaLightList(_j));}
    _o.PrefOffsetLightList = new List<string>();
    for (var _j = 0; _j < this.PrefOffsetLightListLength; ++_j) {_o.PrefOffsetLightList.Add(this.PrefOffsetLightList(_j));}
    _o.PrefShaderManager = this.PrefShaderManager.HasValue ? this.PrefShaderManager.Value.UnPack() : null;
  }
  public static Offset<GfxStudio.UI.Preference.FB.Preference> Pack(FlatBufferBuilder builder, PreferenceT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.Preference.FB.Preference>);
    var _prefGeneral = _o.PrefGeneral == null ? default(Offset<GfxStudio.UI.Preference.FB.General>) : GfxStudio.UI.Preference.FB.General.Pack(builder, _o.PrefGeneral);
    var _prefModelViewer = _o.PrefModelViewer == null ? default(Offset<GfxStudio.UI.Preference.FB.ModelViewer>) : GfxStudio.UI.Preference.FB.ModelViewer.Pack(builder, _o.PrefModelViewer);
    var _prefLightList = default(VectorOffset);
    if (_o.PrefLightList != null) {
      var __prefLightList = new StringOffset[_o.PrefLightList.Count];
      for (var _j = 0; _j < __prefLightList.Length; ++_j) { __prefLightList[_j] = builder.CreateString(_o.PrefLightList[_j]); }
      _prefLightList = CreatePrefLightListVector(builder, __prefLightList);
    }
    var _prefPresets = _o.PrefPresets == null ? default(Offset<GfxStudio.UI.Preference.FB.Presets>) : GfxStudio.UI.Preference.FB.Presets.Pack(builder, _o.PrefPresets);
    var _prefAnimationConfig = _o.PrefAnimationConfig == null ? default(Offset<GfxStudio.UI.Preference.FB.AnimationConfig>) : GfxStudio.UI.Preference.FB.AnimationConfig.Pack(builder, _o.PrefAnimationConfig);
    var _prefPhysics = _o.PrefPhysics == null ? default(Offset<GfxStudio.UI.Preference.FB.Physics>) : GfxStudio.UI.Preference.FB.Physics.Pack(builder, _o.PrefPhysics);
    var _prefTerrainViewer = _o.PrefTerrainViewer == null ? default(Offset<GfxStudio.UI.Preference.FB.TerrainViewer>) : GfxStudio.UI.Preference.FB.TerrainViewer.Pack(builder, _o.PrefTerrainViewer);
    var _prefAudio = _o.PrefAudio == null ? default(Offset<GfxStudio.UI.Preference.FB.AudioConfig>) : GfxStudio.UI.Preference.FB.AudioConfig.Pack(builder, _o.PrefAudio);
    var _prefLightAnimationList = default(VectorOffset);
    if (_o.PrefLightAnimationList != null) {
      var __prefLightAnimationList = new StringOffset[_o.PrefLightAnimationList.Count];
      for (var _j = 0; _j < __prefLightAnimationList.Length; ++_j) { __prefLightAnimationList[_j] = builder.CreateString(_o.PrefLightAnimationList[_j]); }
      _prefLightAnimationList = CreatePrefLightAnimationListVector(builder, __prefLightAnimationList);
    }
    var _prefAreaLightList = default(VectorOffset);
    if (_o.PrefAreaLightList != null) {
      var __prefAreaLightList = new StringOffset[_o.PrefAreaLightList.Count];
      for (var _j = 0; _j < __prefAreaLightList.Length; ++_j) { __prefAreaLightList[_j] = builder.CreateString(_o.PrefAreaLightList[_j]); }
      _prefAreaLightList = CreatePrefAreaLightListVector(builder, __prefAreaLightList);
    }
    var _prefOffsetLightList = default(VectorOffset);
    if (_o.PrefOffsetLightList != null) {
      var __prefOffsetLightList = new StringOffset[_o.PrefOffsetLightList.Count];
      for (var _j = 0; _j < __prefOffsetLightList.Length; ++_j) { __prefOffsetLightList[_j] = builder.CreateString(_o.PrefOffsetLightList[_j]); }
      _prefOffsetLightList = CreatePrefOffsetLightListVector(builder, __prefOffsetLightList);
    }
    var _prefShaderManager = _o.PrefShaderManager == null ? default(Offset<GfxStudio.UI.Preference.FB.ShaderManagerConfig>) : GfxStudio.UI.Preference.FB.ShaderManagerConfig.Pack(builder, _o.PrefShaderManager);
    return CreatePreference(
      builder,
      _o.Version,
      _prefGeneral,
      _prefModelViewer,
      _prefLightList,
      _prefPresets,
      _prefAnimationConfig,
      _prefPhysics,
      _prefTerrainViewer,
      _prefAudio,
      _prefLightAnimationList,
      _prefAreaLightList,
      _prefOffsetLightList,
      _prefShaderManager);
  }
};

public class PreferenceT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public GfxStudio.UI.Preference.FB.Version Version { get; set; }
  [Newtonsoft.Json.JsonProperty("prefGeneral")]
  public GfxStudio.UI.Preference.FB.GeneralT PrefGeneral { get; set; }
  [Newtonsoft.Json.JsonProperty("prefModelViewer")]
  public GfxStudio.UI.Preference.FB.ModelViewerT PrefModelViewer { get; set; }
  [Newtonsoft.Json.JsonProperty("prefLightList")]
  public List<string> PrefLightList { get; set; }
  [Newtonsoft.Json.JsonProperty("prefPresets")]
  public GfxStudio.UI.Preference.FB.PresetsT PrefPresets { get; set; }
  [Newtonsoft.Json.JsonProperty("prefAnimationConfig")]
  public GfxStudio.UI.Preference.FB.AnimationConfigT PrefAnimationConfig { get; set; }
  [Newtonsoft.Json.JsonProperty("prefPhysics")]
  public GfxStudio.UI.Preference.FB.PhysicsT PrefPhysics { get; set; }
  [Newtonsoft.Json.JsonProperty("prefTerrainViewer")]
  public GfxStudio.UI.Preference.FB.TerrainViewerT PrefTerrainViewer { get; set; }
  [Newtonsoft.Json.JsonProperty("prefAudio")]
  public GfxStudio.UI.Preference.FB.AudioConfigT PrefAudio { get; set; }
  [Newtonsoft.Json.JsonProperty("prefLightAnimationList")]
  public List<string> PrefLightAnimationList { get; set; }
  [Newtonsoft.Json.JsonProperty("prefAreaLightList")]
  public List<string> PrefAreaLightList { get; set; }
  [Newtonsoft.Json.JsonProperty("prefOffsetLightList")]
  public List<string> PrefOffsetLightList { get; set; }
  [Newtonsoft.Json.JsonProperty("prefShaderManager")]
  public GfxStudio.UI.Preference.FB.ShaderManagerConfigT PrefShaderManager { get; set; }

  public PreferenceT() {
    this.Version = GfxStudio.UI.Preference.FB.Version.CurrentVersion;
    this.PrefGeneral = null;
    this.PrefModelViewer = null;
    this.PrefLightList = null;
    this.PrefPresets = null;
    this.PrefAnimationConfig = null;
    this.PrefPhysics = null;
    this.PrefTerrainViewer = null;
    this.PrefAudio = null;
    this.PrefLightAnimationList = null;
    this.PrefAreaLightList = null;
    this.PrefOffsetLightList = null;
    this.PrefShaderManager = null;
  }

  public static PreferenceT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PreferenceT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PreferenceT DeserializeFromBinary(byte[] fbBuffer) {
    return Preference.GetRootAsPreference(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Preference.FinishPreferenceBuffer(fbb, Preference.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
