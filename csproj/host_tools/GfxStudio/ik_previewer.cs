// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.host.ik_previewer
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vector : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<gfl.host.ik_previewer.Vector> CreateVector(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.host.ik_previewer.Vector>(builder.Offset);
  }
  public VectorT UnPack() {
    var _o = new VectorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VectorT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<gfl.host.ik_previewer.Vector> Pack(FlatBufferBuilder builder, VectorT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.Vector>);
    return CreateVector(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class VectorT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public VectorT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct FootSolver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FootSolver GetRootAsFootSolver(ByteBuffer _bb) { return GetRootAsFootSolver(_bb, new FootSolver()); }
  public static FootSolver GetRootAsFootSolver(ByteBuffer _bb, FootSolver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FootSolver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Activation { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Factor { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool RootConstraintActivation { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float RootConstraintRangeAxisYPositive { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RootConstraintRangeAxisYNegative { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RootConstraintRangeAxisZPositive { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RootConstraintRangeAxisZNegative { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int RootConstraintIterations { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MiddleConstraintActivation { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float MiddleConstraintRangePositive { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MiddleConstraintRangeNegative { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.host.ik_previewer.Vector? PoleVector { get { int o = __p.__offset(26); return o != 0 ? (gfl.host.ik_previewer.Vector?)(new gfl.host.ik_previewer.Vector()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Twist { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.host.ik_previewer.FootSolver> CreateFootSolver(FlatBufferBuilder builder,
      bool activation = false,
      float factor = 0.0f,
      bool rootConstraintActivation = false,
      float rootConstraintRangeAxisY_Positive = 0.0f,
      float rootConstraintRangeAxisY_Negative = 0.0f,
      float rootConstraintRangeAxisZ_Positive = 0.0f,
      float rootConstraintRangeAxisZ_Negative = 0.0f,
      int rootConstraintIterations = 0,
      bool middleConstraintActivation = false,
      float middleConstraintRange_Positive = 0.0f,
      float middleConstraintRange_Negative = 0.0f,
      gfl.host.ik_previewer.VectorT poleVector = null,
      float twist = 0.0f) {
    builder.StartTable(13);
    FootSolver.AddTwist(builder, twist);
    FootSolver.AddPoleVector(builder, gfl.host.ik_previewer.Vector.Pack(builder, poleVector));
    FootSolver.AddMiddleConstraintRangeNegative(builder, middleConstraintRange_Negative);
    FootSolver.AddMiddleConstraintRangePositive(builder, middleConstraintRange_Positive);
    FootSolver.AddRootConstraintIterations(builder, rootConstraintIterations);
    FootSolver.AddRootConstraintRangeAxisZNegative(builder, rootConstraintRangeAxisZ_Negative);
    FootSolver.AddRootConstraintRangeAxisZPositive(builder, rootConstraintRangeAxisZ_Positive);
    FootSolver.AddRootConstraintRangeAxisYNegative(builder, rootConstraintRangeAxisY_Negative);
    FootSolver.AddRootConstraintRangeAxisYPositive(builder, rootConstraintRangeAxisY_Positive);
    FootSolver.AddFactor(builder, factor);
    FootSolver.AddMiddleConstraintActivation(builder, middleConstraintActivation);
    FootSolver.AddRootConstraintActivation(builder, rootConstraintActivation);
    FootSolver.AddActivation(builder, activation);
    return FootSolver.EndFootSolver(builder);
  }

  public static void StartFootSolver(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddActivation(FlatBufferBuilder builder, bool activation) { builder.AddBool(0, activation, false); }
  public static void AddFactor(FlatBufferBuilder builder, float factor) { builder.AddFloat(1, factor, 0.0f); }
  public static void AddRootConstraintActivation(FlatBufferBuilder builder, bool rootConstraintActivation) { builder.AddBool(2, rootConstraintActivation, false); }
  public static void AddRootConstraintRangeAxisYPositive(FlatBufferBuilder builder, float rootConstraintRangeAxisYPositive) { builder.AddFloat(3, rootConstraintRangeAxisYPositive, 0.0f); }
  public static void AddRootConstraintRangeAxisYNegative(FlatBufferBuilder builder, float rootConstraintRangeAxisYNegative) { builder.AddFloat(4, rootConstraintRangeAxisYNegative, 0.0f); }
  public static void AddRootConstraintRangeAxisZPositive(FlatBufferBuilder builder, float rootConstraintRangeAxisZPositive) { builder.AddFloat(5, rootConstraintRangeAxisZPositive, 0.0f); }
  public static void AddRootConstraintRangeAxisZNegative(FlatBufferBuilder builder, float rootConstraintRangeAxisZNegative) { builder.AddFloat(6, rootConstraintRangeAxisZNegative, 0.0f); }
  public static void AddRootConstraintIterations(FlatBufferBuilder builder, int rootConstraintIterations) { builder.AddInt(7, rootConstraintIterations, 0); }
  public static void AddMiddleConstraintActivation(FlatBufferBuilder builder, bool middleConstraintActivation) { builder.AddBool(8, middleConstraintActivation, false); }
  public static void AddMiddleConstraintRangePositive(FlatBufferBuilder builder, float middleConstraintRangePositive) { builder.AddFloat(9, middleConstraintRangePositive, 0.0f); }
  public static void AddMiddleConstraintRangeNegative(FlatBufferBuilder builder, float middleConstraintRangeNegative) { builder.AddFloat(10, middleConstraintRangeNegative, 0.0f); }
  public static void AddPoleVector(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Vector> poleVectorOffset) { builder.AddStruct(11, poleVectorOffset.Value, 0); }
  public static void AddTwist(FlatBufferBuilder builder, float twist) { builder.AddFloat(12, twist, 0.0f); }
  public static Offset<gfl.host.ik_previewer.FootSolver> EndFootSolver(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.host.ik_previewer.FootSolver>(o);
  }
  public FootSolverT UnPack() {
    var _o = new FootSolverT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FootSolverT _o) {
    _o.Activation = this.Activation;
    _o.Factor = this.Factor;
    _o.RootConstraintActivation = this.RootConstraintActivation;
    _o.RootConstraintRangeAxisYPositive = this.RootConstraintRangeAxisYPositive;
    _o.RootConstraintRangeAxisYNegative = this.RootConstraintRangeAxisYNegative;
    _o.RootConstraintRangeAxisZPositive = this.RootConstraintRangeAxisZPositive;
    _o.RootConstraintRangeAxisZNegative = this.RootConstraintRangeAxisZNegative;
    _o.RootConstraintIterations = this.RootConstraintIterations;
    _o.MiddleConstraintActivation = this.MiddleConstraintActivation;
    _o.MiddleConstraintRangePositive = this.MiddleConstraintRangePositive;
    _o.MiddleConstraintRangeNegative = this.MiddleConstraintRangeNegative;
    _o.PoleVector = this.PoleVector.HasValue ? this.PoleVector.Value.UnPack() : null;
    _o.Twist = this.Twist;
  }
  public static Offset<gfl.host.ik_previewer.FootSolver> Pack(FlatBufferBuilder builder, FootSolverT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.FootSolver>);
    return CreateFootSolver(
      builder,
      _o.Activation,
      _o.Factor,
      _o.RootConstraintActivation,
      _o.RootConstraintRangeAxisYPositive,
      _o.RootConstraintRangeAxisYNegative,
      _o.RootConstraintRangeAxisZPositive,
      _o.RootConstraintRangeAxisZNegative,
      _o.RootConstraintIterations,
      _o.MiddleConstraintActivation,
      _o.MiddleConstraintRangePositive,
      _o.MiddleConstraintRangeNegative,
      _o.PoleVector,
      _o.Twist);
  }
};

public class FootSolverT
{
  [Newtonsoft.Json.JsonProperty("activation")]
  public bool Activation { get; set; }
  [Newtonsoft.Json.JsonProperty("factor")]
  public float Factor { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintActivation")]
  public bool RootConstraintActivation { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintRangeAxisY_Positive")]
  public float RootConstraintRangeAxisYPositive { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintRangeAxisY_Negative")]
  public float RootConstraintRangeAxisYNegative { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintRangeAxisZ_Positive")]
  public float RootConstraintRangeAxisZPositive { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintRangeAxisZ_Negative")]
  public float RootConstraintRangeAxisZNegative { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraintIterations")]
  public int RootConstraintIterations { get; set; }
  [Newtonsoft.Json.JsonProperty("middleConstraintActivation")]
  public bool MiddleConstraintActivation { get; set; }
  [Newtonsoft.Json.JsonProperty("middleConstraintRange_Positive")]
  public float MiddleConstraintRangePositive { get; set; }
  [Newtonsoft.Json.JsonProperty("middleConstraintRange_Negative")]
  public float MiddleConstraintRangeNegative { get; set; }
  [Newtonsoft.Json.JsonProperty("poleVector")]
  public gfl.host.ik_previewer.VectorT PoleVector { get; set; }
  [Newtonsoft.Json.JsonProperty("twist")]
  public float Twist { get; set; }

  public FootSolverT() {
    this.Activation = false;
    this.Factor = 0.0f;
    this.RootConstraintActivation = false;
    this.RootConstraintRangeAxisYPositive = 0.0f;
    this.RootConstraintRangeAxisYNegative = 0.0f;
    this.RootConstraintRangeAxisZPositive = 0.0f;
    this.RootConstraintRangeAxisZNegative = 0.0f;
    this.RootConstraintIterations = 0;
    this.MiddleConstraintActivation = false;
    this.MiddleConstraintRangePositive = 0.0f;
    this.MiddleConstraintRangeNegative = 0.0f;
    this.PoleVector = new gfl.host.ik_previewer.VectorT();
    this.Twist = 0.0f;
  }
}

public struct ToeSolver : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ToeSolver GetRootAsToeSolver(ByteBuffer _bb) { return GetRootAsToeSolver(_bb, new ToeSolver()); }
  public static ToeSolver GetRootAsToeSolver(ByteBuffer _bb, ToeSolver obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ToeSolver __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Activation { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Factor { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool ConstraintActivation { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.host.ik_previewer.Vector? LocalForward { get { int o = __p.__offset(10); return o != 0 ? (gfl.host.ik_previewer.Vector?)(new gfl.host.ik_previewer.Vector()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.host.ik_previewer.Vector? LocalUp { get { int o = __p.__offset(12); return o != 0 ? (gfl.host.ik_previewer.Vector?)(new gfl.host.ik_previewer.Vector()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float FwdPositive { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FwdNegative { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SidePositive { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SideNegative { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.host.ik_previewer.ToeSolver> CreateToeSolver(FlatBufferBuilder builder,
      bool activation = false,
      float factor = 0.0f,
      bool constraintActivation = false,
      gfl.host.ik_previewer.VectorT localForward = null,
      gfl.host.ik_previewer.VectorT localUp = null,
      float fwd_Positive = 0.0f,
      float fwd_Negative = 0.0f,
      float side_Positive = 0.0f,
      float side_Negative = 0.0f) {
    builder.StartTable(9);
    ToeSolver.AddSideNegative(builder, side_Negative);
    ToeSolver.AddSidePositive(builder, side_Positive);
    ToeSolver.AddFwdNegative(builder, fwd_Negative);
    ToeSolver.AddFwdPositive(builder, fwd_Positive);
    ToeSolver.AddLocalUp(builder, gfl.host.ik_previewer.Vector.Pack(builder, localUp));
    ToeSolver.AddLocalForward(builder, gfl.host.ik_previewer.Vector.Pack(builder, localForward));
    ToeSolver.AddFactor(builder, factor);
    ToeSolver.AddConstraintActivation(builder, constraintActivation);
    ToeSolver.AddActivation(builder, activation);
    return ToeSolver.EndToeSolver(builder);
  }

  public static void StartToeSolver(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddActivation(FlatBufferBuilder builder, bool activation) { builder.AddBool(0, activation, false); }
  public static void AddFactor(FlatBufferBuilder builder, float factor) { builder.AddFloat(1, factor, 0.0f); }
  public static void AddConstraintActivation(FlatBufferBuilder builder, bool constraintActivation) { builder.AddBool(2, constraintActivation, false); }
  public static void AddLocalForward(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Vector> localForwardOffset) { builder.AddStruct(3, localForwardOffset.Value, 0); }
  public static void AddLocalUp(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Vector> localUpOffset) { builder.AddStruct(4, localUpOffset.Value, 0); }
  public static void AddFwdPositive(FlatBufferBuilder builder, float fwdPositive) { builder.AddFloat(5, fwdPositive, 0.0f); }
  public static void AddFwdNegative(FlatBufferBuilder builder, float fwdNegative) { builder.AddFloat(6, fwdNegative, 0.0f); }
  public static void AddSidePositive(FlatBufferBuilder builder, float sidePositive) { builder.AddFloat(7, sidePositive, 0.0f); }
  public static void AddSideNegative(FlatBufferBuilder builder, float sideNegative) { builder.AddFloat(8, sideNegative, 0.0f); }
  public static Offset<gfl.host.ik_previewer.ToeSolver> EndToeSolver(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.host.ik_previewer.ToeSolver>(o);
  }
  public ToeSolverT UnPack() {
    var _o = new ToeSolverT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ToeSolverT _o) {
    _o.Activation = this.Activation;
    _o.Factor = this.Factor;
    _o.ConstraintActivation = this.ConstraintActivation;
    _o.LocalForward = this.LocalForward.HasValue ? this.LocalForward.Value.UnPack() : null;
    _o.LocalUp = this.LocalUp.HasValue ? this.LocalUp.Value.UnPack() : null;
    _o.FwdPositive = this.FwdPositive;
    _o.FwdNegative = this.FwdNegative;
    _o.SidePositive = this.SidePositive;
    _o.SideNegative = this.SideNegative;
  }
  public static Offset<gfl.host.ik_previewer.ToeSolver> Pack(FlatBufferBuilder builder, ToeSolverT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.ToeSolver>);
    return CreateToeSolver(
      builder,
      _o.Activation,
      _o.Factor,
      _o.ConstraintActivation,
      _o.LocalForward,
      _o.LocalUp,
      _o.FwdPositive,
      _o.FwdNegative,
      _o.SidePositive,
      _o.SideNegative);
  }
};

public class ToeSolverT
{
  [Newtonsoft.Json.JsonProperty("activation")]
  public bool Activation { get; set; }
  [Newtonsoft.Json.JsonProperty("factor")]
  public float Factor { get; set; }
  [Newtonsoft.Json.JsonProperty("constraintActivation")]
  public bool ConstraintActivation { get; set; }
  [Newtonsoft.Json.JsonProperty("localForward")]
  public gfl.host.ik_previewer.VectorT LocalForward { get; set; }
  [Newtonsoft.Json.JsonProperty("localUp")]
  public gfl.host.ik_previewer.VectorT LocalUp { get; set; }
  [Newtonsoft.Json.JsonProperty("fwd_Positive")]
  public float FwdPositive { get; set; }
  [Newtonsoft.Json.JsonProperty("fwd_Negative")]
  public float FwdNegative { get; set; }
  [Newtonsoft.Json.JsonProperty("side_Positive")]
  public float SidePositive { get; set; }
  [Newtonsoft.Json.JsonProperty("side_Negative")]
  public float SideNegative { get; set; }

  public ToeSolverT() {
    this.Activation = false;
    this.Factor = 0.0f;
    this.ConstraintActivation = false;
    this.LocalForward = new gfl.host.ik_previewer.VectorT();
    this.LocalUp = new gfl.host.ik_previewer.VectorT();
    this.FwdPositive = 0.0f;
    this.FwdNegative = 0.0f;
    this.SidePositive = 0.0f;
    this.SideNegative = 0.0f;
  }
}

public struct Visualizer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Visualizer GetRootAsVisualizer(ByteBuffer _bb) { return GetRootAsVisualizer(_bb, new Visualizer()); }
  public static Visualizer GetRootAsVisualizer(ByteBuffer _bb, Visualizer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Visualizer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Activation { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Target { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Skeleton { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PoleVector { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MiddleConstraint { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RootConstraint { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool RootLocalAxis { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ToeLocalAxis { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ToeConstraint { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OffsetDiff { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float VectorLength { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PointSize { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.host.ik_previewer.Visualizer> CreateVisualizer(FlatBufferBuilder builder,
      bool activation = false,
      bool target = false,
      bool skeleton = false,
      bool poleVector = false,
      bool middleConstraint = false,
      bool rootConstraint = false,
      bool rootLocalAxis = false,
      bool toeLocalAxis = false,
      bool toeConstraint = false,
      bool offsetDiff = false,
      float vectorLength = 0.0f,
      float pointSize = 0.0f) {
    builder.StartTable(12);
    Visualizer.AddPointSize(builder, pointSize);
    Visualizer.AddVectorLength(builder, vectorLength);
    Visualizer.AddOffsetDiff(builder, offsetDiff);
    Visualizer.AddToeConstraint(builder, toeConstraint);
    Visualizer.AddToeLocalAxis(builder, toeLocalAxis);
    Visualizer.AddRootLocalAxis(builder, rootLocalAxis);
    Visualizer.AddRootConstraint(builder, rootConstraint);
    Visualizer.AddMiddleConstraint(builder, middleConstraint);
    Visualizer.AddPoleVector(builder, poleVector);
    Visualizer.AddSkeleton(builder, skeleton);
    Visualizer.AddTarget(builder, target);
    Visualizer.AddActivation(builder, activation);
    return Visualizer.EndVisualizer(builder);
  }

  public static void StartVisualizer(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddActivation(FlatBufferBuilder builder, bool activation) { builder.AddBool(0, activation, false); }
  public static void AddTarget(FlatBufferBuilder builder, bool target) { builder.AddBool(1, target, false); }
  public static void AddSkeleton(FlatBufferBuilder builder, bool skeleton) { builder.AddBool(2, skeleton, false); }
  public static void AddPoleVector(FlatBufferBuilder builder, bool poleVector) { builder.AddBool(3, poleVector, false); }
  public static void AddMiddleConstraint(FlatBufferBuilder builder, bool middleConstraint) { builder.AddBool(4, middleConstraint, false); }
  public static void AddRootConstraint(FlatBufferBuilder builder, bool rootConstraint) { builder.AddBool(5, rootConstraint, false); }
  public static void AddRootLocalAxis(FlatBufferBuilder builder, bool rootLocalAxis) { builder.AddBool(6, rootLocalAxis, false); }
  public static void AddToeLocalAxis(FlatBufferBuilder builder, bool toeLocalAxis) { builder.AddBool(7, toeLocalAxis, false); }
  public static void AddToeConstraint(FlatBufferBuilder builder, bool toeConstraint) { builder.AddBool(8, toeConstraint, false); }
  public static void AddOffsetDiff(FlatBufferBuilder builder, bool offsetDiff) { builder.AddBool(9, offsetDiff, false); }
  public static void AddVectorLength(FlatBufferBuilder builder, float vectorLength) { builder.AddFloat(10, vectorLength, 0.0f); }
  public static void AddPointSize(FlatBufferBuilder builder, float pointSize) { builder.AddFloat(11, pointSize, 0.0f); }
  public static Offset<gfl.host.ik_previewer.Visualizer> EndVisualizer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.host.ik_previewer.Visualizer>(o);
  }
  public VisualizerT UnPack() {
    var _o = new VisualizerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisualizerT _o) {
    _o.Activation = this.Activation;
    _o.Target = this.Target;
    _o.Skeleton = this.Skeleton;
    _o.PoleVector = this.PoleVector;
    _o.MiddleConstraint = this.MiddleConstraint;
    _o.RootConstraint = this.RootConstraint;
    _o.RootLocalAxis = this.RootLocalAxis;
    _o.ToeLocalAxis = this.ToeLocalAxis;
    _o.ToeConstraint = this.ToeConstraint;
    _o.OffsetDiff = this.OffsetDiff;
    _o.VectorLength = this.VectorLength;
    _o.PointSize = this.PointSize;
  }
  public static Offset<gfl.host.ik_previewer.Visualizer> Pack(FlatBufferBuilder builder, VisualizerT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.Visualizer>);
    return CreateVisualizer(
      builder,
      _o.Activation,
      _o.Target,
      _o.Skeleton,
      _o.PoleVector,
      _o.MiddleConstraint,
      _o.RootConstraint,
      _o.RootLocalAxis,
      _o.ToeLocalAxis,
      _o.ToeConstraint,
      _o.OffsetDiff,
      _o.VectorLength,
      _o.PointSize);
  }
};

public class VisualizerT
{
  [Newtonsoft.Json.JsonProperty("activation")]
  public bool Activation { get; set; }
  [Newtonsoft.Json.JsonProperty("target")]
  public bool Target { get; set; }
  [Newtonsoft.Json.JsonProperty("skeleton")]
  public bool Skeleton { get; set; }
  [Newtonsoft.Json.JsonProperty("poleVector")]
  public bool PoleVector { get; set; }
  [Newtonsoft.Json.JsonProperty("middleConstraint")]
  public bool MiddleConstraint { get; set; }
  [Newtonsoft.Json.JsonProperty("rootConstraint")]
  public bool RootConstraint { get; set; }
  [Newtonsoft.Json.JsonProperty("rootLocalAxis")]
  public bool RootLocalAxis { get; set; }
  [Newtonsoft.Json.JsonProperty("toeLocalAxis")]
  public bool ToeLocalAxis { get; set; }
  [Newtonsoft.Json.JsonProperty("toeConstraint")]
  public bool ToeConstraint { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetDiff")]
  public bool OffsetDiff { get; set; }
  [Newtonsoft.Json.JsonProperty("vectorLength")]
  public float VectorLength { get; set; }
  [Newtonsoft.Json.JsonProperty("pointSize")]
  public float PointSize { get; set; }

  public VisualizerT() {
    this.Activation = false;
    this.Target = false;
    this.Skeleton = false;
    this.PoleVector = false;
    this.MiddleConstraint = false;
    this.RootConstraint = false;
    this.RootLocalAxis = false;
    this.ToeLocalAxis = false;
    this.ToeConstraint = false;
    this.OffsetDiff = false;
    this.VectorLength = 0.0f;
    this.PointSize = 0.0f;
  }
}

public struct FootControl : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FootControl GetRootAsFootControl(ByteBuffer _bb) { return GetRootAsFootControl(_bb, new FootControl()); }
  public static FootControl GetRootAsFootControl(ByteBuffer _bb, FootControl obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FootControl __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Activation { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Factor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string RootJointName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRootJointNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRootJointNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRootJointNameArray() { return __p.__vector_as_array<byte>(10); }
  public string MidJointName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMidJointNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMidJointNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMidJointNameArray() { return __p.__vector_as_array<byte>(12); }
  public string TipJointName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipJointNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTipJointNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTipJointNameArray() { return __p.__vector_as_array<byte>(14); }
  public string AnkleJointName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnkleJointNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAnkleJointNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAnkleJointNameArray() { return __p.__vector_as_array<byte>(16); }
  public gfl.host.ik_previewer.Vector? Target { get { int o = __p.__offset(18); return o != 0 ? (gfl.host.ik_previewer.Vector?)(new gfl.host.ik_previewer.Vector()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.host.ik_previewer.Vector? Ground { get { int o = __p.__offset(20); return o != 0 ? (gfl.host.ik_previewer.Vector?)(new gfl.host.ik_previewer.Vector()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public gfl.host.ik_previewer.ToeSolver? ToeSolver { get { int o = __p.__offset(22); return o != 0 ? (gfl.host.ik_previewer.ToeSolver?)(new gfl.host.ik_previewer.ToeSolver()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.host.ik_previewer.FootSolver? FootSolver { get { int o = __p.__offset(24); return o != 0 ? (gfl.host.ik_previewer.FootSolver?)(new gfl.host.ik_previewer.FootSolver()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string ToeJointName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToeJointNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetToeJointNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetToeJointNameArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<gfl.host.ik_previewer.FootControl> CreateFootControl(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool activation = false,
      float factor = 0.0f,
      StringOffset rootJointNameOffset = default(StringOffset),
      StringOffset midJointNameOffset = default(StringOffset),
      StringOffset tipJointNameOffset = default(StringOffset),
      StringOffset ankleJointNameOffset = default(StringOffset),
      gfl.host.ik_previewer.VectorT target = null,
      gfl.host.ik_previewer.VectorT ground = null,
      Offset<gfl.host.ik_previewer.ToeSolver> toeSolverOffset = default(Offset<gfl.host.ik_previewer.ToeSolver>),
      Offset<gfl.host.ik_previewer.FootSolver> footSolverOffset = default(Offset<gfl.host.ik_previewer.FootSolver>),
      StringOffset toeJointNameOffset = default(StringOffset)) {
    builder.StartTable(12);
    FootControl.AddToeJointName(builder, toeJointNameOffset);
    FootControl.AddFootSolver(builder, footSolverOffset);
    FootControl.AddToeSolver(builder, toeSolverOffset);
    FootControl.AddGround(builder, gfl.host.ik_previewer.Vector.Pack(builder, ground));
    FootControl.AddTarget(builder, gfl.host.ik_previewer.Vector.Pack(builder, target));
    FootControl.AddAnkleJointName(builder, ankleJointNameOffset);
    FootControl.AddTipJointName(builder, tipJointNameOffset);
    FootControl.AddMidJointName(builder, midJointNameOffset);
    FootControl.AddRootJointName(builder, rootJointNameOffset);
    FootControl.AddFactor(builder, factor);
    FootControl.AddName(builder, nameOffset);
    FootControl.AddActivation(builder, activation);
    return FootControl.EndFootControl(builder);
  }

  public static void StartFootControl(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddActivation(FlatBufferBuilder builder, bool activation) { builder.AddBool(1, activation, false); }
  public static void AddFactor(FlatBufferBuilder builder, float factor) { builder.AddFloat(2, factor, 0.0f); }
  public static void AddRootJointName(FlatBufferBuilder builder, StringOffset rootJointNameOffset) { builder.AddOffset(3, rootJointNameOffset.Value, 0); }
  public static void AddMidJointName(FlatBufferBuilder builder, StringOffset midJointNameOffset) { builder.AddOffset(4, midJointNameOffset.Value, 0); }
  public static void AddTipJointName(FlatBufferBuilder builder, StringOffset tipJointNameOffset) { builder.AddOffset(5, tipJointNameOffset.Value, 0); }
  public static void AddAnkleJointName(FlatBufferBuilder builder, StringOffset ankleJointNameOffset) { builder.AddOffset(6, ankleJointNameOffset.Value, 0); }
  public static void AddTarget(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Vector> targetOffset) { builder.AddStruct(7, targetOffset.Value, 0); }
  public static void AddGround(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Vector> groundOffset) { builder.AddStruct(8, groundOffset.Value, 0); }
  public static void AddToeSolver(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.ToeSolver> toeSolverOffset) { builder.AddOffset(9, toeSolverOffset.Value, 0); }
  public static void AddFootSolver(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.FootSolver> footSolverOffset) { builder.AddOffset(10, footSolverOffset.Value, 0); }
  public static void AddToeJointName(FlatBufferBuilder builder, StringOffset toeJointNameOffset) { builder.AddOffset(11, toeJointNameOffset.Value, 0); }
  public static Offset<gfl.host.ik_previewer.FootControl> EndFootControl(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.host.ik_previewer.FootControl>(o);
  }
  public FootControlT UnPack() {
    var _o = new FootControlT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FootControlT _o) {
    _o.Name = this.Name;
    _o.Activation = this.Activation;
    _o.Factor = this.Factor;
    _o.RootJointName = this.RootJointName;
    _o.MidJointName = this.MidJointName;
    _o.TipJointName = this.TipJointName;
    _o.AnkleJointName = this.AnkleJointName;
    _o.Target = this.Target.HasValue ? this.Target.Value.UnPack() : null;
    _o.Ground = this.Ground.HasValue ? this.Ground.Value.UnPack() : null;
    _o.ToeSolver = this.ToeSolver.HasValue ? this.ToeSolver.Value.UnPack() : null;
    _o.FootSolver = this.FootSolver.HasValue ? this.FootSolver.Value.UnPack() : null;
    _o.ToeJointName = this.ToeJointName;
  }
  public static Offset<gfl.host.ik_previewer.FootControl> Pack(FlatBufferBuilder builder, FootControlT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.FootControl>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _rootJointName = _o.RootJointName == null ? default(StringOffset) : builder.CreateString(_o.RootJointName);
    var _midJointName = _o.MidJointName == null ? default(StringOffset) : builder.CreateString(_o.MidJointName);
    var _tipJointName = _o.TipJointName == null ? default(StringOffset) : builder.CreateString(_o.TipJointName);
    var _ankleJointName = _o.AnkleJointName == null ? default(StringOffset) : builder.CreateString(_o.AnkleJointName);
    var _toeSolver = _o.ToeSolver == null ? default(Offset<gfl.host.ik_previewer.ToeSolver>) : gfl.host.ik_previewer.ToeSolver.Pack(builder, _o.ToeSolver);
    var _footSolver = _o.FootSolver == null ? default(Offset<gfl.host.ik_previewer.FootSolver>) : gfl.host.ik_previewer.FootSolver.Pack(builder, _o.FootSolver);
    var _toeJointName = _o.ToeJointName == null ? default(StringOffset) : builder.CreateString(_o.ToeJointName);
    return CreateFootControl(
      builder,
      _name,
      _o.Activation,
      _o.Factor,
      _rootJointName,
      _midJointName,
      _tipJointName,
      _ankleJointName,
      _o.Target,
      _o.Ground,
      _toeSolver,
      _footSolver,
      _toeJointName);
  }
};

public class FootControlT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("activation")]
  public bool Activation { get; set; }
  [Newtonsoft.Json.JsonProperty("factor")]
  public float Factor { get; set; }
  [Newtonsoft.Json.JsonProperty("rootJointName")]
  public string RootJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("midJointName")]
  public string MidJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("tipJointName")]
  public string TipJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("ankleJointName")]
  public string AnkleJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("target")]
  public gfl.host.ik_previewer.VectorT Target { get; set; }
  [Newtonsoft.Json.JsonProperty("ground")]
  public gfl.host.ik_previewer.VectorT Ground { get; set; }
  [Newtonsoft.Json.JsonProperty("toeSolver")]
  public gfl.host.ik_previewer.ToeSolverT ToeSolver { get; set; }
  [Newtonsoft.Json.JsonProperty("footSolver")]
  public gfl.host.ik_previewer.FootSolverT FootSolver { get; set; }
  [Newtonsoft.Json.JsonProperty("toeJointName")]
  public string ToeJointName { get; set; }

  public FootControlT() {
    this.Name = null;
    this.Activation = false;
    this.Factor = 0.0f;
    this.RootJointName = null;
    this.MidJointName = null;
    this.TipJointName = null;
    this.AnkleJointName = null;
    this.Target = new gfl.host.ik_previewer.VectorT();
    this.Ground = new gfl.host.ik_previewer.VectorT();
    this.ToeSolver = null;
    this.FootSolver = null;
    this.ToeJointName = null;
  }
}

public struct Root : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Root GetRootAsRoot(ByteBuffer _bb) { return GetRootAsRoot(_bb, new Root()); }
  public static Root GetRootAsRoot(ByteBuffer _bb, Root obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Root __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Activation { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Factor { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string OffsetJointName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetJointNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOffsetJointNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOffsetJointNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool OffsetActivation { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float OffsetFactor { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.host.ik_previewer.FootControl? FootControls(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.host.ik_previewer.FootControl?)(new gfl.host.ik_previewer.FootControl()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FootControlsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.host.ik_previewer.Visualizer? Visualizer { get { int o = __p.__offset(16); return o != 0 ? (gfl.host.ik_previewer.Visualizer?)(new gfl.host.ik_previewer.Visualizer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsUseAdditionalParameterWeights { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float LimitFootHeightDifference { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.25f; } }
  public float ToeEndOffset { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.host.ik_previewer.Root> CreateRoot(FlatBufferBuilder builder,
      bool activation = false,
      float factor = 0.0f,
      StringOffset offsetJointNameOffset = default(StringOffset),
      bool offsetActivation = false,
      float offsetFactor = 0.0f,
      VectorOffset footControlsOffset = default(VectorOffset),
      Offset<gfl.host.ik_previewer.Visualizer> visualizerOffset = default(Offset<gfl.host.ik_previewer.Visualizer>),
      bool isUseAdditionalParameterWeights = false,
      float limitFootHeightDifference = 0.25f,
      float toeEndOffset = 0.0f) {
    builder.StartTable(10);
    Root.AddToeEndOffset(builder, toeEndOffset);
    Root.AddLimitFootHeightDifference(builder, limitFootHeightDifference);
    Root.AddVisualizer(builder, visualizerOffset);
    Root.AddFootControls(builder, footControlsOffset);
    Root.AddOffsetFactor(builder, offsetFactor);
    Root.AddOffsetJointName(builder, offsetJointNameOffset);
    Root.AddFactor(builder, factor);
    Root.AddIsUseAdditionalParameterWeights(builder, isUseAdditionalParameterWeights);
    Root.AddOffsetActivation(builder, offsetActivation);
    Root.AddActivation(builder, activation);
    return Root.EndRoot(builder);
  }

  public static void StartRoot(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddActivation(FlatBufferBuilder builder, bool activation) { builder.AddBool(0, activation, false); }
  public static void AddFactor(FlatBufferBuilder builder, float factor) { builder.AddFloat(1, factor, 0.0f); }
  public static void AddOffsetJointName(FlatBufferBuilder builder, StringOffset offsetJointNameOffset) { builder.AddOffset(2, offsetJointNameOffset.Value, 0); }
  public static void AddOffsetActivation(FlatBufferBuilder builder, bool offsetActivation) { builder.AddBool(3, offsetActivation, false); }
  public static void AddOffsetFactor(FlatBufferBuilder builder, float offsetFactor) { builder.AddFloat(4, offsetFactor, 0.0f); }
  public static void AddFootControls(FlatBufferBuilder builder, VectorOffset footControlsOffset) { builder.AddOffset(5, footControlsOffset.Value, 0); }
  public static VectorOffset CreateFootControlsVector(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.FootControl>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFootControlsVectorBlock(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.FootControl>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFootControlsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVisualizer(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Visualizer> visualizerOffset) { builder.AddOffset(6, visualizerOffset.Value, 0); }
  public static void AddIsUseAdditionalParameterWeights(FlatBufferBuilder builder, bool isUseAdditionalParameterWeights) { builder.AddBool(7, isUseAdditionalParameterWeights, false); }
  public static void AddLimitFootHeightDifference(FlatBufferBuilder builder, float limitFootHeightDifference) { builder.AddFloat(8, limitFootHeightDifference, 0.25f); }
  public static void AddToeEndOffset(FlatBufferBuilder builder, float toeEndOffset) { builder.AddFloat(9, toeEndOffset, 0.0f); }
  public static Offset<gfl.host.ik_previewer.Root> EndRoot(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.host.ik_previewer.Root>(o);
  }
  public static void FinishRootBuffer(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Root> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRootBuffer(FlatBufferBuilder builder, Offset<gfl.host.ik_previewer.Root> offset) { builder.FinishSizePrefixed(offset.Value); }
  public RootT UnPack() {
    var _o = new RootT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RootT _o) {
    _o.Activation = this.Activation;
    _o.Factor = this.Factor;
    _o.OffsetJointName = this.OffsetJointName;
    _o.OffsetActivation = this.OffsetActivation;
    _o.OffsetFactor = this.OffsetFactor;
    _o.FootControls = new List<gfl.host.ik_previewer.FootControlT>();
    for (var _j = 0; _j < this.FootControlsLength; ++_j) {_o.FootControls.Add(this.FootControls(_j).HasValue ? this.FootControls(_j).Value.UnPack() : null);}
    _o.Visualizer = this.Visualizer.HasValue ? this.Visualizer.Value.UnPack() : null;
    _o.IsUseAdditionalParameterWeights = this.IsUseAdditionalParameterWeights;
    _o.LimitFootHeightDifference = this.LimitFootHeightDifference;
    _o.ToeEndOffset = this.ToeEndOffset;
  }
  public static Offset<gfl.host.ik_previewer.Root> Pack(FlatBufferBuilder builder, RootT _o) {
    if (_o == null) return default(Offset<gfl.host.ik_previewer.Root>);
    var _offsetJointName = _o.OffsetJointName == null ? default(StringOffset) : builder.CreateString(_o.OffsetJointName);
    var _footControls = default(VectorOffset);
    if (_o.FootControls != null) {
      var __footControls = new Offset<gfl.host.ik_previewer.FootControl>[_o.FootControls.Count];
      for (var _j = 0; _j < __footControls.Length; ++_j) { __footControls[_j] = gfl.host.ik_previewer.FootControl.Pack(builder, _o.FootControls[_j]); }
      _footControls = CreateFootControlsVector(builder, __footControls);
    }
    var _visualizer = _o.Visualizer == null ? default(Offset<gfl.host.ik_previewer.Visualizer>) : gfl.host.ik_previewer.Visualizer.Pack(builder, _o.Visualizer);
    return CreateRoot(
      builder,
      _o.Activation,
      _o.Factor,
      _offsetJointName,
      _o.OffsetActivation,
      _o.OffsetFactor,
      _footControls,
      _visualizer,
      _o.IsUseAdditionalParameterWeights,
      _o.LimitFootHeightDifference,
      _o.ToeEndOffset);
  }
};

public class RootT
{
  [Newtonsoft.Json.JsonProperty("activation")]
  public bool Activation { get; set; }
  [Newtonsoft.Json.JsonProperty("factor")]
  public float Factor { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetJointName")]
  public string OffsetJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetActivation")]
  public bool OffsetActivation { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetFactor")]
  public float OffsetFactor { get; set; }
  [Newtonsoft.Json.JsonProperty("footControls")]
  public List<gfl.host.ik_previewer.FootControlT> FootControls { get; set; }
  [Newtonsoft.Json.JsonProperty("visualizer")]
  public gfl.host.ik_previewer.VisualizerT Visualizer { get; set; }
  [Newtonsoft.Json.JsonProperty("isUseAdditionalParameterWeights")]
  public bool IsUseAdditionalParameterWeights { get; set; }
  [Newtonsoft.Json.JsonProperty("limitFootHeightDifference")]
  public float LimitFootHeightDifference { get; set; }
  [Newtonsoft.Json.JsonProperty("toeEndOffset")]
  public float ToeEndOffset { get; set; }

  public RootT() {
    this.Activation = false;
    this.Factor = 0.0f;
    this.OffsetJointName = null;
    this.OffsetActivation = false;
    this.OffsetFactor = 0.0f;
    this.FootControls = null;
    this.Visualizer = null;
    this.IsUseAdditionalParameterWeights = false;
    this.LimitFootHeightDifference = 0.25f;
    this.ToeEndOffset = 0.0f;
  }

  public static RootT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<RootT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static RootT DeserializeFromBinary(byte[] fbBuffer) {
    return Root.GetRootAsRoot(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Root.FinishRootBuffer(fbb, Root.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
