// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GfxStudio.UI
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ModelPropertyOption : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelPropertyOption GetRootAsModelPropertyOption(ByteBuffer _bb) { return GetRootAsModelPropertyOption(_bb, new ModelPropertyOption()); }
  public static ModelPropertyOption GetRootAsModelPropertyOption(ByteBuffer _bb, ModelPropertyOption obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelPropertyOption __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string BaseSkeletonFilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBaseSkeletonFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBaseSkeletonFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBaseSkeletonFilePathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<GfxStudio.UI.ModelPropertyOption> CreateModelPropertyOption(FlatBufferBuilder builder,
      StringOffset baseSkeletonFilePathOffset = default(StringOffset)) {
    builder.StartTable(1);
    ModelPropertyOption.AddBaseSkeletonFilePath(builder, baseSkeletonFilePathOffset);
    return ModelPropertyOption.EndModelPropertyOption(builder);
  }

  public static void StartModelPropertyOption(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBaseSkeletonFilePath(FlatBufferBuilder builder, StringOffset baseSkeletonFilePathOffset) { builder.AddOffset(0, baseSkeletonFilePathOffset.Value, 0); }
  public static Offset<GfxStudio.UI.ModelPropertyOption> EndModelPropertyOption(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GfxStudio.UI.ModelPropertyOption>(o);
  }
  public static void FinishModelPropertyOptionBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.ModelPropertyOption> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelPropertyOptionBuffer(FlatBufferBuilder builder, Offset<GfxStudio.UI.ModelPropertyOption> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelPropertyOptionT UnPack() {
    var _o = new ModelPropertyOptionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelPropertyOptionT _o) {
    _o.BaseSkeletonFilePath = this.BaseSkeletonFilePath;
  }
  public static Offset<GfxStudio.UI.ModelPropertyOption> Pack(FlatBufferBuilder builder, ModelPropertyOptionT _o) {
    if (_o == null) return default(Offset<GfxStudio.UI.ModelPropertyOption>);
    var _baseSkeletonFilePath = _o.BaseSkeletonFilePath == null ? default(StringOffset) : builder.CreateString(_o.BaseSkeletonFilePath);
    return CreateModelPropertyOption(
      builder,
      _baseSkeletonFilePath);
  }
};

public class ModelPropertyOptionT
{
  [Newtonsoft.Json.JsonProperty("baseSkeletonFilePath")]
  public string BaseSkeletonFilePath { get; set; }

  public ModelPropertyOptionT() {
    this.BaseSkeletonFilePath = null;
  }

  public static ModelPropertyOptionT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelPropertyOptionT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelPropertyOptionT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelPropertyOption.GetRootAsModelPropertyOption(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelPropertyOption.FinishModelPropertyOptionBuffer(fbb, ModelPropertyOption.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
