// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace common.ai.bt.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ParameterValue : byte
{
  NONE = 0,
  ParameterValue_Int = 1,
  ParameterValue_Float = 2,
  ParameterValue_Bool = 3,
  ParameterValue_Vector3 = 4,
  ParameterValue_String = 5,
  ParameterValue_FnvHash = 6,
};

public class ParameterValueUnion {
  public ParameterValue Type { get; set; }
  public object Value { get; set; }

  public ParameterValueUnion() {
    this.Type = ParameterValue.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public common.ai.bt.fb.ParameterValue_IntT AsParameterValue_Int() { return this.As<common.ai.bt.fb.ParameterValue_IntT>(); }
  public common.ai.bt.fb.ParameterValue_FloatT AsParameterValue_Float() { return this.As<common.ai.bt.fb.ParameterValue_FloatT>(); }
  public common.ai.bt.fb.ParameterValue_BoolT AsParameterValue_Bool() { return this.As<common.ai.bt.fb.ParameterValue_BoolT>(); }
  public common.ai.bt.fb.ParameterValue_Vector3T AsParameterValue_Vector3() { return this.As<common.ai.bt.fb.ParameterValue_Vector3T>(); }
  public common.ai.bt.fb.ParameterValue_StringT AsParameterValue_String() { return this.As<common.ai.bt.fb.ParameterValue_StringT>(); }
  public common.ai.bt.fb.ParameterValue_FnvHashT AsParameterValue_FnvHash() { return this.As<common.ai.bt.fb.ParameterValue_FnvHashT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ParameterValueUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ParameterValue.ParameterValue_Int: return common.ai.bt.fb.ParameterValue_Int.Pack(builder, _o.AsParameterValue_Int()).Value;
      case ParameterValue.ParameterValue_Float: return common.ai.bt.fb.ParameterValue_Float.Pack(builder, _o.AsParameterValue_Float()).Value;
      case ParameterValue.ParameterValue_Bool: return common.ai.bt.fb.ParameterValue_Bool.Pack(builder, _o.AsParameterValue_Bool()).Value;
      case ParameterValue.ParameterValue_Vector3: return common.ai.bt.fb.ParameterValue_Vector3.Pack(builder, _o.AsParameterValue_Vector3()).Value;
      case ParameterValue.ParameterValue_String: return common.ai.bt.fb.ParameterValue_String.Pack(builder, _o.AsParameterValue_String()).Value;
      case ParameterValue.ParameterValue_FnvHash: return common.ai.bt.fb.ParameterValue_FnvHash.Pack(builder, _o.AsParameterValue_FnvHash()).Value;
    }
  }
}

public class ParameterValueUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ParameterValueUnion) || objectType == typeof(System.Collections.Generic.List<ParameterValueUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ParameterValueUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ParameterValueUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ParameterValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ParameterValueUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ParameterValueUnion, serializer);
    }
  }
  public ParameterValueUnion ReadJson(Newtonsoft.Json.JsonReader reader, ParameterValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ParameterValue.ParameterValue_Int: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_IntT>(reader); break;
      case ParameterValue.ParameterValue_Float: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_FloatT>(reader); break;
      case ParameterValue.ParameterValue_Bool: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_BoolT>(reader); break;
      case ParameterValue.ParameterValue_Vector3: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_Vector3T>(reader); break;
      case ParameterValue.ParameterValue_String: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_StringT>(reader); break;
      case ParameterValue.ParameterValue_FnvHash: _o.Value = serializer.Deserialize<common.ai.bt.fb.ParameterValue_FnvHashT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum NodeUnion : byte
{
  NONE = 0,
  Primitive = 1,
  Asset = 2,
};

public class NodeUnionUnion {
  public NodeUnion Type { get; set; }
  public object Value { get; set; }

  public NodeUnionUnion() {
    this.Type = NodeUnion.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public common.ai.bt.fb.PrimitiveT AsPrimitive() { return this.As<common.ai.bt.fb.PrimitiveT>(); }
  public common.ai.bt.fb.AssetT AsAsset() { return this.As<common.ai.bt.fb.AssetT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, NodeUnionUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case NodeUnion.Primitive: return common.ai.bt.fb.Primitive.Pack(builder, _o.AsPrimitive()).Value;
      case NodeUnion.Asset: return common.ai.bt.fb.Asset.Pack(builder, _o.AsAsset()).Value;
    }
  }
}

public class NodeUnionUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(NodeUnionUnion) || objectType == typeof(System.Collections.Generic.List<NodeUnionUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<NodeUnionUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as NodeUnionUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, NodeUnionUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<NodeUnionUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as NodeUnionUnion, serializer);
    }
  }
  public NodeUnionUnion ReadJson(Newtonsoft.Json.JsonReader reader, NodeUnionUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case NodeUnion.Primitive: _o.Value = serializer.Deserialize<common.ai.bt.fb.PrimitiveT>(reader); break;
      case NodeUnion.Asset: _o.Value = serializer.Deserialize<common.ai.bt.fb.AssetT>(reader); break;
    }
    return _o;
  }
}

public struct ParameterValue_Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_Int GetRootAsParameterValue_Int(ByteBuffer _bb) { return GetRootAsParameterValue_Int(_bb, new ParameterValue_Int()); }
  public static ParameterValue_Int GetRootAsParameterValue_Int(ByteBuffer _bb, ParameterValue_Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<common.ai.bt.fb.ParameterValue_Int> CreateParameterValue_Int(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    ParameterValue_Int.AddValue(builder, value);
    return ParameterValue_Int.EndParameterValue_Int(builder);
  }

  public static void StartParameterValue_Int(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<common.ai.bt.fb.ParameterValue_Int> EndParameterValue_Int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_Int>(o);
  }
  public ParameterValue_IntT UnPack() {
    var _o = new ParameterValue_IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_IntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_Int> Pack(FlatBufferBuilder builder, ParameterValue_IntT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_Int>);
    return CreateParameterValue_Int(
      builder,
      _o.Value);
  }
};

public class ParameterValue_IntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public ParameterValue_IntT() {
    this.Value = 0;
  }
}

public struct ParameterValue_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_Float GetRootAsParameterValue_Float(ByteBuffer _bb) { return GetRootAsParameterValue_Float(_bb, new ParameterValue_Float()); }
  public static ParameterValue_Float GetRootAsParameterValue_Float(ByteBuffer _bb, ParameterValue_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<common.ai.bt.fb.ParameterValue_Float> CreateParameterValue_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    ParameterValue_Float.AddValue(builder, value);
    return ParameterValue_Float.EndParameterValue_Float(builder);
  }

  public static void StartParameterValue_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<common.ai.bt.fb.ParameterValue_Float> EndParameterValue_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_Float>(o);
  }
  public ParameterValue_FloatT UnPack() {
    var _o = new ParameterValue_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_Float> Pack(FlatBufferBuilder builder, ParameterValue_FloatT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_Float>);
    return CreateParameterValue_Float(
      builder,
      _o.Value);
  }
};

public class ParameterValue_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public ParameterValue_FloatT() {
    this.Value = 0.0f;
  }
}

public struct ParameterValue_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_Bool GetRootAsParameterValue_Bool(ByteBuffer _bb) { return GetRootAsParameterValue_Bool(_bb, new ParameterValue_Bool()); }
  public static ParameterValue_Bool GetRootAsParameterValue_Bool(ByteBuffer _bb, ParameterValue_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<common.ai.bt.fb.ParameterValue_Bool> CreateParameterValue_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    ParameterValue_Bool.AddValue(builder, value);
    return ParameterValue_Bool.EndParameterValue_Bool(builder);
  }

  public static void StartParameterValue_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<common.ai.bt.fb.ParameterValue_Bool> EndParameterValue_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_Bool>(o);
  }
  public ParameterValue_BoolT UnPack() {
    var _o = new ParameterValue_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_Bool> Pack(FlatBufferBuilder builder, ParameterValue_BoolT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_Bool>);
    return CreateParameterValue_Bool(
      builder,
      _o.Value);
  }
};

public class ParameterValue_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public ParameterValue_BoolT() {
    this.Value = false;
  }
}

public struct ParameterValue_Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_Vector3 GetRootAsParameterValue_Vector3(ByteBuffer _bb) { return GetRootAsParameterValue_Vector3(_bb, new ParameterValue_Vector3()); }
  public static ParameterValue_Vector3 GetRootAsParameterValue_Vector3(ByteBuffer _bb, ParameterValue_Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<common.ai.bt.fb.ParameterValue_Vector3> CreateParameterValue_Vector3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartTable(3);
    ParameterValue_Vector3.AddZ(builder, z);
    ParameterValue_Vector3.AddY(builder, y);
    ParameterValue_Vector3.AddX(builder, x);
    return ParameterValue_Vector3.EndParameterValue_Vector3(builder);
  }

  public static void StartParameterValue_Vector3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<common.ai.bt.fb.ParameterValue_Vector3> EndParameterValue_Vector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_Vector3>(o);
  }
  public ParameterValue_Vector3T UnPack() {
    var _o = new ParameterValue_Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_Vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_Vector3> Pack(FlatBufferBuilder builder, ParameterValue_Vector3T _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_Vector3>);
    return CreateParameterValue_Vector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class ParameterValue_Vector3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public ParameterValue_Vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct ParameterValue_String : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_String GetRootAsParameterValue_String(ByteBuffer _bb) { return GetRootAsParameterValue_String(_bb, new ParameterValue_String()); }
  public static ParameterValue_String GetRootAsParameterValue_String(ByteBuffer _bb, ParameterValue_String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<common.ai.bt.fb.ParameterValue_String> CreateParameterValue_String(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    ParameterValue_String.AddValue(builder, valueOffset);
    return ParameterValue_String.EndParameterValue_String(builder);
  }

  public static void StartParameterValue_String(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<common.ai.bt.fb.ParameterValue_String> EndParameterValue_String(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_String>(o);
  }
  public ParameterValue_StringT UnPack() {
    var _o = new ParameterValue_StringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_StringT _o) {
    _o.Value = this.Value;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_String> Pack(FlatBufferBuilder builder, ParameterValue_StringT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_String>);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    return CreateParameterValue_String(
      builder,
      _value);
  }
};

public class ParameterValue_StringT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }

  public ParameterValue_StringT() {
    this.Value = null;
  }
}

public struct ParameterValue_FnvHash : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterValue_FnvHash GetRootAsParameterValue_FnvHash(ByteBuffer _bb) { return GetRootAsParameterValue_FnvHash(_bb, new ParameterValue_FnvHash()); }
  public static ParameterValue_FnvHash GetRootAsParameterValue_FnvHash(ByteBuffer _bb, ParameterValue_FnvHash obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterValue_FnvHash __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<common.ai.bt.fb.ParameterValue_FnvHash> CreateParameterValue_FnvHash(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    ParameterValue_FnvHash.AddValue(builder, valueOffset);
    return ParameterValue_FnvHash.EndParameterValue_FnvHash(builder);
  }

  public static void StartParameterValue_FnvHash(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<common.ai.bt.fb.ParameterValue_FnvHash> EndParameterValue_FnvHash(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ParameterValue_FnvHash>(o);
  }
  public ParameterValue_FnvHashT UnPack() {
    var _o = new ParameterValue_FnvHashT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterValue_FnvHashT _o) {
    _o.Value = this.Value;
  }
  public static Offset<common.ai.bt.fb.ParameterValue_FnvHash> Pack(FlatBufferBuilder builder, ParameterValue_FnvHashT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ParameterValue_FnvHash>);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    return CreateParameterValue_FnvHash(
      builder,
      _value);
  }
};

public class ParameterValue_FnvHashT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }

  public ParameterValue_FnvHashT() {
    this.Value = null;
  }
}

public struct Parameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Parameter GetRootAsParameter(ByteBuffer _bb) { return GetRootAsParameter(_bb, new Parameter()); }
  public static Parameter GetRootAsParameter(ByteBuffer _bb, Parameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Parameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public common.ai.bt.fb.ParameterValue ValueType { get { int o = __p.__offset(6); return o != 0 ? (common.ai.bt.fb.ParameterValue)__p.bb.Get(o + __p.bb_pos) : common.ai.bt.fb.ParameterValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<common.ai.bt.fb.Parameter> CreateParameter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      common.ai.bt.fb.ParameterValue value_type = common.ai.bt.fb.ParameterValue.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    Parameter.AddValue(builder, valueOffset);
    Parameter.AddName(builder, nameOffset);
    Parameter.AddValueType(builder, value_type);
    return Parameter.EndParameter(builder);
  }

  public static void StartParameter(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, common.ai.bt.fb.ParameterValue valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<common.ai.bt.fb.Parameter> EndParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Parameter>(o);
  }
  public ParameterT UnPack() {
    var _o = new ParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterT _o) {
    _o.Name = this.Name;
    _o.Value = new common.ai.bt.fb.ParameterValueUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_Int:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_Int>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_Int>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_Float:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_Float>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_Float>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_Bool:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_Bool>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_Bool>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_Vector3:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_Vector3>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_Vector3>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_String:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_String>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_String>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.ParameterValue.ParameterValue_FnvHash:
        _o.Value.Value = this.Value<common.ai.bt.fb.ParameterValue_FnvHash>().HasValue ? this.Value<common.ai.bt.fb.ParameterValue_FnvHash>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<common.ai.bt.fb.Parameter> Pack(FlatBufferBuilder builder, ParameterT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Parameter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? common.ai.bt.fb.ParameterValue.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : common.ai.bt.fb.ParameterValueUnion.Pack(builder, _o.Value);
    return CreateParameter(
      builder,
      _name,
      _value_type,
      _value);
  }
};

public class ParameterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private common.ai.bt.fb.ParameterValue ValueType {
    get {
      return this.Value != null ? this.Value.Type : common.ai.bt.fb.ParameterValue.NONE;
    }
    set {
      this.Value = new common.ai.bt.fb.ParameterValueUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(common.ai.bt.fb.ParameterValueUnion_JsonConverter))]
  public common.ai.bt.fb.ParameterValueUnion Value { get; set; }

  public ParameterT() {
    this.Name = null;
    this.Value = null;
  }
}

public struct Header : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Header GetRootAsHeader(ByteBuffer _bb) { return GetRootAsHeader(_bb, new Header()); }
  public static Header GetRootAsHeader(ByteBuffer _bb, Header obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Header __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string BlackboardPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlackboardPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetBlackboardPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBlackboardPathArray() { return __p.__vector_as_array<byte>(4); }
  public string UserDatas(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UserDatasLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Header> CreateHeader(FlatBufferBuilder builder,
      StringOffset blackboardPathOffset = default(StringOffset),
      VectorOffset userDatasOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Header.AddUserDatas(builder, userDatasOffset);
    Header.AddBlackboardPath(builder, blackboardPathOffset);
    return Header.EndHeader(builder);
  }

  public static void StartHeader(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBlackboardPath(FlatBufferBuilder builder, StringOffset blackboardPathOffset) { builder.AddOffset(0, blackboardPathOffset.Value, 0); }
  public static void AddUserDatas(FlatBufferBuilder builder, VectorOffset userDatasOffset) { builder.AddOffset(1, userDatasOffset.Value, 0); }
  public static VectorOffset CreateUserDatasVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUserDatasVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUserDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Header> EndHeader(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Header>(o);
  }
  public HeaderT UnPack() {
    var _o = new HeaderT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HeaderT _o) {
    _o.BlackboardPath = this.BlackboardPath;
    _o.UserDatas = new List<string>();
    for (var _j = 0; _j < this.UserDatasLength; ++_j) {_o.UserDatas.Add(this.UserDatas(_j));}
  }
  public static Offset<common.ai.bt.fb.Header> Pack(FlatBufferBuilder builder, HeaderT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Header>);
    var _blackboardPath = _o.BlackboardPath == null ? default(StringOffset) : builder.CreateString(_o.BlackboardPath);
    var _userDatas = default(VectorOffset);
    if (_o.UserDatas != null) {
      var __userDatas = new StringOffset[_o.UserDatas.Count];
      for (var _j = 0; _j < __userDatas.Length; ++_j) { __userDatas[_j] = builder.CreateString(_o.UserDatas[_j]); }
      _userDatas = CreateUserDatasVector(builder, __userDatas);
    }
    return CreateHeader(
      builder,
      _blackboardPath,
      _userDatas);
  }
};

public class HeaderT
{
  [Newtonsoft.Json.JsonProperty("blackboardPath")]
  public string BlackboardPath { get; set; }
  [Newtonsoft.Json.JsonProperty("userDatas")]
  public List<string> UserDatas { get; set; }

  public HeaderT() {
    this.BlackboardPath = null;
    this.UserDatas = null;
  }
}

public struct Service : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Service GetRootAsService(ByteBuffer _bb) { return GetRootAsService(_bb, new Service()); }
  public static Service GetRootAsService(ByteBuffer _bb, Service obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Service __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ExecuteType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExecuteTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetExecuteTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetExecuteTypeArray() { return __p.__vector_as_array<byte>(8); }
  public common.ai.bt.fb.Parameter? Parameters(int j) { int o = __p.__offset(10); return o != 0 ? (common.ai.bt.fb.Parameter?)(new common.ai.bt.fb.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Service> CreateService(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset executeTypeOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Service.AddParameters(builder, parametersOffset);
    Service.AddExecuteType(builder, executeTypeOffset);
    Service.AddName(builder, nameOffset);
    Service.AddId(builder, idOffset);
    return Service.EndService(builder);
  }

  public static void StartService(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddExecuteType(FlatBufferBuilder builder, StringOffset executeTypeOffset) { builder.AddOffset(2, executeTypeOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(3, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Service> EndService(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Service>(o);
  }
  public ServiceT UnPack() {
    var _o = new ServiceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ServiceT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.ExecuteType = this.ExecuteType;
    _o.Parameters = new List<common.ai.bt.fb.ParameterT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.Service> Pack(FlatBufferBuilder builder, ServiceT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Service>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _executeType = _o.ExecuteType == null ? default(StringOffset) : builder.CreateString(_o.ExecuteType);
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<common.ai.bt.fb.Parameter>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = common.ai.bt.fb.Parameter.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    return CreateService(
      builder,
      _id,
      _name,
      _executeType,
      _parameters);
  }
};

public class ServiceT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("executeType")]
  public string ExecuteType { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<common.ai.bt.fb.ParameterT> Parameters { get; set; }

  public ServiceT() {
    this.Id = null;
    this.Name = null;
    this.ExecuteType = null;
    this.Parameters = null;
  }
}

public struct Decorator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Decorator GetRootAsDecorator(ByteBuffer _bb) { return GetRootAsDecorator(_bb, new Decorator()); }
  public static Decorator GetRootAsDecorator(ByteBuffer _bb, Decorator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Decorator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool IsAbort { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ReturnStatus { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReturnStatusBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetReturnStatusBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetReturnStatusArray() { return __p.__vector_as_array<byte>(10); }
  public common.ai.bt.fb.Parameter? Parameters(int j) { int o = __p.__offset(12); return o != 0 ? (common.ai.bt.fb.Parameter?)(new common.ai.bt.fb.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Decorator> CreateDecorator(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      bool isAbort = false,
      StringOffset returnStatusOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Decorator.AddParameters(builder, parametersOffset);
    Decorator.AddReturnStatus(builder, returnStatusOffset);
    Decorator.AddName(builder, nameOffset);
    Decorator.AddId(builder, idOffset);
    Decorator.AddIsAbort(builder, isAbort);
    return Decorator.EndDecorator(builder);
  }

  public static void StartDecorator(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddIsAbort(FlatBufferBuilder builder, bool isAbort) { builder.AddBool(2, isAbort, false); }
  public static void AddReturnStatus(FlatBufferBuilder builder, StringOffset returnStatusOffset) { builder.AddOffset(3, returnStatusOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(4, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Decorator> EndDecorator(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Decorator>(o);
  }
  public DecoratorT UnPack() {
    var _o = new DecoratorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DecoratorT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.IsAbort = this.IsAbort;
    _o.ReturnStatus = this.ReturnStatus;
    _o.Parameters = new List<common.ai.bt.fb.ParameterT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.Decorator> Pack(FlatBufferBuilder builder, DecoratorT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Decorator>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _returnStatus = _o.ReturnStatus == null ? default(StringOffset) : builder.CreateString(_o.ReturnStatus);
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<common.ai.bt.fb.Parameter>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = common.ai.bt.fb.Parameter.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    return CreateDecorator(
      builder,
      _id,
      _name,
      _o.IsAbort,
      _returnStatus,
      _parameters);
  }
};

public class DecoratorT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("isAbort")]
  public bool IsAbort { get; set; }
  [Newtonsoft.Json.JsonProperty("returnStatus")]
  public string ReturnStatus { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<common.ai.bt.fb.ParameterT> Parameters { get; set; }

  public DecoratorT() {
    this.Id = null;
    this.Name = null;
    this.IsAbort = false;
    this.ReturnStatus = null;
    this.Parameters = null;
  }
}

public struct NodeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NodeData GetRootAsNodeData(ByteBuffer _bb) { return GetRootAsNodeData(_bb, new NodeData()); }
  public static NodeData GetRootAsNodeData(ByteBuffer _bb, NodeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NodeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public common.ai.bt.fb.NodeUnion NodeType { get { int o = __p.__offset(4); return o != 0 ? (common.ai.bt.fb.NodeUnion)__p.bb.Get(o + __p.bb_pos) : common.ai.bt.fb.NodeUnion.NONE; } }
  public TTable? Node<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<common.ai.bt.fb.NodeData> CreateNodeData(FlatBufferBuilder builder,
      common.ai.bt.fb.NodeUnion node_type = common.ai.bt.fb.NodeUnion.NONE,
      int nodeOffset = 0) {
    builder.StartTable(2);
    NodeData.AddNode(builder, nodeOffset);
    NodeData.AddNodeType(builder, node_type);
    return NodeData.EndNodeData(builder);
  }

  public static void StartNodeData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddNodeType(FlatBufferBuilder builder, common.ai.bt.fb.NodeUnion nodeType) { builder.AddByte(0, (byte)nodeType, 0); }
  public static void AddNode(FlatBufferBuilder builder, int nodeOffset) { builder.AddOffset(1, nodeOffset, 0); }
  public static Offset<common.ai.bt.fb.NodeData> EndNodeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.NodeData>(o);
  }
  public NodeDataT UnPack() {
    var _o = new NodeDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NodeDataT _o) {
    _o.Node = new common.ai.bt.fb.NodeUnionUnion();
    _o.Node.Type = this.NodeType;
    switch (this.NodeType) {
      default: break;
      case common.ai.bt.fb.NodeUnion.Primitive:
        _o.Node.Value = this.Node<common.ai.bt.fb.Primitive>().HasValue ? this.Node<common.ai.bt.fb.Primitive>().Value.UnPack() : null;
        break;
      case common.ai.bt.fb.NodeUnion.Asset:
        _o.Node.Value = this.Node<common.ai.bt.fb.Asset>().HasValue ? this.Node<common.ai.bt.fb.Asset>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<common.ai.bt.fb.NodeData> Pack(FlatBufferBuilder builder, NodeDataT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.NodeData>);
    var _node_type = _o.Node == null ? common.ai.bt.fb.NodeUnion.NONE : _o.Node.Type;
    var _node = _o.Node == null ? 0 : common.ai.bt.fb.NodeUnionUnion.Pack(builder, _o.Node);
    return CreateNodeData(
      builder,
      _node_type,
      _node);
  }
};

public class NodeDataT
{
  [Newtonsoft.Json.JsonProperty("node_type")]
  private common.ai.bt.fb.NodeUnion NodeType {
    get {
      return this.Node != null ? this.Node.Type : common.ai.bt.fb.NodeUnion.NONE;
    }
    set {
      this.Node = new common.ai.bt.fb.NodeUnionUnion();
      this.Node.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("node")]
  [Newtonsoft.Json.JsonConverter(typeof(common.ai.bt.fb.NodeUnionUnion_JsonConverter))]
  public common.ai.bt.fb.NodeUnionUnion Node { get; set; }

  public NodeDataT() {
    this.Node = null;
  }
}

public struct Primitive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Primitive GetRootAsPrimitive(ByteBuffer _bb) { return GetRootAsPrimitive(_bb, new Primitive()); }
  public static Primitive GetRootAsPrimitive(ByteBuffer _bb, Primitive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Primitive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public common.ai.bt.fb.Parameter? Parameters(int j) { int o = __p.__offset(8); return o != 0 ? (common.ai.bt.fb.Parameter?)(new common.ai.bt.fb.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.Service? Services(int j) { int o = __p.__offset(10); return o != 0 ? (common.ai.bt.fb.Service?)(new common.ai.bt.fb.Service()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ServicesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.Decorator? Decorators(int j) { int o = __p.__offset(12); return o != 0 ? (common.ai.bt.fb.Decorator?)(new common.ai.bt.fb.Decorator()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecoratorsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Primitive> CreatePrimitive(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset),
      VectorOffset servicesOffset = default(VectorOffset),
      VectorOffset decoratorsOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Primitive.AddDecorators(builder, decoratorsOffset);
    Primitive.AddServices(builder, servicesOffset);
    Primitive.AddParameters(builder, parametersOffset);
    Primitive.AddName(builder, nameOffset);
    Primitive.AddId(builder, idOffset);
    return Primitive.EndPrimitive(builder);
  }

  public static void StartPrimitive(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(2, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddServices(FlatBufferBuilder builder, VectorOffset servicesOffset) { builder.AddOffset(3, servicesOffset.Value, 0); }
  public static VectorOffset CreateServicesVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Service>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Service>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartServicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecorators(FlatBufferBuilder builder, VectorOffset decoratorsOffset) { builder.AddOffset(4, decoratorsOffset.Value, 0); }
  public static VectorOffset CreateDecoratorsVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Decorator>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Decorator>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDecoratorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Primitive> EndPrimitive(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Primitive>(o);
  }
  public PrimitiveT UnPack() {
    var _o = new PrimitiveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PrimitiveT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.Parameters = new List<common.ai.bt.fb.ParameterT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
    _o.Services = new List<common.ai.bt.fb.ServiceT>();
    for (var _j = 0; _j < this.ServicesLength; ++_j) {_o.Services.Add(this.Services(_j).HasValue ? this.Services(_j).Value.UnPack() : null);}
    _o.Decorators = new List<common.ai.bt.fb.DecoratorT>();
    for (var _j = 0; _j < this.DecoratorsLength; ++_j) {_o.Decorators.Add(this.Decorators(_j).HasValue ? this.Decorators(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.Primitive> Pack(FlatBufferBuilder builder, PrimitiveT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Primitive>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<common.ai.bt.fb.Parameter>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = common.ai.bt.fb.Parameter.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    var _services = default(VectorOffset);
    if (_o.Services != null) {
      var __services = new Offset<common.ai.bt.fb.Service>[_o.Services.Count];
      for (var _j = 0; _j < __services.Length; ++_j) { __services[_j] = common.ai.bt.fb.Service.Pack(builder, _o.Services[_j]); }
      _services = CreateServicesVector(builder, __services);
    }
    var _decorators = default(VectorOffset);
    if (_o.Decorators != null) {
      var __decorators = new Offset<common.ai.bt.fb.Decorator>[_o.Decorators.Count];
      for (var _j = 0; _j < __decorators.Length; ++_j) { __decorators[_j] = common.ai.bt.fb.Decorator.Pack(builder, _o.Decorators[_j]); }
      _decorators = CreateDecoratorsVector(builder, __decorators);
    }
    return CreatePrimitive(
      builder,
      _id,
      _name,
      _parameters,
      _services,
      _decorators);
  }
};

public class PrimitiveT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<common.ai.bt.fb.ParameterT> Parameters { get; set; }
  [Newtonsoft.Json.JsonProperty("services")]
  public List<common.ai.bt.fb.ServiceT> Services { get; set; }
  [Newtonsoft.Json.JsonProperty("decorators")]
  public List<common.ai.bt.fb.DecoratorT> Decorators { get; set; }

  public PrimitiveT() {
    this.Id = null;
    this.Name = null;
    this.Parameters = null;
    this.Services = null;
    this.Decorators = null;
  }
}

public struct OverrideData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OverrideData GetRootAsOverrideData(ByteBuffer _bb) { return GetRootAsOverrideData(_bb, new OverrideData()); }
  public static OverrideData GetRootAsOverrideData(ByteBuffer _bb, OverrideData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OverrideData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LinkID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLinkIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLinkIDArray() { return __p.__vector_as_array<byte>(4); }
  public common.ai.bt.fb.Parameter? Parameters(int j) { int o = __p.__offset(6); return o != 0 ? (common.ai.bt.fb.Parameter?)(new common.ai.bt.fb.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParametersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.OverrideData> CreateOverrideData(FlatBufferBuilder builder,
      StringOffset linkIDOffset = default(StringOffset),
      VectorOffset parametersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    OverrideData.AddParameters(builder, parametersOffset);
    OverrideData.AddLinkID(builder, linkIDOffset);
    return OverrideData.EndOverrideData(builder);
  }

  public static void StartOverrideData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLinkID(FlatBufferBuilder builder, StringOffset linkIDOffset) { builder.AddOffset(0, linkIDOffset.Value, 0); }
  public static void AddParameters(FlatBufferBuilder builder, VectorOffset parametersOffset) { builder.AddOffset(1, parametersOffset.Value, 0); }
  public static VectorOffset CreateParametersVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParametersVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.OverrideData> EndOverrideData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.OverrideData>(o);
  }
  public OverrideDataT UnPack() {
    var _o = new OverrideDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OverrideDataT _o) {
    _o.LinkID = this.LinkID;
    _o.Parameters = new List<common.ai.bt.fb.ParameterT>();
    for (var _j = 0; _j < this.ParametersLength; ++_j) {_o.Parameters.Add(this.Parameters(_j).HasValue ? this.Parameters(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.OverrideData> Pack(FlatBufferBuilder builder, OverrideDataT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.OverrideData>);
    var _linkID = _o.LinkID == null ? default(StringOffset) : builder.CreateString(_o.LinkID);
    var _parameters = default(VectorOffset);
    if (_o.Parameters != null) {
      var __parameters = new Offset<common.ai.bt.fb.Parameter>[_o.Parameters.Count];
      for (var _j = 0; _j < __parameters.Length; ++_j) { __parameters[_j] = common.ai.bt.fb.Parameter.Pack(builder, _o.Parameters[_j]); }
      _parameters = CreateParametersVector(builder, __parameters);
    }
    return CreateOverrideData(
      builder,
      _linkID,
      _parameters);
  }
};

public class OverrideDataT
{
  [Newtonsoft.Json.JsonProperty("linkID")]
  public string LinkID { get; set; }
  [Newtonsoft.Json.JsonProperty("parameters")]
  public List<common.ai.bt.fb.ParameterT> Parameters { get; set; }

  public OverrideDataT() {
    this.LinkID = null;
    this.Parameters = null;
  }
}

public struct OverrideAsset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OverrideAsset GetRootAsOverrideAsset(ByteBuffer _bb) { return GetRootAsOverrideAsset(_bb, new OverrideAsset()); }
  public static OverrideAsset GetRootAsOverrideAsset(ByteBuffer _bb, OverrideAsset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OverrideAsset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LinkID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLinkIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLinkIDArray() { return __p.__vector_as_array<byte>(4); }
  public string LinkPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLinkPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLinkPathArray() { return __p.__vector_as_array<byte>(6); }
  public common.ai.bt.fb.OverrideData? OverrideDatas(int j) { int o = __p.__offset(8); return o != 0 ? (common.ai.bt.fb.OverrideData?)(new common.ai.bt.fb.OverrideData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OverrideDatasLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.OverrideAsset> CreateOverrideAsset(FlatBufferBuilder builder,
      StringOffset linkIDOffset = default(StringOffset),
      StringOffset linkPathOffset = default(StringOffset),
      VectorOffset overrideDatasOffset = default(VectorOffset)) {
    builder.StartTable(3);
    OverrideAsset.AddOverrideDatas(builder, overrideDatasOffset);
    OverrideAsset.AddLinkPath(builder, linkPathOffset);
    OverrideAsset.AddLinkID(builder, linkIDOffset);
    return OverrideAsset.EndOverrideAsset(builder);
  }

  public static void StartOverrideAsset(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLinkID(FlatBufferBuilder builder, StringOffset linkIDOffset) { builder.AddOffset(0, linkIDOffset.Value, 0); }
  public static void AddLinkPath(FlatBufferBuilder builder, StringOffset linkPathOffset) { builder.AddOffset(1, linkPathOffset.Value, 0); }
  public static void AddOverrideDatas(FlatBufferBuilder builder, VectorOffset overrideDatasOffset) { builder.AddOffset(2, overrideDatasOffset.Value, 0); }
  public static VectorOffset CreateOverrideDatasVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOverrideDatasVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOverrideDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.OverrideAsset> EndOverrideAsset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.OverrideAsset>(o);
  }
  public OverrideAssetT UnPack() {
    var _o = new OverrideAssetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OverrideAssetT _o) {
    _o.LinkID = this.LinkID;
    _o.LinkPath = this.LinkPath;
    _o.OverrideDatas = new List<common.ai.bt.fb.OverrideDataT>();
    for (var _j = 0; _j < this.OverrideDatasLength; ++_j) {_o.OverrideDatas.Add(this.OverrideDatas(_j).HasValue ? this.OverrideDatas(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.OverrideAsset> Pack(FlatBufferBuilder builder, OverrideAssetT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.OverrideAsset>);
    var _linkID = _o.LinkID == null ? default(StringOffset) : builder.CreateString(_o.LinkID);
    var _linkPath = _o.LinkPath == null ? default(StringOffset) : builder.CreateString(_o.LinkPath);
    var _overrideDatas = default(VectorOffset);
    if (_o.OverrideDatas != null) {
      var __overrideDatas = new Offset<common.ai.bt.fb.OverrideData>[_o.OverrideDatas.Count];
      for (var _j = 0; _j < __overrideDatas.Length; ++_j) { __overrideDatas[_j] = common.ai.bt.fb.OverrideData.Pack(builder, _o.OverrideDatas[_j]); }
      _overrideDatas = CreateOverrideDatasVector(builder, __overrideDatas);
    }
    return CreateOverrideAsset(
      builder,
      _linkID,
      _linkPath,
      _overrideDatas);
  }
};

public class OverrideAssetT
{
  [Newtonsoft.Json.JsonProperty("linkID")]
  public string LinkID { get; set; }
  [Newtonsoft.Json.JsonProperty("linkPath")]
  public string LinkPath { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideDatas")]
  public List<common.ai.bt.fb.OverrideDataT> OverrideDatas { get; set; }

  public OverrideAssetT() {
    this.LinkID = null;
    this.LinkPath = null;
    this.OverrideDatas = null;
  }
}

public struct Asset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Asset GetRootAsAsset(ByteBuffer _bb) { return GetRootAsAsset(_bb, new Asset()); }
  public static Asset GetRootAsAsset(ByteBuffer _bb, Asset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Asset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string LinkPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLinkPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLinkPathArray() { return __p.__vector_as_array<byte>(6); }
  public common.ai.bt.fb.OverrideData? OverrideDatas(int j) { int o = __p.__offset(8); return o != 0 ? (common.ai.bt.fb.OverrideData?)(new common.ai.bt.fb.OverrideData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OverrideDatasLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.Service? Services(int j) { int o = __p.__offset(10); return o != 0 ? (common.ai.bt.fb.Service?)(new common.ai.bt.fb.Service()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ServicesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.Decorator? Decorators(int j) { int o = __p.__offset(12); return o != 0 ? (common.ai.bt.fb.Decorator?)(new common.ai.bt.fb.Decorator()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DecoratorsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.OverrideAsset? OverrideAssets(int j) { int o = __p.__offset(14); return o != 0 ? (common.ai.bt.fb.OverrideAsset?)(new common.ai.bt.fb.OverrideAsset()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OverrideAssetsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Asset> CreateAsset(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset linkPathOffset = default(StringOffset),
      VectorOffset overrideDatasOffset = default(VectorOffset),
      VectorOffset servicesOffset = default(VectorOffset),
      VectorOffset decoratorsOffset = default(VectorOffset),
      VectorOffset overrideAssetsOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Asset.AddOverrideAssets(builder, overrideAssetsOffset);
    Asset.AddDecorators(builder, decoratorsOffset);
    Asset.AddServices(builder, servicesOffset);
    Asset.AddOverrideDatas(builder, overrideDatasOffset);
    Asset.AddLinkPath(builder, linkPathOffset);
    Asset.AddId(builder, idOffset);
    return Asset.EndAsset(builder);
  }

  public static void StartAsset(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddLinkPath(FlatBufferBuilder builder, StringOffset linkPathOffset) { builder.AddOffset(1, linkPathOffset.Value, 0); }
  public static void AddOverrideDatas(FlatBufferBuilder builder, VectorOffset overrideDatasOffset) { builder.AddOffset(2, overrideDatasOffset.Value, 0); }
  public static VectorOffset CreateOverrideDatasVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOverrideDatasVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOverrideDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddServices(FlatBufferBuilder builder, VectorOffset servicesOffset) { builder.AddOffset(3, servicesOffset.Value, 0); }
  public static VectorOffset CreateServicesVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Service>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Service>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartServicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecorators(FlatBufferBuilder builder, VectorOffset decoratorsOffset) { builder.AddOffset(4, decoratorsOffset.Value, 0); }
  public static VectorOffset CreateDecoratorsVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Decorator>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecoratorsVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Decorator>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDecoratorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOverrideAssets(FlatBufferBuilder builder, VectorOffset overrideAssetsOffset) { builder.AddOffset(5, overrideAssetsOffset.Value, 0); }
  public static VectorOffset CreateOverrideAssetsVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideAsset>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOverrideAssetsVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.OverrideAsset>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOverrideAssetsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Asset> EndAsset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Asset>(o);
  }
  public AssetT UnPack() {
    var _o = new AssetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssetT _o) {
    _o.Id = this.Id;
    _o.LinkPath = this.LinkPath;
    _o.OverrideDatas = new List<common.ai.bt.fb.OverrideDataT>();
    for (var _j = 0; _j < this.OverrideDatasLength; ++_j) {_o.OverrideDatas.Add(this.OverrideDatas(_j).HasValue ? this.OverrideDatas(_j).Value.UnPack() : null);}
    _o.Services = new List<common.ai.bt.fb.ServiceT>();
    for (var _j = 0; _j < this.ServicesLength; ++_j) {_o.Services.Add(this.Services(_j).HasValue ? this.Services(_j).Value.UnPack() : null);}
    _o.Decorators = new List<common.ai.bt.fb.DecoratorT>();
    for (var _j = 0; _j < this.DecoratorsLength; ++_j) {_o.Decorators.Add(this.Decorators(_j).HasValue ? this.Decorators(_j).Value.UnPack() : null);}
    _o.OverrideAssets = new List<common.ai.bt.fb.OverrideAssetT>();
    for (var _j = 0; _j < this.OverrideAssetsLength; ++_j) {_o.OverrideAssets.Add(this.OverrideAssets(_j).HasValue ? this.OverrideAssets(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.Asset> Pack(FlatBufferBuilder builder, AssetT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Asset>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _linkPath = _o.LinkPath == null ? default(StringOffset) : builder.CreateString(_o.LinkPath);
    var _overrideDatas = default(VectorOffset);
    if (_o.OverrideDatas != null) {
      var __overrideDatas = new Offset<common.ai.bt.fb.OverrideData>[_o.OverrideDatas.Count];
      for (var _j = 0; _j < __overrideDatas.Length; ++_j) { __overrideDatas[_j] = common.ai.bt.fb.OverrideData.Pack(builder, _o.OverrideDatas[_j]); }
      _overrideDatas = CreateOverrideDatasVector(builder, __overrideDatas);
    }
    var _services = default(VectorOffset);
    if (_o.Services != null) {
      var __services = new Offset<common.ai.bt.fb.Service>[_o.Services.Count];
      for (var _j = 0; _j < __services.Length; ++_j) { __services[_j] = common.ai.bt.fb.Service.Pack(builder, _o.Services[_j]); }
      _services = CreateServicesVector(builder, __services);
    }
    var _decorators = default(VectorOffset);
    if (_o.Decorators != null) {
      var __decorators = new Offset<common.ai.bt.fb.Decorator>[_o.Decorators.Count];
      for (var _j = 0; _j < __decorators.Length; ++_j) { __decorators[_j] = common.ai.bt.fb.Decorator.Pack(builder, _o.Decorators[_j]); }
      _decorators = CreateDecoratorsVector(builder, __decorators);
    }
    var _overrideAssets = default(VectorOffset);
    if (_o.OverrideAssets != null) {
      var __overrideAssets = new Offset<common.ai.bt.fb.OverrideAsset>[_o.OverrideAssets.Count];
      for (var _j = 0; _j < __overrideAssets.Length; ++_j) { __overrideAssets[_j] = common.ai.bt.fb.OverrideAsset.Pack(builder, _o.OverrideAssets[_j]); }
      _overrideAssets = CreateOverrideAssetsVector(builder, __overrideAssets);
    }
    return CreateAsset(
      builder,
      _id,
      _linkPath,
      _overrideDatas,
      _services,
      _decorators,
      _overrideAssets);
  }
};

public class AssetT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("linkPath")]
  public string LinkPath { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideDatas")]
  public List<common.ai.bt.fb.OverrideDataT> OverrideDatas { get; set; }
  [Newtonsoft.Json.JsonProperty("services")]
  public List<common.ai.bt.fb.ServiceT> Services { get; set; }
  [Newtonsoft.Json.JsonProperty("decorators")]
  public List<common.ai.bt.fb.DecoratorT> Decorators { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideAssets")]
  public List<common.ai.bt.fb.OverrideAssetT> OverrideAssets { get; set; }

  public AssetT() {
    this.Id = null;
    this.LinkPath = null;
    this.OverrideDatas = null;
    this.Services = null;
    this.Decorators = null;
    this.OverrideAssets = null;
  }
}

public struct Connect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Connect GetRootAsConnect(ByteBuffer _bb) { return GetRootAsConnect(_bb, new Connect()); }
  public static Connect GetRootAsConnect(ByteBuffer _bb, Connect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Connect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public common.ai.bt.fb.ConnectChild? Children(int j) { int o = __p.__offset(6); return o != 0 ? (common.ai.bt.fb.ConnectChild?)(new common.ai.bt.fb.ConnectChild()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.Connect> CreateConnect(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset childrenOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Connect.AddChildren(builder, childrenOffset);
    Connect.AddId(builder, idOffset);
    return Connect.EndConnect(builder);
  }

  public static void StartConnect(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.ConnectChild>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.ConnectChild>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.Connect> EndConnect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.Connect>(o);
  }
  public ConnectT UnPack() {
    var _o = new ConnectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConnectT _o) {
    _o.Id = this.Id;
    _o.Children = new List<common.ai.bt.fb.ConnectChildT>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j).HasValue ? this.Children(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.Connect> Pack(FlatBufferBuilder builder, ConnectT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.Connect>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = new Offset<common.ai.bt.fb.ConnectChild>[_o.Children.Count];
      for (var _j = 0; _j < __children.Length; ++_j) { __children[_j] = common.ai.bt.fb.ConnectChild.Pack(builder, _o.Children[_j]); }
      _children = CreateChildrenVector(builder, __children);
    }
    return CreateConnect(
      builder,
      _id,
      _children);
  }
};

public class ConnectT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }
  [Newtonsoft.Json.JsonProperty("children")]
  public List<common.ai.bt.fb.ConnectChildT> Children { get; set; }

  public ConnectT() {
    this.Id = null;
    this.Children = null;
  }
}

public struct ConnectChild : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConnectChild GetRootAsConnectChild(ByteBuffer _bb) { return GetRootAsConnectChild(_bb, new ConnectChild()); }
  public static ConnectChild GetRootAsConnectChild(ByteBuffer _bb, ConnectChild obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConnectChild __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<common.ai.bt.fb.ConnectChild> CreateConnectChild(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset)) {
    builder.StartTable(1);
    ConnectChild.AddId(builder, idOffset);
    return ConnectChild.EndConnectChild(builder);
  }

  public static void StartConnectChild(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static Offset<common.ai.bt.fb.ConnectChild> EndConnectChild(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.ConnectChild>(o);
  }
  public ConnectChildT UnPack() {
    var _o = new ConnectChildT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConnectChildT _o) {
    _o.Id = this.Id;
  }
  public static Offset<common.ai.bt.fb.ConnectChild> Pack(FlatBufferBuilder builder, ConnectChildT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.ConnectChild>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    return CreateConnectChild(
      builder,
      _id);
  }
};

public class ConnectChildT
{
  [Newtonsoft.Json.JsonProperty("id")]
  public string Id { get; set; }

  public ConnectChildT() {
    this.Id = null;
  }
}

public struct BehaviorTree : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BehaviorTree GetRootAsBehaviorTree(ByteBuffer _bb) { return GetRootAsBehaviorTree(_bb, new BehaviorTree()); }
  public static BehaviorTree GetRootAsBehaviorTree(ByteBuffer _bb, BehaviorTree obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BehaviorTree __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public common.ai.bt.fb.Header? Header { get { int o = __p.__offset(4); return o != 0 ? (common.ai.bt.fb.Header?)(new common.ai.bt.fb.Header()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public common.ai.bt.fb.NodeData? Nodes(int j) { int o = __p.__offset(6); return o != 0 ? (common.ai.bt.fb.NodeData?)(new common.ai.bt.fb.NodeData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.ai.bt.fb.Connect? Connect(int j) { int o = __p.__offset(8); return o != 0 ? (common.ai.bt.fb.Connect?)(new common.ai.bt.fb.Connect()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConnectLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<common.ai.bt.fb.BehaviorTree> CreateBehaviorTree(FlatBufferBuilder builder,
      Offset<common.ai.bt.fb.Header> headerOffset = default(Offset<common.ai.bt.fb.Header>),
      VectorOffset nodesOffset = default(VectorOffset),
      VectorOffset connectOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BehaviorTree.AddConnect(builder, connectOffset);
    BehaviorTree.AddNodes(builder, nodesOffset);
    BehaviorTree.AddHeader(builder, headerOffset);
    return BehaviorTree.EndBehaviorTree(builder);
  }

  public static void StartBehaviorTree(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddHeader(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Header> headerOffset) { builder.AddOffset(0, headerOffset.Value, 0); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset) { builder.AddOffset(1, nodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.NodeData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.NodeData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConnect(FlatBufferBuilder builder, VectorOffset connectOffset) { builder.AddOffset(2, connectOffset.Value, 0); }
  public static VectorOffset CreateConnectVector(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Connect>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConnectVectorBlock(FlatBufferBuilder builder, Offset<common.ai.bt.fb.Connect>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConnectVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<common.ai.bt.fb.BehaviorTree> EndBehaviorTree(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.ai.bt.fb.BehaviorTree>(o);
  }
  public static void FinishBehaviorTreeBuffer(FlatBufferBuilder builder, Offset<common.ai.bt.fb.BehaviorTree> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBehaviorTreeBuffer(FlatBufferBuilder builder, Offset<common.ai.bt.fb.BehaviorTree> offset) { builder.FinishSizePrefixed(offset.Value); }
  public BehaviorTreeT UnPack() {
    var _o = new BehaviorTreeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BehaviorTreeT _o) {
    _o.Header = this.Header.HasValue ? this.Header.Value.UnPack() : null;
    _o.Nodes = new List<common.ai.bt.fb.NodeDataT>();
    for (var _j = 0; _j < this.NodesLength; ++_j) {_o.Nodes.Add(this.Nodes(_j).HasValue ? this.Nodes(_j).Value.UnPack() : null);}
    _o.Connect = new List<common.ai.bt.fb.ConnectT>();
    for (var _j = 0; _j < this.ConnectLength; ++_j) {_o.Connect.Add(this.Connect(_j).HasValue ? this.Connect(_j).Value.UnPack() : null);}
  }
  public static Offset<common.ai.bt.fb.BehaviorTree> Pack(FlatBufferBuilder builder, BehaviorTreeT _o) {
    if (_o == null) return default(Offset<common.ai.bt.fb.BehaviorTree>);
    var _header = _o.Header == null ? default(Offset<common.ai.bt.fb.Header>) : common.ai.bt.fb.Header.Pack(builder, _o.Header);
    var _nodes = default(VectorOffset);
    if (_o.Nodes != null) {
      var __nodes = new Offset<common.ai.bt.fb.NodeData>[_o.Nodes.Count];
      for (var _j = 0; _j < __nodes.Length; ++_j) { __nodes[_j] = common.ai.bt.fb.NodeData.Pack(builder, _o.Nodes[_j]); }
      _nodes = CreateNodesVector(builder, __nodes);
    }
    var _connect = default(VectorOffset);
    if (_o.Connect != null) {
      var __connect = new Offset<common.ai.bt.fb.Connect>[_o.Connect.Count];
      for (var _j = 0; _j < __connect.Length; ++_j) { __connect[_j] = common.ai.bt.fb.Connect.Pack(builder, _o.Connect[_j]); }
      _connect = CreateConnectVector(builder, __connect);
    }
    return CreateBehaviorTree(
      builder,
      _header,
      _nodes,
      _connect);
  }
};

public class BehaviorTreeT
{
  [Newtonsoft.Json.JsonProperty("header")]
  public common.ai.bt.fb.HeaderT Header { get; set; }
  [Newtonsoft.Json.JsonProperty("nodes")]
  public List<common.ai.bt.fb.NodeDataT> Nodes { get; set; }
  [Newtonsoft.Json.JsonProperty("connect")]
  public List<common.ai.bt.fb.ConnectT> Connect { get; set; }

  public BehaviorTreeT() {
    this.Header = null;
    this.Nodes = null;
    this.Connect = null;
  }

  public static BehaviorTreeT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<BehaviorTreeT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static BehaviorTreeT DeserializeFromBinary(byte[] fbBuffer) {
    return BehaviorTree.GetRootAsBehaviorTree(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BehaviorTree.FinishBehaviorTreeBuffer(fbb, BehaviorTree.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
