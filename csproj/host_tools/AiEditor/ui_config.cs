// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace AiEditor.UI
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Style : int
{
  Classic = 0,
  Light = 1,
  Dark = 2,
};

public struct UIConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UIConfig GetRootAsUIConfig(ByteBuffer _bb) { return GetRootAsUIConfig(_bb, new UIConfig()); }
  public static UIConfig GetRootAsUIConfig(ByteBuffer _bb, UIConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UIConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AiEditor.UI.Style Style { get { int o = __p.__offset(4); return o != 0 ? (AiEditor.UI.Style)__p.bb.GetInt(o + __p.bb_pos) : AiEditor.UI.Style.Dark; } }
  public bool NavEnableKeyboard { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<AiEditor.UI.UIConfig> CreateUIConfig(FlatBufferBuilder builder,
      AiEditor.UI.Style Style = AiEditor.UI.Style.Dark,
      bool NavEnableKeyboard = true) {
    builder.StartTable(2);
    UIConfig.AddStyle(builder, Style);
    UIConfig.AddNavEnableKeyboard(builder, NavEnableKeyboard);
    return UIConfig.EndUIConfig(builder);
  }

  public static void StartUIConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddStyle(FlatBufferBuilder builder, AiEditor.UI.Style Style) { builder.AddInt(0, (int)Style, 2); }
  public static void AddNavEnableKeyboard(FlatBufferBuilder builder, bool NavEnableKeyboard) { builder.AddBool(1, NavEnableKeyboard, true); }
  public static Offset<AiEditor.UI.UIConfig> EndUIConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AiEditor.UI.UIConfig>(o);
  }
  public static void FinishUIConfigBuffer(FlatBufferBuilder builder, Offset<AiEditor.UI.UIConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUIConfigBuffer(FlatBufferBuilder builder, Offset<AiEditor.UI.UIConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public UIConfigT UnPack() {
    var _o = new UIConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UIConfigT _o) {
    _o.Style = this.Style;
    _o.NavEnableKeyboard = this.NavEnableKeyboard;
  }
  public static Offset<AiEditor.UI.UIConfig> Pack(FlatBufferBuilder builder, UIConfigT _o) {
    if (_o == null) return default(Offset<AiEditor.UI.UIConfig>);
    return CreateUIConfig(
      builder,
      _o.Style,
      _o.NavEnableKeyboard);
  }
};

public class UIConfigT
{
  [Newtonsoft.Json.JsonProperty("Style")]
  public AiEditor.UI.Style Style { get; set; }
  [Newtonsoft.Json.JsonProperty("NavEnableKeyboard")]
  public bool NavEnableKeyboard { get; set; }

  public UIConfigT() {
    this.Style = AiEditor.UI.Style.Dark;
    this.NavEnableKeyboard = true;
  }

  public static UIConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<UIConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static UIConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return UIConfig.GetRootAsUIConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    UIConfig.FinishUIConfigBuffer(fbb, UIConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
