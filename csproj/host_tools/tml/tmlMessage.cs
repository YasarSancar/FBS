// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.tml.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MessageType : byte
{
  NONE = 0,
  FrameMessage = 1,
};

public class MessageTypeUnion {
  public MessageType Type { get; set; }
  public object Value { get; set; }

  public MessageTypeUnion() {
    this.Type = MessageType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.tml.fb.FrameMessageT AsFrameMessage() { return this.As<gfl.tml.fb.FrameMessageT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MessageTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MessageType.FrameMessage: return gfl.tml.fb.FrameMessage.Pack(builder, _o.AsFrameMessage()).Value;
    }
  }
}

public class MessageTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MessageTypeUnion) || objectType == typeof(System.Collections.Generic.List<MessageTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MessageTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MessageTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MessageTypeUnion, serializer);
    }
  }
  public MessageTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MessageTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MessageType.FrameMessage: _o.Value = serializer.Deserialize<gfl.tml.fb.FrameMessageT>(reader); break;
    }
    return _o;
  }
}

public struct FrameMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FrameMessage GetRootAsFrameMessage(ByteBuffer _bb) { return GetRootAsFrameMessage(_bb, new FrameMessage()); }
  public static FrameMessage GetRootAsFrameMessage(ByteBuffer _bb, FrameMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FrameMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Frame { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string FileName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.tml.fb.FrameMessage> CreateFrameMessage(FlatBufferBuilder builder,
      float frame = 0.0f,
      StringOffset fileNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    FrameMessage.AddFileName(builder, fileNameOffset);
    FrameMessage.AddFrame(builder, frame);
    return FrameMessage.EndFrameMessage(builder);
  }

  public static void StartFrameMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrame(FlatBufferBuilder builder, float frame) { builder.AddFloat(0, frame, 0.0f); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(1, fileNameOffset.Value, 0); }
  public static Offset<gfl.tml.fb.FrameMessage> EndFrameMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.FrameMessage>(o);
  }
  public FrameMessageT UnPack() {
    var _o = new FrameMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FrameMessageT _o) {
    _o.Frame = this.Frame;
    _o.FileName = this.FileName;
  }
  public static Offset<gfl.tml.fb.FrameMessage> Pack(FlatBufferBuilder builder, FrameMessageT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.FrameMessage>);
    var _fileName = _o.FileName == null ? default(StringOffset) : builder.CreateString(_o.FileName);
    return CreateFrameMessage(
      builder,
      _o.Frame,
      _fileName);
  }
};

public class FrameMessageT
{
  [Newtonsoft.Json.JsonProperty("frame")]
  public float Frame { get; set; }
  [Newtonsoft.Json.JsonProperty("fileName")]
  public string FileName { get; set; }

  public FrameMessageT() {
    this.Frame = 0.0f;
    this.FileName = null;
  }
}

public struct TimelineMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TimelineMessage GetRootAsTimelineMessage(ByteBuffer _bb) { return GetRootAsTimelineMessage(_bb, new TimelineMessage()); }
  public static TimelineMessage GetRootAsTimelineMessage(ByteBuffer _bb, TimelineMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimelineMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.tml.fb.MessageType MessageType { get { int o = __p.__offset(4); return o != 0 ? (gfl.tml.fb.MessageType)__p.bb.Get(o + __p.bb_pos) : gfl.tml.fb.MessageType.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.tml.fb.TimelineMessage> CreateTimelineMessage(FlatBufferBuilder builder,
      gfl.tml.fb.MessageType message_type = gfl.tml.fb.MessageType.NONE,
      int messageOffset = 0) {
    builder.StartTable(2);
    TimelineMessage.AddMessage(builder, messageOffset);
    TimelineMessage.AddMessageType(builder, message_type);
    return TimelineMessage.EndTimelineMessage(builder);
  }

  public static void StartTimelineMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMessageType(FlatBufferBuilder builder, gfl.tml.fb.MessageType messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<gfl.tml.fb.TimelineMessage> EndTimelineMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.tml.fb.TimelineMessage>(o);
  }
  public static void FinishTimelineMessageBuffer(FlatBufferBuilder builder, Offset<gfl.tml.fb.TimelineMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTimelineMessageBuffer(FlatBufferBuilder builder, Offset<gfl.tml.fb.TimelineMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
  public TimelineMessageT UnPack() {
    var _o = new TimelineMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TimelineMessageT _o) {
    _o.Message = new gfl.tml.fb.MessageTypeUnion();
    _o.Message.Type = this.MessageType;
    switch (this.MessageType) {
      default: break;
      case gfl.tml.fb.MessageType.FrameMessage:
        _o.Message.Value = this.Message<gfl.tml.fb.FrameMessage>().HasValue ? this.Message<gfl.tml.fb.FrameMessage>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.tml.fb.TimelineMessage> Pack(FlatBufferBuilder builder, TimelineMessageT _o) {
    if (_o == null) return default(Offset<gfl.tml.fb.TimelineMessage>);
    var _message_type = _o.Message == null ? gfl.tml.fb.MessageType.NONE : _o.Message.Type;
    var _message = _o.Message == null ? 0 : gfl.tml.fb.MessageTypeUnion.Pack(builder, _o.Message);
    return CreateTimelineMessage(
      builder,
      _message_type,
      _message);
  }
};

public class TimelineMessageT
{
  [Newtonsoft.Json.JsonProperty("message_type")]
  private gfl.tml.fb.MessageType MessageType {
    get {
      return this.Message != null ? this.Message.Type : gfl.tml.fb.MessageType.NONE;
    }
    set {
      this.Message = new gfl.tml.fb.MessageTypeUnion();
      this.Message.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("message")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.tml.fb.MessageTypeUnion_JsonConverter))]
  public gfl.tml.fb.MessageTypeUnion Message { get; set; }

  public TimelineMessageT() {
    this.Message = null;
  }

  public static TimelineMessageT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<TimelineMessageT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static TimelineMessageT DeserializeFromBinary(byte[] fbBuffer) {
    return TimelineMessage.GetRootAsTimelineMessage(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TimelineMessage.FinishTimelineMessageBuffer(fbb, TimelineMessage.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
