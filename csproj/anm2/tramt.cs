// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EditorMaterialParamCurve : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorMaterialParamCurve GetRootAsEditorMaterialParamCurve(ByteBuffer _bb) { return GetRootAsEditorMaterialParamCurve(_bb, new EditorMaterialParamCurve()); }
  public static EditorMaterialParamCurve GetRootAsEditorMaterialParamCurve(ByteBuffer _bb, EditorMaterialParamCurve obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorMaterialParamCurve __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.CurveType Type { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.CurveType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.CurveType.FloatCurve; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string TrcrvPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrcrvPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTrcrvPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTrcrvPathArray() { return __p.__vector_as_array<byte>(8); }
  public gfl.anm2.fb.CurveData? CurveData { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.CurveData?)(new gfl.anm2.fb.CurveData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.EditorMaterialParamCurve> CreateEditorMaterialParamCurve(FlatBufferBuilder builder,
      gfl.anm2.fb.CurveType type = gfl.anm2.fb.CurveType.FloatCurve,
      StringOffset nameOffset = default(StringOffset),
      StringOffset trcrvPathOffset = default(StringOffset),
      Offset<gfl.anm2.fb.CurveData> curveDataOffset = default(Offset<gfl.anm2.fb.CurveData>)) {
    builder.StartTable(4);
    EditorMaterialParamCurve.AddCurveData(builder, curveDataOffset);
    EditorMaterialParamCurve.AddTrcrvPath(builder, trcrvPathOffset);
    EditorMaterialParamCurve.AddName(builder, nameOffset);
    EditorMaterialParamCurve.AddType(builder, type);
    return EditorMaterialParamCurve.EndEditorMaterialParamCurve(builder);
  }

  public static void StartEditorMaterialParamCurve(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fb.CurveType type) { builder.AddUint(0, (uint)type, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddTrcrvPath(FlatBufferBuilder builder, StringOffset trcrvPathOffset) { builder.AddOffset(2, trcrvPathOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveData> curveDataOffset) { builder.AddOffset(3, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EditorMaterialParamCurve> EndEditorMaterialParamCurve(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorMaterialParamCurve>(o);
  }
  public EditorMaterialParamCurveT UnPack() {
    var _o = new EditorMaterialParamCurveT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorMaterialParamCurveT _o) {
    _o.Type = this.Type;
    _o.Name = this.Name;
    _o.TrcrvPath = this.TrcrvPath;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.EditorMaterialParamCurve> Pack(FlatBufferBuilder builder, EditorMaterialParamCurveT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorMaterialParamCurve>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _trcrvPath = _o.TrcrvPath == null ? default(StringOffset) : builder.CreateString(_o.TrcrvPath);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.CurveData>) : gfl.anm2.fb.CurveData.Pack(builder, _o.CurveData);
    return CreateEditorMaterialParamCurve(
      builder,
      _o.Type,
      _name,
      _trcrvPath,
      _curveData);
  }
};

public class EditorMaterialParamCurveT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fb.CurveType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("trcrvPath")]
  public string TrcrvPath { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.CurveDataT CurveData { get; set; }

  public EditorMaterialParamCurveT() {
    this.Type = gfl.anm2.fb.CurveType.FloatCurve;
    this.Name = null;
    this.TrcrvPath = null;
    this.CurveData = null;
  }
}

public struct EditorMaterialParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorMaterialParam GetRootAsEditorMaterialParam(ByteBuffer _bb) { return GetRootAsEditorMaterialParam(_bb, new EditorMaterialParam()); }
  public static EditorMaterialParam GetRootAsEditorMaterialParam(ByteBuffer _bb, EditorMaterialParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorMaterialParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MaterialName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMaterialNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMaterialNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.EditorMaterialParamCurve? CurveData(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EditorMaterialParamCurve?)(new gfl.anm2.fb.EditorMaterialParamCurve()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CurveDataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EditorMaterialParam> CreateEditorMaterialParam(FlatBufferBuilder builder,
      StringOffset materialNameOffset = default(StringOffset),
      VectorOffset curveDataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    EditorMaterialParam.AddCurveData(builder, curveDataOffset);
    EditorMaterialParam.AddMaterialName(builder, materialNameOffset);
    return EditorMaterialParam.EndEditorMaterialParam(builder);
  }

  public static void StartEditorMaterialParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMaterialName(FlatBufferBuilder builder, StringOffset materialNameOffset) { builder.AddOffset(0, materialNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, VectorOffset curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static VectorOffset CreateCurveDataVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorMaterialParamCurve>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCurveDataVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorMaterialParamCurve>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCurveDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EditorMaterialParam> EndEditorMaterialParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorMaterialParam>(o);
  }
  public EditorMaterialParamT UnPack() {
    var _o = new EditorMaterialParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorMaterialParamT _o) {
    _o.MaterialName = this.MaterialName;
    _o.CurveData = new List<gfl.anm2.fb.EditorMaterialParamCurveT>();
    for (var _j = 0; _j < this.CurveDataLength; ++_j) {_o.CurveData.Add(this.CurveData(_j).HasValue ? this.CurveData(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EditorMaterialParam> Pack(FlatBufferBuilder builder, EditorMaterialParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorMaterialParam>);
    var _materialName = _o.MaterialName == null ? default(StringOffset) : builder.CreateString(_o.MaterialName);
    var _curveData = default(VectorOffset);
    if (_o.CurveData != null) {
      var __curveData = new Offset<gfl.anm2.fb.EditorMaterialParamCurve>[_o.CurveData.Count];
      for (var _j = 0; _j < __curveData.Length; ++_j) { __curveData[_j] = gfl.anm2.fb.EditorMaterialParamCurve.Pack(builder, _o.CurveData[_j]); }
      _curveData = CreateCurveDataVector(builder, __curveData);
    }
    return CreateEditorMaterialParam(
      builder,
      _materialName,
      _curveData);
  }
};

public class EditorMaterialParamT
{
  [Newtonsoft.Json.JsonProperty("materialName")]
  public string MaterialName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public List<gfl.anm2.fb.EditorMaterialParamCurveT> CurveData { get; set; }

  public EditorMaterialParamT() {
    this.MaterialName = null;
    this.CurveData = null;
  }
}

public struct MaterialParamFloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialParamFloat GetRootAsMaterialParamFloat(ByteBuffer _bb) { return GetRootAsMaterialParamFloat(_bb, new MaterialParamFloat()); }
  public static MaterialParamFloat GetRootAsMaterialParamFloat(ByteBuffer _bb, MaterialParamFloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialParamFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.RuntimeCurveFloat? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat?)(new gfl.anm2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.MaterialParamFloat> CreateMaterialParamFloat(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.RuntimeCurveFloat> curveDataOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat>)) {
    builder.StartTable(2);
    MaterialParamFloat.AddCurveData(builder, curveDataOffset);
    MaterialParamFloat.AddAttributeName(builder, attributeNameOffset);
    return MaterialParamFloat.EndMaterialParamFloat(builder);
  }

  public static void StartMaterialParamFloat(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MaterialParamFloat> EndMaterialParamFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialParamFloat>(o);
  }
  public MaterialParamFloatT UnPack() {
    var _o = new MaterialParamFloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialParamFloatT _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.MaterialParamFloat> Pack(FlatBufferBuilder builder, MaterialParamFloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialParamFloat>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat>) : gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.CurveData);
    return CreateMaterialParamFloat(
      builder,
      _attributeName,
      _curveData);
  }
};

public class MaterialParamFloatT
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.RuntimeCurveFloatT CurveData { get; set; }

  public MaterialParamFloatT() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct MaterialParamFloat4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialParamFloat4 GetRootAsMaterialParamFloat4(ByteBuffer _bb) { return GetRootAsMaterialParamFloat4(_bb, new MaterialParamFloat4()); }
  public static MaterialParamFloat4 GetRootAsMaterialParamFloat4(ByteBuffer _bb, MaterialParamFloat4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialParamFloat4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AttributeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAttributeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAttributeNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.RuntimeCurveFloat4? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat4?)(new gfl.anm2.fb.RuntimeCurveFloat4()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.MaterialParamFloat4> CreateMaterialParamFloat4(FlatBufferBuilder builder,
      StringOffset attributeNameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.RuntimeCurveFloat4> curveDataOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat4>)) {
    builder.StartTable(2);
    MaterialParamFloat4.AddCurveData(builder, curveDataOffset);
    MaterialParamFloat4.AddAttributeName(builder, attributeNameOffset);
    return MaterialParamFloat4.EndMaterialParamFloat4(builder);
  }

  public static void StartMaterialParamFloat4(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddAttributeName(FlatBufferBuilder builder, StringOffset attributeNameOffset) { builder.AddOffset(0, attributeNameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat4> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MaterialParamFloat4> EndMaterialParamFloat4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialParamFloat4>(o);
  }
  public MaterialParamFloat4T UnPack() {
    var _o = new MaterialParamFloat4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialParamFloat4T _o) {
    _o.AttributeName = this.AttributeName;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.MaterialParamFloat4> Pack(FlatBufferBuilder builder, MaterialParamFloat4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialParamFloat4>);
    var _attributeName = _o.AttributeName == null ? default(StringOffset) : builder.CreateString(_o.AttributeName);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat4>) : gfl.anm2.fb.RuntimeCurveFloat4.Pack(builder, _o.CurveData);
    return CreateMaterialParamFloat4(
      builder,
      _attributeName,
      _curveData);
  }
};

public class MaterialParamFloat4T
{
  [Newtonsoft.Json.JsonProperty("attributeName")]
  public string AttributeName { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.RuntimeCurveFloat4T CurveData { get; set; }

  public MaterialParamFloat4T() {
    this.AttributeName = null;
    this.CurveData = null;
  }
}

public struct MaterialParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialParam GetRootAsMaterialParam(ByteBuffer _bb) { return GetRootAsMaterialParam(_bb, new MaterialParam()); }
  public static MaterialParam GetRootAsMaterialParam(ByteBuffer _bb, MaterialParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MaterialName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMaterialNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMaterialNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.MaterialParamFloat? FloatParams(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaterialParamFloat?)(new gfl.anm2.fb.MaterialParamFloat()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.MaterialParamFloat4? Float4Params(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.MaterialParamFloat4?)(new gfl.anm2.fb.MaterialParamFloat4()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Float4ParamsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MaterialParam> CreateMaterialParam(FlatBufferBuilder builder,
      StringOffset materialNameOffset = default(StringOffset),
      VectorOffset floatParamsOffset = default(VectorOffset),
      VectorOffset float4ParamsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MaterialParam.AddFloat4Params(builder, float4ParamsOffset);
    MaterialParam.AddFloatParams(builder, floatParamsOffset);
    MaterialParam.AddMaterialName(builder, materialNameOffset);
    return MaterialParam.EndMaterialParam(builder);
  }

  public static void StartMaterialParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMaterialName(FlatBufferBuilder builder, StringOffset materialNameOffset) { builder.AddOffset(0, materialNameOffset.Value, 0); }
  public static void AddFloatParams(FlatBufferBuilder builder, VectorOffset floatParamsOffset) { builder.AddOffset(1, floatParamsOffset.Value, 0); }
  public static VectorOffset CreateFloatParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParamFloat>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParamFloat>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloat4Params(FlatBufferBuilder builder, VectorOffset float4ParamsOffset) { builder.AddOffset(2, float4ParamsOffset.Value, 0); }
  public static VectorOffset CreateFloat4ParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParamFloat4>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloat4ParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParamFloat4>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloat4ParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MaterialParam> EndMaterialParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialParam>(o);
  }
  public MaterialParamT UnPack() {
    var _o = new MaterialParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialParamT _o) {
    _o.MaterialName = this.MaterialName;
    _o.FloatParams = new List<gfl.anm2.fb.MaterialParamFloatT>();
    for (var _j = 0; _j < this.FloatParamsLength; ++_j) {_o.FloatParams.Add(this.FloatParams(_j).HasValue ? this.FloatParams(_j).Value.UnPack() : null);}
    _o.Float4Params = new List<gfl.anm2.fb.MaterialParamFloat4T>();
    for (var _j = 0; _j < this.Float4ParamsLength; ++_j) {_o.Float4Params.Add(this.Float4Params(_j).HasValue ? this.Float4Params(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MaterialParam> Pack(FlatBufferBuilder builder, MaterialParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialParam>);
    var _materialName = _o.MaterialName == null ? default(StringOffset) : builder.CreateString(_o.MaterialName);
    var _floatParams = default(VectorOffset);
    if (_o.FloatParams != null) {
      var __floatParams = new Offset<gfl.anm2.fb.MaterialParamFloat>[_o.FloatParams.Count];
      for (var _j = 0; _j < __floatParams.Length; ++_j) { __floatParams[_j] = gfl.anm2.fb.MaterialParamFloat.Pack(builder, _o.FloatParams[_j]); }
      _floatParams = CreateFloatParamsVector(builder, __floatParams);
    }
    var _float4Params = default(VectorOffset);
    if (_o.Float4Params != null) {
      var __float4Params = new Offset<gfl.anm2.fb.MaterialParamFloat4>[_o.Float4Params.Count];
      for (var _j = 0; _j < __float4Params.Length; ++_j) { __float4Params[_j] = gfl.anm2.fb.MaterialParamFloat4.Pack(builder, _o.Float4Params[_j]); }
      _float4Params = CreateFloat4ParamsVector(builder, __float4Params);
    }
    return CreateMaterialParam(
      builder,
      _materialName,
      _floatParams,
      _float4Params);
  }
};

public class MaterialParamT
{
  [Newtonsoft.Json.JsonProperty("materialName")]
  public string MaterialName { get; set; }
  [Newtonsoft.Json.JsonProperty("floatParams")]
  public List<gfl.anm2.fb.MaterialParamFloatT> FloatParams { get; set; }
  [Newtonsoft.Json.JsonProperty("float4Params")]
  public List<gfl.anm2.fb.MaterialParamFloat4T> Float4Params { get; set; }

  public MaterialParamT() {
    this.MaterialName = null;
    this.FloatParams = null;
    this.Float4Params = null;
  }
}

public struct MaterialAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialAnimationData GetRootAsMaterialAnimationData(ByteBuffer _bb) { return GetRootAsMaterialAnimationData(_bb, new MaterialAnimationData()); }
  public static MaterialAnimationData GetRootAsMaterialAnimationData(ByteBuffer _bb, MaterialAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorMaterialParam? EditorMaterialParams(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EditorMaterialParam?)(new gfl.anm2.fb.EditorMaterialParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EditorMaterialParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.MaterialParam? MaterialParams(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.MaterialParam?)(new gfl.anm2.fb.MaterialParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MaterialParamsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte TotalFloatParamCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte TotalFloat4ParamCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<gfl.anm2.fb.MaterialAnimationData> CreateMaterialAnimationData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      VectorOffset editorMaterialParamsOffset = default(VectorOffset),
      VectorOffset materialParamsOffset = default(VectorOffset),
      byte totalFloatParamCount = 0,
      byte totalFloat4ParamCount = 0) {
    builder.StartTable(5);
    MaterialAnimationData.AddMaterialParams(builder, materialParamsOffset);
    MaterialAnimationData.AddEditorMaterialParams(builder, editorMaterialParamsOffset);
    MaterialAnimationData.AddFrameSetting(builder, frameSettingOffset);
    MaterialAnimationData.AddTotalFloat4ParamCount(builder, totalFloat4ParamCount);
    MaterialAnimationData.AddTotalFloatParamCount(builder, totalFloatParamCount);
    return MaterialAnimationData.EndMaterialAnimationData(builder);
  }

  public static void StartMaterialAnimationData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddEditorMaterialParams(FlatBufferBuilder builder, VectorOffset editorMaterialParamsOffset) { builder.AddOffset(1, editorMaterialParamsOffset.Value, 0); }
  public static VectorOffset CreateEditorMaterialParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorMaterialParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEditorMaterialParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorMaterialParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEditorMaterialParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaterialParams(FlatBufferBuilder builder, VectorOffset materialParamsOffset) { builder.AddOffset(2, materialParamsOffset.Value, 0); }
  public static VectorOffset CreateMaterialParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMaterialParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMaterialParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTotalFloatParamCount(FlatBufferBuilder builder, byte totalFloatParamCount) { builder.AddByte(3, totalFloatParamCount, 0); }
  public static void AddTotalFloat4ParamCount(FlatBufferBuilder builder, byte totalFloat4ParamCount) { builder.AddByte(4, totalFloat4ParamCount, 0); }
  public static Offset<gfl.anm2.fb.MaterialAnimationData> EndMaterialAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialAnimationData>(o);
  }
  public static void FinishMaterialAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialAnimationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMaterialAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialAnimationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MaterialAnimationDataT UnPack() {
    var _o = new MaterialAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialAnimationDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.EditorMaterialParams = new List<gfl.anm2.fb.EditorMaterialParamT>();
    for (var _j = 0; _j < this.EditorMaterialParamsLength; ++_j) {_o.EditorMaterialParams.Add(this.EditorMaterialParams(_j).HasValue ? this.EditorMaterialParams(_j).Value.UnPack() : null);}
    _o.MaterialParams = new List<gfl.anm2.fb.MaterialParamT>();
    for (var _j = 0; _j < this.MaterialParamsLength; ++_j) {_o.MaterialParams.Add(this.MaterialParams(_j).HasValue ? this.MaterialParams(_j).Value.UnPack() : null);}
    _o.TotalFloatParamCount = this.TotalFloatParamCount;
    _o.TotalFloat4ParamCount = this.TotalFloat4ParamCount;
  }
  public static Offset<gfl.anm2.fb.MaterialAnimationData> Pack(FlatBufferBuilder builder, MaterialAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialAnimationData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _editorMaterialParams = default(VectorOffset);
    if (_o.EditorMaterialParams != null) {
      var __editorMaterialParams = new Offset<gfl.anm2.fb.EditorMaterialParam>[_o.EditorMaterialParams.Count];
      for (var _j = 0; _j < __editorMaterialParams.Length; ++_j) { __editorMaterialParams[_j] = gfl.anm2.fb.EditorMaterialParam.Pack(builder, _o.EditorMaterialParams[_j]); }
      _editorMaterialParams = CreateEditorMaterialParamsVector(builder, __editorMaterialParams);
    }
    var _materialParams = default(VectorOffset);
    if (_o.MaterialParams != null) {
      var __materialParams = new Offset<gfl.anm2.fb.MaterialParam>[_o.MaterialParams.Count];
      for (var _j = 0; _j < __materialParams.Length; ++_j) { __materialParams[_j] = gfl.anm2.fb.MaterialParam.Pack(builder, _o.MaterialParams[_j]); }
      _materialParams = CreateMaterialParamsVector(builder, __materialParams);
    }
    return CreateMaterialAnimationData(
      builder,
      _frameSetting,
      _editorMaterialParams,
      _materialParams,
      _o.TotalFloatParamCount,
      _o.TotalFloat4ParamCount);
  }
};

public class MaterialAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("editorMaterialParams")]
  public List<gfl.anm2.fb.EditorMaterialParamT> EditorMaterialParams { get; set; }
  [Newtonsoft.Json.JsonProperty("materialParams")]
  public List<gfl.anm2.fb.MaterialParamT> MaterialParams { get; set; }
  [Newtonsoft.Json.JsonProperty("totalFloatParamCount")]
  public byte TotalFloatParamCount { get; set; }
  [Newtonsoft.Json.JsonProperty("totalFloat4ParamCount")]
  public byte TotalFloat4ParamCount { get; set; }

  public MaterialAnimationDataT() {
    this.FrameSetting = null;
    this.EditorMaterialParams = null;
    this.MaterialParams = null;
    this.TotalFloatParamCount = 0;
    this.TotalFloat4ParamCount = 0;
  }

  public static MaterialAnimationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MaterialAnimationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MaterialAnimationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return MaterialAnimationData.GetRootAsMaterialAnimationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MaterialAnimationData.FinishMaterialAnimationDataBuffer(fbb, MaterialAnimationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
