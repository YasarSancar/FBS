// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct JointAnimeFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static JointAnimeFilePath GetRootAsJointAnimeFilePath(ByteBuffer _bb) { return GetRootAsJointAnimeFilePath(_bb, new JointAnimeFilePath()); }
  public static JointAnimeFilePath GetRootAsJointAnimeFilePath(ByteBuffer _bb, JointAnimeFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JointAnimeFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.JointAnimeFilePath> CreateJointAnimeFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    JointAnimeFilePath.AddPath(builder, pathOffset);
    return JointAnimeFilePath.EndJointAnimeFilePath(builder);
  }

  public static void StartJointAnimeFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.JointAnimeFilePath> EndJointAnimeFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.JointAnimeFilePath>(o);
  }
  public JointAnimeFilePathT UnPack() {
    var _o = new JointAnimeFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(JointAnimeFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.JointAnimeFilePath> Pack(FlatBufferBuilder builder, JointAnimeFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.JointAnimeFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateJointAnimeFilePath(
      builder,
      _path);
  }
};

public class JointAnimeFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public JointAnimeFilePathT() {
    this.Path = null;
  }
}

public struct MeshAnimeConfigFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshAnimeConfigFilePath GetRootAsMeshAnimeConfigFilePath(ByteBuffer _bb) { return GetRootAsMeshAnimeConfigFilePath(_bb, new MeshAnimeConfigFilePath()); }
  public static MeshAnimeConfigFilePath GetRootAsMeshAnimeConfigFilePath(ByteBuffer _bb, MeshAnimeConfigFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshAnimeConfigFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.MeshAnimeConfigFilePath> CreateMeshAnimeConfigFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    MeshAnimeConfigFilePath.AddPath(builder, pathOffset);
    return MeshAnimeConfigFilePath.EndMeshAnimeConfigFilePath(builder);
  }

  public static void StartMeshAnimeConfigFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MeshAnimeConfigFilePath> EndMeshAnimeConfigFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MeshAnimeConfigFilePath>(o);
  }
  public MeshAnimeConfigFilePathT UnPack() {
    var _o = new MeshAnimeConfigFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshAnimeConfigFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.MeshAnimeConfigFilePath> Pack(FlatBufferBuilder builder, MeshAnimeConfigFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MeshAnimeConfigFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateMeshAnimeConfigFilePath(
      builder,
      _path);
  }
};

public class MeshAnimeConfigFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public MeshAnimeConfigFilePathT() {
    this.Path = null;
  }
}

public struct KeyEventFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyEventFilePath GetRootAsKeyEventFilePath(ByteBuffer _bb) { return GetRootAsKeyEventFilePath(_bb, new KeyEventFilePath()); }
  public static KeyEventFilePath GetRootAsKeyEventFilePath(ByteBuffer _bb, KeyEventFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyEventFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.KeyEventFilePath> CreateKeyEventFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    KeyEventFilePath.AddPath(builder, pathOffset);
    return KeyEventFilePath.EndKeyEventFilePath(builder);
  }

  public static void StartKeyEventFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.KeyEventFilePath> EndKeyEventFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.KeyEventFilePath>(o);
  }
  public KeyEventFilePathT UnPack() {
    var _o = new KeyEventFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyEventFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.KeyEventFilePath> Pack(FlatBufferBuilder builder, KeyEventFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.KeyEventFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateKeyEventFilePath(
      builder,
      _path);
  }
};

public class KeyEventFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public KeyEventFilePathT() {
    this.Path = null;
  }
}

public struct AnimationClipConfigData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationClipConfigData GetRootAsAnimationClipConfigData(ByteBuffer _bb) { return GetRootAsAnimationClipConfigData(_bb, new AnimationClipConfigData()); }
  public static AnimationClipConfigData GetRootAsAnimationClipConfigData(ByteBuffer _bb, AnimationClipConfigData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationClipConfigData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.JointAnimeFilePath? JointAnimeFilePath { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.JointAnimeFilePath?)(new gfl.anm2.fb.JointAnimeFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MeshAnimeConfigFilePath? MeshAnimeConfigFilePath { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MeshAnimeConfigFilePath?)(new gfl.anm2.fb.MeshAnimeConfigFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.KeyEventFilePath? KeyEventFilePath { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.KeyEventFilePath?)(new gfl.anm2.fb.KeyEventFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.AnimationClipConfigData> CreateAnimationClipConfigData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.JointAnimeFilePath> jointAnimeFilePathOffset = default(Offset<gfl.anm2.fb.JointAnimeFilePath>),
      Offset<gfl.anm2.fb.MeshAnimeConfigFilePath> meshAnimeConfigFilePathOffset = default(Offset<gfl.anm2.fb.MeshAnimeConfigFilePath>),
      Offset<gfl.anm2.fb.KeyEventFilePath> keyEventFilePathOffset = default(Offset<gfl.anm2.fb.KeyEventFilePath>)) {
    builder.StartTable(3);
    AnimationClipConfigData.AddKeyEventFilePath(builder, keyEventFilePathOffset);
    AnimationClipConfigData.AddMeshAnimeConfigFilePath(builder, meshAnimeConfigFilePathOffset);
    AnimationClipConfigData.AddJointAnimeFilePath(builder, jointAnimeFilePathOffset);
    return AnimationClipConfigData.EndAnimationClipConfigData(builder);
  }

  public static void StartAnimationClipConfigData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddJointAnimeFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.JointAnimeFilePath> jointAnimeFilePathOffset) { builder.AddOffset(0, jointAnimeFilePathOffset.Value, 0); }
  public static void AddMeshAnimeConfigFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshAnimeConfigFilePath> meshAnimeConfigFilePathOffset) { builder.AddOffset(1, meshAnimeConfigFilePathOffset.Value, 0); }
  public static void AddKeyEventFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.KeyEventFilePath> keyEventFilePathOffset) { builder.AddOffset(2, keyEventFilePathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationClipConfigData> EndAnimationClipConfigData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationClipConfigData>(o);
  }
  public static void FinishAnimationClipConfigDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationClipConfigData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationClipConfigDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationClipConfigData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationClipConfigDataT UnPack() {
    var _o = new AnimationClipConfigDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationClipConfigDataT _o) {
    _o.JointAnimeFilePath = this.JointAnimeFilePath.HasValue ? this.JointAnimeFilePath.Value.UnPack() : null;
    _o.MeshAnimeConfigFilePath = this.MeshAnimeConfigFilePath.HasValue ? this.MeshAnimeConfigFilePath.Value.UnPack() : null;
    _o.KeyEventFilePath = this.KeyEventFilePath.HasValue ? this.KeyEventFilePath.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.AnimationClipConfigData> Pack(FlatBufferBuilder builder, AnimationClipConfigDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationClipConfigData>);
    var _jointAnimeFilePath = _o.JointAnimeFilePath == null ? default(Offset<gfl.anm2.fb.JointAnimeFilePath>) : gfl.anm2.fb.JointAnimeFilePath.Pack(builder, _o.JointAnimeFilePath);
    var _meshAnimeConfigFilePath = _o.MeshAnimeConfigFilePath == null ? default(Offset<gfl.anm2.fb.MeshAnimeConfigFilePath>) : gfl.anm2.fb.MeshAnimeConfigFilePath.Pack(builder, _o.MeshAnimeConfigFilePath);
    var _keyEventFilePath = _o.KeyEventFilePath == null ? default(Offset<gfl.anm2.fb.KeyEventFilePath>) : gfl.anm2.fb.KeyEventFilePath.Pack(builder, _o.KeyEventFilePath);
    return CreateAnimationClipConfigData(
      builder,
      _jointAnimeFilePath,
      _meshAnimeConfigFilePath,
      _keyEventFilePath);
  }
};

public class AnimationClipConfigDataT
{
  [Newtonsoft.Json.JsonProperty("jointAnimeFilePath")]
  public gfl.anm2.fb.JointAnimeFilePathT JointAnimeFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("meshAnimeConfigFilePath")]
  public gfl.anm2.fb.MeshAnimeConfigFilePathT MeshAnimeConfigFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("keyEventFilePath")]
  public gfl.anm2.fb.KeyEventFilePathT KeyEventFilePath { get; set; }

  public AnimationClipConfigDataT() {
    this.JointAnimeFilePath = null;
    this.MeshAnimeConfigFilePath = null;
    this.KeyEventFilePath = null;
  }

  public static AnimationClipConfigDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationClipConfigDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationClipConfigDataT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationClipConfigData.GetRootAsAnimationClipConfigData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationClipConfigData.FinishAnimationClipConfigDataBuffer(fbb, AnimationClipConfigData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
