// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ValueType : byte
{
  NONE = 0,
  IntValue = 1,
  FloatValue = 2,
  BoolValue = 3,
  StringValue = 4,
};

public class ValueTypeUnion {
  public ValueType Type { get; set; }
  public object Value { get; set; }

  public ValueTypeUnion() {
    this.Type = ValueType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.IntValueT AsIntValue() { return this.As<gfl.anm2.fb.IntValueT>(); }
  public gfl.anm2.fb.FloatValueT AsFloatValue() { return this.As<gfl.anm2.fb.FloatValueT>(); }
  public gfl.anm2.fb.BoolValueT AsBoolValue() { return this.As<gfl.anm2.fb.BoolValueT>(); }
  public gfl.anm2.fb.StringValueT AsStringValue() { return this.As<gfl.anm2.fb.StringValueT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ValueTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ValueType.IntValue: return gfl.anm2.fb.IntValue.Pack(builder, _o.AsIntValue()).Value;
      case ValueType.FloatValue: return gfl.anm2.fb.FloatValue.Pack(builder, _o.AsFloatValue()).Value;
      case ValueType.BoolValue: return gfl.anm2.fb.BoolValue.Pack(builder, _o.AsBoolValue()).Value;
      case ValueType.StringValue: return gfl.anm2.fb.StringValue.Pack(builder, _o.AsStringValue()).Value;
    }
  }
}

public class ValueTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ValueTypeUnion) || objectType == typeof(System.Collections.Generic.List<ValueTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ValueTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ValueTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ValueTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ValueTypeUnion, serializer);
    }
  }
  public ValueTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, ValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ValueType.IntValue: _o.Value = serializer.Deserialize<gfl.anm2.fb.IntValueT>(reader); break;
      case ValueType.FloatValue: _o.Value = serializer.Deserialize<gfl.anm2.fb.FloatValueT>(reader); break;
      case ValueType.BoolValue: _o.Value = serializer.Deserialize<gfl.anm2.fb.BoolValueT>(reader); break;
      case ValueType.StringValue: _o.Value = serializer.Deserialize<gfl.anm2.fb.StringValueT>(reader); break;
    }
    return _o;
  }
}

public struct IntValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IntValue GetRootAsIntValue(ByteBuffer _bb) { return GetRootAsIntValue(_bb, new IntValue()); }
  public static IntValue GetRootAsIntValue(ByteBuffer _bb, IntValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IntValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MinValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fb.IntValue> CreateIntValue(FlatBufferBuilder builder,
      int min_value = 0,
      int max_value = 0,
      int default_value = 0) {
    builder.StartTable(3);
    IntValue.AddDefaultValue(builder, default_value);
    IntValue.AddMaxValue(builder, max_value);
    IntValue.AddMinValue(builder, min_value);
    return IntValue.EndIntValue(builder);
  }

  public static void StartIntValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMinValue(FlatBufferBuilder builder, int minValue) { builder.AddInt(0, minValue, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, int maxValue) { builder.AddInt(1, maxValue, 0); }
  public static void AddDefaultValue(FlatBufferBuilder builder, int defaultValue) { builder.AddInt(2, defaultValue, 0); }
  public static Offset<gfl.anm2.fb.IntValue> EndIntValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.IntValue>(o);
  }
  public IntValueT UnPack() {
    var _o = new IntValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntValueT _o) {
    _o.MinValue = this.MinValue;
    _o.MaxValue = this.MaxValue;
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fb.IntValue> Pack(FlatBufferBuilder builder, IntValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.IntValue>);
    return CreateIntValue(
      builder,
      _o.MinValue,
      _o.MaxValue,
      _o.DefaultValue);
  }
};

public class IntValueT
{
  [Newtonsoft.Json.JsonProperty("min_value")]
  public int MinValue { get; set; }
  [Newtonsoft.Json.JsonProperty("max_value")]
  public int MaxValue { get; set; }
  [Newtonsoft.Json.JsonProperty("default_value")]
  public int DefaultValue { get; set; }

  public IntValueT() {
    this.MinValue = 0;
    this.MaxValue = 0;
    this.DefaultValue = 0;
  }
}

public struct FloatValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FloatValue GetRootAsFloatValue(ByteBuffer _bb) { return GetRootAsFloatValue(_bb, new FloatValue()); }
  public static FloatValue GetRootAsFloatValue(ByteBuffer _bb, FloatValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float MinValue { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MaxValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DefaultValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.FloatValue> CreateFloatValue(FlatBufferBuilder builder,
      float min_value = 0.0f,
      float max_value = 0.0f,
      float default_value = 0.0f) {
    builder.StartTable(3);
    FloatValue.AddDefaultValue(builder, default_value);
    FloatValue.AddMaxValue(builder, max_value);
    FloatValue.AddMinValue(builder, min_value);
    return FloatValue.EndFloatValue(builder);
  }

  public static void StartFloatValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMinValue(FlatBufferBuilder builder, float minValue) { builder.AddFloat(0, minValue, 0.0f); }
  public static void AddMaxValue(FlatBufferBuilder builder, float maxValue) { builder.AddFloat(1, maxValue, 0.0f); }
  public static void AddDefaultValue(FlatBufferBuilder builder, float defaultValue) { builder.AddFloat(2, defaultValue, 0.0f); }
  public static Offset<gfl.anm2.fb.FloatValue> EndFloatValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.FloatValue>(o);
  }
  public FloatValueT UnPack() {
    var _o = new FloatValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatValueT _o) {
    _o.MinValue = this.MinValue;
    _o.MaxValue = this.MaxValue;
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fb.FloatValue> Pack(FlatBufferBuilder builder, FloatValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.FloatValue>);
    return CreateFloatValue(
      builder,
      _o.MinValue,
      _o.MaxValue,
      _o.DefaultValue);
  }
};

public class FloatValueT
{
  [Newtonsoft.Json.JsonProperty("min_value")]
  public float MinValue { get; set; }
  [Newtonsoft.Json.JsonProperty("max_value")]
  public float MaxValue { get; set; }
  [Newtonsoft.Json.JsonProperty("default_value")]
  public float DefaultValue { get; set; }

  public FloatValueT() {
    this.MinValue = 0.0f;
    this.MaxValue = 0.0f;
    this.DefaultValue = 0.0f;
  }
}

public struct BoolValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BoolValue GetRootAsBoolValue(ByteBuffer _bb) { return GetRootAsBoolValue(_bb, new BoolValue()); }
  public static BoolValue GetRootAsBoolValue(ByteBuffer _bb, BoolValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BoolValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool DefaultValue { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.BoolValue> CreateBoolValue(FlatBufferBuilder builder,
      bool default_value = false) {
    builder.StartTable(1);
    BoolValue.AddDefaultValue(builder, default_value);
    return BoolValue.EndBoolValue(builder);
  }

  public static void StartBoolValue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDefaultValue(FlatBufferBuilder builder, bool defaultValue) { builder.AddBool(0, defaultValue, false); }
  public static Offset<gfl.anm2.fb.BoolValue> EndBoolValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BoolValue>(o);
  }
  public BoolValueT UnPack() {
    var _o = new BoolValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoolValueT _o) {
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fb.BoolValue> Pack(FlatBufferBuilder builder, BoolValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BoolValue>);
    return CreateBoolValue(
      builder,
      _o.DefaultValue);
  }
};

public class BoolValueT
{
  [Newtonsoft.Json.JsonProperty("default_value")]
  public bool DefaultValue { get; set; }

  public BoolValueT() {
    this.DefaultValue = false;
  }
}

public struct StringValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StringValue GetRootAsStringValue(ByteBuffer _bb) { return GetRootAsStringValue(_bb, new StringValue()); }
  public static StringValue GetRootAsStringValue(ByteBuffer _bb, StringValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StringValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string DefaultValue { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDefaultValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDefaultValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.StringValue> CreateStringValue(FlatBufferBuilder builder,
      StringOffset default_valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    StringValue.AddDefaultValue(builder, default_valueOffset);
    return StringValue.EndStringValue(builder);
  }

  public static void StartStringValue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDefaultValue(FlatBufferBuilder builder, StringOffset defaultValueOffset) { builder.AddOffset(0, defaultValueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.StringValue> EndStringValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.StringValue>(o);
  }
  public StringValueT UnPack() {
    var _o = new StringValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StringValueT _o) {
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fb.StringValue> Pack(FlatBufferBuilder builder, StringValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.StringValue>);
    var _default_value = _o.DefaultValue == null ? default(StringOffset) : builder.CreateString(_o.DefaultValue);
    return CreateStringValue(
      builder,
      _default_value);
  }
};

public class StringValueT
{
  [Newtonsoft.Json.JsonProperty("default_value")]
  public string DefaultValue { get; set; }

  public StringValueT() {
    this.DefaultValue = null;
  }
}

public struct ValueTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ValueTemplate GetRootAsValueTemplate(ByteBuffer _bb) { return GetRootAsValueTemplate(_bb, new ValueTemplate()); }
  public static ValueTemplate GetRootAsValueTemplate(ByteBuffer _bb, ValueTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ValueTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.ValueType ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.ValueType)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.ValueType.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.ValueTemplate> CreateValueTemplate(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.ValueType value_type = gfl.anm2.fb.ValueType.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    ValueTemplate.AddValue(builder, valueOffset);
    ValueTemplate.AddName(builder, nameOffset);
    ValueTemplate.AddValueType(builder, value_type);
    return ValueTemplate.EndValueTemplate(builder);
  }

  public static void StartValueTemplate(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.anm2.fb.ValueType valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<gfl.anm2.fb.ValueTemplate> EndValueTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ValueTemplate>(o);
  }
  public ValueTemplateT UnPack() {
    var _o = new ValueTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ValueTemplateT _o) {
    _o.Name = this.Name;
    _o.Value = new gfl.anm2.fb.ValueTypeUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.anm2.fb.ValueType.IntValue:
        _o.Value.Value = this.Value<gfl.anm2.fb.IntValue>().HasValue ? this.Value<gfl.anm2.fb.IntValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ValueType.FloatValue:
        _o.Value.Value = this.Value<gfl.anm2.fb.FloatValue>().HasValue ? this.Value<gfl.anm2.fb.FloatValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ValueType.BoolValue:
        _o.Value.Value = this.Value<gfl.anm2.fb.BoolValue>().HasValue ? this.Value<gfl.anm2.fb.BoolValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ValueType.StringValue:
        _o.Value.Value = this.Value<gfl.anm2.fb.StringValue>().HasValue ? this.Value<gfl.anm2.fb.StringValue>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.ValueTemplate> Pack(FlatBufferBuilder builder, ValueTemplateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ValueTemplate>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? gfl.anm2.fb.ValueType.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.anm2.fb.ValueTypeUnion.Pack(builder, _o.Value);
    return CreateValueTemplate(
      builder,
      _name,
      _value_type,
      _value);
  }
};

public class ValueTemplateT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.anm2.fb.ValueType ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.anm2.fb.ValueType.NONE;
    }
    set {
      this.Value = new gfl.anm2.fb.ValueTypeUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.ValueTypeUnion_JsonConverter))]
  public gfl.anm2.fb.ValueTypeUnion Value { get; set; }

  public ValueTemplateT() {
    this.Name = null;
    this.Value = null;
  }
}

public struct AnimationEventTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationEventTemplate GetRootAsAnimationEventTemplate(ByteBuffer _bb) { return GetRootAsAnimationEventTemplate(_bb, new AnimationEventTemplate()); }
  public static AnimationEventTemplate GetRootAsAnimationEventTemplate(ByteBuffer _bb, AnimationEventTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationEventTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Comment { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.ValueTemplate? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.ValueTemplate?)(new gfl.anm2.fb.ValueTemplate()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Resizable { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.AnimationEventTemplate> CreateAnimationEventTemplate(FlatBufferBuilder builder,
      StringOffset commentOffset = default(StringOffset),
      VectorOffset valuesOffset = default(VectorOffset),
      bool resizable = false) {
    builder.StartTable(3);
    AnimationEventTemplate.AddValues(builder, valuesOffset);
    AnimationEventTemplate.AddComment(builder, commentOffset);
    AnimationEventTemplate.AddResizable(builder, resizable);
    return AnimationEventTemplate.EndAnimationEventTemplate(builder);
  }

  public static void StartAnimationEventTemplate(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(0, commentOffset.Value, 0); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ValueTemplate>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ValueTemplate>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResizable(FlatBufferBuilder builder, bool resizable) { builder.AddBool(2, resizable, false); }
  public static Offset<gfl.anm2.fb.AnimationEventTemplate> EndAnimationEventTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationEventTemplate>(o);
  }
  public static void FinishAnimationEventTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationEventTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationEventTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationEventTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationEventTemplateT UnPack() {
    var _o = new AnimationEventTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationEventTemplateT _o) {
    _o.Comment = this.Comment;
    _o.Values = new List<gfl.anm2.fb.ValueTemplateT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
    _o.Resizable = this.Resizable;
  }
  public static Offset<gfl.anm2.fb.AnimationEventTemplate> Pack(FlatBufferBuilder builder, AnimationEventTemplateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationEventTemplate>);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new Offset<gfl.anm2.fb.ValueTemplate>[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = gfl.anm2.fb.ValueTemplate.Pack(builder, _o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    return CreateAnimationEventTemplate(
      builder,
      _comment,
      _values,
      _o.Resizable);
  }
};

public class AnimationEventTemplateT
{
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.ValueTemplateT> Values { get; set; }
  [Newtonsoft.Json.JsonProperty("resizable")]
  public bool Resizable { get; set; }

  public AnimationEventTemplateT() {
    this.Comment = null;
    this.Values = null;
    this.Resizable = false;
  }

  public static AnimationEventTemplateT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationEventTemplateT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationEventTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationEventTemplate.GetRootAsAnimationEventTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationEventTemplate.FinishAnimationEventTemplateBuffer(fbb, AnimationEventTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
