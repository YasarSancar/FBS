// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LayerMode : int
{
  Override = 0,
  Additive = 1,
};

public struct Layer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Layer GetRootAsLayer(ByteBuffer _bb) { return GetRootAsLayer(_bb, new Layer()); }
  public static Layer GetRootAsLayer(ByteBuffer _bb, Layer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Layer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint No { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.Mask? Mask { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.Mask?)(new gfl.anm2.fb.Mask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.LayerMode Mode { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.LayerMode)__p.bb.GetInt(o + __p.bb_pos) : gfl.anm2.fb.LayerMode.Override; } }
  public bool EnablePhysicsWeight { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableWindWeight { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool EnableWindNoiseWeight { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AdditionalParameterEnableList(int j) { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int AdditionalParameterEnableListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetAdditionalParameterEnableListBytes() { return __p.__vector_as_span<bool>(18, 1); }
#else
  public ArraySegment<byte>? GetAdditionalParameterEnableListBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public bool[] GetAdditionalParameterEnableListArray() { return __p.__vector_as_array<bool>(18); }

  public static Offset<gfl.anm2.fb.Layer> CreateLayer(FlatBufferBuilder builder,
      uint no = 0,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.Mask> maskOffset = default(Offset<gfl.anm2.fb.Mask>),
      gfl.anm2.fb.LayerMode mode = gfl.anm2.fb.LayerMode.Override,
      bool enablePhysicsWeight = false,
      bool enableWindWeight = false,
      bool enableWindNoiseWeight = false,
      VectorOffset additionalParameterEnableListOffset = default(VectorOffset)) {
    builder.StartTable(8);
    Layer.AddAdditionalParameterEnableList(builder, additionalParameterEnableListOffset);
    Layer.AddMode(builder, mode);
    Layer.AddMask(builder, maskOffset);
    Layer.AddName(builder, nameOffset);
    Layer.AddNo(builder, no);
    Layer.AddEnableWindNoiseWeight(builder, enableWindNoiseWeight);
    Layer.AddEnableWindWeight(builder, enableWindWeight);
    Layer.AddEnablePhysicsWeight(builder, enablePhysicsWeight);
    return Layer.EndLayer(builder);
  }

  public static void StartLayer(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddNo(FlatBufferBuilder builder, uint no) { builder.AddUint(0, no, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddMask(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Mask> maskOffset) { builder.AddOffset(2, maskOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, gfl.anm2.fb.LayerMode mode) { builder.AddInt(3, (int)mode, 0); }
  public static void AddEnablePhysicsWeight(FlatBufferBuilder builder, bool enablePhysicsWeight) { builder.AddBool(4, enablePhysicsWeight, false); }
  public static void AddEnableWindWeight(FlatBufferBuilder builder, bool enableWindWeight) { builder.AddBool(5, enableWindWeight, false); }
  public static void AddEnableWindNoiseWeight(FlatBufferBuilder builder, bool enableWindNoiseWeight) { builder.AddBool(6, enableWindNoiseWeight, false); }
  public static void AddAdditionalParameterEnableList(FlatBufferBuilder builder, VectorOffset additionalParameterEnableListOffset) { builder.AddOffset(7, additionalParameterEnableListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterEnableListVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterEnableListVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterEnableListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.anm2.fb.Layer> EndLayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Layer>(o);
  }
  public LayerT UnPack() {
    var _o = new LayerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LayerT _o) {
    _o.No = this.No;
    _o.Name = this.Name;
    _o.Mask = this.Mask.HasValue ? this.Mask.Value.UnPack() : null;
    _o.Mode = this.Mode;
    _o.EnablePhysicsWeight = this.EnablePhysicsWeight;
    _o.EnableWindWeight = this.EnableWindWeight;
    _o.EnableWindNoiseWeight = this.EnableWindNoiseWeight;
    _o.AdditionalParameterEnableList = new List<bool>();
    for (var _j = 0; _j < this.AdditionalParameterEnableListLength; ++_j) {_o.AdditionalParameterEnableList.Add(this.AdditionalParameterEnableList(_j));}
  }
  public static Offset<gfl.anm2.fb.Layer> Pack(FlatBufferBuilder builder, LayerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Layer>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _mask = _o.Mask == null ? default(Offset<gfl.anm2.fb.Mask>) : gfl.anm2.fb.Mask.Pack(builder, _o.Mask);
    var _additionalParameterEnableList = default(VectorOffset);
    if (_o.AdditionalParameterEnableList != null) {
      var __additionalParameterEnableList = _o.AdditionalParameterEnableList.ToArray();
      _additionalParameterEnableList = CreateAdditionalParameterEnableListVector(builder, __additionalParameterEnableList);
    }
    return CreateLayer(
      builder,
      _o.No,
      _name,
      _mask,
      _o.Mode,
      _o.EnablePhysicsWeight,
      _o.EnableWindWeight,
      _o.EnableWindNoiseWeight,
      _additionalParameterEnableList);
  }
};

public class LayerT
{
  [Newtonsoft.Json.JsonProperty("no")]
  public uint No { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("mask")]
  public gfl.anm2.fb.MaskT Mask { get; set; }
  [Newtonsoft.Json.JsonProperty("mode")]
  public gfl.anm2.fb.LayerMode Mode { get; set; }
  [Newtonsoft.Json.JsonProperty("enablePhysicsWeight")]
  public bool EnablePhysicsWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("enableWindWeight")]
  public bool EnableWindWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("enableWindNoiseWeight")]
  public bool EnableWindNoiseWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterEnableList")]
  public List<bool> AdditionalParameterEnableList { get; set; }

  public LayerT() {
    this.No = 0;
    this.Name = null;
    this.Mask = null;
    this.Mode = gfl.anm2.fb.LayerMode.Override;
    this.EnablePhysicsWeight = false;
    this.EnableWindWeight = false;
    this.EnableWindNoiseWeight = false;
    this.AdditionalParameterEnableList = null;
  }
}

public struct LayerConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LayerConfig GetRootAsLayerConfig(ByteBuffer _bb) { return GetRootAsLayerConfig(_bb, new LayerConfig()); }
  public static LayerConfig GetRootAsLayerConfig(ByteBuffer _bb, LayerConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LayerConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Layer? Layers(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Layer?)(new gfl.anm2.fb.Layer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LayersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.Mask? BlendMask { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Mask?)(new gfl.anm2.fb.Mask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointNames(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int JointNamesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.LayerConfig> CreateLayerConfig(FlatBufferBuilder builder,
      VectorOffset layersOffset = default(VectorOffset),
      Offset<gfl.anm2.fb.Mask> blendMaskOffset = default(Offset<gfl.anm2.fb.Mask>),
      VectorOffset jointNamesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    LayerConfig.AddJointNames(builder, jointNamesOffset);
    LayerConfig.AddBlendMask(builder, blendMaskOffset);
    LayerConfig.AddLayers(builder, layersOffset);
    return LayerConfig.EndLayerConfig(builder);
  }

  public static void StartLayerConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLayers(FlatBufferBuilder builder, VectorOffset layersOffset) { builder.AddOffset(0, layersOffset.Value, 0); }
  public static VectorOffset CreateLayersVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Layer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLayersVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Layer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLayersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlendMask(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Mask> blendMaskOffset) { builder.AddOffset(1, blendMaskOffset.Value, 0); }
  public static void AddJointNames(FlatBufferBuilder builder, VectorOffset jointNamesOffset) { builder.AddOffset(2, jointNamesOffset.Value, 0); }
  public static VectorOffset CreateJointNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJointNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartJointNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.LayerConfig> EndLayerConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.LayerConfig>(o);
  }
  public LayerConfigT UnPack() {
    var _o = new LayerConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LayerConfigT _o) {
    _o.Layers = new List<gfl.anm2.fb.LayerT>();
    for (var _j = 0; _j < this.LayersLength; ++_j) {_o.Layers.Add(this.Layers(_j).HasValue ? this.Layers(_j).Value.UnPack() : null);}
    _o.BlendMask = this.BlendMask.HasValue ? this.BlendMask.Value.UnPack() : null;
    _o.JointNames = new List<string>();
    for (var _j = 0; _j < this.JointNamesLength; ++_j) {_o.JointNames.Add(this.JointNames(_j));}
  }
  public static Offset<gfl.anm2.fb.LayerConfig> Pack(FlatBufferBuilder builder, LayerConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.LayerConfig>);
    var _layers = default(VectorOffset);
    if (_o.Layers != null) {
      var __layers = new Offset<gfl.anm2.fb.Layer>[_o.Layers.Count];
      for (var _j = 0; _j < __layers.Length; ++_j) { __layers[_j] = gfl.anm2.fb.Layer.Pack(builder, _o.Layers[_j]); }
      _layers = CreateLayersVector(builder, __layers);
    }
    var _blendMask = _o.BlendMask == null ? default(Offset<gfl.anm2.fb.Mask>) : gfl.anm2.fb.Mask.Pack(builder, _o.BlendMask);
    var _jointNames = default(VectorOffset);
    if (_o.JointNames != null) {
      var __jointNames = new StringOffset[_o.JointNames.Count];
      for (var _j = 0; _j < __jointNames.Length; ++_j) { __jointNames[_j] = builder.CreateString(_o.JointNames[_j]); }
      _jointNames = CreateJointNamesVector(builder, __jointNames);
    }
    return CreateLayerConfig(
      builder,
      _layers,
      _blendMask,
      _jointNames);
  }
};

public class LayerConfigT
{
  [Newtonsoft.Json.JsonProperty("layers")]
  public List<gfl.anm2.fb.LayerT> Layers { get; set; }
  [Newtonsoft.Json.JsonProperty("blendMask")]
  public gfl.anm2.fb.MaskT BlendMask { get; set; }
  [Newtonsoft.Json.JsonProperty("jointNames")]
  public List<string> JointNames { get; set; }

  public LayerConfigT() {
    this.Layers = null;
    this.BlendMask = null;
    this.JointNames = null;
  }
}

public struct AnimationLayerConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationLayerConfig GetRootAsAnimationLayerConfig(ByteBuffer _bb) { return GetRootAsAnimationLayerConfig(_bb, new AnimationLayerConfig()); }
  public static AnimationLayerConfig GetRootAsAnimationLayerConfig(ByteBuffer _bb, AnimationLayerConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationLayerConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.LayerConfig? LayerConfig { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.LayerConfig?)(new gfl.anm2.fb.LayerConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.AnimationLayerConfig> CreateAnimationLayerConfig(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.LayerConfig> layerConfigOffset = default(Offset<gfl.anm2.fb.LayerConfig>)) {
    builder.StartTable(1);
    AnimationLayerConfig.AddLayerConfig(builder, layerConfigOffset);
    return AnimationLayerConfig.EndAnimationLayerConfig(builder);
  }

  public static void StartAnimationLayerConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLayerConfig(FlatBufferBuilder builder, Offset<gfl.anm2.fb.LayerConfig> layerConfigOffset) { builder.AddOffset(0, layerConfigOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationLayerConfig> EndAnimationLayerConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationLayerConfig>(o);
  }
  public static void FinishAnimationLayerConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationLayerConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationLayerConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationLayerConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationLayerConfigT UnPack() {
    var _o = new AnimationLayerConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationLayerConfigT _o) {
    _o.LayerConfig = this.LayerConfig.HasValue ? this.LayerConfig.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.AnimationLayerConfig> Pack(FlatBufferBuilder builder, AnimationLayerConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationLayerConfig>);
    var _layerConfig = _o.LayerConfig == null ? default(Offset<gfl.anm2.fb.LayerConfig>) : gfl.anm2.fb.LayerConfig.Pack(builder, _o.LayerConfig);
    return CreateAnimationLayerConfig(
      builder,
      _layerConfig);
  }
};

public class AnimationLayerConfigT
{
  [Newtonsoft.Json.JsonProperty("layerConfig")]
  public gfl.anm2.fb.LayerConfigT LayerConfig { get; set; }

  public AnimationLayerConfigT() {
    this.LayerConfig = null;
  }

  public static AnimationLayerConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationLayerConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationLayerConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationLayerConfig.GetRootAsAnimationLayerConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationLayerConfig.FinishAnimationLayerConfigBuffer(fbb, AnimationLayerConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
