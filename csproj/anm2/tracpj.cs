// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum Values : byte
{
  NONE = 0,
  IntValue = 1,
  FloatValue = 2,
  BoolValue = 3,
  TriggerValue = 4,
};

public class ValuesUnion {
  public Values Type { get; set; }
  public object Value { get; set; }

  public ValuesUnion() {
    this.Type = Values.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fbj.IntValueT AsIntValue() { return this.As<gfl.anm2.fbj.IntValueT>(); }
  public gfl.anm2.fbj.FloatValueT AsFloatValue() { return this.As<gfl.anm2.fbj.FloatValueT>(); }
  public gfl.anm2.fbj.BoolValueT AsBoolValue() { return this.As<gfl.anm2.fbj.BoolValueT>(); }
  public gfl.anm2.fbj.TriggerValueT AsTriggerValue() { return this.As<gfl.anm2.fbj.TriggerValueT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ValuesUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Values.IntValue: return gfl.anm2.fbj.IntValue.Pack(builder, _o.AsIntValue()).Value;
      case Values.FloatValue: return gfl.anm2.fbj.FloatValue.Pack(builder, _o.AsFloatValue()).Value;
      case Values.BoolValue: return gfl.anm2.fbj.BoolValue.Pack(builder, _o.AsBoolValue()).Value;
      case Values.TriggerValue: return gfl.anm2.fbj.TriggerValue.Pack(builder, _o.AsTriggerValue()).Value;
    }
  }
}

public class ValuesUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ValuesUnion) || objectType == typeof(System.Collections.Generic.List<ValuesUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ValuesUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ValuesUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ValuesUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ValuesUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ValuesUnion, serializer);
    }
  }
  public ValuesUnion ReadJson(Newtonsoft.Json.JsonReader reader, ValuesUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case Values.IntValue: _o.Value = serializer.Deserialize<gfl.anm2.fbj.IntValueT>(reader); break;
      case Values.FloatValue: _o.Value = serializer.Deserialize<gfl.anm2.fbj.FloatValueT>(reader); break;
      case Values.BoolValue: _o.Value = serializer.Deserialize<gfl.anm2.fbj.BoolValueT>(reader); break;
      case Values.TriggerValue: _o.Value = serializer.Deserialize<gfl.anm2.fbj.TriggerValueT>(reader); break;
    }
    return _o;
  }
}

public struct IntValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static IntValue GetRootAsIntValue(ByteBuffer _bb) { return GetRootAsIntValue(_bb, new IntValue()); }
  public static IntValue GetRootAsIntValue(ByteBuffer _bb, IntValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IntValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Min { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Max { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fbj.IntValue> CreateIntValue(FlatBufferBuilder builder,
      int min = 0,
      int max = 0,
      int defaultValue = 0) {
    builder.StartTable(3);
    IntValue.AddDefaultValue(builder, defaultValue);
    IntValue.AddMax(builder, max);
    IntValue.AddMin(builder, min);
    return IntValue.EndIntValue(builder);
  }

  public static void StartIntValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMin(FlatBufferBuilder builder, int min) { builder.AddInt(0, min, 0); }
  public static void AddMax(FlatBufferBuilder builder, int max) { builder.AddInt(1, max, 0); }
  public static void AddDefaultValue(FlatBufferBuilder builder, int defaultValue) { builder.AddInt(2, defaultValue, 0); }
  public static Offset<gfl.anm2.fbj.IntValue> EndIntValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.IntValue>(o);
  }
  public IntValueT UnPack() {
    var _o = new IntValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntValueT _o) {
    _o.Min = this.Min;
    _o.Max = this.Max;
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fbj.IntValue> Pack(FlatBufferBuilder builder, IntValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.IntValue>);
    return CreateIntValue(
      builder,
      _o.Min,
      _o.Max,
      _o.DefaultValue);
  }
};

public class IntValueT
{
  [Newtonsoft.Json.JsonProperty("min")]
  public int Min { get; set; }
  [Newtonsoft.Json.JsonProperty("max")]
  public int Max { get; set; }
  [Newtonsoft.Json.JsonProperty("default")]
  public int DefaultValue { get; set; }

  public IntValueT() {
    this.Min = 0;
    this.Max = 0;
    this.DefaultValue = 0;
  }
}

public struct FloatValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FloatValue GetRootAsFloatValue(ByteBuffer _bb) { return GetRootAsFloatValue(_bb, new FloatValue()); }
  public static FloatValue GetRootAsFloatValue(ByteBuffer _bb, FloatValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Min { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Max { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DefaultValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fbj.FloatValue> CreateFloatValue(FlatBufferBuilder builder,
      float min = 0.0f,
      float max = 0.0f,
      float defaultValue = 0.0f) {
    builder.StartTable(3);
    FloatValue.AddDefaultValue(builder, defaultValue);
    FloatValue.AddMax(builder, max);
    FloatValue.AddMin(builder, min);
    return FloatValue.EndFloatValue(builder);
  }

  public static void StartFloatValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMin(FlatBufferBuilder builder, float min) { builder.AddFloat(0, min, 0.0f); }
  public static void AddMax(FlatBufferBuilder builder, float max) { builder.AddFloat(1, max, 0.0f); }
  public static void AddDefaultValue(FlatBufferBuilder builder, float defaultValue) { builder.AddFloat(2, defaultValue, 0.0f); }
  public static Offset<gfl.anm2.fbj.FloatValue> EndFloatValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.FloatValue>(o);
  }
  public FloatValueT UnPack() {
    var _o = new FloatValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatValueT _o) {
    _o.Min = this.Min;
    _o.Max = this.Max;
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fbj.FloatValue> Pack(FlatBufferBuilder builder, FloatValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.FloatValue>);
    return CreateFloatValue(
      builder,
      _o.Min,
      _o.Max,
      _o.DefaultValue);
  }
};

public class FloatValueT
{
  [Newtonsoft.Json.JsonProperty("min")]
  public float Min { get; set; }
  [Newtonsoft.Json.JsonProperty("max")]
  public float Max { get; set; }
  [Newtonsoft.Json.JsonProperty("default")]
  public float DefaultValue { get; set; }

  public FloatValueT() {
    this.Min = 0.0f;
    this.Max = 0.0f;
    this.DefaultValue = 0.0f;
  }
}

public struct BoolValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BoolValue GetRootAsBoolValue(ByteBuffer _bb) { return GetRootAsBoolValue(_bb, new BoolValue()); }
  public static BoolValue GetRootAsBoolValue(ByteBuffer _bb, BoolValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BoolValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool DefaultValue { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.BoolValue> CreateBoolValue(FlatBufferBuilder builder,
      bool defaultValue = false) {
    builder.StartTable(1);
    BoolValue.AddDefaultValue(builder, defaultValue);
    return BoolValue.EndBoolValue(builder);
  }

  public static void StartBoolValue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDefaultValue(FlatBufferBuilder builder, bool defaultValue) { builder.AddBool(0, defaultValue, false); }
  public static Offset<gfl.anm2.fbj.BoolValue> EndBoolValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.BoolValue>(o);
  }
  public BoolValueT UnPack() {
    var _o = new BoolValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BoolValueT _o) {
    _o.DefaultValue = this.DefaultValue;
  }
  public static Offset<gfl.anm2.fbj.BoolValue> Pack(FlatBufferBuilder builder, BoolValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.BoolValue>);
    return CreateBoolValue(
      builder,
      _o.DefaultValue);
  }
};

public class BoolValueT
{
  [Newtonsoft.Json.JsonProperty("default")]
  public bool DefaultValue { get; set; }

  public BoolValueT() {
    this.DefaultValue = false;
  }
}

public struct TriggerValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TriggerValue GetRootAsTriggerValue(ByteBuffer _bb) { return GetRootAsTriggerValue(_bb, new TriggerValue()); }
  public static TriggerValue GetRootAsTriggerValue(ByteBuffer _bb, TriggerValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TriggerValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool _dummy_ { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.TriggerValue> CreateTriggerValue(FlatBufferBuilder builder,
      bool _dummy_ = false) {
    builder.StartTable(1);
    TriggerValue.Add_dummy_(builder, _dummy_);
    return TriggerValue.EndTriggerValue(builder);
  }

  public static void StartTriggerValue(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void Add_dummy_(FlatBufferBuilder builder, bool Dummy_) { builder.AddBool(0, Dummy_, false); }
  public static Offset<gfl.anm2.fbj.TriggerValue> EndTriggerValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.TriggerValue>(o);
  }
  public TriggerValueT UnPack() {
    var _o = new TriggerValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TriggerValueT _o) {
    _o._dummy_ = this._dummy_;
  }
  public static Offset<gfl.anm2.fbj.TriggerValue> Pack(FlatBufferBuilder builder, TriggerValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.TriggerValue>);
    return CreateTriggerValue(
      builder,
      _o._dummy_);
  }
};

public class TriggerValueT
{
  [Newtonsoft.Json.JsonProperty("_dummy_")]
  public bool _dummy_ { get; set; }

  public TriggerValueT() {
    this._dummy_ = false;
  }
}

public struct Parameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Parameter GetRootAsParameter(ByteBuffer _bb) { return GetRootAsParameter(_bb, new Parameter()); }
  public static Parameter GetRootAsParameter(ByteBuffer _bb, Parameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Parameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.Values ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.Values)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fbj.Values.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public bool Trigger { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.Parameter> CreateParameter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fbj.Values value_type = gfl.anm2.fbj.Values.NONE,
      int valueOffset = 0,
      bool trigger = false) {
    builder.StartTable(4);
    Parameter.AddValue(builder, valueOffset);
    Parameter.AddName(builder, nameOffset);
    Parameter.AddTrigger(builder, trigger);
    Parameter.AddValueType(builder, value_type);
    return Parameter.EndParameter(builder);
  }

  public static void StartParameter(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.anm2.fbj.Values valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static void AddTrigger(FlatBufferBuilder builder, bool trigger) { builder.AddBool(3, trigger, false); }
  public static Offset<gfl.anm2.fbj.Parameter> EndParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Parameter>(o);
  }
  public ParameterT UnPack() {
    var _o = new ParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterT _o) {
    _o.Name = this.Name;
    _o.Value = new gfl.anm2.fbj.ValuesUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.anm2.fbj.Values.IntValue:
        _o.Value.Value = this.Value<gfl.anm2.fbj.IntValue>().HasValue ? this.Value<gfl.anm2.fbj.IntValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.Values.FloatValue:
        _o.Value.Value = this.Value<gfl.anm2.fbj.FloatValue>().HasValue ? this.Value<gfl.anm2.fbj.FloatValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.Values.BoolValue:
        _o.Value.Value = this.Value<gfl.anm2.fbj.BoolValue>().HasValue ? this.Value<gfl.anm2.fbj.BoolValue>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.Values.TriggerValue:
        _o.Value.Value = this.Value<gfl.anm2.fbj.TriggerValue>().HasValue ? this.Value<gfl.anm2.fbj.TriggerValue>().Value.UnPack() : null;
        break;
    }
    _o.Trigger = this.Trigger;
  }
  public static Offset<gfl.anm2.fbj.Parameter> Pack(FlatBufferBuilder builder, ParameterT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Parameter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? gfl.anm2.fbj.Values.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.anm2.fbj.ValuesUnion.Pack(builder, _o.Value);
    return CreateParameter(
      builder,
      _name,
      _value_type,
      _value,
      _o.Trigger);
  }
};

public class ParameterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.anm2.fbj.Values ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.anm2.fbj.Values.NONE;
    }
    set {
      this.Value = new gfl.anm2.fbj.ValuesUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fbj.ValuesUnion_JsonConverter))]
  public gfl.anm2.fbj.ValuesUnion Value { get; set; }
  [Newtonsoft.Json.JsonProperty("trigger")]
  public bool Trigger { get; set; }

  public ParameterT() {
    this.Name = null;
    this.Value = null;
    this.Trigger = false;
  }
}

public struct ParameterConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParameterConfig GetRootAsParameterConfig(ByteBuffer _bb) { return GetRootAsParameterConfig(_bb, new ParameterConfig()); }
  public static ParameterConfig GetRootAsParameterConfig(ByteBuffer _bb, ParameterConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParameterConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.Parameter? ParameterList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.Parameter?)(new gfl.anm2.fbj.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParameterListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.Parameter? OverrideList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.Parameter?)(new gfl.anm2.fbj.Parameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OverrideListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.ParameterConfig> CreateParameterConfig(FlatBufferBuilder builder,
      VectorOffset parameterListOffset = default(VectorOffset),
      VectorOffset overrideListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ParameterConfig.AddOverrideList(builder, overrideListOffset);
    ParameterConfig.AddParameterList(builder, parameterListOffset);
    return ParameterConfig.EndParameterConfig(builder);
  }

  public static void StartParameterConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParameterList(FlatBufferBuilder builder, VectorOffset parameterListOffset) { builder.AddOffset(0, parameterListOffset.Value, 0); }
  public static VectorOffset CreateParameterListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParameterListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParameterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOverrideList(FlatBufferBuilder builder, VectorOffset overrideListOffset) { builder.AddOffset(1, overrideListOffset.Value, 0); }
  public static VectorOffset CreateOverrideListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Parameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOverrideListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Parameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOverrideListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.ParameterConfig> EndParameterConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ParameterConfig>(o);
  }
  public static void FinishParameterConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ParameterConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedParameterConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ParameterConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ParameterConfigT UnPack() {
    var _o = new ParameterConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParameterConfigT _o) {
    _o.ParameterList = new List<gfl.anm2.fbj.ParameterT>();
    for (var _j = 0; _j < this.ParameterListLength; ++_j) {_o.ParameterList.Add(this.ParameterList(_j).HasValue ? this.ParameterList(_j).Value.UnPack() : null);}
    _o.OverrideList = new List<gfl.anm2.fbj.ParameterT>();
    for (var _j = 0; _j < this.OverrideListLength; ++_j) {_o.OverrideList.Add(this.OverrideList(_j).HasValue ? this.OverrideList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.ParameterConfig> Pack(FlatBufferBuilder builder, ParameterConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ParameterConfig>);
    var _parameterList = default(VectorOffset);
    if (_o.ParameterList != null) {
      var __parameterList = new Offset<gfl.anm2.fbj.Parameter>[_o.ParameterList.Count];
      for (var _j = 0; _j < __parameterList.Length; ++_j) { __parameterList[_j] = gfl.anm2.fbj.Parameter.Pack(builder, _o.ParameterList[_j]); }
      _parameterList = CreateParameterListVector(builder, __parameterList);
    }
    var _overrideList = default(VectorOffset);
    if (_o.OverrideList != null) {
      var __overrideList = new Offset<gfl.anm2.fbj.Parameter>[_o.OverrideList.Count];
      for (var _j = 0; _j < __overrideList.Length; ++_j) { __overrideList[_j] = gfl.anm2.fbj.Parameter.Pack(builder, _o.OverrideList[_j]); }
      _overrideList = CreateOverrideListVector(builder, __overrideList);
    }
    return CreateParameterConfig(
      builder,
      _parameterList,
      _overrideList);
  }
};

public class ParameterConfigT
{
  [Newtonsoft.Json.JsonProperty("parameterList")]
  public List<gfl.anm2.fbj.ParameterT> ParameterList { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideList")]
  public List<gfl.anm2.fbj.ParameterT> OverrideList { get; set; }

  public ParameterConfigT() {
    this.ParameterList = null;
    this.OverrideList = null;
  }

  public static ParameterConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ParameterConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ParameterConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return ParameterConfig.GetRootAsParameterConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ParameterConfig.FinishParameterConfigBuffer(fbb, ParameterConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
