// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnimationTag : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationTag GetRootAsAnimationTag(ByteBuffer _bb) { return GetRootAsAnimationTag(_bb, new AnimationTag()); }
  public static AnimationTag GetRootAsAnimationTag(ByteBuffer _bb, AnimationTag obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationTag __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Comment { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(4); }
  public string Tag { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTagBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTagBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTagArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.AnimationTag> CreateAnimationTag(FlatBufferBuilder builder,
      StringOffset commentOffset = default(StringOffset),
      StringOffset tagOffset = default(StringOffset)) {
    builder.StartTable(2);
    AnimationTag.AddTag(builder, tagOffset);
    AnimationTag.AddComment(builder, commentOffset);
    return AnimationTag.EndAnimationTag(builder);
  }

  public static void StartAnimationTag(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(0, commentOffset.Value, 0); }
  public static void AddTag(FlatBufferBuilder builder, StringOffset tagOffset) { builder.AddOffset(1, tagOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationTag> EndAnimationTag(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationTag>(o);
  }
  public AnimationTagT UnPack() {
    var _o = new AnimationTagT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationTagT _o) {
    _o.Comment = this.Comment;
    _o.Tag = this.Tag;
  }
  public static Offset<gfl.anm2.fb.AnimationTag> Pack(FlatBufferBuilder builder, AnimationTagT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationTag>);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _tag = _o.Tag == null ? default(StringOffset) : builder.CreateString(_o.Tag);
    return CreateAnimationTag(
      builder,
      _comment,
      _tag);
  }
};

public class AnimationTagT
{
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("tag")]
  public string Tag { get; set; }

  public AnimationTagT() {
    this.Comment = null;
    this.Tag = null;
  }
}

public struct AnimationTagList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationTagList GetRootAsAnimationTagList(ByteBuffer _bb) { return GetRootAsAnimationTagList(_bb, new AnimationTagList()); }
  public static AnimationTagList GetRootAsAnimationTagList(ByteBuffer _bb, AnimationTagList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationTagList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.AnimationTag? Tags(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.AnimationTag?)(new gfl.anm2.fb.AnimationTag()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TagsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.AnimationTagList> CreateAnimationTagList(FlatBufferBuilder builder,
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnimationTagList.AddTags(builder, tagsOffset);
    return AnimationTagList.EndAnimationTagList(builder);
  }

  public static void StartAnimationTagList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(0, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationTag>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationTag>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.AnimationTagList> EndAnimationTagList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationTagList>(o);
  }
  public static void FinishAnimationTagListBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationTagList> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationTagListBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationTagList> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationTagListT UnPack() {
    var _o = new AnimationTagListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationTagListT _o) {
    _o.Tags = new List<gfl.anm2.fb.AnimationTagT>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j).HasValue ? this.Tags(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.AnimationTagList> Pack(FlatBufferBuilder builder, AnimationTagListT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationTagList>);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new Offset<gfl.anm2.fb.AnimationTag>[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = gfl.anm2.fb.AnimationTag.Pack(builder, _o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateAnimationTagList(
      builder,
      _tags);
  }
};

public class AnimationTagListT
{
  [Newtonsoft.Json.JsonProperty("tags")]
  public List<gfl.anm2.fb.AnimationTagT> Tags { get; set; }

  public AnimationTagListT() {
    this.Tags = null;
  }

  public static AnimationTagListT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationTagListT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationTagListT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationTagList.GetRootAsAnimationTagList(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationTagList.FinishAnimationTagListBuffer(fbb, AnimationTagList.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
