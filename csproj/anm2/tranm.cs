// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct JointData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static JointData GetRootAsJointData(ByteBuffer _bb) { return GetRootAsJointData(_bb, new JointData()); }
  public static JointData GetRootAsJointData(ByteBuffer _bb, JointData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JointData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.KeyData_Vector3 ScalesType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.KeyData_Vector3)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Vector3.NONE; } }
  public TTable? Scales<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Quaternion48bit RotatesType { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.KeyData_Quaternion48bit)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Quaternion48bit.NONE; } }
  public TTable? Rotates<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Vector3 TranslatesType { get { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.KeyData_Vector3)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Vector3.NONE; } }
  public TTable? Translates<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(16); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.JointData> CreateJointData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.KeyData_Vector3 scales_type = gfl.anm2.fb.KeyData_Vector3.NONE,
      int scalesOffset = 0,
      gfl.anm2.fb.KeyData_Quaternion48bit rotates_type = gfl.anm2.fb.KeyData_Quaternion48bit.NONE,
      int rotatesOffset = 0,
      gfl.anm2.fb.KeyData_Vector3 translates_type = gfl.anm2.fb.KeyData_Vector3.NONE,
      int translatesOffset = 0) {
    builder.StartTable(7);
    JointData.AddTranslates(builder, translatesOffset);
    JointData.AddRotates(builder, rotatesOffset);
    JointData.AddScales(builder, scalesOffset);
    JointData.AddName(builder, nameOffset);
    JointData.AddTranslatesType(builder, translates_type);
    JointData.AddRotatesType(builder, rotates_type);
    JointData.AddScalesType(builder, scales_type);
    return JointData.EndJointData(builder);
  }

  public static void StartJointData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddScalesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Vector3 scalesType) { builder.AddByte(1, (byte)scalesType, 0); }
  public static void AddScales(FlatBufferBuilder builder, int scalesOffset) { builder.AddOffset(2, scalesOffset, 0); }
  public static void AddRotatesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Quaternion48bit rotatesType) { builder.AddByte(3, (byte)rotatesType, 0); }
  public static void AddRotates(FlatBufferBuilder builder, int rotatesOffset) { builder.AddOffset(4, rotatesOffset, 0); }
  public static void AddTranslatesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Vector3 translatesType) { builder.AddByte(5, (byte)translatesType, 0); }
  public static void AddTranslates(FlatBufferBuilder builder, int translatesOffset) { builder.AddOffset(6, translatesOffset, 0); }
  public static Offset<gfl.anm2.fb.JointData> EndJointData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.JointData>(o);
  }
  public JointDataT UnPack() {
    var _o = new JointDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(JointDataT _o) {
    _o.Name = this.Name;
    _o.Scales = new gfl.anm2.fb.KeyData_Vector3Union();
    _o.Scales.Type = this.ScalesType;
    switch (this.ScalesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Vector3.OneFrame_Vector3:
        _o.Scales.Value = this.Scales<gfl.anm2.fb.OneFrame_Vector3>().HasValue ? this.Scales<gfl.anm2.fb.OneFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.AllFrame_Vector3:
        _o.Scales.Value = this.Scales<gfl.anm2.fb.AllFrame_Vector3>().HasValue ? this.Scales<gfl.anm2.fb.AllFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u16:
        _o.Scales.Value = this.Scales<gfl.anm2.fb.CatmullRom_Vector3_u16>().HasValue ? this.Scales<gfl.anm2.fb.CatmullRom_Vector3_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u8:
        _o.Scales.Value = this.Scales<gfl.anm2.fb.CatmullRom_Vector3_u8>().HasValue ? this.Scales<gfl.anm2.fb.CatmullRom_Vector3_u8>().Value.UnPack() : null;
        break;
    }
    _o.Rotates = new gfl.anm2.fb.KeyData_Quaternion48bitUnion();
    _o.Rotates.Type = this.RotatesType;
    switch (this.RotatesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Quaternion48bit.OneFrame_Quaternion48bit:
        _o.Rotates.Value = this.Rotates<gfl.anm2.fb.OneFrame_Quaternion48bit>().HasValue ? this.Rotates<gfl.anm2.fb.OneFrame_Quaternion48bit>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Quaternion48bit.AllFrame_Quaternion48bit:
        _o.Rotates.Value = this.Rotates<gfl.anm2.fb.AllFrame_Quaternion48bit>().HasValue ? this.Rotates<gfl.anm2.fb.AllFrame_Quaternion48bit>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u16:
        _o.Rotates.Value = this.Rotates<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16>().HasValue ? this.Rotates<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u8:
        _o.Rotates.Value = this.Rotates<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8>().HasValue ? this.Rotates<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8>().Value.UnPack() : null;
        break;
    }
    _o.Translates = new gfl.anm2.fb.KeyData_Vector3Union();
    _o.Translates.Type = this.TranslatesType;
    switch (this.TranslatesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Vector3.OneFrame_Vector3:
        _o.Translates.Value = this.Translates<gfl.anm2.fb.OneFrame_Vector3>().HasValue ? this.Translates<gfl.anm2.fb.OneFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.AllFrame_Vector3:
        _o.Translates.Value = this.Translates<gfl.anm2.fb.AllFrame_Vector3>().HasValue ? this.Translates<gfl.anm2.fb.AllFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u16:
        _o.Translates.Value = this.Translates<gfl.anm2.fb.CatmullRom_Vector3_u16>().HasValue ? this.Translates<gfl.anm2.fb.CatmullRom_Vector3_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u8:
        _o.Translates.Value = this.Translates<gfl.anm2.fb.CatmullRom_Vector3_u8>().HasValue ? this.Translates<gfl.anm2.fb.CatmullRom_Vector3_u8>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.JointData> Pack(FlatBufferBuilder builder, JointDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.JointData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _scales_type = _o.Scales == null ? gfl.anm2.fb.KeyData_Vector3.NONE : _o.Scales.Type;
    var _scales = _o.Scales == null ? 0 : gfl.anm2.fb.KeyData_Vector3Union.Pack(builder, _o.Scales);
    var _rotates_type = _o.Rotates == null ? gfl.anm2.fb.KeyData_Quaternion48bit.NONE : _o.Rotates.Type;
    var _rotates = _o.Rotates == null ? 0 : gfl.anm2.fb.KeyData_Quaternion48bitUnion.Pack(builder, _o.Rotates);
    var _translates_type = _o.Translates == null ? gfl.anm2.fb.KeyData_Vector3.NONE : _o.Translates.Type;
    var _translates = _o.Translates == null ? 0 : gfl.anm2.fb.KeyData_Vector3Union.Pack(builder, _o.Translates);
    return CreateJointData(
      builder,
      _name,
      _scales_type,
      _scales,
      _rotates_type,
      _rotates,
      _translates_type,
      _translates);
  }
};

public class JointDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("scales_type")]
  private gfl.anm2.fb.KeyData_Vector3 ScalesType {
    get {
      return this.Scales != null ? this.Scales.Type : gfl.anm2.fb.KeyData_Vector3.NONE;
    }
    set {
      this.Scales = new gfl.anm2.fb.KeyData_Vector3Union();
      this.Scales.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("scales")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Vector3Union_JsonConverter))]
  public gfl.anm2.fb.KeyData_Vector3Union Scales { get; set; }
  [Newtonsoft.Json.JsonProperty("rotates_type")]
  private gfl.anm2.fb.KeyData_Quaternion48bit RotatesType {
    get {
      return this.Rotates != null ? this.Rotates.Type : gfl.anm2.fb.KeyData_Quaternion48bit.NONE;
    }
    set {
      this.Rotates = new gfl.anm2.fb.KeyData_Quaternion48bitUnion();
      this.Rotates.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("rotates")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Quaternion48bitUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_Quaternion48bitUnion Rotates { get; set; }
  [Newtonsoft.Json.JsonProperty("translates_type")]
  private gfl.anm2.fb.KeyData_Vector3 TranslatesType {
    get {
      return this.Translates != null ? this.Translates.Type : gfl.anm2.fb.KeyData_Vector3.NONE;
    }
    set {
      this.Translates = new gfl.anm2.fb.KeyData_Vector3Union();
      this.Translates.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("translates")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Vector3Union_JsonConverter))]
  public gfl.anm2.fb.KeyData_Vector3Union Translates { get; set; }

  public JointDataT() {
    this.Name = null;
    this.Scales = null;
    this.Rotates = null;
    this.Translates = null;
  }
}

public struct RootMotion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RootMotion GetRootAsRootMotion(ByteBuffer _bb) { return GetRootAsRootMotion(_bb, new RootMotion()); }
  public static RootMotion GetRootAsRootMotion(ByteBuffer _bb, RootMotion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RootMotion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RootMotionIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.anm2.fb._SRT? RootMotionBaseSRT { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb._SRT?)(new gfl.anm2.fb._SRT()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.RootMotion> CreateRootMotion(FlatBufferBuilder builder,
      int rootMotionIndex = 0,
      gfl.anm2.fb._SRTT rootMotionBaseSRT = null) {
    builder.StartTable(2);
    RootMotion.AddRootMotionBaseSRT(builder, gfl.anm2.fb._SRT.Pack(builder, rootMotionBaseSRT));
    RootMotion.AddRootMotionIndex(builder, rootMotionIndex);
    return RootMotion.EndRootMotion(builder);
  }

  public static void StartRootMotion(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddRootMotionIndex(FlatBufferBuilder builder, int rootMotionIndex) { builder.AddInt(0, rootMotionIndex, 0); }
  public static void AddRootMotionBaseSRT(FlatBufferBuilder builder, Offset<gfl.anm2.fb._SRT> rootMotionBaseSRTOffset) { builder.AddStruct(1, rootMotionBaseSRTOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.RootMotion> EndRootMotion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.RootMotion>(o);
  }
  public RootMotionT UnPack() {
    var _o = new RootMotionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RootMotionT _o) {
    _o.RootMotionIndex = this.RootMotionIndex;
    _o.RootMotionBaseSRT = this.RootMotionBaseSRT.HasValue ? this.RootMotionBaseSRT.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.RootMotion> Pack(FlatBufferBuilder builder, RootMotionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.RootMotion>);
    return CreateRootMotion(
      builder,
      _o.RootMotionIndex,
      _o.RootMotionBaseSRT);
  }
};

public class RootMotionT
{
  [Newtonsoft.Json.JsonProperty("rootMotionIndex")]
  public int RootMotionIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("rootMotionBaseSRT")]
  public gfl.anm2.fb._SRTT RootMotionBaseSRT { get; set; }

  public RootMotionT() {
    this.RootMotionIndex = 0;
    this.RootMotionBaseSRT = new gfl.anm2.fb._SRTT();
  }
}

public struct JointAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static JointAnimationData GetRootAsJointAnimationData(ByteBuffer _bb) { return GetRootAsJointAnimationData(_bb, new JointAnimationData()); }
  public static JointAnimationData GetRootAsJointAnimationData(ByteBuffer _bb, JointAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JointAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.JointData? Joints(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.JointData?)(new gfl.anm2.fb.JointData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int JointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.RootMotion? RootMotion { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.RootMotion?)(new gfl.anm2.fb.RootMotion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.JointAnimationData> CreateJointAnimationData(FlatBufferBuilder builder,
      VectorOffset jointsOffset = default(VectorOffset),
      Offset<gfl.anm2.fb.RootMotion> rootMotionOffset = default(Offset<gfl.anm2.fb.RootMotion>)) {
    builder.StartTable(2);
    JointAnimationData.AddRootMotion(builder, rootMotionOffset);
    JointAnimationData.AddJoints(builder, jointsOffset);
    return JointAnimationData.EndJointAnimationData(builder);
  }

  public static void StartJointAnimationData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddJoints(FlatBufferBuilder builder, VectorOffset jointsOffset) { builder.AddOffset(0, jointsOffset.Value, 0); }
  public static VectorOffset CreateJointsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.JointData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJointsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.JointData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartJointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRootMotion(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RootMotion> rootMotionOffset) { builder.AddOffset(1, rootMotionOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.JointAnimationData> EndJointAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.JointAnimationData>(o);
  }
  public JointAnimationDataT UnPack() {
    var _o = new JointAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(JointAnimationDataT _o) {
    _o.Joints = new List<gfl.anm2.fb.JointDataT>();
    for (var _j = 0; _j < this.JointsLength; ++_j) {_o.Joints.Add(this.Joints(_j).HasValue ? this.Joints(_j).Value.UnPack() : null);}
    _o.RootMotion = this.RootMotion.HasValue ? this.RootMotion.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.JointAnimationData> Pack(FlatBufferBuilder builder, JointAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.JointAnimationData>);
    var _joints = default(VectorOffset);
    if (_o.Joints != null) {
      var __joints = new Offset<gfl.anm2.fb.JointData>[_o.Joints.Count];
      for (var _j = 0; _j < __joints.Length; ++_j) { __joints[_j] = gfl.anm2.fb.JointData.Pack(builder, _o.Joints[_j]); }
      _joints = CreateJointsVector(builder, __joints);
    }
    var _rootMotion = _o.RootMotion == null ? default(Offset<gfl.anm2.fb.RootMotion>) : gfl.anm2.fb.RootMotion.Pack(builder, _o.RootMotion);
    return CreateJointAnimationData(
      builder,
      _joints,
      _rootMotion);
  }
};

public class JointAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("joints")]
  public List<gfl.anm2.fb.JointDataT> Joints { get; set; }
  [Newtonsoft.Json.JsonProperty("rootMotion")]
  public gfl.anm2.fb.RootMotionT RootMotion { get; set; }

  public JointAnimationDataT() {
    this.Joints = null;
    this.RootMotion = null;
  }
}

public struct MeshData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb) { return GetRootAsMeshData(_bb, new MeshData()); }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb, MeshData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.KeyData_Bool VisibilitiesType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.KeyData_Bool)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Bool.NONE; } }
  public TTable? Visibilities<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.MeshData> CreateMeshData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.KeyData_Bool visibilities_type = gfl.anm2.fb.KeyData_Bool.NONE,
      int visibilitiesOffset = 0) {
    builder.StartTable(3);
    MeshData.AddVisibilities(builder, visibilitiesOffset);
    MeshData.AddName(builder, nameOffset);
    MeshData.AddVisibilitiesType(builder, visibilities_type);
    return MeshData.EndMeshData(builder);
  }

  public static void StartMeshData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddVisibilitiesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Bool visibilitiesType) { builder.AddByte(1, (byte)visibilitiesType, 0); }
  public static void AddVisibilities(FlatBufferBuilder builder, int visibilitiesOffset) { builder.AddOffset(2, visibilitiesOffset, 0); }
  public static Offset<gfl.anm2.fb.MeshData> EndMeshData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MeshData>(o);
  }
  public MeshDataT UnPack() {
    var _o = new MeshDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshDataT _o) {
    _o.Name = this.Name;
    _o.Visibilities = new gfl.anm2.fb.KeyData_BoolUnion();
    _o.Visibilities.Type = this.VisibilitiesType;
    switch (this.VisibilitiesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Bool.OneFrame_Bool:
        _o.Visibilities.Value = this.Visibilities<gfl.anm2.fb.OneFrame_Bool>().HasValue ? this.Visibilities<gfl.anm2.fb.OneFrame_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.AllFrame_Bool:
        _o.Visibilities.Value = this.Visibilities<gfl.anm2.fb.AllFrame_Bool>().HasValue ? this.Visibilities<gfl.anm2.fb.AllFrame_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.Step_Bool_u16:
        _o.Visibilities.Value = this.Visibilities<gfl.anm2.fb.Step_Bool_u16>().HasValue ? this.Visibilities<gfl.anm2.fb.Step_Bool_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.Step_Bool_u8:
        _o.Visibilities.Value = this.Visibilities<gfl.anm2.fb.Step_Bool_u8>().HasValue ? this.Visibilities<gfl.anm2.fb.Step_Bool_u8>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.MeshData> Pack(FlatBufferBuilder builder, MeshDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MeshData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _visibilities_type = _o.Visibilities == null ? gfl.anm2.fb.KeyData_Bool.NONE : _o.Visibilities.Type;
    var _visibilities = _o.Visibilities == null ? 0 : gfl.anm2.fb.KeyData_BoolUnion.Pack(builder, _o.Visibilities);
    return CreateMeshData(
      builder,
      _name,
      _visibilities_type,
      _visibilities);
  }
};

public class MeshDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilities_type")]
  private gfl.anm2.fb.KeyData_Bool VisibilitiesType {
    get {
      return this.Visibilities != null ? this.Visibilities.Type : gfl.anm2.fb.KeyData_Bool.NONE;
    }
    set {
      this.Visibilities = new gfl.anm2.fb.KeyData_BoolUnion();
      this.Visibilities.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("visibilities")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_BoolUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_BoolUnion Visibilities { get; set; }

  public MeshDataT() {
    this.Name = null;
    this.Visibilities = null;
  }
}

public struct VisibilityAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VisibilityAnimationData GetRootAsVisibilityAnimationData(ByteBuffer _bb) { return GetRootAsVisibilityAnimationData(_bb, new VisibilityAnimationData()); }
  public static VisibilityAnimationData GetRootAsVisibilityAnimationData(ByteBuffer _bb, VisibilityAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VisibilityAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MeshData? Meshes(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MeshData?)(new gfl.anm2.fb.MeshData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.VisibilityAnimationData> CreateVisibilityAnimationData(FlatBufferBuilder builder,
      VectorOffset meshesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    VisibilityAnimationData.AddMeshes(builder, meshesOffset);
    return VisibilityAnimationData.EndVisibilityAnimationData(builder);
  }

  public static void StartVisibilityAnimationData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMeshes(FlatBufferBuilder builder, VectorOffset meshesOffset) { builder.AddOffset(0, meshesOffset.Value, 0); }
  public static VectorOffset CreateMeshesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.VisibilityAnimationData> EndVisibilityAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.VisibilityAnimationData>(o);
  }
  public VisibilityAnimationDataT UnPack() {
    var _o = new VisibilityAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisibilityAnimationDataT _o) {
    _o.Meshes = new List<gfl.anm2.fb.MeshDataT>();
    for (var _j = 0; _j < this.MeshesLength; ++_j) {_o.Meshes.Add(this.Meshes(_j).HasValue ? this.Meshes(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.VisibilityAnimationData> Pack(FlatBufferBuilder builder, VisibilityAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.VisibilityAnimationData>);
    var _meshes = default(VectorOffset);
    if (_o.Meshes != null) {
      var __meshes = new Offset<gfl.anm2.fb.MeshData>[_o.Meshes.Count];
      for (var _j = 0; _j < __meshes.Length; ++_j) { __meshes[_j] = gfl.anm2.fb.MeshData.Pack(builder, _o.Meshes[_j]); }
      _meshes = CreateMeshesVector(builder, __meshes);
    }
    return CreateVisibilityAnimationData(
      builder,
      _meshes);
  }
};

public class VisibilityAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("meshes")]
  public List<gfl.anm2.fb.MeshDataT> Meshes { get; set; }

  public VisibilityAnimationDataT() {
    this.Meshes = null;
  }
}

public struct AnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationData GetRootAsAnimationData(ByteBuffer _bb) { return GetRootAsAnimationData(_bb, new AnimationData()); }
  public static AnimationData GetRootAsAnimationData(ByteBuffer _bb, AnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.JointAnimationData? JointAnimationData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.JointAnimationData?)(new gfl.anm2.fb.JointAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.VisibilityAnimationData? VisibilityAnimationData { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.VisibilityAnimationData?)(new gfl.anm2.fb.VisibilityAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.AnimationData> CreateAnimationData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      Offset<gfl.anm2.fb.JointAnimationData> jointAnimationDataOffset = default(Offset<gfl.anm2.fb.JointAnimationData>),
      Offset<gfl.anm2.fb.VisibilityAnimationData> visibilityAnimationDataOffset = default(Offset<gfl.anm2.fb.VisibilityAnimationData>)) {
    builder.StartTable(3);
    AnimationData.AddVisibilityAnimationData(builder, visibilityAnimationDataOffset);
    AnimationData.AddJointAnimationData(builder, jointAnimationDataOffset);
    AnimationData.AddFrameSetting(builder, frameSettingOffset);
    return AnimationData.EndAnimationData(builder);
  }

  public static void StartAnimationData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddJointAnimationData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.JointAnimationData> jointAnimationDataOffset) { builder.AddOffset(1, jointAnimationDataOffset.Value, 0); }
  public static void AddVisibilityAnimationData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityAnimationData> visibilityAnimationDataOffset) { builder.AddOffset(2, visibilityAnimationDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationData> EndAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationData>(o);
  }
  public static void FinishAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationDataT UnPack() {
    var _o = new AnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.JointAnimationData = this.JointAnimationData.HasValue ? this.JointAnimationData.Value.UnPack() : null;
    _o.VisibilityAnimationData = this.VisibilityAnimationData.HasValue ? this.VisibilityAnimationData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.AnimationData> Pack(FlatBufferBuilder builder, AnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _jointAnimationData = _o.JointAnimationData == null ? default(Offset<gfl.anm2.fb.JointAnimationData>) : gfl.anm2.fb.JointAnimationData.Pack(builder, _o.JointAnimationData);
    var _visibilityAnimationData = _o.VisibilityAnimationData == null ? default(Offset<gfl.anm2.fb.VisibilityAnimationData>) : gfl.anm2.fb.VisibilityAnimationData.Pack(builder, _o.VisibilityAnimationData);
    return CreateAnimationData(
      builder,
      _frameSetting,
      _jointAnimationData,
      _visibilityAnimationData);
  }
};

public class AnimationDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("jointAnimationData")]
  public gfl.anm2.fb.JointAnimationDataT JointAnimationData { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityAnimationData")]
  public gfl.anm2.fb.VisibilityAnimationDataT VisibilityAnimationData { get; set; }

  public AnimationDataT() {
    this.FrameSetting = null;
    this.JointAnimationData = null;
    this.VisibilityAnimationData = null;
  }

  public static AnimationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationData.GetRootAsAnimationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationData.FinishAnimationDataBuffer(fbb, AnimationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
