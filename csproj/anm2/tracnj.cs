// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SubComponentConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SubComponentConfig GetRootAsSubComponentConfig(ByteBuffer _bb) { return GetRootAsSubComponentConfig(_bb, new SubComponentConfig()); }
  public static SubComponentConfig GetRootAsSubComponentConfig(ByteBuffer _bb, SubComponentConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SubComponentConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fbj.SubComponentConfig> CreateSubComponentConfig(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset file_pathOffset = default(StringOffset)) {
    builder.StartTable(2);
    SubComponentConfig.AddFilePath(builder, file_pathOffset);
    SubComponentConfig.AddType(builder, typeOffset);
    return SubComponentConfig.EndSubComponentConfig(builder);
  }

  public static void StartSubComponentConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.SubComponentConfig> EndSubComponentConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.SubComponentConfig>(o);
  }
  public SubComponentConfigT UnPack() {
    var _o = new SubComponentConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SubComponentConfigT _o) {
    _o.Type = this.Type;
    _o.FilePath = this.FilePath;
  }
  public static Offset<gfl.anm2.fbj.SubComponentConfig> Pack(FlatBufferBuilder builder, SubComponentConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.SubComponentConfig>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _file_path = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateSubComponentConfig(
      builder,
      _type,
      _file_path);
  }
};

public class SubComponentConfigT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public string Type { get; set; }
  [Newtonsoft.Json.JsonProperty("file_path")]
  public string FilePath { get; set; }

  public SubComponentConfigT() {
    this.Type = null;
    this.FilePath = null;
  }
}

public struct AnimationConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationConfig GetRootAsAnimationConfig(ByteBuffer _bb) { return GetRootAsAnimationConfig(_bb, new AnimationConfig()); }
  public static AnimationConfig GetRootAsAnimationConfig(ByteBuffer _bb, AnimationConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.SubComponentConfig? SubComponentConfig(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.SubComponentConfig?)(new gfl.anm2.fbj.SubComponentConfig()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubComponentConfigLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ModelPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetModelPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetModelPathArray() { return __p.__vector_as_array<byte>(6); }
  public string MetadataPath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMetadataPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMetadataPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<gfl.anm2.fbj.AnimationConfig> CreateAnimationConfig(FlatBufferBuilder builder,
      VectorOffset subComponentConfigOffset = default(VectorOffset),
      StringOffset modelPathOffset = default(StringOffset),
      StringOffset metadataPathOffset = default(StringOffset)) {
    builder.StartTable(3);
    AnimationConfig.AddMetadataPath(builder, metadataPathOffset);
    AnimationConfig.AddModelPath(builder, modelPathOffset);
    AnimationConfig.AddSubComponentConfig(builder, subComponentConfigOffset);
    return AnimationConfig.EndAnimationConfig(builder);
  }

  public static void StartAnimationConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSubComponentConfig(FlatBufferBuilder builder, VectorOffset subComponentConfigOffset) { builder.AddOffset(0, subComponentConfigOffset.Value, 0); }
  public static VectorOffset CreateSubComponentConfigVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.SubComponentConfig>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubComponentConfigVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.SubComponentConfig>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubComponentConfigVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddModelPath(FlatBufferBuilder builder, StringOffset modelPathOffset) { builder.AddOffset(1, modelPathOffset.Value, 0); }
  public static void AddMetadataPath(FlatBufferBuilder builder, StringOffset metadataPathOffset) { builder.AddOffset(2, metadataPathOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.AnimationConfig> EndAnimationConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.AnimationConfig>(o);
  }
  public static void FinishAnimationConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AnimationConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AnimationConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationConfigT UnPack() {
    var _o = new AnimationConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationConfigT _o) {
    _o.SubComponentConfig = new List<gfl.anm2.fbj.SubComponentConfigT>();
    for (var _j = 0; _j < this.SubComponentConfigLength; ++_j) {_o.SubComponentConfig.Add(this.SubComponentConfig(_j).HasValue ? this.SubComponentConfig(_j).Value.UnPack() : null);}
    _o.ModelPath = this.ModelPath;
    _o.MetadataPath = this.MetadataPath;
  }
  public static Offset<gfl.anm2.fbj.AnimationConfig> Pack(FlatBufferBuilder builder, AnimationConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.AnimationConfig>);
    var _subComponentConfig = default(VectorOffset);
    if (_o.SubComponentConfig != null) {
      var __subComponentConfig = new Offset<gfl.anm2.fbj.SubComponentConfig>[_o.SubComponentConfig.Count];
      for (var _j = 0; _j < __subComponentConfig.Length; ++_j) { __subComponentConfig[_j] = gfl.anm2.fbj.SubComponentConfig.Pack(builder, _o.SubComponentConfig[_j]); }
      _subComponentConfig = CreateSubComponentConfigVector(builder, __subComponentConfig);
    }
    var _modelPath = _o.ModelPath == null ? default(StringOffset) : builder.CreateString(_o.ModelPath);
    var _metadataPath = _o.MetadataPath == null ? default(StringOffset) : builder.CreateString(_o.MetadataPath);
    return CreateAnimationConfig(
      builder,
      _subComponentConfig,
      _modelPath,
      _metadataPath);
  }
};

public class AnimationConfigT
{
  [Newtonsoft.Json.JsonProperty("subComponentConfig")]
  public List<gfl.anm2.fbj.SubComponentConfigT> SubComponentConfig { get; set; }
  [Newtonsoft.Json.JsonProperty("modelPath")]
  public string ModelPath { get; set; }
  [Newtonsoft.Json.JsonProperty("metadataPath")]
  public string MetadataPath { get; set; }

  public AnimationConfigT() {
    this.SubComponentConfig = null;
    this.ModelPath = null;
    this.MetadataPath = null;
  }

  public static AnimationConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationConfig.GetRootAsAnimationConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationConfig.FinishAnimationConfigBuffer(fbb, AnimationConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
