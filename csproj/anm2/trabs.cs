// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BlendShapeTargetType : uint
{
  Mesh = 0,
  Lattice = 1,
};

public struct MayaBlendShapeMesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MayaBlendShapeMesh GetRootAsMayaBlendShapeMesh(ByteBuffer _bb) { return GetRootAsMayaBlendShapeMesh(_bb, new MayaBlendShapeMesh()); }
  public static MayaBlendShapeMesh GetRootAsMayaBlendShapeMesh(ByteBuffer _bb, MayaBlendShapeMesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MayaBlendShapeMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TargetNames(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TargetNamesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.BlendShapeTargetType TargetType { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.BlendShapeTargetType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.BlendShapeTargetType.Mesh; } }

  public static Offset<gfl.anm2.fb.MayaBlendShapeMesh> CreateMayaBlendShapeMesh(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset targetNamesOffset = default(VectorOffset),
      gfl.anm2.fb.BlendShapeTargetType targetType = gfl.anm2.fb.BlendShapeTargetType.Mesh) {
    builder.StartTable(3);
    MayaBlendShapeMesh.AddTargetType(builder, targetType);
    MayaBlendShapeMesh.AddTargetNames(builder, targetNamesOffset);
    MayaBlendShapeMesh.AddName(builder, nameOffset);
    return MayaBlendShapeMesh.EndMayaBlendShapeMesh(builder);
  }

  public static void StartMayaBlendShapeMesh(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTargetNames(FlatBufferBuilder builder, VectorOffset targetNamesOffset) { builder.AddOffset(1, targetNamesOffset.Value, 0); }
  public static VectorOffset CreateTargetNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTargetNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetType(FlatBufferBuilder builder, gfl.anm2.fb.BlendShapeTargetType targetType) { builder.AddUint(2, (uint)targetType, 0); }
  public static Offset<gfl.anm2.fb.MayaBlendShapeMesh> EndMayaBlendShapeMesh(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MayaBlendShapeMesh>(o);
  }
  public MayaBlendShapeMeshT UnPack() {
    var _o = new MayaBlendShapeMeshT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MayaBlendShapeMeshT _o) {
    _o.Name = this.Name;
    _o.TargetNames = new List<string>();
    for (var _j = 0; _j < this.TargetNamesLength; ++_j) {_o.TargetNames.Add(this.TargetNames(_j));}
    _o.TargetType = this.TargetType;
  }
  public static Offset<gfl.anm2.fb.MayaBlendShapeMesh> Pack(FlatBufferBuilder builder, MayaBlendShapeMeshT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MayaBlendShapeMesh>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _targetNames = default(VectorOffset);
    if (_o.TargetNames != null) {
      var __targetNames = new StringOffset[_o.TargetNames.Count];
      for (var _j = 0; _j < __targetNames.Length; ++_j) { __targetNames[_j] = builder.CreateString(_o.TargetNames[_j]); }
      _targetNames = CreateTargetNamesVector(builder, __targetNames);
    }
    return CreateMayaBlendShapeMesh(
      builder,
      _name,
      _targetNames,
      _o.TargetType);
  }
};

public class MayaBlendShapeMeshT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("targetNames")]
  public List<string> TargetNames { get; set; }
  [Newtonsoft.Json.JsonProperty("targetType")]
  public gfl.anm2.fb.BlendShapeTargetType TargetType { get; set; }

  public MayaBlendShapeMeshT() {
    this.Name = null;
    this.TargetNames = null;
    this.TargetType = gfl.anm2.fb.BlendShapeTargetType.Mesh;
  }
}

public struct MayaBlendShapeParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MayaBlendShapeParam GetRootAsMayaBlendShapeParam(ByteBuffer _bb) { return GetRootAsMayaBlendShapeParam(_bb, new MayaBlendShapeParam()); }
  public static MayaBlendShapeParam GetRootAsMayaBlendShapeParam(ByteBuffer _bb, MayaBlendShapeParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MayaBlendShapeParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.MayaBlendShapeMesh? Meshes(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MayaBlendShapeMesh?)(new gfl.anm2.fb.MayaBlendShapeMesh()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? Weights(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeightsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MayaBlendShapeParam> CreateMayaBlendShapeParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset meshesOffset = default(VectorOffset),
      VectorOffset weightsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MayaBlendShapeParam.AddWeights(builder, weightsOffset);
    MayaBlendShapeParam.AddMeshes(builder, meshesOffset);
    MayaBlendShapeParam.AddName(builder, nameOffset);
    return MayaBlendShapeParam.EndMayaBlendShapeParam(builder);
  }

  public static void StartMayaBlendShapeParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddMeshes(FlatBufferBuilder builder, VectorOffset meshesOffset) { builder.AddOffset(1, meshesOffset.Value, 0); }
  public static VectorOffset CreateMeshesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeMesh>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeMesh>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeights(FlatBufferBuilder builder, VectorOffset weightsOffset) { builder.AddOffset(2, weightsOffset.Value, 0); }
  public static VectorOffset CreateWeightsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWeightsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartWeightsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MayaBlendShapeParam> EndMayaBlendShapeParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MayaBlendShapeParam>(o);
  }
  public MayaBlendShapeParamT UnPack() {
    var _o = new MayaBlendShapeParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MayaBlendShapeParamT _o) {
    _o.Name = this.Name;
    _o.Meshes = new List<gfl.anm2.fb.MayaBlendShapeMeshT>();
    for (var _j = 0; _j < this.MeshesLength; ++_j) {_o.Meshes.Add(this.Meshes(_j).HasValue ? this.Meshes(_j).Value.UnPack() : null);}
    _o.Weights = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.WeightsLength; ++_j) {_o.Weights.Add(this.Weights(_j).HasValue ? this.Weights(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MayaBlendShapeParam> Pack(FlatBufferBuilder builder, MayaBlendShapeParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MayaBlendShapeParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _meshes = default(VectorOffset);
    if (_o.Meshes != null) {
      var __meshes = new Offset<gfl.anm2.fb.MayaBlendShapeMesh>[_o.Meshes.Count];
      for (var _j = 0; _j < __meshes.Length; ++_j) { __meshes[_j] = gfl.anm2.fb.MayaBlendShapeMesh.Pack(builder, _o.Meshes[_j]); }
      _meshes = CreateMeshesVector(builder, __meshes);
    }
    var _weights = default(VectorOffset);
    if (_o.Weights != null) {
      var __weights = new Offset<gfl.anm2.fbj.KeyBase>[_o.Weights.Count];
      for (var _j = 0; _j < __weights.Length; ++_j) { __weights[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.Weights[_j]); }
      _weights = CreateWeightsVector(builder, __weights);
    }
    return CreateMayaBlendShapeParam(
      builder,
      _name,
      _meshes,
      _weights);
  }
};

public class MayaBlendShapeParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("meshes")]
  public List<gfl.anm2.fb.MayaBlendShapeMeshT> Meshes { get; set; }
  [Newtonsoft.Json.JsonProperty("weights")]
  public List<gfl.anm2.fbj.KeyBaseT> Weights { get; set; }

  public MayaBlendShapeParamT() {
    this.Name = null;
    this.Meshes = null;
    this.Weights = null;
  }
}

public struct MayaBlendShapeDeformer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MayaBlendShapeDeformer GetRootAsMayaBlendShapeDeformer(ByteBuffer _bb) { return GetRootAsMayaBlendShapeDeformer(_bb, new MayaBlendShapeDeformer()); }
  public static MayaBlendShapeDeformer GetRootAsMayaBlendShapeDeformer(ByteBuffer _bb, MayaBlendShapeDeformer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MayaBlendShapeDeformer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Params(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MayaBlendShapeDeformer> CreateMayaBlendShapeDeformer(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset paramsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MayaBlendShapeDeformer.AddParams(builder, paramsOffset);
    MayaBlendShapeDeformer.AddName(builder, nameOffset);
    return MayaBlendShapeDeformer.EndMayaBlendShapeDeformer(builder);
  }

  public static void StartMayaBlendShapeDeformer(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(1, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MayaBlendShapeDeformer> EndMayaBlendShapeDeformer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MayaBlendShapeDeformer>(o);
  }
  public MayaBlendShapeDeformerT UnPack() {
    var _o = new MayaBlendShapeDeformerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MayaBlendShapeDeformerT _o) {
    _o.Name = this.Name;
    _o.Params = new List<string>();
    for (var _j = 0; _j < this.ParamsLength; ++_j) {_o.Params.Add(this.Params(_j));}
  }
  public static Offset<gfl.anm2.fb.MayaBlendShapeDeformer> Pack(FlatBufferBuilder builder, MayaBlendShapeDeformerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MayaBlendShapeDeformer>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _params = default(VectorOffset);
    if (_o.Params != null) {
      var __params = new StringOffset[_o.Params.Count];
      for (var _j = 0; _j < __params.Length; ++_j) { __params[_j] = builder.CreateString(_o.Params[_j]); }
      _params = CreateParamsVector(builder, __params);
    }
    return CreateMayaBlendShapeDeformer(
      builder,
      _name,
      _params);
  }
};

public class MayaBlendShapeDeformerT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("params")]
  public List<string> Params { get; set; }

  public MayaBlendShapeDeformerT() {
    this.Name = null;
    this.Params = null;
  }
}

public struct MayaBlendShapeAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MayaBlendShapeAnimationData GetRootAsMayaBlendShapeAnimationData(ByteBuffer _bb) { return GetRootAsMayaBlendShapeAnimationData(_bb, new MayaBlendShapeAnimationData()); }
  public static MayaBlendShapeAnimationData GetRootAsMayaBlendShapeAnimationData(ByteBuffer _bb, MayaBlendShapeAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MayaBlendShapeAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MayaBlendShapeParam? Params(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MayaBlendShapeParam?)(new gfl.anm2.fb.MayaBlendShapeParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParamsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.MayaBlendShapeDeformer? Deformers(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MayaBlendShapeDeformer?)(new gfl.anm2.fb.MayaBlendShapeDeformer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeformersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MayaBlendShapeAnimationData> CreateMayaBlendShapeAnimationData(FlatBufferBuilder builder,
      VectorOffset paramsOffset = default(VectorOffset),
      VectorOffset deformersOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MayaBlendShapeAnimationData.AddDeformers(builder, deformersOffset);
    MayaBlendShapeAnimationData.AddParams(builder, paramsOffset);
    return MayaBlendShapeAnimationData.EndMayaBlendShapeAnimationData(builder);
  }

  public static void StartMayaBlendShapeAnimationData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(0, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeformers(FlatBufferBuilder builder, VectorOffset deformersOffset) { builder.AddOffset(1, deformersOffset.Value, 0); }
  public static VectorOffset CreateDeformersVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeDeformer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeformersVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeDeformer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeformersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MayaBlendShapeAnimationData> EndMayaBlendShapeAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MayaBlendShapeAnimationData>(o);
  }
  public MayaBlendShapeAnimationDataT UnPack() {
    var _o = new MayaBlendShapeAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MayaBlendShapeAnimationDataT _o) {
    _o.Params = new List<gfl.anm2.fb.MayaBlendShapeParamT>();
    for (var _j = 0; _j < this.ParamsLength; ++_j) {_o.Params.Add(this.Params(_j).HasValue ? this.Params(_j).Value.UnPack() : null);}
    _o.Deformers = new List<gfl.anm2.fb.MayaBlendShapeDeformerT>();
    for (var _j = 0; _j < this.DeformersLength; ++_j) {_o.Deformers.Add(this.Deformers(_j).HasValue ? this.Deformers(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MayaBlendShapeAnimationData> Pack(FlatBufferBuilder builder, MayaBlendShapeAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MayaBlendShapeAnimationData>);
    var _params = default(VectorOffset);
    if (_o.Params != null) {
      var __params = new Offset<gfl.anm2.fb.MayaBlendShapeParam>[_o.Params.Count];
      for (var _j = 0; _j < __params.Length; ++_j) { __params[_j] = gfl.anm2.fb.MayaBlendShapeParam.Pack(builder, _o.Params[_j]); }
      _params = CreateParamsVector(builder, __params);
    }
    var _deformers = default(VectorOffset);
    if (_o.Deformers != null) {
      var __deformers = new Offset<gfl.anm2.fb.MayaBlendShapeDeformer>[_o.Deformers.Count];
      for (var _j = 0; _j < __deformers.Length; ++_j) { __deformers[_j] = gfl.anm2.fb.MayaBlendShapeDeformer.Pack(builder, _o.Deformers[_j]); }
      _deformers = CreateDeformersVector(builder, __deformers);
    }
    return CreateMayaBlendShapeAnimationData(
      builder,
      _params,
      _deformers);
  }
};

public class MayaBlendShapeAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("params")]
  public List<gfl.anm2.fb.MayaBlendShapeParamT> Params { get; set; }
  [Newtonsoft.Json.JsonProperty("deformers")]
  public List<gfl.anm2.fb.MayaBlendShapeDeformerT> Deformers { get; set; }

  public MayaBlendShapeAnimationDataT() {
    this.Params = null;
    this.Deformers = null;
  }
}

public struct EditorBlendShapeParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorBlendShapeParam GetRootAsEditorBlendShapeParam(ByteBuffer _bb) { return GetRootAsEditorBlendShapeParam(_bb, new EditorBlendShapeParam()); }
  public static EditorBlendShapeParam GetRootAsEditorBlendShapeParam(ByteBuffer _bb, EditorBlendShapeParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorBlendShapeParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ShapeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShapeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetShapeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetShapeNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TrcrvPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrcrvPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTrcrvPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTrcrvPathArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.CurveData? CurveData { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.CurveData?)(new gfl.anm2.fb.CurveData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.EditorBlendShapeParam> CreateEditorBlendShapeParam(FlatBufferBuilder builder,
      StringOffset shapeNameOffset = default(StringOffset),
      StringOffset trcrvPathOffset = default(StringOffset),
      Offset<gfl.anm2.fb.CurveData> curveDataOffset = default(Offset<gfl.anm2.fb.CurveData>)) {
    builder.StartTable(3);
    EditorBlendShapeParam.AddCurveData(builder, curveDataOffset);
    EditorBlendShapeParam.AddTrcrvPath(builder, trcrvPathOffset);
    EditorBlendShapeParam.AddShapeName(builder, shapeNameOffset);
    return EditorBlendShapeParam.EndEditorBlendShapeParam(builder);
  }

  public static void StartEditorBlendShapeParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddShapeName(FlatBufferBuilder builder, StringOffset shapeNameOffset) { builder.AddOffset(0, shapeNameOffset.Value, 0); }
  public static void AddTrcrvPath(FlatBufferBuilder builder, StringOffset trcrvPathOffset) { builder.AddOffset(1, trcrvPathOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveData> curveDataOffset) { builder.AddOffset(2, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EditorBlendShapeParam> EndEditorBlendShapeParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorBlendShapeParam>(o);
  }
  public EditorBlendShapeParamT UnPack() {
    var _o = new EditorBlendShapeParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorBlendShapeParamT _o) {
    _o.ShapeName = this.ShapeName;
    _o.TrcrvPath = this.TrcrvPath;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.EditorBlendShapeParam> Pack(FlatBufferBuilder builder, EditorBlendShapeParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorBlendShapeParam>);
    var _shapeName = _o.ShapeName == null ? default(StringOffset) : builder.CreateString(_o.ShapeName);
    var _trcrvPath = _o.TrcrvPath == null ? default(StringOffset) : builder.CreateString(_o.TrcrvPath);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.CurveData>) : gfl.anm2.fb.CurveData.Pack(builder, _o.CurveData);
    return CreateEditorBlendShapeParam(
      builder,
      _shapeName,
      _trcrvPath,
      _curveData);
  }
};

public class EditorBlendShapeParamT
{
  [Newtonsoft.Json.JsonProperty("shapeName")]
  public string ShapeName { get; set; }
  [Newtonsoft.Json.JsonProperty("trcrvPath")]
  public string TrcrvPath { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.CurveDataT CurveData { get; set; }

  public EditorBlendShapeParamT() {
    this.ShapeName = null;
    this.TrcrvPath = null;
    this.CurveData = null;
  }
}

public struct EditorBlendShapeAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorBlendShapeAnimationData GetRootAsEditorBlendShapeAnimationData(ByteBuffer _bb) { return GetRootAsEditorBlendShapeAnimationData(_bb, new EditorBlendShapeAnimationData()); }
  public static EditorBlendShapeAnimationData GetRootAsEditorBlendShapeAnimationData(ByteBuffer _bb, EditorBlendShapeAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorBlendShapeAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.EditorBlendShapeParam? BlendShapeParams(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.EditorBlendShapeParam?)(new gfl.anm2.fb.EditorBlendShapeParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BlendShapeParamsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EditorBlendShapeAnimationData> CreateEditorBlendShapeAnimationData(FlatBufferBuilder builder,
      VectorOffset blendShapeParamsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EditorBlendShapeAnimationData.AddBlendShapeParams(builder, blendShapeParamsOffset);
    return EditorBlendShapeAnimationData.EndEditorBlendShapeAnimationData(builder);
  }

  public static void StartEditorBlendShapeAnimationData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBlendShapeParams(FlatBufferBuilder builder, VectorOffset blendShapeParamsOffset) { builder.AddOffset(0, blendShapeParamsOffset.Value, 0); }
  public static VectorOffset CreateBlendShapeParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorBlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlendShapeParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorBlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBlendShapeParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EditorBlendShapeAnimationData> EndEditorBlendShapeAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorBlendShapeAnimationData>(o);
  }
  public EditorBlendShapeAnimationDataT UnPack() {
    var _o = new EditorBlendShapeAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorBlendShapeAnimationDataT _o) {
    _o.BlendShapeParams = new List<gfl.anm2.fb.EditorBlendShapeParamT>();
    for (var _j = 0; _j < this.BlendShapeParamsLength; ++_j) {_o.BlendShapeParams.Add(this.BlendShapeParams(_j).HasValue ? this.BlendShapeParams(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EditorBlendShapeAnimationData> Pack(FlatBufferBuilder builder, EditorBlendShapeAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorBlendShapeAnimationData>);
    var _blendShapeParams = default(VectorOffset);
    if (_o.BlendShapeParams != null) {
      var __blendShapeParams = new Offset<gfl.anm2.fb.EditorBlendShapeParam>[_o.BlendShapeParams.Count];
      for (var _j = 0; _j < __blendShapeParams.Length; ++_j) { __blendShapeParams[_j] = gfl.anm2.fb.EditorBlendShapeParam.Pack(builder, _o.BlendShapeParams[_j]); }
      _blendShapeParams = CreateBlendShapeParamsVector(builder, __blendShapeParams);
    }
    return CreateEditorBlendShapeAnimationData(
      builder,
      _blendShapeParams);
  }
};

public class EditorBlendShapeAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("blendShapeParams")]
  public List<gfl.anm2.fb.EditorBlendShapeParamT> BlendShapeParams { get; set; }

  public EditorBlendShapeAnimationDataT() {
    this.BlendShapeParams = null;
  }
}

public struct BlendShapeMesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendShapeMesh GetRootAsBlendShapeMesh(ByteBuffer _bb) { return GetRootAsBlendShapeMesh(_bb, new BlendShapeMesh()); }
  public static BlendShapeMesh GetRootAsBlendShapeMesh(ByteBuffer _bb, BlendShapeMesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendShapeMesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string TargetNames(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TargetNamesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.BlendShapeTargetType TargetType { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.BlendShapeTargetType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.BlendShapeTargetType.Mesh; } }

  public static Offset<gfl.anm2.fb.BlendShapeMesh> CreateBlendShapeMesh(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset targetNamesOffset = default(VectorOffset),
      gfl.anm2.fb.BlendShapeTargetType targetType = gfl.anm2.fb.BlendShapeTargetType.Mesh) {
    builder.StartTable(3);
    BlendShapeMesh.AddTargetType(builder, targetType);
    BlendShapeMesh.AddTargetNames(builder, targetNamesOffset);
    BlendShapeMesh.AddName(builder, nameOffset);
    return BlendShapeMesh.EndBlendShapeMesh(builder);
  }

  public static void StartBlendShapeMesh(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTargetNames(FlatBufferBuilder builder, VectorOffset targetNamesOffset) { builder.AddOffset(1, targetNamesOffset.Value, 0); }
  public static VectorOffset CreateTargetNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTargetNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTargetType(FlatBufferBuilder builder, gfl.anm2.fb.BlendShapeTargetType targetType) { builder.AddUint(2, (uint)targetType, 0); }
  public static Offset<gfl.anm2.fb.BlendShapeMesh> EndBlendShapeMesh(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendShapeMesh>(o);
  }
  public BlendShapeMeshT UnPack() {
    var _o = new BlendShapeMeshT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendShapeMeshT _o) {
    _o.Name = this.Name;
    _o.TargetNames = new List<string>();
    for (var _j = 0; _j < this.TargetNamesLength; ++_j) {_o.TargetNames.Add(this.TargetNames(_j));}
    _o.TargetType = this.TargetType;
  }
  public static Offset<gfl.anm2.fb.BlendShapeMesh> Pack(FlatBufferBuilder builder, BlendShapeMeshT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendShapeMesh>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _targetNames = default(VectorOffset);
    if (_o.TargetNames != null) {
      var __targetNames = new StringOffset[_o.TargetNames.Count];
      for (var _j = 0; _j < __targetNames.Length; ++_j) { __targetNames[_j] = builder.CreateString(_o.TargetNames[_j]); }
      _targetNames = CreateTargetNamesVector(builder, __targetNames);
    }
    return CreateBlendShapeMesh(
      builder,
      _name,
      _targetNames,
      _o.TargetType);
  }
};

public class BlendShapeMeshT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("targetNames")]
  public List<string> TargetNames { get; set; }
  [Newtonsoft.Json.JsonProperty("targetType")]
  public gfl.anm2.fb.BlendShapeTargetType TargetType { get; set; }

  public BlendShapeMeshT() {
    this.Name = null;
    this.TargetNames = null;
    this.TargetType = gfl.anm2.fb.BlendShapeTargetType.Mesh;
  }
}

public struct BlendShapeParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendShapeParam GetRootAsBlendShapeParam(ByteBuffer _bb) { return GetRootAsBlendShapeParam(_bb, new BlendShapeParam()); }
  public static BlendShapeParam GetRootAsBlendShapeParam(ByteBuffer _bb, BlendShapeParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendShapeParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.BlendShapeMesh? Meshes(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.BlendShapeMesh?)(new gfl.anm2.fb.BlendShapeMesh()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.KeyData_Float WeightsType { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.KeyData_Float)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Float.NONE; } }
  public TTable? Weights<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public int DeformerIndex { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }

  public static Offset<gfl.anm2.fb.BlendShapeParam> CreateBlendShapeParam(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset meshesOffset = default(VectorOffset),
      gfl.anm2.fb.KeyData_Float weights_type = gfl.anm2.fb.KeyData_Float.NONE,
      int weightsOffset = 0,
      int deformerIndex = -1) {
    builder.StartTable(5);
    BlendShapeParam.AddDeformerIndex(builder, deformerIndex);
    BlendShapeParam.AddWeights(builder, weightsOffset);
    BlendShapeParam.AddMeshes(builder, meshesOffset);
    BlendShapeParam.AddName(builder, nameOffset);
    BlendShapeParam.AddWeightsType(builder, weights_type);
    return BlendShapeParam.EndBlendShapeParam(builder);
  }

  public static void StartBlendShapeParam(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddMeshes(FlatBufferBuilder builder, VectorOffset meshesOffset) { builder.AddOffset(1, meshesOffset.Value, 0); }
  public static VectorOffset CreateMeshesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeMesh>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeMesh>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeightsType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Float weightsType) { builder.AddByte(2, (byte)weightsType, 0); }
  public static void AddWeights(FlatBufferBuilder builder, int weightsOffset) { builder.AddOffset(3, weightsOffset, 0); }
  public static void AddDeformerIndex(FlatBufferBuilder builder, int deformerIndex) { builder.AddInt(4, deformerIndex, -1); }
  public static Offset<gfl.anm2.fb.BlendShapeParam> EndBlendShapeParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendShapeParam>(o);
  }
  public BlendShapeParamT UnPack() {
    var _o = new BlendShapeParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendShapeParamT _o) {
    _o.Name = this.Name;
    _o.Meshes = new List<gfl.anm2.fb.BlendShapeMeshT>();
    for (var _j = 0; _j < this.MeshesLength; ++_j) {_o.Meshes.Add(this.Meshes(_j).HasValue ? this.Meshes(_j).Value.UnPack() : null);}
    _o.Weights = new gfl.anm2.fb.KeyData_FloatUnion();
    _o.Weights.Type = this.WeightsType;
    switch (this.WeightsType) {
      default: break;
      case gfl.anm2.fb.KeyData_Float.OneFrame_Float:
        _o.Weights.Value = this.Weights<gfl.anm2.fb.OneFrame_Float>().HasValue ? this.Weights<gfl.anm2.fb.OneFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.AllFrame_Float:
        _o.Weights.Value = this.Weights<gfl.anm2.fb.AllFrame_Float>().HasValue ? this.Weights<gfl.anm2.fb.AllFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u16:
        _o.Weights.Value = this.Weights<gfl.anm2.fb.CatmullRom_Float_u16>().HasValue ? this.Weights<gfl.anm2.fb.CatmullRom_Float_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u8:
        _o.Weights.Value = this.Weights<gfl.anm2.fb.CatmullRom_Float_u8>().HasValue ? this.Weights<gfl.anm2.fb.CatmullRom_Float_u8>().Value.UnPack() : null;
        break;
    }
    _o.DeformerIndex = this.DeformerIndex;
  }
  public static Offset<gfl.anm2.fb.BlendShapeParam> Pack(FlatBufferBuilder builder, BlendShapeParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendShapeParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _meshes = default(VectorOffset);
    if (_o.Meshes != null) {
      var __meshes = new Offset<gfl.anm2.fb.BlendShapeMesh>[_o.Meshes.Count];
      for (var _j = 0; _j < __meshes.Length; ++_j) { __meshes[_j] = gfl.anm2.fb.BlendShapeMesh.Pack(builder, _o.Meshes[_j]); }
      _meshes = CreateMeshesVector(builder, __meshes);
    }
    var _weights_type = _o.Weights == null ? gfl.anm2.fb.KeyData_Float.NONE : _o.Weights.Type;
    var _weights = _o.Weights == null ? 0 : gfl.anm2.fb.KeyData_FloatUnion.Pack(builder, _o.Weights);
    return CreateBlendShapeParam(
      builder,
      _name,
      _meshes,
      _weights_type,
      _weights,
      _o.DeformerIndex);
  }
};

public class BlendShapeParamT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("meshes")]
  public List<gfl.anm2.fb.BlendShapeMeshT> Meshes { get; set; }
  [Newtonsoft.Json.JsonProperty("weights_type")]
  private gfl.anm2.fb.KeyData_Float WeightsType {
    get {
      return this.Weights != null ? this.Weights.Type : gfl.anm2.fb.KeyData_Float.NONE;
    }
    set {
      this.Weights = new gfl.anm2.fb.KeyData_FloatUnion();
      this.Weights.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("weights")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_FloatUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_FloatUnion Weights { get; set; }
  [Newtonsoft.Json.JsonProperty("deformerIndex")]
  public int DeformerIndex { get; set; }

  public BlendShapeParamT() {
    this.Name = null;
    this.Meshes = null;
    this.Weights = null;
    this.DeformerIndex = -1;
  }
}

public struct BlendShapeDeformer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendShapeDeformer GetRootAsBlendShapeDeformer(ByteBuffer _bb) { return GetRootAsBlendShapeDeformer(_bb, new BlendShapeDeformer()); }
  public static BlendShapeDeformer GetRootAsBlendShapeDeformer(ByteBuffer _bb, BlendShapeDeformer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendShapeDeformer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.BlendShapeDeformer> CreateBlendShapeDeformer(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(1);
    BlendShapeDeformer.AddName(builder, nameOffset);
    return BlendShapeDeformer.EndBlendShapeDeformer(builder);
  }

  public static void StartBlendShapeDeformer(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.BlendShapeDeformer> EndBlendShapeDeformer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendShapeDeformer>(o);
  }
  public BlendShapeDeformerT UnPack() {
    var _o = new BlendShapeDeformerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendShapeDeformerT _o) {
    _o.Name = this.Name;
  }
  public static Offset<gfl.anm2.fb.BlendShapeDeformer> Pack(FlatBufferBuilder builder, BlendShapeDeformerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendShapeDeformer>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateBlendShapeDeformer(
      builder,
      _name);
  }
};

public class BlendShapeDeformerT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }

  public BlendShapeDeformerT() {
    this.Name = null;
  }
}

public struct BlendShapeAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendShapeAnimationData GetRootAsBlendShapeAnimationData(ByteBuffer _bb) { return GetRootAsBlendShapeAnimationData(_bb, new BlendShapeAnimationData()); }
  public static BlendShapeAnimationData GetRootAsBlendShapeAnimationData(ByteBuffer _bb, BlendShapeAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendShapeAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorBlendShapeAnimationData? EditorBlendShapeAnimationData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EditorBlendShapeAnimationData?)(new gfl.anm2.fb.EditorBlendShapeAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.BlendShapeParam? Params(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.BlendShapeParam?)(new gfl.anm2.fb.BlendShapeParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ParamsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.MayaBlendShapeAnimationData? MayaBlendShapeAnimationData { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.MayaBlendShapeAnimationData?)(new gfl.anm2.fb.MayaBlendShapeAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.BlendShapeDeformer? Deformers(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.BlendShapeDeformer?)(new gfl.anm2.fb.BlendShapeDeformer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeformersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.BlendShapeAnimationData> CreateBlendShapeAnimationData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      Offset<gfl.anm2.fb.EditorBlendShapeAnimationData> editorBlendShapeAnimationDataOffset = default(Offset<gfl.anm2.fb.EditorBlendShapeAnimationData>),
      VectorOffset paramsOffset = default(VectorOffset),
      Offset<gfl.anm2.fb.MayaBlendShapeAnimationData> mayaBlendShapeAnimationDataOffset = default(Offset<gfl.anm2.fb.MayaBlendShapeAnimationData>),
      VectorOffset deformersOffset = default(VectorOffset)) {
    builder.StartTable(5);
    BlendShapeAnimationData.AddDeformers(builder, deformersOffset);
    BlendShapeAnimationData.AddMayaBlendShapeAnimationData(builder, mayaBlendShapeAnimationDataOffset);
    BlendShapeAnimationData.AddParams(builder, paramsOffset);
    BlendShapeAnimationData.AddEditorBlendShapeAnimationData(builder, editorBlendShapeAnimationDataOffset);
    BlendShapeAnimationData.AddFrameSetting(builder, frameSettingOffset);
    return BlendShapeAnimationData.EndBlendShapeAnimationData(builder);
  }

  public static void StartBlendShapeAnimationData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddEditorBlendShapeAnimationData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorBlendShapeAnimationData> editorBlendShapeAnimationDataOffset) { builder.AddOffset(1, editorBlendShapeAnimationDataOffset.Value, 0); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(2, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMayaBlendShapeAnimationData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MayaBlendShapeAnimationData> mayaBlendShapeAnimationDataOffset) { builder.AddOffset(3, mayaBlendShapeAnimationDataOffset.Value, 0); }
  public static void AddDeformers(FlatBufferBuilder builder, VectorOffset deformersOffset) { builder.AddOffset(4, deformersOffset.Value, 0); }
  public static VectorOffset CreateDeformersVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeDeformer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeformersVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeDeformer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeformersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.BlendShapeAnimationData> EndBlendShapeAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendShapeAnimationData>(o);
  }
  public static void FinishBlendShapeAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeAnimationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBlendShapeAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeAnimationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public BlendShapeAnimationDataT UnPack() {
    var _o = new BlendShapeAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendShapeAnimationDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.EditorBlendShapeAnimationData = this.EditorBlendShapeAnimationData.HasValue ? this.EditorBlendShapeAnimationData.Value.UnPack() : null;
    _o.Params = new List<gfl.anm2.fb.BlendShapeParamT>();
    for (var _j = 0; _j < this.ParamsLength; ++_j) {_o.Params.Add(this.Params(_j).HasValue ? this.Params(_j).Value.UnPack() : null);}
    _o.MayaBlendShapeAnimationData = this.MayaBlendShapeAnimationData.HasValue ? this.MayaBlendShapeAnimationData.Value.UnPack() : null;
    _o.Deformers = new List<gfl.anm2.fb.BlendShapeDeformerT>();
    for (var _j = 0; _j < this.DeformersLength; ++_j) {_o.Deformers.Add(this.Deformers(_j).HasValue ? this.Deformers(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.BlendShapeAnimationData> Pack(FlatBufferBuilder builder, BlendShapeAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendShapeAnimationData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _editorBlendShapeAnimationData = _o.EditorBlendShapeAnimationData == null ? default(Offset<gfl.anm2.fb.EditorBlendShapeAnimationData>) : gfl.anm2.fb.EditorBlendShapeAnimationData.Pack(builder, _o.EditorBlendShapeAnimationData);
    var _params = default(VectorOffset);
    if (_o.Params != null) {
      var __params = new Offset<gfl.anm2.fb.BlendShapeParam>[_o.Params.Count];
      for (var _j = 0; _j < __params.Length; ++_j) { __params[_j] = gfl.anm2.fb.BlendShapeParam.Pack(builder, _o.Params[_j]); }
      _params = CreateParamsVector(builder, __params);
    }
    var _mayaBlendShapeAnimationData = _o.MayaBlendShapeAnimationData == null ? default(Offset<gfl.anm2.fb.MayaBlendShapeAnimationData>) : gfl.anm2.fb.MayaBlendShapeAnimationData.Pack(builder, _o.MayaBlendShapeAnimationData);
    var _deformers = default(VectorOffset);
    if (_o.Deformers != null) {
      var __deformers = new Offset<gfl.anm2.fb.BlendShapeDeformer>[_o.Deformers.Count];
      for (var _j = 0; _j < __deformers.Length; ++_j) { __deformers[_j] = gfl.anm2.fb.BlendShapeDeformer.Pack(builder, _o.Deformers[_j]); }
      _deformers = CreateDeformersVector(builder, __deformers);
    }
    return CreateBlendShapeAnimationData(
      builder,
      _frameSetting,
      _editorBlendShapeAnimationData,
      _params,
      _mayaBlendShapeAnimationData,
      _deformers);
  }
};

public class BlendShapeAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("editorBlendShapeAnimationData")]
  public gfl.anm2.fb.EditorBlendShapeAnimationDataT EditorBlendShapeAnimationData { get; set; }
  [Newtonsoft.Json.JsonProperty("params")]
  public List<gfl.anm2.fb.BlendShapeParamT> Params { get; set; }
  [Newtonsoft.Json.JsonProperty("mayaBlendShapeAnimationData")]
  public gfl.anm2.fb.MayaBlendShapeAnimationDataT MayaBlendShapeAnimationData { get; set; }
  [Newtonsoft.Json.JsonProperty("deformers")]
  public List<gfl.anm2.fb.BlendShapeDeformerT> Deformers { get; set; }

  public BlendShapeAnimationDataT() {
    this.FrameSetting = null;
    this.EditorBlendShapeAnimationData = null;
    this.Params = null;
    this.MayaBlendShapeAnimationData = null;
    this.Deformers = null;
  }

  public static BlendShapeAnimationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<BlendShapeAnimationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static BlendShapeAnimationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return BlendShapeAnimationData.GetRootAsBlendShapeAnimationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BlendShapeAnimationData.FinishBlendShapeAnimationDataBuffer(fbb, BlendShapeAnimationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
