// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EditorVisibilityParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorVisibilityParam GetRootAsEditorVisibilityParam(ByteBuffer _bb) { return GetRootAsEditorVisibilityParam(_bb, new EditorVisibilityParam()); }
  public static EditorVisibilityParam GetRootAsEditorVisibilityParam(ByteBuffer _bb, EditorVisibilityParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorVisibilityParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TrcrvPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrcrvPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTrcrvPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTrcrvPathArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.CurveData? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.CurveData?)(new gfl.anm2.fb.CurveData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.EditorVisibilityParam> CreateEditorVisibilityParam(FlatBufferBuilder builder,
      StringOffset trcrvPathOffset = default(StringOffset),
      Offset<gfl.anm2.fb.CurveData> curveDataOffset = default(Offset<gfl.anm2.fb.CurveData>)) {
    builder.StartTable(2);
    EditorVisibilityParam.AddCurveData(builder, curveDataOffset);
    EditorVisibilityParam.AddTrcrvPath(builder, trcrvPathOffset);
    return EditorVisibilityParam.EndEditorVisibilityParam(builder);
  }

  public static void StartEditorVisibilityParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTrcrvPath(FlatBufferBuilder builder, StringOffset trcrvPathOffset) { builder.AddOffset(0, trcrvPathOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveData> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EditorVisibilityParam> EndEditorVisibilityParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorVisibilityParam>(o);
  }
  public EditorVisibilityParamT UnPack() {
    var _o = new EditorVisibilityParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorVisibilityParamT _o) {
    _o.TrcrvPath = this.TrcrvPath;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.EditorVisibilityParam> Pack(FlatBufferBuilder builder, EditorVisibilityParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorVisibilityParam>);
    var _trcrvPath = _o.TrcrvPath == null ? default(StringOffset) : builder.CreateString(_o.TrcrvPath);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.CurveData>) : gfl.anm2.fb.CurveData.Pack(builder, _o.CurveData);
    return CreateEditorVisibilityParam(
      builder,
      _trcrvPath,
      _curveData);
  }
};

public class EditorVisibilityParamT
{
  [Newtonsoft.Json.JsonProperty("trcrvPath")]
  public string TrcrvPath { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.CurveDataT CurveData { get; set; }

  public EditorVisibilityParamT() {
    this.TrcrvPath = null;
    this.CurveData = null;
  }
}

public struct VisibilityParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VisibilityParam GetRootAsVisibilityParam(ByteBuffer _bb) { return GetRootAsVisibilityParam(_bb, new VisibilityParam()); }
  public static VisibilityParam GetRootAsVisibilityParam(ByteBuffer _bb, VisibilityParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VisibilityParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.KeyData_Bool ParamsType { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.KeyData_Bool)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Bool.NONE; } }
  public TTable? Params<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.VisibilityParam> CreateVisibilityParam(FlatBufferBuilder builder,
      gfl.anm2.fb.KeyData_Bool params_type = gfl.anm2.fb.KeyData_Bool.NONE,
      int paramsOffset = 0) {
    builder.StartTable(2);
    VisibilityParam.AddParams(builder, paramsOffset);
    VisibilityParam.AddParamsType(builder, params_type);
    return VisibilityParam.EndVisibilityParam(builder);
  }

  public static void StartVisibilityParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParamsType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Bool paramsType) { builder.AddByte(0, (byte)paramsType, 0); }
  public static void AddParams(FlatBufferBuilder builder, int paramsOffset) { builder.AddOffset(1, paramsOffset, 0); }
  public static Offset<gfl.anm2.fb.VisibilityParam> EndVisibilityParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.VisibilityParam>(o);
  }
  public VisibilityParamT UnPack() {
    var _o = new VisibilityParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisibilityParamT _o) {
    _o.Params = new gfl.anm2.fb.KeyData_BoolUnion();
    _o.Params.Type = this.ParamsType;
    switch (this.ParamsType) {
      default: break;
      case gfl.anm2.fb.KeyData_Bool.OneFrame_Bool:
        _o.Params.Value = this.Params<gfl.anm2.fb.OneFrame_Bool>().HasValue ? this.Params<gfl.anm2.fb.OneFrame_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.AllFrame_Bool:
        _o.Params.Value = this.Params<gfl.anm2.fb.AllFrame_Bool>().HasValue ? this.Params<gfl.anm2.fb.AllFrame_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.Step_Bool_u16:
        _o.Params.Value = this.Params<gfl.anm2.fb.Step_Bool_u16>().HasValue ? this.Params<gfl.anm2.fb.Step_Bool_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Bool.Step_Bool_u8:
        _o.Params.Value = this.Params<gfl.anm2.fb.Step_Bool_u8>().HasValue ? this.Params<gfl.anm2.fb.Step_Bool_u8>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.VisibilityParam> Pack(FlatBufferBuilder builder, VisibilityParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.VisibilityParam>);
    var _params_type = _o.Params == null ? gfl.anm2.fb.KeyData_Bool.NONE : _o.Params.Type;
    var _params = _o.Params == null ? 0 : gfl.anm2.fb.KeyData_BoolUnion.Pack(builder, _o.Params);
    return CreateVisibilityParam(
      builder,
      _params_type,
      _params);
  }
};

public class VisibilityParamT
{
  [Newtonsoft.Json.JsonProperty("params_type")]
  private gfl.anm2.fb.KeyData_Bool ParamsType {
    get {
      return this.Params != null ? this.Params.Type : gfl.anm2.fb.KeyData_Bool.NONE;
    }
    set {
      this.Params = new gfl.anm2.fb.KeyData_BoolUnion();
      this.Params.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("params")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_BoolUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_BoolUnion Params { get; set; }

  public VisibilityParamT() {
    this.Params = null;
  }
}

public struct VisibilityMeshAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VisibilityMeshAnimationData GetRootAsVisibilityMeshAnimationData(ByteBuffer _bb) { return GetRootAsVisibilityMeshAnimationData(_bb, new VisibilityMeshAnimationData()); }
  public static VisibilityMeshAnimationData GetRootAsVisibilityMeshAnimationData(ByteBuffer _bb, VisibilityMeshAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VisibilityMeshAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorVisibilityParam? EditorVisibilityParam { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EditorVisibilityParam?)(new gfl.anm2.fb.EditorVisibilityParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.VisibilityParam? VisibilityParam { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.VisibilityParam?)(new gfl.anm2.fb.VisibilityParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.VisibilityMeshAnimationData> CreateVisibilityMeshAnimationData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      Offset<gfl.anm2.fb.EditorVisibilityParam> editorVisibilityParamOffset = default(Offset<gfl.anm2.fb.EditorVisibilityParam>),
      Offset<gfl.anm2.fb.VisibilityParam> visibilityParamOffset = default(Offset<gfl.anm2.fb.VisibilityParam>)) {
    builder.StartTable(3);
    VisibilityMeshAnimationData.AddVisibilityParam(builder, visibilityParamOffset);
    VisibilityMeshAnimationData.AddEditorVisibilityParam(builder, editorVisibilityParamOffset);
    VisibilityMeshAnimationData.AddFrameSetting(builder, frameSettingOffset);
    return VisibilityMeshAnimationData.EndVisibilityMeshAnimationData(builder);
  }

  public static void StartVisibilityMeshAnimationData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddEditorVisibilityParam(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorVisibilityParam> editorVisibilityParamOffset) { builder.AddOffset(1, editorVisibilityParamOffset.Value, 0); }
  public static void AddVisibilityParam(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityParam> visibilityParamOffset) { builder.AddOffset(2, visibilityParamOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.VisibilityMeshAnimationData> EndVisibilityMeshAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.VisibilityMeshAnimationData>(o);
  }
  public static void FinishVisibilityMeshAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityMeshAnimationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedVisibilityMeshAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityMeshAnimationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public VisibilityMeshAnimationDataT UnPack() {
    var _o = new VisibilityMeshAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisibilityMeshAnimationDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.EditorVisibilityParam = this.EditorVisibilityParam.HasValue ? this.EditorVisibilityParam.Value.UnPack() : null;
    _o.VisibilityParam = this.VisibilityParam.HasValue ? this.VisibilityParam.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.VisibilityMeshAnimationData> Pack(FlatBufferBuilder builder, VisibilityMeshAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.VisibilityMeshAnimationData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _editorVisibilityParam = _o.EditorVisibilityParam == null ? default(Offset<gfl.anm2.fb.EditorVisibilityParam>) : gfl.anm2.fb.EditorVisibilityParam.Pack(builder, _o.EditorVisibilityParam);
    var _visibilityParam = _o.VisibilityParam == null ? default(Offset<gfl.anm2.fb.VisibilityParam>) : gfl.anm2.fb.VisibilityParam.Pack(builder, _o.VisibilityParam);
    return CreateVisibilityMeshAnimationData(
      builder,
      _frameSetting,
      _editorVisibilityParam,
      _visibilityParam);
  }
};

public class VisibilityMeshAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("editorVisibilityParam")]
  public gfl.anm2.fb.EditorVisibilityParamT EditorVisibilityParam { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityParam")]
  public gfl.anm2.fb.VisibilityParamT VisibilityParam { get; set; }

  public VisibilityMeshAnimationDataT() {
    this.FrameSetting = null;
    this.EditorVisibilityParam = null;
    this.VisibilityParam = null;
  }

  public static VisibilityMeshAnimationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<VisibilityMeshAnimationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static VisibilityMeshAnimationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return VisibilityMeshAnimationData.GetRootAsVisibilityMeshAnimationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    VisibilityMeshAnimationData.FinishVisibilityMeshAnimationDataBuffer(fbb, VisibilityMeshAnimationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
