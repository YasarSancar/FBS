// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum StateType : uint
{
  Normal = 0,
  Entry = 1,
  Exit = 2,
  Any = 3,
  Top = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ConditionFunc : uint
{
  Less = 0,
  LEqual = 1,
  Greater = 2,
  GEqual = 3,
  Equal = 4,
  NotEqual = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LogicalOperator : uint
{
  And = 0,
  Or = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum DurationMode : uint
{
  NormalizedFrame = 0,
  Second = 1,
  SubStateRate = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum OffsetMode : uint
{
  NormalizedFrame = 0,
  Sync = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ConditionValue : byte
{
  NONE = 0,
  ConditionValue_Int = 1,
  ConditionValue_Float = 2,
  ConditionValue_Bool = 3,
  ConditionValue_Trigger = 4,
};

public class ConditionValueUnion {
  public ConditionValue Type { get; set; }
  public object Value { get; set; }

  public ConditionValueUnion() {
    this.Type = ConditionValue.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.ConditionValue_IntT AsConditionValue_Int() { return this.As<gfl.anm2.fb.ConditionValue_IntT>(); }
  public gfl.anm2.fb.ConditionValue_FloatT AsConditionValue_Float() { return this.As<gfl.anm2.fb.ConditionValue_FloatT>(); }
  public gfl.anm2.fb.ConditionValue_BoolT AsConditionValue_Bool() { return this.As<gfl.anm2.fb.ConditionValue_BoolT>(); }
  public gfl.anm2.fb.ConditionValue_TriggerT AsConditionValue_Trigger() { return this.As<gfl.anm2.fb.ConditionValue_TriggerT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ConditionValueUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ConditionValue.ConditionValue_Int: return gfl.anm2.fb.ConditionValue_Int.Pack(builder, _o.AsConditionValue_Int()).Value;
      case ConditionValue.ConditionValue_Float: return gfl.anm2.fb.ConditionValue_Float.Pack(builder, _o.AsConditionValue_Float()).Value;
      case ConditionValue.ConditionValue_Bool: return gfl.anm2.fb.ConditionValue_Bool.Pack(builder, _o.AsConditionValue_Bool()).Value;
      case ConditionValue.ConditionValue_Trigger: return gfl.anm2.fb.ConditionValue_Trigger.Pack(builder, _o.AsConditionValue_Trigger()).Value;
    }
  }
}

public class ConditionValueUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ConditionValueUnion) || objectType == typeof(System.Collections.Generic.List<ConditionValueUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ConditionValueUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ConditionValueUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ConditionValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ConditionValueUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ConditionValueUnion, serializer);
    }
  }
  public ConditionValueUnion ReadJson(Newtonsoft.Json.JsonReader reader, ConditionValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ConditionValue.ConditionValue_Int: _o.Value = serializer.Deserialize<gfl.anm2.fb.ConditionValue_IntT>(reader); break;
      case ConditionValue.ConditionValue_Float: _o.Value = serializer.Deserialize<gfl.anm2.fb.ConditionValue_FloatT>(reader); break;
      case ConditionValue.ConditionValue_Bool: _o.Value = serializer.Deserialize<gfl.anm2.fb.ConditionValue_BoolT>(reader); break;
      case ConditionValue.ConditionValue_Trigger: _o.Value = serializer.Deserialize<gfl.anm2.fb.ConditionValue_TriggerT>(reader); break;
    }
    return _o;
  }
}

public struct ConditionValue_Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Int GetRootAsConditionValue_Int(ByteBuffer _bb) { return GetRootAsConditionValue_Int(_bb, new ConditionValue_Int()); }
  public static ConditionValue_Int GetRootAsConditionValue_Int(ByteBuffer _bb, ConditionValue_Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fb.ConditionValue_Int> CreateConditionValue_Int(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    ConditionValue_Int.AddValue(builder, value);
    return ConditionValue_Int.EndConditionValue_Int(builder);
  }

  public static void StartConditionValue_Int(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<gfl.anm2.fb.ConditionValue_Int> EndConditionValue_Int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ConditionValue_Int>(o);
  }
  public ConditionValue_IntT UnPack() {
    var _o = new ConditionValue_IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_IntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.ConditionValue_Int> Pack(FlatBufferBuilder builder, ConditionValue_IntT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ConditionValue_Int>);
    return CreateConditionValue_Int(
      builder,
      _o.Value);
  }
};

public class ConditionValue_IntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public ConditionValue_IntT() {
    this.Value = 0;
  }
}

public struct ConditionValue_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Float GetRootAsConditionValue_Float(ByteBuffer _bb) { return GetRootAsConditionValue_Float(_bb, new ConditionValue_Float()); }
  public static ConditionValue_Float GetRootAsConditionValue_Float(ByteBuffer _bb, ConditionValue_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.ConditionValue_Float> CreateConditionValue_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    ConditionValue_Float.AddValue(builder, value);
    return ConditionValue_Float.EndConditionValue_Float(builder);
  }

  public static void StartConditionValue_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<gfl.anm2.fb.ConditionValue_Float> EndConditionValue_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ConditionValue_Float>(o);
  }
  public ConditionValue_FloatT UnPack() {
    var _o = new ConditionValue_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.ConditionValue_Float> Pack(FlatBufferBuilder builder, ConditionValue_FloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ConditionValue_Float>);
    return CreateConditionValue_Float(
      builder,
      _o.Value);
  }
};

public class ConditionValue_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public ConditionValue_FloatT() {
    this.Value = 0.0f;
  }
}

public struct ConditionValue_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Bool GetRootAsConditionValue_Bool(ByteBuffer _bb) { return GetRootAsConditionValue_Bool(_bb, new ConditionValue_Bool()); }
  public static ConditionValue_Bool GetRootAsConditionValue_Bool(ByteBuffer _bb, ConditionValue_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.ConditionValue_Bool> CreateConditionValue_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    ConditionValue_Bool.AddValue(builder, value);
    return ConditionValue_Bool.EndConditionValue_Bool(builder);
  }

  public static void StartConditionValue_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fb.ConditionValue_Bool> EndConditionValue_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ConditionValue_Bool>(o);
  }
  public ConditionValue_BoolT UnPack() {
    var _o = new ConditionValue_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.ConditionValue_Bool> Pack(FlatBufferBuilder builder, ConditionValue_BoolT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ConditionValue_Bool>);
    return CreateConditionValue_Bool(
      builder,
      _o.Value);
  }
};

public class ConditionValue_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public ConditionValue_BoolT() {
    this.Value = false;
  }
}

public struct ConditionValue_Trigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Trigger GetRootAsConditionValue_Trigger(ByteBuffer _bb) { return GetRootAsConditionValue_Trigger(_bb, new ConditionValue_Trigger()); }
  public static ConditionValue_Trigger GetRootAsConditionValue_Trigger(ByteBuffer _bb, ConditionValue_Trigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Trigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.ConditionValue_Trigger> CreateConditionValue_Trigger(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    ConditionValue_Trigger.AddValue(builder, value);
    return ConditionValue_Trigger.EndConditionValue_Trigger(builder);
  }

  public static void StartConditionValue_Trigger(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fb.ConditionValue_Trigger> EndConditionValue_Trigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ConditionValue_Trigger>(o);
  }
  public ConditionValue_TriggerT UnPack() {
    var _o = new ConditionValue_TriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_TriggerT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.ConditionValue_Trigger> Pack(FlatBufferBuilder builder, ConditionValue_TriggerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ConditionValue_Trigger>);
    return CreateConditionValue_Trigger(
      builder,
      _o.Value);
  }
};

public class ConditionValue_TriggerT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public ConditionValue_TriggerT() {
    this.Value = false;
  }
}

public struct Condition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Condition GetRootAsCondition(ByteBuffer _bb) { return GetRootAsCondition(_bb, new Condition()); }
  public static Condition GetRootAsCondition(ByteBuffer _bb, Condition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Condition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ParameterName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.ConditionFunc Func { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.ConditionFunc)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.ConditionFunc.Less; } }
  public gfl.anm2.fb.ConditionValue ValueType { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.ConditionValue)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.ConditionValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.LogicalOperator LogicalOperator { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.LogicalOperator)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.LogicalOperator.And; } }

  public static Offset<gfl.anm2.fb.Condition> CreateCondition(FlatBufferBuilder builder,
      StringOffset parameterNameOffset = default(StringOffset),
      gfl.anm2.fb.ConditionFunc func = gfl.anm2.fb.ConditionFunc.Less,
      gfl.anm2.fb.ConditionValue value_type = gfl.anm2.fb.ConditionValue.NONE,
      int valueOffset = 0,
      gfl.anm2.fb.LogicalOperator logicalOperator = gfl.anm2.fb.LogicalOperator.And) {
    builder.StartTable(5);
    Condition.AddLogicalOperator(builder, logicalOperator);
    Condition.AddValue(builder, valueOffset);
    Condition.AddFunc(builder, func);
    Condition.AddParameterName(builder, parameterNameOffset);
    Condition.AddValueType(builder, value_type);
    return Condition.EndCondition(builder);
  }

  public static void StartCondition(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(0, parameterNameOffset.Value, 0); }
  public static void AddFunc(FlatBufferBuilder builder, gfl.anm2.fb.ConditionFunc func) { builder.AddUint(1, (uint)func, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.anm2.fb.ConditionValue valueType) { builder.AddByte(2, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(3, valueOffset, 0); }
  public static void AddLogicalOperator(FlatBufferBuilder builder, gfl.anm2.fb.LogicalOperator logicalOperator) { builder.AddUint(4, (uint)logicalOperator, 0); }
  public static Offset<gfl.anm2.fb.Condition> EndCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Condition>(o);
  }
  public ConditionT UnPack() {
    var _o = new ConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionT _o) {
    _o.ParameterName = this.ParameterName;
    _o.Func = this.Func;
    _o.Value = new gfl.anm2.fb.ConditionValueUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.anm2.fb.ConditionValue.ConditionValue_Int:
        _o.Value.Value = this.Value<gfl.anm2.fb.ConditionValue_Int>().HasValue ? this.Value<gfl.anm2.fb.ConditionValue_Int>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ConditionValue.ConditionValue_Float:
        _o.Value.Value = this.Value<gfl.anm2.fb.ConditionValue_Float>().HasValue ? this.Value<gfl.anm2.fb.ConditionValue_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ConditionValue.ConditionValue_Bool:
        _o.Value.Value = this.Value<gfl.anm2.fb.ConditionValue_Bool>().HasValue ? this.Value<gfl.anm2.fb.ConditionValue_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.ConditionValue.ConditionValue_Trigger:
        _o.Value.Value = this.Value<gfl.anm2.fb.ConditionValue_Trigger>().HasValue ? this.Value<gfl.anm2.fb.ConditionValue_Trigger>().Value.UnPack() : null;
        break;
    }
    _o.LogicalOperator = this.LogicalOperator;
  }
  public static Offset<gfl.anm2.fb.Condition> Pack(FlatBufferBuilder builder, ConditionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Condition>);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    var _value_type = _o.Value == null ? gfl.anm2.fb.ConditionValue.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.anm2.fb.ConditionValueUnion.Pack(builder, _o.Value);
    return CreateCondition(
      builder,
      _parameterName,
      _o.Func,
      _value_type,
      _value,
      _o.LogicalOperator);
  }
};

public class ConditionT
{
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("func")]
  public gfl.anm2.fb.ConditionFunc Func { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.anm2.fb.ConditionValue ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.anm2.fb.ConditionValue.NONE;
    }
    set {
      this.Value = new gfl.anm2.fb.ConditionValueUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.ConditionValueUnion_JsonConverter))]
  public gfl.anm2.fb.ConditionValueUnion Value { get; set; }
  [Newtonsoft.Json.JsonProperty("logicalOperator")]
  public gfl.anm2.fb.LogicalOperator LogicalOperator { get; set; }

  public ConditionT() {
    this.ParameterName = null;
    this.Func = gfl.anm2.fb.ConditionFunc.Less;
    this.Value = null;
    this.LogicalOperator = gfl.anm2.fb.LogicalOperator.And;
  }
}

public struct Transition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Transition GetRootAsTransition(ByteBuffer _bb) { return GetRootAsTransition(_bb, new Transition()); }
  public static Transition GetRootAsTransition(ByteBuffer _bb, Transition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StateName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStateNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStateNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool HasExitTime { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ExitTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Duration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Offset { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool CanInterruption { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.anm2.fb.Condition? Conditions(int j) { int o = __p.__offset(16); return o != 0 ? (gfl.anm2.fb.Condition?)(new gfl.anm2.fb.Condition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.DurationMode DurationMode { get { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fb.DurationMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.DurationMode.NormalizedFrame; } }
  public gfl.anm2.fb.OffsetMode OffsetMode { get { int o = __p.__offset(20); return o != 0 ? (gfl.anm2.fb.OffsetMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.OffsetMode.NormalizedFrame; } }
  public bool CanSelfTransition { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ExitTimeParameterName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExitTimeParameterNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetExitTimeParameterNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetExitTimeParameterNameArray() { return __p.__vector_as_array<byte>(24); }
  public string DurationParameterName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDurationParameterNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDurationParameterNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDurationParameterNameArray() { return __p.__vector_as_array<byte>(26); }
  public string OffsetParameterName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetParameterNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOffsetParameterNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOffsetParameterNameArray() { return __p.__vector_as_array<byte>(28); }
  public int Priority { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.anm2.fb.LogicalOperator LogicalOperator { get { int o = __p.__offset(32); return o != 0 ? (gfl.anm2.fb.LogicalOperator)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.LogicalOperator.And; } }

  public static Offset<gfl.anm2.fb.Transition> CreateTransition(FlatBufferBuilder builder,
      StringOffset stateNameOffset = default(StringOffset),
      bool hasExitTime = false,
      float exitTime = 0.0f,
      float duration = 0.0f,
      float offset = 0.0f,
      bool canInterruption = false,
      VectorOffset conditionsOffset = default(VectorOffset),
      gfl.anm2.fb.DurationMode durationMode = gfl.anm2.fb.DurationMode.NormalizedFrame,
      gfl.anm2.fb.OffsetMode offsetMode = gfl.anm2.fb.OffsetMode.NormalizedFrame,
      bool canSelfTransition = false,
      StringOffset exitTimeParameterNameOffset = default(StringOffset),
      StringOffset durationParameterNameOffset = default(StringOffset),
      StringOffset offsetParameterNameOffset = default(StringOffset),
      int priority = 0,
      gfl.anm2.fb.LogicalOperator logicalOperator = gfl.anm2.fb.LogicalOperator.And) {
    builder.StartTable(15);
    Transition.AddLogicalOperator(builder, logicalOperator);
    Transition.AddPriority(builder, priority);
    Transition.AddOffsetParameterName(builder, offsetParameterNameOffset);
    Transition.AddDurationParameterName(builder, durationParameterNameOffset);
    Transition.AddExitTimeParameterName(builder, exitTimeParameterNameOffset);
    Transition.AddOffsetMode(builder, offsetMode);
    Transition.AddDurationMode(builder, durationMode);
    Transition.AddConditions(builder, conditionsOffset);
    Transition.AddOffset(builder, offset);
    Transition.AddDuration(builder, duration);
    Transition.AddExitTime(builder, exitTime);
    Transition.AddStateName(builder, stateNameOffset);
    Transition.AddCanSelfTransition(builder, canSelfTransition);
    Transition.AddCanInterruption(builder, canInterruption);
    Transition.AddHasExitTime(builder, hasExitTime);
    return Transition.EndTransition(builder);
  }

  public static void StartTransition(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddStateName(FlatBufferBuilder builder, StringOffset stateNameOffset) { builder.AddOffset(0, stateNameOffset.Value, 0); }
  public static void AddHasExitTime(FlatBufferBuilder builder, bool hasExitTime) { builder.AddBool(1, hasExitTime, false); }
  public static void AddExitTime(FlatBufferBuilder builder, float exitTime) { builder.AddFloat(2, exitTime, 0.0f); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(3, duration, 0.0f); }
  public static void AddOffset(FlatBufferBuilder builder, float offset) { builder.AddFloat(4, offset, 0.0f); }
  public static void AddCanInterruption(FlatBufferBuilder builder, bool canInterruption) { builder.AddBool(5, canInterruption, false); }
  public static void AddConditions(FlatBufferBuilder builder, VectorOffset conditionsOffset) { builder.AddOffset(6, conditionsOffset.Value, 0); }
  public static VectorOffset CreateConditionsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Condition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Condition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDurationMode(FlatBufferBuilder builder, gfl.anm2.fb.DurationMode durationMode) { builder.AddUint(7, (uint)durationMode, 0); }
  public static void AddOffsetMode(FlatBufferBuilder builder, gfl.anm2.fb.OffsetMode offsetMode) { builder.AddUint(8, (uint)offsetMode, 0); }
  public static void AddCanSelfTransition(FlatBufferBuilder builder, bool canSelfTransition) { builder.AddBool(9, canSelfTransition, false); }
  public static void AddExitTimeParameterName(FlatBufferBuilder builder, StringOffset exitTimeParameterNameOffset) { builder.AddOffset(10, exitTimeParameterNameOffset.Value, 0); }
  public static void AddDurationParameterName(FlatBufferBuilder builder, StringOffset durationParameterNameOffset) { builder.AddOffset(11, durationParameterNameOffset.Value, 0); }
  public static void AddOffsetParameterName(FlatBufferBuilder builder, StringOffset offsetParameterNameOffset) { builder.AddOffset(12, offsetParameterNameOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(13, priority, 0); }
  public static void AddLogicalOperator(FlatBufferBuilder builder, gfl.anm2.fb.LogicalOperator logicalOperator) { builder.AddUint(14, (uint)logicalOperator, 0); }
  public static Offset<gfl.anm2.fb.Transition> EndTransition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Transition>(o);
  }
  public TransitionT UnPack() {
    var _o = new TransitionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TransitionT _o) {
    _o.StateName = this.StateName;
    _o.HasExitTime = this.HasExitTime;
    _o.ExitTime = this.ExitTime;
    _o.Duration = this.Duration;
    _o.Offset = this.Offset;
    _o.CanInterruption = this.CanInterruption;
    _o.Conditions = new List<gfl.anm2.fb.ConditionT>();
    for (var _j = 0; _j < this.ConditionsLength; ++_j) {_o.Conditions.Add(this.Conditions(_j).HasValue ? this.Conditions(_j).Value.UnPack() : null);}
    _o.DurationMode = this.DurationMode;
    _o.OffsetMode = this.OffsetMode;
    _o.CanSelfTransition = this.CanSelfTransition;
    _o.ExitTimeParameterName = this.ExitTimeParameterName;
    _o.DurationParameterName = this.DurationParameterName;
    _o.OffsetParameterName = this.OffsetParameterName;
    _o.Priority = this.Priority;
    _o.LogicalOperator = this.LogicalOperator;
  }
  public static Offset<gfl.anm2.fb.Transition> Pack(FlatBufferBuilder builder, TransitionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Transition>);
    var _stateName = _o.StateName == null ? default(StringOffset) : builder.CreateString(_o.StateName);
    var _conditions = default(VectorOffset);
    if (_o.Conditions != null) {
      var __conditions = new Offset<gfl.anm2.fb.Condition>[_o.Conditions.Count];
      for (var _j = 0; _j < __conditions.Length; ++_j) { __conditions[_j] = gfl.anm2.fb.Condition.Pack(builder, _o.Conditions[_j]); }
      _conditions = CreateConditionsVector(builder, __conditions);
    }
    var _exitTimeParameterName = _o.ExitTimeParameterName == null ? default(StringOffset) : builder.CreateString(_o.ExitTimeParameterName);
    var _durationParameterName = _o.DurationParameterName == null ? default(StringOffset) : builder.CreateString(_o.DurationParameterName);
    var _offsetParameterName = _o.OffsetParameterName == null ? default(StringOffset) : builder.CreateString(_o.OffsetParameterName);
    return CreateTransition(
      builder,
      _stateName,
      _o.HasExitTime,
      _o.ExitTime,
      _o.Duration,
      _o.Offset,
      _o.CanInterruption,
      _conditions,
      _o.DurationMode,
      _o.OffsetMode,
      _o.CanSelfTransition,
      _exitTimeParameterName,
      _durationParameterName,
      _offsetParameterName,
      _o.Priority,
      _o.LogicalOperator);
  }
};

public class TransitionT
{
  [Newtonsoft.Json.JsonProperty("stateName")]
  public string StateName { get; set; }
  [Newtonsoft.Json.JsonProperty("hasExitTime")]
  public bool HasExitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("exitTime")]
  public float ExitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public float Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("offset")]
  public float Offset { get; set; }
  [Newtonsoft.Json.JsonProperty("canInterruption")]
  public bool CanInterruption { get; set; }
  [Newtonsoft.Json.JsonProperty("conditions")]
  public List<gfl.anm2.fb.ConditionT> Conditions { get; set; }
  [Newtonsoft.Json.JsonProperty("durationMode")]
  public gfl.anm2.fb.DurationMode DurationMode { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetMode")]
  public gfl.anm2.fb.OffsetMode OffsetMode { get; set; }
  [Newtonsoft.Json.JsonProperty("canSelfTransition")]
  public bool CanSelfTransition { get; set; }
  [Newtonsoft.Json.JsonProperty("exitTimeParameterName")]
  public string ExitTimeParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("durationParameterName")]
  public string DurationParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetParameterName")]
  public string OffsetParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("logicalOperator")]
  public gfl.anm2.fb.LogicalOperator LogicalOperator { get; set; }

  public TransitionT() {
    this.StateName = null;
    this.HasExitTime = false;
    this.ExitTime = 0.0f;
    this.Duration = 0.0f;
    this.Offset = 0.0f;
    this.CanInterruption = false;
    this.Conditions = null;
    this.DurationMode = gfl.anm2.fb.DurationMode.NormalizedFrame;
    this.OffsetMode = gfl.anm2.fb.OffsetMode.NormalizedFrame;
    this.CanSelfTransition = false;
    this.ExitTimeParameterName = null;
    this.DurationParameterName = null;
    this.OffsetParameterName = null;
    this.Priority = 0;
    this.LogicalOperator = gfl.anm2.fb.LogicalOperator.And;
  }
}

public struct Source : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Source GetRootAsSource(ByteBuffer _bb) { return GetRootAsSource(_bb, new Source()); }
  public static Source GetRootAsSource(ByteBuffer _bb, Source obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Source __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.ResourceLabel? ResourceLabel { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.ResourceLabel?)(new gfl.anm2.fb.ResourceLabel()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float Speed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SpeedParameterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpeedParameterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSpeedParameterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSpeedParameterNameArray() { return __p.__vector_as_array<byte>(8); }
  public float PhysicsWeight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string PhysicsWeightParameterName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhysicsWeightParameterNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPhysicsWeightParameterNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPhysicsWeightParameterNameArray() { return __p.__vector_as_array<byte>(12); }
  public float WindWeight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string WindWeightParameterName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindWeightParameterNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetWindWeightParameterNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetWindWeightParameterNameArray() { return __p.__vector_as_array<byte>(16); }
  public float WindNoiseWeight { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string WindNoiseWeightParameterName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindNoiseWeightParameterNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetWindNoiseWeightParameterNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetWindNoiseWeightParameterNameArray() { return __p.__vector_as_array<byte>(20); }
  public gfl.anm2.fb.FloatOrParameter? AdditionalParameterList(int j) { int o = __p.__offset(22); return o != 0 ? (gfl.anm2.fb.FloatOrParameter?)(new gfl.anm2.fb.FloatOrParameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AdditionalParameterListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AdditionalParameterNameList(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AdditionalParameterNameListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.Source> CreateSource(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset = default(Offset<gfl.anm2.fb.ResourceLabel>),
      float speed = 0.0f,
      StringOffset speedParameterNameOffset = default(StringOffset),
      float physicsWeight = 0.0f,
      StringOffset physicsWeightParameterNameOffset = default(StringOffset),
      float windWeight = 0.0f,
      StringOffset windWeightParameterNameOffset = default(StringOffset),
      float windNoiseWeight = 0.0f,
      StringOffset windNoiseWeightParameterNameOffset = default(StringOffset),
      VectorOffset additionalParameterListOffset = default(VectorOffset),
      VectorOffset additionalParameterNameListOffset = default(VectorOffset)) {
    builder.StartTable(11);
    Source.AddAdditionalParameterNameList(builder, additionalParameterNameListOffset);
    Source.AddAdditionalParameterList(builder, additionalParameterListOffset);
    Source.AddWindNoiseWeightParameterName(builder, windNoiseWeightParameterNameOffset);
    Source.AddWindNoiseWeight(builder, windNoiseWeight);
    Source.AddWindWeightParameterName(builder, windWeightParameterNameOffset);
    Source.AddWindWeight(builder, windWeight);
    Source.AddPhysicsWeightParameterName(builder, physicsWeightParameterNameOffset);
    Source.AddPhysicsWeight(builder, physicsWeight);
    Source.AddSpeedParameterName(builder, speedParameterNameOffset);
    Source.AddSpeed(builder, speed);
    Source.AddResourceLabel(builder, resourceLabelOffset);
    return Source.EndSource(builder);
  }

  public static void StartSource(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddResourceLabel(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset) { builder.AddOffset(0, resourceLabelOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(1, speed, 0.0f); }
  public static void AddSpeedParameterName(FlatBufferBuilder builder, StringOffset speedParameterNameOffset) { builder.AddOffset(2, speedParameterNameOffset.Value, 0); }
  public static void AddPhysicsWeight(FlatBufferBuilder builder, float physicsWeight) { builder.AddFloat(3, physicsWeight, 0.0f); }
  public static void AddPhysicsWeightParameterName(FlatBufferBuilder builder, StringOffset physicsWeightParameterNameOffset) { builder.AddOffset(4, physicsWeightParameterNameOffset.Value, 0); }
  public static void AddWindWeight(FlatBufferBuilder builder, float windWeight) { builder.AddFloat(5, windWeight, 0.0f); }
  public static void AddWindWeightParameterName(FlatBufferBuilder builder, StringOffset windWeightParameterNameOffset) { builder.AddOffset(6, windWeightParameterNameOffset.Value, 0); }
  public static void AddWindNoiseWeight(FlatBufferBuilder builder, float windNoiseWeight) { builder.AddFloat(7, windNoiseWeight, 0.0f); }
  public static void AddWindNoiseWeightParameterName(FlatBufferBuilder builder, StringOffset windNoiseWeightParameterNameOffset) { builder.AddOffset(8, windNoiseWeightParameterNameOffset.Value, 0); }
  public static void AddAdditionalParameterList(FlatBufferBuilder builder, VectorOffset additionalParameterListOffset) { builder.AddOffset(9, additionalParameterListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FloatOrParameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FloatOrParameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdditionalParameterNameList(FlatBufferBuilder builder, VectorOffset additionalParameterNameListOffset) { builder.AddOffset(10, additionalParameterNameListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterNameListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterNameListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterNameListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.Source> EndSource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Source>(o);
  }
  public SourceT UnPack() {
    var _o = new SourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SourceT _o) {
    _o.ResourceLabel = this.ResourceLabel.HasValue ? this.ResourceLabel.Value.UnPack() : null;
    _o.Speed = this.Speed;
    _o.SpeedParameterName = this.SpeedParameterName;
    _o.PhysicsWeight = this.PhysicsWeight;
    _o.PhysicsWeightParameterName = this.PhysicsWeightParameterName;
    _o.WindWeight = this.WindWeight;
    _o.WindWeightParameterName = this.WindWeightParameterName;
    _o.WindNoiseWeight = this.WindNoiseWeight;
    _o.WindNoiseWeightParameterName = this.WindNoiseWeightParameterName;
    _o.AdditionalParameterList = new List<gfl.anm2.fb.FloatOrParameterT>();
    for (var _j = 0; _j < this.AdditionalParameterListLength; ++_j) {_o.AdditionalParameterList.Add(this.AdditionalParameterList(_j).HasValue ? this.AdditionalParameterList(_j).Value.UnPack() : null);}
    _o.AdditionalParameterNameList = new List<string>();
    for (var _j = 0; _j < this.AdditionalParameterNameListLength; ++_j) {_o.AdditionalParameterNameList.Add(this.AdditionalParameterNameList(_j));}
  }
  public static Offset<gfl.anm2.fb.Source> Pack(FlatBufferBuilder builder, SourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Source>);
    var _resourceLabel = _o.ResourceLabel == null ? default(Offset<gfl.anm2.fb.ResourceLabel>) : gfl.anm2.fb.ResourceLabel.Pack(builder, _o.ResourceLabel);
    var _speedParameterName = _o.SpeedParameterName == null ? default(StringOffset) : builder.CreateString(_o.SpeedParameterName);
    var _physicsWeightParameterName = _o.PhysicsWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.PhysicsWeightParameterName);
    var _windWeightParameterName = _o.WindWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.WindWeightParameterName);
    var _windNoiseWeightParameterName = _o.WindNoiseWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.WindNoiseWeightParameterName);
    var _additionalParameterList = default(VectorOffset);
    if (_o.AdditionalParameterList != null) {
      var __additionalParameterList = new Offset<gfl.anm2.fb.FloatOrParameter>[_o.AdditionalParameterList.Count];
      for (var _j = 0; _j < __additionalParameterList.Length; ++_j) { __additionalParameterList[_j] = gfl.anm2.fb.FloatOrParameter.Pack(builder, _o.AdditionalParameterList[_j]); }
      _additionalParameterList = CreateAdditionalParameterListVector(builder, __additionalParameterList);
    }
    var _additionalParameterNameList = default(VectorOffset);
    if (_o.AdditionalParameterNameList != null) {
      var __additionalParameterNameList = new StringOffset[_o.AdditionalParameterNameList.Count];
      for (var _j = 0; _j < __additionalParameterNameList.Length; ++_j) { __additionalParameterNameList[_j] = builder.CreateString(_o.AdditionalParameterNameList[_j]); }
      _additionalParameterNameList = CreateAdditionalParameterNameListVector(builder, __additionalParameterNameList);
    }
    return CreateSource(
      builder,
      _resourceLabel,
      _o.Speed,
      _speedParameterName,
      _o.PhysicsWeight,
      _physicsWeightParameterName,
      _o.WindWeight,
      _windWeightParameterName,
      _o.WindNoiseWeight,
      _windNoiseWeightParameterName,
      _additionalParameterList,
      _additionalParameterNameList);
  }
};

public class SourceT
{
  [Newtonsoft.Json.JsonProperty("resourceLabel")]
  public gfl.anm2.fb.ResourceLabelT ResourceLabel { get; set; }
  [Newtonsoft.Json.JsonProperty("speed")]
  public float Speed { get; set; }
  [Newtonsoft.Json.JsonProperty("speedParameterName")]
  public string SpeedParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("physicsWeight")]
  public float PhysicsWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("physicsWeightParameterName")]
  public string PhysicsWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("windWeight")]
  public float WindWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("windWeightParameterName")]
  public string WindWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("windNoiseWeight")]
  public float WindNoiseWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("windNoiseWeightParameterName")]
  public string WindNoiseWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterList")]
  public List<gfl.anm2.fb.FloatOrParameterT> AdditionalParameterList { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterNameList")]
  public List<string> AdditionalParameterNameList { get; set; }

  public SourceT() {
    this.ResourceLabel = null;
    this.Speed = 0.0f;
    this.SpeedParameterName = null;
    this.PhysicsWeight = 0.0f;
    this.PhysicsWeightParameterName = null;
    this.WindWeight = 0.0f;
    this.WindWeightParameterName = null;
    this.WindNoiseWeight = 0.0f;
    this.WindNoiseWeightParameterName = null;
    this.AdditionalParameterList = null;
    this.AdditionalParameterNameList = null;
  }
}

public struct State : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static State GetRootAsState(ByteBuffer _bb) { return GetRootAsState(_bb, new State()); }
  public static State GetRootAsState(ByteBuffer _bb, State obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.StateType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.StateType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.StateType.Normal; } }
  public gfl.anm2.fb.Source? Source { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.Source?)(new gfl.anm2.fb.Source()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.Transition? Transitions(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.Transition?)(new gfl.anm2.fb.Transition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TransitionsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.State? SubStates(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.State?)(new gfl.anm2.fb.State()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubStatesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Tags(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.StateDetail DetailType { get { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fb.StateDetail)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.StateDetail.NONE; } }
  public TTable? Detail<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(20); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.State> CreateState(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.StateType type = gfl.anm2.fb.StateType.Normal,
      Offset<gfl.anm2.fb.Source> sourceOffset = default(Offset<gfl.anm2.fb.Source>),
      VectorOffset transitionsOffset = default(VectorOffset),
      VectorOffset subStatesOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      gfl.anm2.fb.StateDetail detail_type = gfl.anm2.fb.StateDetail.NONE,
      int detailOffset = 0) {
    builder.StartTable(9);
    State.AddDetail(builder, detailOffset);
    State.AddTags(builder, tagsOffset);
    State.AddSubStates(builder, subStatesOffset);
    State.AddTransitions(builder, transitionsOffset);
    State.AddSource(builder, sourceOffset);
    State.AddType(builder, type);
    State.AddName(builder, nameOffset);
    State.AddDetailType(builder, detail_type);
    return State.EndState(builder);
  }

  public static void StartState(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fb.StateType type) { builder.AddUint(1, (uint)type, 0); }
  public static void AddSource(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Source> sourceOffset) { builder.AddOffset(3, sourceOffset.Value, 0); }
  public static void AddTransitions(FlatBufferBuilder builder, VectorOffset transitionsOffset) { builder.AddOffset(4, transitionsOffset.Value, 0); }
  public static VectorOffset CreateTransitionsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Transition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransitionsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Transition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTransitionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubStates(FlatBufferBuilder builder, VectorOffset subStatesOffset) { builder.AddOffset(5, subStatesOffset.Value, 0); }
  public static VectorOffset CreateSubStatesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.State>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubStatesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.State>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(6, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDetailType(FlatBufferBuilder builder, gfl.anm2.fb.StateDetail detailType) { builder.AddByte(7, (byte)detailType, 0); }
  public static void AddDetail(FlatBufferBuilder builder, int detailOffset) { builder.AddOffset(8, detailOffset, 0); }
  public static Offset<gfl.anm2.fb.State> EndState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.State>(o);
  }
  public StateT UnPack() {
    var _o = new StateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Source = this.Source.HasValue ? this.Source.Value.UnPack() : null;
    _o.Transitions = new List<gfl.anm2.fb.TransitionT>();
    for (var _j = 0; _j < this.TransitionsLength; ++_j) {_o.Transitions.Add(this.Transitions(_j).HasValue ? this.Transitions(_j).Value.UnPack() : null);}
    _o.SubStates = new List<gfl.anm2.fb.StateT>();
    for (var _j = 0; _j < this.SubStatesLength; ++_j) {_o.SubStates.Add(this.SubStates(_j).HasValue ? this.SubStates(_j).Value.UnPack() : null);}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Detail = new gfl.anm2.fb.StateDetailUnion();
    _o.Detail.Type = this.DetailType;
    switch (this.DetailType) {
      default: break;
      case gfl.anm2.fb.StateDetail.StateDetail_Any:
        _o.Detail.Value = this.Detail<gfl.anm2.fb.StateDetail_Any>().HasValue ? this.Detail<gfl.anm2.fb.StateDetail_Any>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.State> Pack(FlatBufferBuilder builder, StateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.State>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _source = _o.Source == null ? default(Offset<gfl.anm2.fb.Source>) : gfl.anm2.fb.Source.Pack(builder, _o.Source);
    var _transitions = default(VectorOffset);
    if (_o.Transitions != null) {
      var __transitions = new Offset<gfl.anm2.fb.Transition>[_o.Transitions.Count];
      for (var _j = 0; _j < __transitions.Length; ++_j) { __transitions[_j] = gfl.anm2.fb.Transition.Pack(builder, _o.Transitions[_j]); }
      _transitions = CreateTransitionsVector(builder, __transitions);
    }
    var _subStates = default(VectorOffset);
    if (_o.SubStates != null) {
      var __subStates = new Offset<gfl.anm2.fb.State>[_o.SubStates.Count];
      for (var _j = 0; _j < __subStates.Length; ++_j) { __subStates[_j] = gfl.anm2.fb.State.Pack(builder, _o.SubStates[_j]); }
      _subStates = CreateSubStatesVector(builder, __subStates);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _detail_type = _o.Detail == null ? gfl.anm2.fb.StateDetail.NONE : _o.Detail.Type;
    var _detail = _o.Detail == null ? 0 : gfl.anm2.fb.StateDetailUnion.Pack(builder, _o.Detail);
    return CreateState(
      builder,
      _name,
      _o.Type,
      _source,
      _transitions,
      _subStates,
      _tags,
      _detail_type,
      _detail);
  }
};

public class StateT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fb.StateType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public gfl.anm2.fb.SourceT Source { get; set; }
  [Newtonsoft.Json.JsonProperty("transitions")]
  public List<gfl.anm2.fb.TransitionT> Transitions { get; set; }
  [Newtonsoft.Json.JsonProperty("subStates")]
  public List<gfl.anm2.fb.StateT> SubStates { get; set; }
  [Newtonsoft.Json.JsonProperty("tags")]
  public List<string> Tags { get; set; }
  [Newtonsoft.Json.JsonProperty("detail_type")]
  private gfl.anm2.fb.StateDetail DetailType {
    get {
      return this.Detail != null ? this.Detail.Type : gfl.anm2.fb.StateDetail.NONE;
    }
    set {
      this.Detail = new gfl.anm2.fb.StateDetailUnion();
      this.Detail.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("detail")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.StateDetailUnion_JsonConverter))]
  public gfl.anm2.fb.StateDetailUnion Detail { get; set; }

  public StateT() {
    this.Name = null;
    this.Type = gfl.anm2.fb.StateType.Normal;
    this.Source = null;
    this.Transitions = null;
    this.SubStates = null;
    this.Tags = null;
    this.Detail = null;
  }
}

public struct TopState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TopState GetRootAsTopState(ByteBuffer _bb) { return GetRootAsTopState(_bb, new TopState()); }
  public static TopState GetRootAsTopState(ByteBuffer _bb, TopState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TopState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LayerName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLayerNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLayerNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.State? State { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.State?)(new gfl.anm2.fb.State()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.TopState> CreateTopState(FlatBufferBuilder builder,
      StringOffset layerNameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.State> stateOffset = default(Offset<gfl.anm2.fb.State>)) {
    builder.StartTable(2);
    TopState.AddState(builder, stateOffset);
    TopState.AddLayerName(builder, layerNameOffset);
    return TopState.EndTopState(builder);
  }

  public static void StartTopState(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLayerName(FlatBufferBuilder builder, StringOffset layerNameOffset) { builder.AddOffset(0, layerNameOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, Offset<gfl.anm2.fb.State> stateOffset) { builder.AddOffset(1, stateOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.TopState> EndTopState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.TopState>(o);
  }
  public TopStateT UnPack() {
    var _o = new TopStateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TopStateT _o) {
    _o.LayerName = this.LayerName;
    _o.State = this.State.HasValue ? this.State.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.TopState> Pack(FlatBufferBuilder builder, TopStateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.TopState>);
    var _layerName = _o.LayerName == null ? default(StringOffset) : builder.CreateString(_o.LayerName);
    var _state = _o.State == null ? default(Offset<gfl.anm2.fb.State>) : gfl.anm2.fb.State.Pack(builder, _o.State);
    return CreateTopState(
      builder,
      _layerName,
      _state);
  }
};

public class TopStateT
{
  [Newtonsoft.Json.JsonProperty("layerName")]
  public string LayerName { get; set; }
  [Newtonsoft.Json.JsonProperty("state")]
  public gfl.anm2.fb.StateT State { get; set; }

  public TopStateT() {
    this.LayerName = null;
    this.State = null;
  }
}

public struct StateConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StateConfig GetRootAsStateConfig(ByteBuffer _bb) { return GetRootAsStateConfig(_bb, new StateConfig()); }
  public static StateConfig GetRootAsStateConfig(ByteBuffer _bb, StateConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StateConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.TopState? TopStates(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.TopState?)(new gfl.anm2.fb.TopState()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TopStatesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.StateConfig> CreateStateConfig(FlatBufferBuilder builder,
      VectorOffset topStatesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StateConfig.AddTopStates(builder, topStatesOffset);
    return StateConfig.EndStateConfig(builder);
  }

  public static void StartStateConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTopStates(FlatBufferBuilder builder, VectorOffset topStatesOffset) { builder.AddOffset(0, topStatesOffset.Value, 0); }
  public static VectorOffset CreateTopStatesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.TopState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTopStatesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.TopState>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTopStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.StateConfig> EndStateConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.StateConfig>(o);
  }
  public StateConfigT UnPack() {
    var _o = new StateConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateConfigT _o) {
    _o.TopStates = new List<gfl.anm2.fb.TopStateT>();
    for (var _j = 0; _j < this.TopStatesLength; ++_j) {_o.TopStates.Add(this.TopStates(_j).HasValue ? this.TopStates(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.StateConfig> Pack(FlatBufferBuilder builder, StateConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.StateConfig>);
    var _topStates = default(VectorOffset);
    if (_o.TopStates != null) {
      var __topStates = new Offset<gfl.anm2.fb.TopState>[_o.TopStates.Count];
      for (var _j = 0; _j < __topStates.Length; ++_j) { __topStates[_j] = gfl.anm2.fb.TopState.Pack(builder, _o.TopStates[_j]); }
      _topStates = CreateTopStatesVector(builder, __topStates);
    }
    return CreateStateConfig(
      builder,
      _topStates);
  }
};

public class StateConfigT
{
  [Newtonsoft.Json.JsonProperty("topStates")]
  public List<gfl.anm2.fb.TopStateT> TopStates { get; set; }

  public StateConfigT() {
    this.TopStates = null;
  }
}

public struct AnimationStateConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationStateConfig GetRootAsAnimationStateConfig(ByteBuffer _bb) { return GetRootAsAnimationStateConfig(_bb, new AnimationStateConfig()); }
  public static AnimationStateConfig GetRootAsAnimationStateConfig(ByteBuffer _bb, AnimationStateConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationStateConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.StateConfig? StateConfig { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.StateConfig?)(new gfl.anm2.fb.StateConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.AnimationStateConfig> CreateAnimationStateConfig(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.StateConfig> stateConfigOffset = default(Offset<gfl.anm2.fb.StateConfig>)) {
    builder.StartTable(1);
    AnimationStateConfig.AddStateConfig(builder, stateConfigOffset);
    return AnimationStateConfig.EndAnimationStateConfig(builder);
  }

  public static void StartAnimationStateConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddStateConfig(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateConfig> stateConfigOffset) { builder.AddOffset(0, stateConfigOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationStateConfig> EndAnimationStateConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationStateConfig>(o);
  }
  public static void FinishAnimationStateConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationStateConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationStateConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationStateConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationStateConfigT UnPack() {
    var _o = new AnimationStateConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationStateConfigT _o) {
    _o.StateConfig = this.StateConfig.HasValue ? this.StateConfig.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.AnimationStateConfig> Pack(FlatBufferBuilder builder, AnimationStateConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationStateConfig>);
    var _stateConfig = _o.StateConfig == null ? default(Offset<gfl.anm2.fb.StateConfig>) : gfl.anm2.fb.StateConfig.Pack(builder, _o.StateConfig);
    return CreateAnimationStateConfig(
      builder,
      _stateConfig);
  }
};

public class AnimationStateConfigT
{
  [Newtonsoft.Json.JsonProperty("stateConfig")]
  public gfl.anm2.fb.StateConfigT StateConfig { get; set; }

  public AnimationStateConfigT() {
    this.StateConfig = null;
  }

  public static AnimationStateConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationStateConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationStateConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationStateConfig.GetRootAsAnimationStateConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationStateConfig.FinishAnimationStateConfigBuffer(fbb, AnimationStateConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
