// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CompressionQuality : uint
{
  High = 0,
  Middle = 1,
  Low = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ComporessMode : byte
{
  NONE = 0,
  CompressByPreset = 1,
  CompressByPercent = 2,
};

public class ComporessModeUnion {
  public ComporessMode Type { get; set; }
  public object Value { get; set; }

  public ComporessModeUnion() {
    this.Type = ComporessMode.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fbj.CompressByPresetT AsCompressByPreset() { return this.As<gfl.anm2.fbj.CompressByPresetT>(); }
  public gfl.anm2.fbj.CompressByPercentT AsCompressByPercent() { return this.As<gfl.anm2.fbj.CompressByPercentT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ComporessModeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ComporessMode.CompressByPreset: return gfl.anm2.fbj.CompressByPreset.Pack(builder, _o.AsCompressByPreset()).Value;
      case ComporessMode.CompressByPercent: return gfl.anm2.fbj.CompressByPercent.Pack(builder, _o.AsCompressByPercent()).Value;
    }
  }
}

public class ComporessModeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ComporessModeUnion) || objectType == typeof(System.Collections.Generic.List<ComporessModeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ComporessModeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ComporessModeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ComporessModeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ComporessModeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ComporessModeUnion, serializer);
    }
  }
  public ComporessModeUnion ReadJson(Newtonsoft.Json.JsonReader reader, ComporessModeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ComporessMode.CompressByPreset: _o.Value = serializer.Deserialize<gfl.anm2.fbj.CompressByPresetT>(reader); break;
      case ComporessMode.CompressByPercent: _o.Value = serializer.Deserialize<gfl.anm2.fbj.CompressByPercentT>(reader); break;
    }
    return _o;
  }
}

public struct CompressByPreset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CompressByPreset GetRootAsCompressByPreset(ByteBuffer _bb) { return GetRootAsCompressByPreset(_bb, new CompressByPreset()); }
  public static CompressByPreset GetRootAsCompressByPreset(ByteBuffer _bb, CompressByPreset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CompressByPreset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.CompressionQuality Quality { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.CompressionQuality)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.CompressionQuality.High; } }

  public static Offset<gfl.anm2.fbj.CompressByPreset> CreateCompressByPreset(FlatBufferBuilder builder,
      gfl.anm2.fbj.CompressionQuality quality = gfl.anm2.fbj.CompressionQuality.High) {
    builder.StartTable(1);
    CompressByPreset.AddQuality(builder, quality);
    return CompressByPreset.EndCompressByPreset(builder);
  }

  public static void StartCompressByPreset(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddQuality(FlatBufferBuilder builder, gfl.anm2.fbj.CompressionQuality quality) { builder.AddUint(0, (uint)quality, 0); }
  public static Offset<gfl.anm2.fbj.CompressByPreset> EndCompressByPreset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.CompressByPreset>(o);
  }
  public CompressByPresetT UnPack() {
    var _o = new CompressByPresetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CompressByPresetT _o) {
    _o.Quality = this.Quality;
  }
  public static Offset<gfl.anm2.fbj.CompressByPreset> Pack(FlatBufferBuilder builder, CompressByPresetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.CompressByPreset>);
    return CreateCompressByPreset(
      builder,
      _o.Quality);
  }
};

public class CompressByPresetT
{
  [Newtonsoft.Json.JsonProperty("quality")]
  public gfl.anm2.fbj.CompressionQuality Quality { get; set; }

  public CompressByPresetT() {
    this.Quality = gfl.anm2.fbj.CompressionQuality.High;
  }
}

public struct CompressByPercent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CompressByPercent GetRootAsCompressByPercent(ByteBuffer _bb) { return GetRootAsCompressByPercent(_bb, new CompressByPercent()); }
  public static CompressByPercent GetRootAsCompressByPercent(ByteBuffer _bb, CompressByPercent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CompressByPercent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Percent { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fbj.CompressByPercent> CreateCompressByPercent(FlatBufferBuilder builder,
      int percent = 0) {
    builder.StartTable(1);
    CompressByPercent.AddPercent(builder, percent);
    return CompressByPercent.EndCompressByPercent(builder);
  }

  public static void StartCompressByPercent(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPercent(FlatBufferBuilder builder, int percent) { builder.AddInt(0, percent, 0); }
  public static Offset<gfl.anm2.fbj.CompressByPercent> EndCompressByPercent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.CompressByPercent>(o);
  }
  public CompressByPercentT UnPack() {
    var _o = new CompressByPercentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CompressByPercentT _o) {
    _o.Percent = this.Percent;
  }
  public static Offset<gfl.anm2.fbj.CompressByPercent> Pack(FlatBufferBuilder builder, CompressByPercentT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.CompressByPercent>);
    return CreateCompressByPercent(
      builder,
      _o.Percent);
  }
};

public class CompressByPercentT
{
  [Newtonsoft.Json.JsonProperty("percent")]
  public int Percent { get; set; }

  public CompressByPercentT() {
    this.Percent = 0;
  }
}

public struct CompressionConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CompressionConfig GetRootAsCompressionConfig(ByteBuffer _bb) { return GetRootAsCompressionConfig(_bb, new CompressionConfig()); }
  public static CompressionConfig GetRootAsCompressionConfig(ByteBuffer _bb, CompressionConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CompressionConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.ComporessMode ModeType { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.ComporessMode)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fbj.ComporessMode.NONE; } }
  public TTable? Mode<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fbj.CompressionConfig> CreateCompressionConfig(FlatBufferBuilder builder,
      gfl.anm2.fbj.ComporessMode mode_type = gfl.anm2.fbj.ComporessMode.NONE,
      int modeOffset = 0) {
    builder.StartTable(2);
    CompressionConfig.AddMode(builder, modeOffset);
    CompressionConfig.AddModeType(builder, mode_type);
    return CompressionConfig.EndCompressionConfig(builder);
  }

  public static void StartCompressionConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddModeType(FlatBufferBuilder builder, gfl.anm2.fbj.ComporessMode modeType) { builder.AddByte(0, (byte)modeType, 0); }
  public static void AddMode(FlatBufferBuilder builder, int modeOffset) { builder.AddOffset(1, modeOffset, 0); }
  public static Offset<gfl.anm2.fbj.CompressionConfig> EndCompressionConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.CompressionConfig>(o);
  }
  public CompressionConfigT UnPack() {
    var _o = new CompressionConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CompressionConfigT _o) {
    _o.Mode = new gfl.anm2.fbj.ComporessModeUnion();
    _o.Mode.Type = this.ModeType;
    switch (this.ModeType) {
      default: break;
      case gfl.anm2.fbj.ComporessMode.CompressByPreset:
        _o.Mode.Value = this.Mode<gfl.anm2.fbj.CompressByPreset>().HasValue ? this.Mode<gfl.anm2.fbj.CompressByPreset>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.ComporessMode.CompressByPercent:
        _o.Mode.Value = this.Mode<gfl.anm2.fbj.CompressByPercent>().HasValue ? this.Mode<gfl.anm2.fbj.CompressByPercent>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fbj.CompressionConfig> Pack(FlatBufferBuilder builder, CompressionConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.CompressionConfig>);
    var _mode_type = _o.Mode == null ? gfl.anm2.fbj.ComporessMode.NONE : _o.Mode.Type;
    var _mode = _o.Mode == null ? 0 : gfl.anm2.fbj.ComporessModeUnion.Pack(builder, _o.Mode);
    return CreateCompressionConfig(
      builder,
      _mode_type,
      _mode);
  }
};

public class CompressionConfigT
{
  [Newtonsoft.Json.JsonProperty("mode_type")]
  private gfl.anm2.fbj.ComporessMode ModeType {
    get {
      return this.Mode != null ? this.Mode.Type : gfl.anm2.fbj.ComporessMode.NONE;
    }
    set {
      this.Mode = new gfl.anm2.fbj.ComporessModeUnion();
      this.Mode.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("mode")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fbj.ComporessModeUnion_JsonConverter))]
  public gfl.anm2.fbj.ComporessModeUnion Mode { get; set; }

  public CompressionConfigT() {
    this.Mode = null;
  }
}

public struct FileResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FileResource GetRootAsFileResource(ByteBuffer _bb) { return GetRootAsFileResource(_bb, new FileResource()); }
  public static FileResource GetRootAsFileResource(ByteBuffer _bb, FileResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public string TracmjFilePath { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTracmjFilePathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTracmjFilePathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTracmjFilePathArray() { return __p.__vector_as_array<byte>(8); }
  public string TraefjFilePath { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTraefjFilePathBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTraefjFilePathBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTraefjFilePathArray() { return __p.__vector_as_array<byte>(10); }
  public gfl.anm2.fbj.CompressionConfig? Compression { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.CompressionConfig?)(new gfl.anm2.fbj.CompressionConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.FileResource> CreateFileResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      StringOffset tracmjFilePathOffset = default(StringOffset),
      StringOffset traefjFilePathOffset = default(StringOffset),
      Offset<gfl.anm2.fbj.CompressionConfig> compressionOffset = default(Offset<gfl.anm2.fbj.CompressionConfig>)) {
    builder.StartTable(5);
    FileResource.AddCompression(builder, compressionOffset);
    FileResource.AddTraefjFilePath(builder, traefjFilePathOffset);
    FileResource.AddTracmjFilePath(builder, tracmjFilePathOffset);
    FileResource.AddFilePath(builder, filePathOffset);
    FileResource.AddName(builder, nameOffset);
    return FileResource.EndFileResource(builder);
  }

  public static void StartFileResource(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddTracmjFilePath(FlatBufferBuilder builder, StringOffset tracmjFilePathOffset) { builder.AddOffset(2, tracmjFilePathOffset.Value, 0); }
  public static void AddTraefjFilePath(FlatBufferBuilder builder, StringOffset traefjFilePathOffset) { builder.AddOffset(3, traefjFilePathOffset.Value, 0); }
  public static void AddCompression(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.CompressionConfig> compressionOffset) { builder.AddOffset(4, compressionOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.FileResource> EndFileResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.FileResource>(o);
  }
  public FileResourceT UnPack() {
    var _o = new FileResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FileResourceT _o) {
    _o.Name = this.Name;
    _o.FilePath = this.FilePath;
    _o.TracmjFilePath = this.TracmjFilePath;
    _o.TraefjFilePath = this.TraefjFilePath;
    _o.Compression = this.Compression.HasValue ? this.Compression.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.FileResource> Pack(FlatBufferBuilder builder, FileResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.FileResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _tracmjFilePath = _o.TracmjFilePath == null ? default(StringOffset) : builder.CreateString(_o.TracmjFilePath);
    var _traefjFilePath = _o.TraefjFilePath == null ? default(StringOffset) : builder.CreateString(_o.TraefjFilePath);
    var _compression = _o.Compression == null ? default(Offset<gfl.anm2.fbj.CompressionConfig>) : gfl.anm2.fbj.CompressionConfig.Pack(builder, _o.Compression);
    return CreateFileResource(
      builder,
      _name,
      _filePath,
      _tracmjFilePath,
      _traefjFilePath,
      _compression);
  }
};

public class FileResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("tracmjFilePath")]
  public string TracmjFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("traefjFilePath")]
  public string TraefjFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("compression")]
  public gfl.anm2.fbj.CompressionConfigT Compression { get; set; }

  public FileResourceT() {
    this.Name = null;
    this.FilePath = null;
    this.TracmjFilePath = null;
    this.TraefjFilePath = null;
    this.Compression = null;
  }
}

public struct Blend1DPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend1DPoint GetRootAsBlend1DPoint(ByteBuffer _bb) { return GetRootAsBlend1DPoint(_bb, new Blend1DPoint()); }
  public static Blend1DPoint GetRootAsBlend1DPoint(ByteBuffer _bb, Blend1DPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend1DPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(4); }
  public float PositionX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fbj.Blend1DPoint> CreateBlend1DPoint(FlatBufferBuilder builder,
      StringOffset resourceNameOffset = default(StringOffset),
      float positionX = 0.0f) {
    builder.StartTable(2);
    Blend1DPoint.AddPositionX(builder, positionX);
    Blend1DPoint.AddResourceName(builder, resourceNameOffset);
    return Blend1DPoint.EndBlend1DPoint(builder);
  }

  public static void StartBlend1DPoint(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(0, resourceNameOffset.Value, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(1, positionX, 0.0f); }
  public static Offset<gfl.anm2.fbj.Blend1DPoint> EndBlend1DPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Blend1DPoint>(o);
  }
  public Blend1DPointT UnPack() {
    var _o = new Blend1DPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend1DPointT _o) {
    _o.ResourceName = this.ResourceName;
    _o.PositionX = this.PositionX;
  }
  public static Offset<gfl.anm2.fbj.Blend1DPoint> Pack(FlatBufferBuilder builder, Blend1DPointT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Blend1DPoint>);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateBlend1DPoint(
      builder,
      _resourceName,
      _o.PositionX);
  }
};

public class Blend1DPointT
{
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("positionX")]
  public float PositionX { get; set; }

  public Blend1DPointT() {
    this.ResourceName = null;
    this.PositionX = 0.0f;
  }
}

public struct Blend1DResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend1DResource GetRootAsBlend1DResource(ByteBuffer _bb) { return GetRootAsBlend1DResource(_bb, new Blend1DResource()); }
  public static Blend1DResource GetRootAsBlend1DResource(ByteBuffer _bb, Blend1DResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend1DResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ParameterName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fbj.Blend1DPoint? PointList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.Blend1DPoint?)(new gfl.anm2.fbj.Blend1DPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Blend1DResource> CreateBlend1DResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset parameterNameOffset = default(StringOffset),
      VectorOffset pointListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Blend1DResource.AddPointList(builder, pointListOffset);
    Blend1DResource.AddParameterName(builder, parameterNameOffset);
    Blend1DResource.AddName(builder, nameOffset);
    return Blend1DResource.EndBlend1DResource(builder);
  }

  public static void StartBlend1DResource(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(1, parameterNameOffset.Value, 0); }
  public static void AddPointList(FlatBufferBuilder builder, VectorOffset pointListOffset) { builder.AddOffset(2, pointListOffset.Value, 0); }
  public static VectorOffset CreatePointListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend1DPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend1DPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Blend1DResource> EndBlend1DResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Blend1DResource>(o);
  }
  public Blend1DResourceT UnPack() {
    var _o = new Blend1DResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend1DResourceT _o) {
    _o.Name = this.Name;
    _o.ParameterName = this.ParameterName;
    _o.PointList = new List<gfl.anm2.fbj.Blend1DPointT>();
    for (var _j = 0; _j < this.PointListLength; ++_j) {_o.PointList.Add(this.PointList(_j).HasValue ? this.PointList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Blend1DResource> Pack(FlatBufferBuilder builder, Blend1DResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Blend1DResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    var _pointList = default(VectorOffset);
    if (_o.PointList != null) {
      var __pointList = new Offset<gfl.anm2.fbj.Blend1DPoint>[_o.PointList.Count];
      for (var _j = 0; _j < __pointList.Length; ++_j) { __pointList[_j] = gfl.anm2.fbj.Blend1DPoint.Pack(builder, _o.PointList[_j]); }
      _pointList = CreatePointListVector(builder, __pointList);
    }
    return CreateBlend1DResource(
      builder,
      _name,
      _parameterName,
      _pointList);
  }
};

public class Blend1DResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("pointList")]
  public List<gfl.anm2.fbj.Blend1DPointT> PointList { get; set; }

  public Blend1DResourceT() {
    this.Name = null;
    this.ParameterName = null;
    this.PointList = null;
  }
}

public struct Blend2DPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend2DPoint GetRootAsBlend2DPoint(ByteBuffer _bb) { return GetRootAsBlend2DPoint(_bb, new Blend2DPoint()); }
  public static Blend2DPoint GetRootAsBlend2DPoint(ByteBuffer _bb, Blend2DPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend2DPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(4); }
  public float PositionX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PositionY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fbj.Blend2DPoint> CreateBlend2DPoint(FlatBufferBuilder builder,
      StringOffset resourceNameOffset = default(StringOffset),
      float positionX = 0.0f,
      float positionY = 0.0f) {
    builder.StartTable(3);
    Blend2DPoint.AddPositionY(builder, positionY);
    Blend2DPoint.AddPositionX(builder, positionX);
    Blend2DPoint.AddResourceName(builder, resourceNameOffset);
    return Blend2DPoint.EndBlend2DPoint(builder);
  }

  public static void StartBlend2DPoint(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(0, resourceNameOffset.Value, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(1, positionX, 0.0f); }
  public static void AddPositionY(FlatBufferBuilder builder, float positionY) { builder.AddFloat(2, positionY, 0.0f); }
  public static Offset<gfl.anm2.fbj.Blend2DPoint> EndBlend2DPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Blend2DPoint>(o);
  }
  public Blend2DPointT UnPack() {
    var _o = new Blend2DPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DPointT _o) {
    _o.ResourceName = this.ResourceName;
    _o.PositionX = this.PositionX;
    _o.PositionY = this.PositionY;
  }
  public static Offset<gfl.anm2.fbj.Blend2DPoint> Pack(FlatBufferBuilder builder, Blend2DPointT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Blend2DPoint>);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateBlend2DPoint(
      builder,
      _resourceName,
      _o.PositionX,
      _o.PositionY);
  }
};

public class Blend2DPointT
{
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("positionX")]
  public float PositionX { get; set; }
  [Newtonsoft.Json.JsonProperty("positionY")]
  public float PositionY { get; set; }

  public Blend2DPointT() {
    this.ResourceName = null;
    this.PositionX = 0.0f;
    this.PositionY = 0.0f;
  }
}

public struct Blend2DResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend2DResource GetRootAsBlend2DResource(ByteBuffer _bb) { return GetRootAsBlend2DResource(_bb, new Blend2DResource()); }
  public static Blend2DResource GetRootAsBlend2DResource(ByteBuffer _bb, Blend2DResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend2DResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ParameterNameX { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameXBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParameterNameXBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParameterNameXArray() { return __p.__vector_as_array<byte>(6); }
  public string ParameterNameY { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameYBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetParameterNameYBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetParameterNameYArray() { return __p.__vector_as_array<byte>(8); }
  public gfl.anm2.fbj.Blend2DPoint? PointList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.Blend2DPoint?)(new gfl.anm2.fbj.Blend2DPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Blend2DResource> CreateBlend2DResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset parameterNameXOffset = default(StringOffset),
      StringOffset parameterNameYOffset = default(StringOffset),
      VectorOffset pointListOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Blend2DResource.AddPointList(builder, pointListOffset);
    Blend2DResource.AddParameterNameY(builder, parameterNameYOffset);
    Blend2DResource.AddParameterNameX(builder, parameterNameXOffset);
    Blend2DResource.AddName(builder, nameOffset);
    return Blend2DResource.EndBlend2DResource(builder);
  }

  public static void StartBlend2DResource(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParameterNameX(FlatBufferBuilder builder, StringOffset parameterNameXOffset) { builder.AddOffset(1, parameterNameXOffset.Value, 0); }
  public static void AddParameterNameY(FlatBufferBuilder builder, StringOffset parameterNameYOffset) { builder.AddOffset(2, parameterNameYOffset.Value, 0); }
  public static void AddPointList(FlatBufferBuilder builder, VectorOffset pointListOffset) { builder.AddOffset(3, pointListOffset.Value, 0); }
  public static VectorOffset CreatePointListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend2DPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend2DPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Blend2DResource> EndBlend2DResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Blend2DResource>(o);
  }
  public Blend2DResourceT UnPack() {
    var _o = new Blend2DResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DResourceT _o) {
    _o.Name = this.Name;
    _o.ParameterNameX = this.ParameterNameX;
    _o.ParameterNameY = this.ParameterNameY;
    _o.PointList = new List<gfl.anm2.fbj.Blend2DPointT>();
    for (var _j = 0; _j < this.PointListLength; ++_j) {_o.PointList.Add(this.PointList(_j).HasValue ? this.PointList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Blend2DResource> Pack(FlatBufferBuilder builder, Blend2DResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Blend2DResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameterNameX = _o.ParameterNameX == null ? default(StringOffset) : builder.CreateString(_o.ParameterNameX);
    var _parameterNameY = _o.ParameterNameY == null ? default(StringOffset) : builder.CreateString(_o.ParameterNameY);
    var _pointList = default(VectorOffset);
    if (_o.PointList != null) {
      var __pointList = new Offset<gfl.anm2.fbj.Blend2DPoint>[_o.PointList.Count];
      for (var _j = 0; _j < __pointList.Length; ++_j) { __pointList[_j] = gfl.anm2.fbj.Blend2DPoint.Pack(builder, _o.PointList[_j]); }
      _pointList = CreatePointListVector(builder, __pointList);
    }
    return CreateBlend2DResource(
      builder,
      _name,
      _parameterNameX,
      _parameterNameY,
      _pointList);
  }
};

public class Blend2DResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterNameX")]
  public string ParameterNameX { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterNameY")]
  public string ParameterNameY { get; set; }
  [Newtonsoft.Json.JsonProperty("pointList")]
  public List<gfl.anm2.fbj.Blend2DPointT> PointList { get; set; }

  public Blend2DResourceT() {
    this.Name = null;
    this.ParameterNameX = null;
    this.ParameterNameY = null;
    this.PointList = null;
  }
}

public struct ResourceConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ResourceConfig GetRootAsResourceConfig(ByteBuffer _bb) { return GetRootAsResourceConfig(_bb, new ResourceConfig()); }
  public static ResourceConfig GetRootAsResourceConfig(ByteBuffer _bb, ResourceConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResourceConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.FileResource? FileResourceList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.FileResource?)(new gfl.anm2.fbj.FileResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FileResourceListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.Blend1DResource? Blend1dResourceList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.Blend1DResource?)(new gfl.anm2.fbj.Blend1DResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Blend1dResourceListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.Blend2DResource? Blend2dResourceList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.Blend2DResource?)(new gfl.anm2.fbj.Blend2DResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Blend2dResourceListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.ResourceConfig> CreateResourceConfig(FlatBufferBuilder builder,
      VectorOffset fileResourceListOffset = default(VectorOffset),
      VectorOffset blend1dResourceListOffset = default(VectorOffset),
      VectorOffset blend2dResourceListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ResourceConfig.AddBlend2dResourceList(builder, blend2dResourceListOffset);
    ResourceConfig.AddBlend1dResourceList(builder, blend1dResourceListOffset);
    ResourceConfig.AddFileResourceList(builder, fileResourceListOffset);
    return ResourceConfig.EndResourceConfig(builder);
  }

  public static void StartResourceConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFileResourceList(FlatBufferBuilder builder, VectorOffset fileResourceListOffset) { builder.AddOffset(0, fileResourceListOffset.Value, 0); }
  public static VectorOffset CreateFileResourceListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.FileResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFileResourceListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.FileResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFileResourceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlend1dResourceList(FlatBufferBuilder builder, VectorOffset blend1dResourceListOffset) { builder.AddOffset(1, blend1dResourceListOffset.Value, 0); }
  public static VectorOffset CreateBlend1dResourceListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend1DResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlend1dResourceListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend1DResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBlend1dResourceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlend2dResourceList(FlatBufferBuilder builder, VectorOffset blend2dResourceListOffset) { builder.AddOffset(2, blend2dResourceListOffset.Value, 0); }
  public static VectorOffset CreateBlend2dResourceListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend2DResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlend2dResourceListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Blend2DResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBlend2dResourceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.ResourceConfig> EndResourceConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ResourceConfig>(o);
  }
  public static void FinishResourceConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ResourceConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedResourceConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ResourceConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ResourceConfigT UnPack() {
    var _o = new ResourceConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResourceConfigT _o) {
    _o.FileResourceList = new List<gfl.anm2.fbj.FileResourceT>();
    for (var _j = 0; _j < this.FileResourceListLength; ++_j) {_o.FileResourceList.Add(this.FileResourceList(_j).HasValue ? this.FileResourceList(_j).Value.UnPack() : null);}
    _o.Blend1dResourceList = new List<gfl.anm2.fbj.Blend1DResourceT>();
    for (var _j = 0; _j < this.Blend1dResourceListLength; ++_j) {_o.Blend1dResourceList.Add(this.Blend1dResourceList(_j).HasValue ? this.Blend1dResourceList(_j).Value.UnPack() : null);}
    _o.Blend2dResourceList = new List<gfl.anm2.fbj.Blend2DResourceT>();
    for (var _j = 0; _j < this.Blend2dResourceListLength; ++_j) {_o.Blend2dResourceList.Add(this.Blend2dResourceList(_j).HasValue ? this.Blend2dResourceList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.ResourceConfig> Pack(FlatBufferBuilder builder, ResourceConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ResourceConfig>);
    var _fileResourceList = default(VectorOffset);
    if (_o.FileResourceList != null) {
      var __fileResourceList = new Offset<gfl.anm2.fbj.FileResource>[_o.FileResourceList.Count];
      for (var _j = 0; _j < __fileResourceList.Length; ++_j) { __fileResourceList[_j] = gfl.anm2.fbj.FileResource.Pack(builder, _o.FileResourceList[_j]); }
      _fileResourceList = CreateFileResourceListVector(builder, __fileResourceList);
    }
    var _blend1dResourceList = default(VectorOffset);
    if (_o.Blend1dResourceList != null) {
      var __blend1dResourceList = new Offset<gfl.anm2.fbj.Blend1DResource>[_o.Blend1dResourceList.Count];
      for (var _j = 0; _j < __blend1dResourceList.Length; ++_j) { __blend1dResourceList[_j] = gfl.anm2.fbj.Blend1DResource.Pack(builder, _o.Blend1dResourceList[_j]); }
      _blend1dResourceList = CreateBlend1dResourceListVector(builder, __blend1dResourceList);
    }
    var _blend2dResourceList = default(VectorOffset);
    if (_o.Blend2dResourceList != null) {
      var __blend2dResourceList = new Offset<gfl.anm2.fbj.Blend2DResource>[_o.Blend2dResourceList.Count];
      for (var _j = 0; _j < __blend2dResourceList.Length; ++_j) { __blend2dResourceList[_j] = gfl.anm2.fbj.Blend2DResource.Pack(builder, _o.Blend2dResourceList[_j]); }
      _blend2dResourceList = CreateBlend2dResourceListVector(builder, __blend2dResourceList);
    }
    return CreateResourceConfig(
      builder,
      _fileResourceList,
      _blend1dResourceList,
      _blend2dResourceList);
  }
};

public class ResourceConfigT
{
  [Newtonsoft.Json.JsonProperty("fileResourceList")]
  public List<gfl.anm2.fbj.FileResourceT> FileResourceList { get; set; }
  [Newtonsoft.Json.JsonProperty("blend1dResourceList")]
  public List<gfl.anm2.fbj.Blend1DResourceT> Blend1dResourceList { get; set; }
  [Newtonsoft.Json.JsonProperty("blend2dResourceList")]
  public List<gfl.anm2.fbj.Blend2DResourceT> Blend2dResourceList { get; set; }

  public ResourceConfigT() {
    this.FileResourceList = null;
    this.Blend1dResourceList = null;
    this.Blend2dResourceList = null;
  }

  public static ResourceConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ResourceConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ResourceConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return ResourceConfig.GetRootAsResourceConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ResourceConfig.FinishResourceConfigBuffer(fbb, ResourceConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
