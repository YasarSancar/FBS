// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BlendParameterType : uint
{
  Int = 0,
  Float = 1,
};

public struct BlendParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendParameter GetRootAsBlendParameter(ByteBuffer _bb) { return GetRootAsBlendParameter(_bb, new BlendParameter()); }
  public static BlendParameter GetRootAsBlendParameter(ByteBuffer _bb, BlendParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.BlendParameterType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.BlendParameterType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.BlendParameterType.Int; } }

  public static Offset<gfl.anm2.fb.BlendParameter> CreateBlendParameter(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.BlendParameterType type = gfl.anm2.fb.BlendParameterType.Int) {
    builder.StartTable(2);
    BlendParameter.AddType(builder, type);
    BlendParameter.AddName(builder, nameOffset);
    return BlendParameter.EndBlendParameter(builder);
  }

  public static void StartBlendParameter(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fb.BlendParameterType type) { builder.AddUint(1, (uint)type, 0); }
  public static Offset<gfl.anm2.fb.BlendParameter> EndBlendParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendParameter>(o);
  }
  public BlendParameterT UnPack() {
    var _o = new BlendParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendParameterT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
  }
  public static Offset<gfl.anm2.fb.BlendParameter> Pack(FlatBufferBuilder builder, BlendParameterT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendParameter>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateBlendParameter(
      builder,
      _name,
      _o.Type);
  }
};

public class BlendParameterT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fb.BlendParameterType Type { get; set; }

  public BlendParameterT() {
    this.Name = null;
    this.Type = gfl.anm2.fb.BlendParameterType.Int;
  }
}

public struct FileResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FileResource GetRootAsFileResource(ByteBuffer _bb) { return GetRootAsFileResource(_bb, new FileResource()); }
  public static FileResource GetRootAsFileResource(ByteBuffer _bb, FileResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FileResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.AnimationData? AnimationData { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.AnimationData?)(new gfl.anm2.fb.AnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.AnimationClipConfigData? ClipData { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.AnimationClipConfigData?)(new gfl.anm2.fb.AnimationClipConfigData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.FileResource> CreateFileResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      Offset<gfl.anm2.fb.AnimationData> animationDataOffset = default(Offset<gfl.anm2.fb.AnimationData>),
      Offset<gfl.anm2.fb.AnimationClipConfigData> clipDataOffset = default(Offset<gfl.anm2.fb.AnimationClipConfigData>)) {
    builder.StartTable(4);
    FileResource.AddClipData(builder, clipDataOffset);
    FileResource.AddAnimationData(builder, animationDataOffset);
    FileResource.AddFilePath(builder, filePathOffset);
    FileResource.AddName(builder, nameOffset);
    return FileResource.EndFileResource(builder);
  }

  public static void StartFileResource(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddAnimationData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationData> animationDataOffset) { builder.AddOffset(2, animationDataOffset.Value, 0); }
  public static void AddClipData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationClipConfigData> clipDataOffset) { builder.AddOffset(3, clipDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.FileResource> EndFileResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.FileResource>(o);
  }
  public FileResourceT UnPack() {
    var _o = new FileResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FileResourceT _o) {
    _o.Name = this.Name;
    _o.FilePath = this.FilePath;
    _o.AnimationData = this.AnimationData.HasValue ? this.AnimationData.Value.UnPack() : null;
    _o.ClipData = this.ClipData.HasValue ? this.ClipData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.FileResource> Pack(FlatBufferBuilder builder, FileResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.FileResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _animationData = _o.AnimationData == null ? default(Offset<gfl.anm2.fb.AnimationData>) : gfl.anm2.fb.AnimationData.Pack(builder, _o.AnimationData);
    var _clipData = _o.ClipData == null ? default(Offset<gfl.anm2.fb.AnimationClipConfigData>) : gfl.anm2.fb.AnimationClipConfigData.Pack(builder, _o.ClipData);
    return CreateFileResource(
      builder,
      _name,
      _filePath,
      _animationData,
      _clipData);
  }
};

public class FileResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("animationData")]
  public gfl.anm2.fb.AnimationDataT AnimationData { get; set; }
  [Newtonsoft.Json.JsonProperty("clipData")]
  public gfl.anm2.fb.AnimationClipConfigDataT ClipData { get; set; }

  public FileResourceT() {
    this.Name = null;
    this.FilePath = null;
    this.AnimationData = null;
    this.ClipData = null;
  }
}

public struct Blend1DPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend1DPoint GetRootAsBlend1DPoint(ByteBuffer _bb) { return GetRootAsBlend1DPoint(_bb, new Blend1DPoint()); }
  public static Blend1DPoint GetRootAsBlend1DPoint(ByteBuffer _bb, Blend1DPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend1DPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.ResourceLabel? ResourceLabel { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.ResourceLabel?)(new gfl.anm2.fb.ResourceLabel()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float PositionX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.Blend1DPoint> CreateBlend1DPoint(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset = default(Offset<gfl.anm2.fb.ResourceLabel>),
      float positionX = 0.0f) {
    builder.StartTable(2);
    Blend1DPoint.AddPositionX(builder, positionX);
    Blend1DPoint.AddResourceLabel(builder, resourceLabelOffset);
    return Blend1DPoint.EndBlend1DPoint(builder);
  }

  public static void StartBlend1DPoint(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddResourceLabel(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset) { builder.AddOffset(0, resourceLabelOffset.Value, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(1, positionX, 0.0f); }
  public static Offset<gfl.anm2.fb.Blend1DPoint> EndBlend1DPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Blend1DPoint>(o);
  }
  public Blend1DPointT UnPack() {
    var _o = new Blend1DPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend1DPointT _o) {
    _o.ResourceLabel = this.ResourceLabel.HasValue ? this.ResourceLabel.Value.UnPack() : null;
    _o.PositionX = this.PositionX;
  }
  public static Offset<gfl.anm2.fb.Blend1DPoint> Pack(FlatBufferBuilder builder, Blend1DPointT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend1DPoint>);
    var _resourceLabel = _o.ResourceLabel == null ? default(Offset<gfl.anm2.fb.ResourceLabel>) : gfl.anm2.fb.ResourceLabel.Pack(builder, _o.ResourceLabel);
    return CreateBlend1DPoint(
      builder,
      _resourceLabel,
      _o.PositionX);
  }
};

public class Blend1DPointT
{
  [Newtonsoft.Json.JsonProperty("resourceLabel")]
  public gfl.anm2.fb.ResourceLabelT ResourceLabel { get; set; }
  [Newtonsoft.Json.JsonProperty("positionX")]
  public float PositionX { get; set; }

  public Blend1DPointT() {
    this.ResourceLabel = null;
    this.PositionX = 0.0f;
  }
}

public struct Blend1DResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend1DResource GetRootAsBlend1DResource(ByteBuffer _bb) { return GetRootAsBlend1DResource(_bb, new Blend1DResource()); }
  public static Blend1DResource GetRootAsBlend1DResource(ByteBuffer _bb, Blend1DResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend1DResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.BlendParameter? Parameter { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.BlendParameter?)(new gfl.anm2.fb.BlendParameter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.Blend1DPoint? Points(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.Blend1DPoint?)(new gfl.anm2.fb.Blend1DPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.Blend1DResource> CreateBlend1DResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.BlendParameter> parameterOffset = default(Offset<gfl.anm2.fb.BlendParameter>),
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Blend1DResource.AddPoints(builder, pointsOffset);
    Blend1DResource.AddParameter(builder, parameterOffset);
    Blend1DResource.AddName(builder, nameOffset);
    return Blend1DResource.EndBlend1DResource(builder);
  }

  public static void StartBlend1DResource(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParameter(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendParameter> parameterOffset) { builder.AddOffset(1, parameterOffset.Value, 0); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(2, pointsOffset.Value, 0); }
  public static VectorOffset CreatePointsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend1DPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend1DPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.Blend1DResource> EndBlend1DResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Blend1DResource>(o);
  }
  public Blend1DResourceT UnPack() {
    var _o = new Blend1DResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend1DResourceT _o) {
    _o.Name = this.Name;
    _o.Parameter = this.Parameter.HasValue ? this.Parameter.Value.UnPack() : null;
    _o.Points = new List<gfl.anm2.fb.Blend1DPointT>();
    for (var _j = 0; _j < this.PointsLength; ++_j) {_o.Points.Add(this.Points(_j).HasValue ? this.Points(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.Blend1DResource> Pack(FlatBufferBuilder builder, Blend1DResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend1DResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameter = _o.Parameter == null ? default(Offset<gfl.anm2.fb.BlendParameter>) : gfl.anm2.fb.BlendParameter.Pack(builder, _o.Parameter);
    var _points = default(VectorOffset);
    if (_o.Points != null) {
      var __points = new Offset<gfl.anm2.fb.Blend1DPoint>[_o.Points.Count];
      for (var _j = 0; _j < __points.Length; ++_j) { __points[_j] = gfl.anm2.fb.Blend1DPoint.Pack(builder, _o.Points[_j]); }
      _points = CreatePointsVector(builder, __points);
    }
    return CreateBlend1DResource(
      builder,
      _name,
      _parameter,
      _points);
  }
};

public class Blend1DResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameter")]
  public gfl.anm2.fb.BlendParameterT Parameter { get; set; }
  [Newtonsoft.Json.JsonProperty("points")]
  public List<gfl.anm2.fb.Blend1DPointT> Points { get; set; }

  public Blend1DResourceT() {
    this.Name = null;
    this.Parameter = null;
    this.Points = null;
  }
}

public struct Blend2DPoint : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend2DPoint GetRootAsBlend2DPoint(ByteBuffer _bb) { return GetRootAsBlend2DPoint(_bb, new Blend2DPoint()); }
  public static Blend2DPoint GetRootAsBlend2DPoint(ByteBuffer _bb, Blend2DPoint obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend2DPoint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.ResourceLabel? ResourceLabel { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.ResourceLabel?)(new gfl.anm2.fb.ResourceLabel()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float PositionX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PositionY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.Blend2DPoint> CreateBlend2DPoint(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset = default(Offset<gfl.anm2.fb.ResourceLabel>),
      float positionX = 0.0f,
      float positionY = 0.0f) {
    builder.StartTable(3);
    Blend2DPoint.AddPositionY(builder, positionY);
    Blend2DPoint.AddPositionX(builder, positionX);
    Blend2DPoint.AddResourceLabel(builder, resourceLabelOffset);
    return Blend2DPoint.EndBlend2DPoint(builder);
  }

  public static void StartBlend2DPoint(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddResourceLabel(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ResourceLabel> resourceLabelOffset) { builder.AddOffset(0, resourceLabelOffset.Value, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(1, positionX, 0.0f); }
  public static void AddPositionY(FlatBufferBuilder builder, float positionY) { builder.AddFloat(2, positionY, 0.0f); }
  public static Offset<gfl.anm2.fb.Blend2DPoint> EndBlend2DPoint(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Blend2DPoint>(o);
  }
  public Blend2DPointT UnPack() {
    var _o = new Blend2DPointT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DPointT _o) {
    _o.ResourceLabel = this.ResourceLabel.HasValue ? this.ResourceLabel.Value.UnPack() : null;
    _o.PositionX = this.PositionX;
    _o.PositionY = this.PositionY;
  }
  public static Offset<gfl.anm2.fb.Blend2DPoint> Pack(FlatBufferBuilder builder, Blend2DPointT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend2DPoint>);
    var _resourceLabel = _o.ResourceLabel == null ? default(Offset<gfl.anm2.fb.ResourceLabel>) : gfl.anm2.fb.ResourceLabel.Pack(builder, _o.ResourceLabel);
    return CreateBlend2DPoint(
      builder,
      _resourceLabel,
      _o.PositionX,
      _o.PositionY);
  }
};

public class Blend2DPointT
{
  [Newtonsoft.Json.JsonProperty("resourceLabel")]
  public gfl.anm2.fb.ResourceLabelT ResourceLabel { get; set; }
  [Newtonsoft.Json.JsonProperty("positionX")]
  public float PositionX { get; set; }
  [Newtonsoft.Json.JsonProperty("positionY")]
  public float PositionY { get; set; }

  public Blend2DPointT() {
    this.ResourceLabel = null;
    this.PositionX = 0.0f;
    this.PositionY = 0.0f;
  }
}

public struct Blend2DTriangle : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Blend2DTriangle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte P0 { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte P1 { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte P2 { get { return __p.bb.Get(__p.bb_pos + 2); } }

  public static Offset<gfl.anm2.fb.Blend2DTriangle> CreateBlend2DTriangle(FlatBufferBuilder builder, byte P0, byte P1, byte P2) {
    builder.Prep(1, 3);
    builder.PutByte(P2);
    builder.PutByte(P1);
    builder.PutByte(P0);
    return new Offset<gfl.anm2.fb.Blend2DTriangle>(builder.Offset);
  }
  public Blend2DTriangleT UnPack() {
    var _o = new Blend2DTriangleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DTriangleT _o) {
    _o.P0 = this.P0;
    _o.P1 = this.P1;
    _o.P2 = this.P2;
  }
  public static Offset<gfl.anm2.fb.Blend2DTriangle> Pack(FlatBufferBuilder builder, Blend2DTriangleT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend2DTriangle>);
    return CreateBlend2DTriangle(
      builder,
      _o.P0,
      _o.P1,
      _o.P2);
  }
};

public class Blend2DTriangleT
{
  [Newtonsoft.Json.JsonProperty("p0")]
  public byte P0 { get; set; }
  [Newtonsoft.Json.JsonProperty("p1")]
  public byte P1 { get; set; }
  [Newtonsoft.Json.JsonProperty("p2")]
  public byte P2 { get; set; }

  public Blend2DTriangleT() {
    this.P0 = 0;
    this.P1 = 0;
    this.P2 = 0;
  }
}

public struct Blend2DEdge : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Blend2DEdge __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte P0 { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte P1 { get { return __p.bb.Get(__p.bb_pos + 1); } }

  public static Offset<gfl.anm2.fb.Blend2DEdge> CreateBlend2DEdge(FlatBufferBuilder builder, byte P0, byte P1) {
    builder.Prep(1, 2);
    builder.PutByte(P1);
    builder.PutByte(P0);
    return new Offset<gfl.anm2.fb.Blend2DEdge>(builder.Offset);
  }
  public Blend2DEdgeT UnPack() {
    var _o = new Blend2DEdgeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DEdgeT _o) {
    _o.P0 = this.P0;
    _o.P1 = this.P1;
  }
  public static Offset<gfl.anm2.fb.Blend2DEdge> Pack(FlatBufferBuilder builder, Blend2DEdgeT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend2DEdge>);
    return CreateBlend2DEdge(
      builder,
      _o.P0,
      _o.P1);
  }
};

public class Blend2DEdgeT
{
  [Newtonsoft.Json.JsonProperty("p0")]
  public byte P0 { get; set; }
  [Newtonsoft.Json.JsonProperty("p1")]
  public byte P1 { get; set; }

  public Blend2DEdgeT() {
    this.P0 = 0;
    this.P1 = 0;
  }
}

public struct Blend2DResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Blend2DResource GetRootAsBlend2DResource(ByteBuffer _bb) { return GetRootAsBlend2DResource(_bb, new Blend2DResource()); }
  public static Blend2DResource GetRootAsBlend2DResource(ByteBuffer _bb, Blend2DResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Blend2DResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.BlendParameter? ParameterX { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.BlendParameter?)(new gfl.anm2.fb.BlendParameter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.BlendParameter? ParameterY { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.BlendParameter?)(new gfl.anm2.fb.BlendParameter()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.Blend2DPoint? Points(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.Blend2DPoint?)(new gfl.anm2.fb.Blend2DPoint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.Blend2DTriangle? Triangles(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.Blend2DTriangle?)(new gfl.anm2.fb.Blend2DTriangle()).__assign(__p.__vector(o) + j * 3, __p.bb) : null; }
  public int TrianglesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.Blend2DEdge? Edges(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.Blend2DEdge?)(new gfl.anm2.fb.Blend2DEdge()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int EdgesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.Blend2DResource> CreateBlend2DResource(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.BlendParameter> parameterXOffset = default(Offset<gfl.anm2.fb.BlendParameter>),
      Offset<gfl.anm2.fb.BlendParameter> parameterYOffset = default(Offset<gfl.anm2.fb.BlendParameter>),
      VectorOffset pointsOffset = default(VectorOffset),
      VectorOffset trianglesOffset = default(VectorOffset),
      VectorOffset edgesOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Blend2DResource.AddEdges(builder, edgesOffset);
    Blend2DResource.AddTriangles(builder, trianglesOffset);
    Blend2DResource.AddPoints(builder, pointsOffset);
    Blend2DResource.AddParameterY(builder, parameterYOffset);
    Blend2DResource.AddParameterX(builder, parameterXOffset);
    Blend2DResource.AddName(builder, nameOffset);
    return Blend2DResource.EndBlend2DResource(builder);
  }

  public static void StartBlend2DResource(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParameterX(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendParameter> parameterXOffset) { builder.AddOffset(1, parameterXOffset.Value, 0); }
  public static void AddParameterY(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendParameter> parameterYOffset) { builder.AddOffset(2, parameterYOffset.Value, 0); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(3, pointsOffset.Value, 0); }
  public static VectorOffset CreatePointsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend2DPoint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePointsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend2DPoint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTriangles(FlatBufferBuilder builder, VectorOffset trianglesOffset) { builder.AddOffset(4, trianglesOffset.Value, 0); }
  public static void StartTrianglesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(3, numElems, 1); }
  public static void AddEdges(FlatBufferBuilder builder, VectorOffset edgesOffset) { builder.AddOffset(5, edgesOffset.Value, 0); }
  public static void StartEdgesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 1); }
  public static Offset<gfl.anm2.fb.Blend2DResource> EndBlend2DResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Blend2DResource>(o);
  }
  public Blend2DResourceT UnPack() {
    var _o = new Blend2DResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Blend2DResourceT _o) {
    _o.Name = this.Name;
    _o.ParameterX = this.ParameterX.HasValue ? this.ParameterX.Value.UnPack() : null;
    _o.ParameterY = this.ParameterY.HasValue ? this.ParameterY.Value.UnPack() : null;
    _o.Points = new List<gfl.anm2.fb.Blend2DPointT>();
    for (var _j = 0; _j < this.PointsLength; ++_j) {_o.Points.Add(this.Points(_j).HasValue ? this.Points(_j).Value.UnPack() : null);}
    _o.Triangles = new List<gfl.anm2.fb.Blend2DTriangleT>();
    for (var _j = 0; _j < this.TrianglesLength; ++_j) {_o.Triangles.Add(this.Triangles(_j).HasValue ? this.Triangles(_j).Value.UnPack() : null);}
    _o.Edges = new List<gfl.anm2.fb.Blend2DEdgeT>();
    for (var _j = 0; _j < this.EdgesLength; ++_j) {_o.Edges.Add(this.Edges(_j).HasValue ? this.Edges(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.Blend2DResource> Pack(FlatBufferBuilder builder, Blend2DResourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Blend2DResource>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parameterX = _o.ParameterX == null ? default(Offset<gfl.anm2.fb.BlendParameter>) : gfl.anm2.fb.BlendParameter.Pack(builder, _o.ParameterX);
    var _parameterY = _o.ParameterY == null ? default(Offset<gfl.anm2.fb.BlendParameter>) : gfl.anm2.fb.BlendParameter.Pack(builder, _o.ParameterY);
    var _points = default(VectorOffset);
    if (_o.Points != null) {
      var __points = new Offset<gfl.anm2.fb.Blend2DPoint>[_o.Points.Count];
      for (var _j = 0; _j < __points.Length; ++_j) { __points[_j] = gfl.anm2.fb.Blend2DPoint.Pack(builder, _o.Points[_j]); }
      _points = CreatePointsVector(builder, __points);
    }
    var _triangles = default(VectorOffset);
    if (_o.Triangles != null) {
      StartTrianglesVector(builder, _o.Triangles.Count);
      for (var _j = _o.Triangles.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Blend2DTriangle.Pack(builder, _o.Triangles[_j]); }
      _triangles = builder.EndVector();
    }
    var _edges = default(VectorOffset);
    if (_o.Edges != null) {
      StartEdgesVector(builder, _o.Edges.Count);
      for (var _j = _o.Edges.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Blend2DEdge.Pack(builder, _o.Edges[_j]); }
      _edges = builder.EndVector();
    }
    return CreateBlend2DResource(
      builder,
      _name,
      _parameterX,
      _parameterY,
      _points,
      _triangles,
      _edges);
  }
};

public class Blend2DResourceT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterX")]
  public gfl.anm2.fb.BlendParameterT ParameterX { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterY")]
  public gfl.anm2.fb.BlendParameterT ParameterY { get; set; }
  [Newtonsoft.Json.JsonProperty("points")]
  public List<gfl.anm2.fb.Blend2DPointT> Points { get; set; }
  [Newtonsoft.Json.JsonProperty("triangles")]
  public List<gfl.anm2.fb.Blend2DTriangleT> Triangles { get; set; }
  [Newtonsoft.Json.JsonProperty("edges")]
  public List<gfl.anm2.fb.Blend2DEdgeT> Edges { get; set; }

  public Blend2DResourceT() {
    this.Name = null;
    this.ParameterX = null;
    this.ParameterY = null;
    this.Points = null;
    this.Triangles = null;
    this.Edges = null;
  }
}

public struct ResourceConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ResourceConfig GetRootAsResourceConfig(ByteBuffer _bb) { return GetRootAsResourceConfig(_bb, new ResourceConfig()); }
  public static ResourceConfig GetRootAsResourceConfig(ByteBuffer _bb, ResourceConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResourceConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FileResource? FileResources(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FileResource?)(new gfl.anm2.fb.FileResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FileResourcesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.Blend1DResource? Blend1dResources(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Blend1DResource?)(new gfl.anm2.fb.Blend1DResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Blend1dResourcesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.Blend2DResource? Blend2dResources(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.Blend2DResource?)(new gfl.anm2.fb.Blend2DResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Blend2dResourcesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.ResourceConfig> CreateResourceConfig(FlatBufferBuilder builder,
      VectorOffset fileResourcesOffset = default(VectorOffset),
      VectorOffset blend1dResourcesOffset = default(VectorOffset),
      VectorOffset blend2dResourcesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ResourceConfig.AddBlend2dResources(builder, blend2dResourcesOffset);
    ResourceConfig.AddBlend1dResources(builder, blend1dResourcesOffset);
    ResourceConfig.AddFileResources(builder, fileResourcesOffset);
    return ResourceConfig.EndResourceConfig(builder);
  }

  public static void StartResourceConfig(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFileResources(FlatBufferBuilder builder, VectorOffset fileResourcesOffset) { builder.AddOffset(0, fileResourcesOffset.Value, 0); }
  public static VectorOffset CreateFileResourcesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FileResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFileResourcesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FileResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFileResourcesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlend1dResources(FlatBufferBuilder builder, VectorOffset blend1dResourcesOffset) { builder.AddOffset(1, blend1dResourcesOffset.Value, 0); }
  public static VectorOffset CreateBlend1dResourcesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend1DResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlend1dResourcesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend1DResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBlend1dResourcesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlend2dResources(FlatBufferBuilder builder, VectorOffset blend2dResourcesOffset) { builder.AddOffset(2, blend2dResourcesOffset.Value, 0); }
  public static VectorOffset CreateBlend2dResourcesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend2DResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlend2dResourcesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Blend2DResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBlend2dResourcesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.ResourceConfig> EndResourceConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ResourceConfig>(o);
  }
  public ResourceConfigT UnPack() {
    var _o = new ResourceConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResourceConfigT _o) {
    _o.FileResources = new List<gfl.anm2.fb.FileResourceT>();
    for (var _j = 0; _j < this.FileResourcesLength; ++_j) {_o.FileResources.Add(this.FileResources(_j).HasValue ? this.FileResources(_j).Value.UnPack() : null);}
    _o.Blend1dResources = new List<gfl.anm2.fb.Blend1DResourceT>();
    for (var _j = 0; _j < this.Blend1dResourcesLength; ++_j) {_o.Blend1dResources.Add(this.Blend1dResources(_j).HasValue ? this.Blend1dResources(_j).Value.UnPack() : null);}
    _o.Blend2dResources = new List<gfl.anm2.fb.Blend2DResourceT>();
    for (var _j = 0; _j < this.Blend2dResourcesLength; ++_j) {_o.Blend2dResources.Add(this.Blend2dResources(_j).HasValue ? this.Blend2dResources(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.ResourceConfig> Pack(FlatBufferBuilder builder, ResourceConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ResourceConfig>);
    var _fileResources = default(VectorOffset);
    if (_o.FileResources != null) {
      var __fileResources = new Offset<gfl.anm2.fb.FileResource>[_o.FileResources.Count];
      for (var _j = 0; _j < __fileResources.Length; ++_j) { __fileResources[_j] = gfl.anm2.fb.FileResource.Pack(builder, _o.FileResources[_j]); }
      _fileResources = CreateFileResourcesVector(builder, __fileResources);
    }
    var _blend1dResources = default(VectorOffset);
    if (_o.Blend1dResources != null) {
      var __blend1dResources = new Offset<gfl.anm2.fb.Blend1DResource>[_o.Blend1dResources.Count];
      for (var _j = 0; _j < __blend1dResources.Length; ++_j) { __blend1dResources[_j] = gfl.anm2.fb.Blend1DResource.Pack(builder, _o.Blend1dResources[_j]); }
      _blend1dResources = CreateBlend1dResourcesVector(builder, __blend1dResources);
    }
    var _blend2dResources = default(VectorOffset);
    if (_o.Blend2dResources != null) {
      var __blend2dResources = new Offset<gfl.anm2.fb.Blend2DResource>[_o.Blend2dResources.Count];
      for (var _j = 0; _j < __blend2dResources.Length; ++_j) { __blend2dResources[_j] = gfl.anm2.fb.Blend2DResource.Pack(builder, _o.Blend2dResources[_j]); }
      _blend2dResources = CreateBlend2dResourcesVector(builder, __blend2dResources);
    }
    return CreateResourceConfig(
      builder,
      _fileResources,
      _blend1dResources,
      _blend2dResources);
  }
};

public class ResourceConfigT
{
  [Newtonsoft.Json.JsonProperty("fileResources")]
  public List<gfl.anm2.fb.FileResourceT> FileResources { get; set; }
  [Newtonsoft.Json.JsonProperty("blend1dResources")]
  public List<gfl.anm2.fb.Blend1DResourceT> Blend1dResources { get; set; }
  [Newtonsoft.Json.JsonProperty("blend2dResources")]
  public List<gfl.anm2.fb.Blend2DResourceT> Blend2dResources { get; set; }

  public ResourceConfigT() {
    this.FileResources = null;
    this.Blend1dResources = null;
    this.Blend2dResources = null;
  }
}

public struct AnimationResourceConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationResourceConfig GetRootAsAnimationResourceConfig(ByteBuffer _bb) { return GetRootAsAnimationResourceConfig(_bb, new AnimationResourceConfig()); }
  public static AnimationResourceConfig GetRootAsAnimationResourceConfig(ByteBuffer _bb, AnimationResourceConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationResourceConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.ResourceConfig? ResourceConfig { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.ResourceConfig?)(new gfl.anm2.fb.ResourceConfig()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.AnimationResourceConfig> CreateAnimationResourceConfig(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.ResourceConfig> resourceConfigOffset = default(Offset<gfl.anm2.fb.ResourceConfig>)) {
    builder.StartTable(1);
    AnimationResourceConfig.AddResourceConfig(builder, resourceConfigOffset);
    return AnimationResourceConfig.EndAnimationResourceConfig(builder);
  }

  public static void StartAnimationResourceConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddResourceConfig(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ResourceConfig> resourceConfigOffset) { builder.AddOffset(0, resourceConfigOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.AnimationResourceConfig> EndAnimationResourceConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationResourceConfig>(o);
  }
  public static void FinishAnimationResourceConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationResourceConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationResourceConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationResourceConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationResourceConfigT UnPack() {
    var _o = new AnimationResourceConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationResourceConfigT _o) {
    _o.ResourceConfig = this.ResourceConfig.HasValue ? this.ResourceConfig.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.AnimationResourceConfig> Pack(FlatBufferBuilder builder, AnimationResourceConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationResourceConfig>);
    var _resourceConfig = _o.ResourceConfig == null ? default(Offset<gfl.anm2.fb.ResourceConfig>) : gfl.anm2.fb.ResourceConfig.Pack(builder, _o.ResourceConfig);
    return CreateAnimationResourceConfig(
      builder,
      _resourceConfig);
  }
};

public class AnimationResourceConfigT
{
  [Newtonsoft.Json.JsonProperty("resourceConfig")]
  public gfl.anm2.fb.ResourceConfigT ResourceConfig { get; set; }

  public AnimationResourceConfigT() {
    this.ResourceConfig = null;
  }

  public static AnimationResourceConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationResourceConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationResourceConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationResourceConfig.GetRootAsAnimationResourceConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationResourceConfig.FinishAnimationResourceConfigBuffer(fbb, AnimationResourceConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
