// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EventValuePreset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValuePreset GetRootAsEventValuePreset(ByteBuffer _bb) { return GetRootAsEventValuePreset(_bb, new EventValuePreset()); }
  public static EventValuePreset GetRootAsEventValuePreset(ByteBuffer _bb, EventValuePreset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValuePreset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Value { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.EventValuePreset> CreateEventValuePreset(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(2);
    EventValuePreset.AddValue(builder, valueOffset);
    EventValuePreset.AddName(builder, nameOffset);
    return EventValuePreset.EndEventValuePreset(builder);
  }

  public static void StartEventValuePreset(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EventValuePreset> EndEventValuePreset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValuePreset>(o);
  }
  public EventValuePresetT UnPack() {
    var _o = new EventValuePresetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValuePresetT _o) {
    _o.Name = this.Name;
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.EventValuePreset> Pack(FlatBufferBuilder builder, EventValuePresetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValuePreset>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    return CreateEventValuePreset(
      builder,
      _name,
      _value);
  }
};

public class EventValuePresetT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }

  public EventValuePresetT() {
    this.Name = null;
    this.Value = null;
  }
}

public struct EventPreset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventPreset GetRootAsEventPreset(ByteBuffer _bb) { return GetRootAsEventPreset(_bb, new EventPreset()); }
  public static EventPreset GetRootAsEventPreset(ByteBuffer _bb, EventPreset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventPreset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventTemplate { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTemplateBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventTemplateBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventTemplateArray() { return __p.__vector_as_array<byte>(4); }
  public string BeginFrame { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeginFrameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBeginFrameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBeginFrameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.EventValuePreset? EventValues(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.EventValuePreset?)(new gfl.anm2.fb.EventValuePreset()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventValuesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EventPreset> CreateEventPreset(FlatBufferBuilder builder,
      StringOffset eventTemplateOffset = default(StringOffset),
      StringOffset beginFrameOffset = default(StringOffset),
      VectorOffset eventValuesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EventPreset.AddEventValues(builder, eventValuesOffset);
    EventPreset.AddBeginFrame(builder, beginFrameOffset);
    EventPreset.AddEventTemplate(builder, eventTemplateOffset);
    return EventPreset.EndEventPreset(builder);
  }

  public static void StartEventPreset(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEventTemplate(FlatBufferBuilder builder, StringOffset eventTemplateOffset) { builder.AddOffset(0, eventTemplateOffset.Value, 0); }
  public static void AddBeginFrame(FlatBufferBuilder builder, StringOffset beginFrameOffset) { builder.AddOffset(1, beginFrameOffset.Value, 0); }
  public static void AddEventValues(FlatBufferBuilder builder, VectorOffset eventValuesOffset) { builder.AddOffset(2, eventValuesOffset.Value, 0); }
  public static VectorOffset CreateEventValuesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValuePreset>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventValuesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValuePreset>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EventPreset> EndEventPreset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventPreset>(o);
  }
  public EventPresetT UnPack() {
    var _o = new EventPresetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventPresetT _o) {
    _o.EventTemplate = this.EventTemplate;
    _o.BeginFrame = this.BeginFrame;
    _o.EventValues = new List<gfl.anm2.fb.EventValuePresetT>();
    for (var _j = 0; _j < this.EventValuesLength; ++_j) {_o.EventValues.Add(this.EventValues(_j).HasValue ? this.EventValues(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EventPreset> Pack(FlatBufferBuilder builder, EventPresetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventPreset>);
    var _eventTemplate = _o.EventTemplate == null ? default(StringOffset) : builder.CreateString(_o.EventTemplate);
    var _beginFrame = _o.BeginFrame == null ? default(StringOffset) : builder.CreateString(_o.BeginFrame);
    var _eventValues = default(VectorOffset);
    if (_o.EventValues != null) {
      var __eventValues = new Offset<gfl.anm2.fb.EventValuePreset>[_o.EventValues.Count];
      for (var _j = 0; _j < __eventValues.Length; ++_j) { __eventValues[_j] = gfl.anm2.fb.EventValuePreset.Pack(builder, _o.EventValues[_j]); }
      _eventValues = CreateEventValuesVector(builder, __eventValues);
    }
    return CreateEventPreset(
      builder,
      _eventTemplate,
      _beginFrame,
      _eventValues);
  }
};

public class EventPresetT
{
  [Newtonsoft.Json.JsonProperty("eventTemplate")]
  public string EventTemplate { get; set; }
  [Newtonsoft.Json.JsonProperty("beginFrame")]
  public string BeginFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("eventValues")]
  public List<gfl.anm2.fb.EventValuePresetT> EventValues { get; set; }

  public EventPresetT() {
    this.EventTemplate = null;
    this.BeginFrame = null;
    this.EventValues = null;
  }
}

public struct EventTrackTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventTrackTemplate GetRootAsEventTrackTemplate(ByteBuffer _bb) { return GetRootAsEventTrackTemplate(_bb, new EventTrackTemplate()); }
  public static EventTrackTemplate GetRootAsEventTrackTemplate(ByteBuffer _bb, EventTrackTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventTrackTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Comment { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(4); }
  public string TrackName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTrackNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTrackNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.EventPreset? Events(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.EventPreset?)(new gfl.anm2.fb.EventPreset()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EventTrackTemplate> CreateEventTrackTemplate(FlatBufferBuilder builder,
      StringOffset commentOffset = default(StringOffset),
      StringOffset trackNameOffset = default(StringOffset),
      VectorOffset eventsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    EventTrackTemplate.AddEvents(builder, eventsOffset);
    EventTrackTemplate.AddTrackName(builder, trackNameOffset);
    EventTrackTemplate.AddComment(builder, commentOffset);
    return EventTrackTemplate.EndEventTrackTemplate(builder);
  }

  public static void StartEventTrackTemplate(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(0, commentOffset.Value, 0); }
  public static void AddTrackName(FlatBufferBuilder builder, StringOffset trackNameOffset) { builder.AddOffset(1, trackNameOffset.Value, 0); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(2, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventPreset>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventPreset>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EventTrackTemplate> EndEventTrackTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventTrackTemplate>(o);
  }
  public static void FinishEventTrackTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventTrackTemplate> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEventTrackTemplateBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventTrackTemplate> offset) { builder.FinishSizePrefixed(offset.Value); }
  public EventTrackTemplateT UnPack() {
    var _o = new EventTrackTemplateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventTrackTemplateT _o) {
    _o.Comment = this.Comment;
    _o.TrackName = this.TrackName;
    _o.Events = new List<gfl.anm2.fb.EventPresetT>();
    for (var _j = 0; _j < this.EventsLength; ++_j) {_o.Events.Add(this.Events(_j).HasValue ? this.Events(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EventTrackTemplate> Pack(FlatBufferBuilder builder, EventTrackTemplateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventTrackTemplate>);
    var _comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _trackName = _o.TrackName == null ? default(StringOffset) : builder.CreateString(_o.TrackName);
    var _events = default(VectorOffset);
    if (_o.Events != null) {
      var __events = new Offset<gfl.anm2.fb.EventPreset>[_o.Events.Count];
      for (var _j = 0; _j < __events.Length; ++_j) { __events[_j] = gfl.anm2.fb.EventPreset.Pack(builder, _o.Events[_j]); }
      _events = CreateEventsVector(builder, __events);
    }
    return CreateEventTrackTemplate(
      builder,
      _comment,
      _trackName,
      _events);
  }
};

public class EventTrackTemplateT
{
  [Newtonsoft.Json.JsonProperty("comment")]
  public string Comment { get; set; }
  [Newtonsoft.Json.JsonProperty("trackName")]
  public string TrackName { get; set; }
  [Newtonsoft.Json.JsonProperty("events")]
  public List<gfl.anm2.fb.EventPresetT> Events { get; set; }

  public EventTrackTemplateT() {
    this.Comment = null;
    this.TrackName = null;
    this.Events = null;
  }

  public static EventTrackTemplateT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<EventTrackTemplateT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static EventTrackTemplateT DeserializeFromBinary(byte[] fbBuffer) {
    return EventTrackTemplate.GetRootAsEventTrackTemplate(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EventTrackTemplate.FinishEventTrackTemplateBuffer(fbb, EventTrackTemplate.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
