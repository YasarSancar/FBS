// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum StateType : uint
{
  Normal = 0,
  Entry = 1,
  Exit = 2,
  Any = 3,
  Top = 4,
  Reference = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ConditionFunc : uint
{
  Less = 0,
  LEqual = 1,
  Greater = 2,
  GEqual = 3,
  Equal = 4,
  NotEqual = 5,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LogicalOperator : uint
{
  And = 0,
  Or = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum DurationMode : uint
{
  NormalizedFrame = 0,
  Second = 1,
  SubStateRate = 2,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum OffsetMode : uint
{
  NormalizedFrame = 0,
  Sync = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ConditionValue : byte
{
  NONE = 0,
  ConditionValue_Int = 1,
  ConditionValue_Float = 2,
  ConditionValue_Bool = 3,
  ConditionValue_Trigger = 4,
};

public class ConditionValueUnion {
  public ConditionValue Type { get; set; }
  public object Value { get; set; }

  public ConditionValueUnion() {
    this.Type = ConditionValue.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fbj.ConditionValue_IntT AsConditionValue_Int() { return this.As<gfl.anm2.fbj.ConditionValue_IntT>(); }
  public gfl.anm2.fbj.ConditionValue_FloatT AsConditionValue_Float() { return this.As<gfl.anm2.fbj.ConditionValue_FloatT>(); }
  public gfl.anm2.fbj.ConditionValue_BoolT AsConditionValue_Bool() { return this.As<gfl.anm2.fbj.ConditionValue_BoolT>(); }
  public gfl.anm2.fbj.ConditionValue_TriggerT AsConditionValue_Trigger() { return this.As<gfl.anm2.fbj.ConditionValue_TriggerT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, ConditionValueUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case ConditionValue.ConditionValue_Int: return gfl.anm2.fbj.ConditionValue_Int.Pack(builder, _o.AsConditionValue_Int()).Value;
      case ConditionValue.ConditionValue_Float: return gfl.anm2.fbj.ConditionValue_Float.Pack(builder, _o.AsConditionValue_Float()).Value;
      case ConditionValue.ConditionValue_Bool: return gfl.anm2.fbj.ConditionValue_Bool.Pack(builder, _o.AsConditionValue_Bool()).Value;
      case ConditionValue.ConditionValue_Trigger: return gfl.anm2.fbj.ConditionValue_Trigger.Pack(builder, _o.AsConditionValue_Trigger()).Value;
    }
  }
}

public class ConditionValueUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(ConditionValueUnion) || objectType == typeof(System.Collections.Generic.List<ConditionValueUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<ConditionValueUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as ConditionValueUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, ConditionValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<ConditionValueUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as ConditionValueUnion, serializer);
    }
  }
  public ConditionValueUnion ReadJson(Newtonsoft.Json.JsonReader reader, ConditionValueUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case ConditionValue.ConditionValue_Int: _o.Value = serializer.Deserialize<gfl.anm2.fbj.ConditionValue_IntT>(reader); break;
      case ConditionValue.ConditionValue_Float: _o.Value = serializer.Deserialize<gfl.anm2.fbj.ConditionValue_FloatT>(reader); break;
      case ConditionValue.ConditionValue_Bool: _o.Value = serializer.Deserialize<gfl.anm2.fbj.ConditionValue_BoolT>(reader); break;
      case ConditionValue.ConditionValue_Trigger: _o.Value = serializer.Deserialize<gfl.anm2.fbj.ConditionValue_TriggerT>(reader); break;
    }
    return _o;
  }
}

public struct ConditionValue_Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Int GetRootAsConditionValue_Int(ByteBuffer _bb) { return GetRootAsConditionValue_Int(_bb, new ConditionValue_Int()); }
  public static ConditionValue_Int GetRootAsConditionValue_Int(ByteBuffer _bb, ConditionValue_Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fbj.ConditionValue_Int> CreateConditionValue_Int(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    ConditionValue_Int.AddValue(builder, value);
    return ConditionValue_Int.EndConditionValue_Int(builder);
  }

  public static void StartConditionValue_Int(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<gfl.anm2.fbj.ConditionValue_Int> EndConditionValue_Int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ConditionValue_Int>(o);
  }
  public ConditionValue_IntT UnPack() {
    var _o = new ConditionValue_IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_IntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fbj.ConditionValue_Int> Pack(FlatBufferBuilder builder, ConditionValue_IntT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ConditionValue_Int>);
    return CreateConditionValue_Int(
      builder,
      _o.Value);
  }
};

public class ConditionValue_IntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public ConditionValue_IntT() {
    this.Value = 0;
  }
}

public struct ConditionValue_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Float GetRootAsConditionValue_Float(ByteBuffer _bb) { return GetRootAsConditionValue_Float(_bb, new ConditionValue_Float()); }
  public static ConditionValue_Float GetRootAsConditionValue_Float(ByteBuffer _bb, ConditionValue_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fbj.ConditionValue_Float> CreateConditionValue_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    ConditionValue_Float.AddValue(builder, value);
    return ConditionValue_Float.EndConditionValue_Float(builder);
  }

  public static void StartConditionValue_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<gfl.anm2.fbj.ConditionValue_Float> EndConditionValue_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ConditionValue_Float>(o);
  }
  public ConditionValue_FloatT UnPack() {
    var _o = new ConditionValue_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fbj.ConditionValue_Float> Pack(FlatBufferBuilder builder, ConditionValue_FloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ConditionValue_Float>);
    return CreateConditionValue_Float(
      builder,
      _o.Value);
  }
};

public class ConditionValue_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public ConditionValue_FloatT() {
    this.Value = 0.0f;
  }
}

public struct ConditionValue_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Bool GetRootAsConditionValue_Bool(ByteBuffer _bb) { return GetRootAsConditionValue_Bool(_bb, new ConditionValue_Bool()); }
  public static ConditionValue_Bool GetRootAsConditionValue_Bool(ByteBuffer _bb, ConditionValue_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.ConditionValue_Bool> CreateConditionValue_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    ConditionValue_Bool.AddValue(builder, value);
    return ConditionValue_Bool.EndConditionValue_Bool(builder);
  }

  public static void StartConditionValue_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fbj.ConditionValue_Bool> EndConditionValue_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ConditionValue_Bool>(o);
  }
  public ConditionValue_BoolT UnPack() {
    var _o = new ConditionValue_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fbj.ConditionValue_Bool> Pack(FlatBufferBuilder builder, ConditionValue_BoolT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ConditionValue_Bool>);
    return CreateConditionValue_Bool(
      builder,
      _o.Value);
  }
};

public class ConditionValue_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public ConditionValue_BoolT() {
    this.Value = false;
  }
}

public struct ConditionValue_Trigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConditionValue_Trigger GetRootAsConditionValue_Trigger(ByteBuffer _bb) { return GetRootAsConditionValue_Trigger(_bb, new ConditionValue_Trigger()); }
  public static ConditionValue_Trigger GetRootAsConditionValue_Trigger(ByteBuffer _bb, ConditionValue_Trigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionValue_Trigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.ConditionValue_Trigger> CreateConditionValue_Trigger(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    ConditionValue_Trigger.AddValue(builder, value);
    return ConditionValue_Trigger.EndConditionValue_Trigger(builder);
  }

  public static void StartConditionValue_Trigger(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fbj.ConditionValue_Trigger> EndConditionValue_Trigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ConditionValue_Trigger>(o);
  }
  public ConditionValue_TriggerT UnPack() {
    var _o = new ConditionValue_TriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionValue_TriggerT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fbj.ConditionValue_Trigger> Pack(FlatBufferBuilder builder, ConditionValue_TriggerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ConditionValue_Trigger>);
    return CreateConditionValue_Trigger(
      builder,
      _o.Value);
  }
};

public class ConditionValue_TriggerT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public ConditionValue_TriggerT() {
    this.Value = false;
  }
}

public struct Condition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Condition GetRootAsCondition(ByteBuffer _bb) { return GetRootAsCondition(_bb, new Condition()); }
  public static Condition GetRootAsCondition(ByteBuffer _bb, Condition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Condition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ParameterName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.ConditionFunc Func { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.ConditionFunc)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.ConditionFunc.Less; } }
  public gfl.anm2.fbj.ConditionValue ValueType { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.ConditionValue)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fbj.ConditionValue.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fbj.LogicalOperator LogicalOperator { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.LogicalOperator)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.LogicalOperator.And; } }

  public static Offset<gfl.anm2.fbj.Condition> CreateCondition(FlatBufferBuilder builder,
      StringOffset parameterNameOffset = default(StringOffset),
      gfl.anm2.fbj.ConditionFunc func = gfl.anm2.fbj.ConditionFunc.Less,
      gfl.anm2.fbj.ConditionValue value_type = gfl.anm2.fbj.ConditionValue.NONE,
      int valueOffset = 0,
      gfl.anm2.fbj.LogicalOperator logicalOperator = gfl.anm2.fbj.LogicalOperator.And) {
    builder.StartTable(5);
    Condition.AddLogicalOperator(builder, logicalOperator);
    Condition.AddValue(builder, valueOffset);
    Condition.AddFunc(builder, func);
    Condition.AddParameterName(builder, parameterNameOffset);
    Condition.AddValueType(builder, value_type);
    return Condition.EndCondition(builder);
  }

  public static void StartCondition(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(0, parameterNameOffset.Value, 0); }
  public static void AddFunc(FlatBufferBuilder builder, gfl.anm2.fbj.ConditionFunc func) { builder.AddUint(1, (uint)func, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.anm2.fbj.ConditionValue valueType) { builder.AddByte(2, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(3, valueOffset, 0); }
  public static void AddLogicalOperator(FlatBufferBuilder builder, gfl.anm2.fbj.LogicalOperator logicalOperator) { builder.AddUint(4, (uint)logicalOperator, 0); }
  public static Offset<gfl.anm2.fbj.Condition> EndCondition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Condition>(o);
  }
  public ConditionT UnPack() {
    var _o = new ConditionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConditionT _o) {
    _o.ParameterName = this.ParameterName;
    _o.Func = this.Func;
    _o.Value = new gfl.anm2.fbj.ConditionValueUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.anm2.fbj.ConditionValue.ConditionValue_Int:
        _o.Value.Value = this.Value<gfl.anm2.fbj.ConditionValue_Int>().HasValue ? this.Value<gfl.anm2.fbj.ConditionValue_Int>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.ConditionValue.ConditionValue_Float:
        _o.Value.Value = this.Value<gfl.anm2.fbj.ConditionValue_Float>().HasValue ? this.Value<gfl.anm2.fbj.ConditionValue_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.ConditionValue.ConditionValue_Bool:
        _o.Value.Value = this.Value<gfl.anm2.fbj.ConditionValue_Bool>().HasValue ? this.Value<gfl.anm2.fbj.ConditionValue_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fbj.ConditionValue.ConditionValue_Trigger:
        _o.Value.Value = this.Value<gfl.anm2.fbj.ConditionValue_Trigger>().HasValue ? this.Value<gfl.anm2.fbj.ConditionValue_Trigger>().Value.UnPack() : null;
        break;
    }
    _o.LogicalOperator = this.LogicalOperator;
  }
  public static Offset<gfl.anm2.fbj.Condition> Pack(FlatBufferBuilder builder, ConditionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Condition>);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    var _value_type = _o.Value == null ? gfl.anm2.fbj.ConditionValue.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.anm2.fbj.ConditionValueUnion.Pack(builder, _o.Value);
    return CreateCondition(
      builder,
      _parameterName,
      _o.Func,
      _value_type,
      _value,
      _o.LogicalOperator);
  }
};

public class ConditionT
{
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("func")]
  public gfl.anm2.fbj.ConditionFunc Func { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.anm2.fbj.ConditionValue ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.anm2.fbj.ConditionValue.NONE;
    }
    set {
      this.Value = new gfl.anm2.fbj.ConditionValueUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fbj.ConditionValueUnion_JsonConverter))]
  public gfl.anm2.fbj.ConditionValueUnion Value { get; set; }
  [Newtonsoft.Json.JsonProperty("logicalOperator")]
  public gfl.anm2.fbj.LogicalOperator LogicalOperator { get; set; }

  public ConditionT() {
    this.ParameterName = null;
    this.Func = gfl.anm2.fbj.ConditionFunc.Less;
    this.Value = null;
    this.LogicalOperator = gfl.anm2.fbj.LogicalOperator.And;
  }
}

public struct Transition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Transition GetRootAsTransition(ByteBuffer _bb) { return GetRootAsTransition(_bb, new Transition()); }
  public static Transition GetRootAsTransition(ByteBuffer _bb, Transition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Priority { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsVirtual { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string TargetName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTargetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTargetNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool HasExitTime { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float ExitTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string ExitTimeParameterName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExitTimeParameterNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetExitTimeParameterNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetExitTimeParameterNameArray() { return __p.__vector_as_array<byte>(14); }
  public gfl.anm2.fbj.LogicalOperator LogicalOperator { get { int o = __p.__offset(16); return o != 0 ? (gfl.anm2.fbj.LogicalOperator)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.LogicalOperator.And; } }
  public gfl.anm2.fbj.DurationMode DurationMode { get { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fbj.DurationMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.DurationMode.NormalizedFrame; } }
  public float Duration { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string DurationParameterName { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDurationParameterNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDurationParameterNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDurationParameterNameArray() { return __p.__vector_as_array<byte>(22); }
  public gfl.anm2.fbj.OffsetMode OffsetMode { get { int o = __p.__offset(24); return o != 0 ? (gfl.anm2.fbj.OffsetMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.OffsetMode.NormalizedFrame; } }
  public float Offset { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string OffsetParameterName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetParameterNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOffsetParameterNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOffsetParameterNameArray() { return __p.__vector_as_array<byte>(28); }
  public bool CanInterruption { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool CanSelfTransition { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.anm2.fbj.Condition? ConditionList(int j) { int o = __p.__offset(34); return o != 0 ? (gfl.anm2.fbj.Condition?)(new gfl.anm2.fbj.Condition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionListLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Transition> CreateTransition(FlatBufferBuilder builder,
      int priority = 0,
      bool isVirtual = false,
      StringOffset targetNameOffset = default(StringOffset),
      bool hasExitTime = false,
      float exitTime = 0.0f,
      StringOffset exitTimeParameterNameOffset = default(StringOffset),
      gfl.anm2.fbj.LogicalOperator logicalOperator = gfl.anm2.fbj.LogicalOperator.And,
      gfl.anm2.fbj.DurationMode durationMode = gfl.anm2.fbj.DurationMode.NormalizedFrame,
      float duration = 0.0f,
      StringOffset durationParameterNameOffset = default(StringOffset),
      gfl.anm2.fbj.OffsetMode offsetMode = gfl.anm2.fbj.OffsetMode.NormalizedFrame,
      float offset = 0.0f,
      StringOffset offsetParameterNameOffset = default(StringOffset),
      bool canInterruption = false,
      bool canSelfTransition = false,
      VectorOffset conditionListOffset = default(VectorOffset)) {
    builder.StartTable(16);
    Transition.AddConditionList(builder, conditionListOffset);
    Transition.AddOffsetParameterName(builder, offsetParameterNameOffset);
    Transition.AddOffset(builder, offset);
    Transition.AddOffsetMode(builder, offsetMode);
    Transition.AddDurationParameterName(builder, durationParameterNameOffset);
    Transition.AddDuration(builder, duration);
    Transition.AddDurationMode(builder, durationMode);
    Transition.AddLogicalOperator(builder, logicalOperator);
    Transition.AddExitTimeParameterName(builder, exitTimeParameterNameOffset);
    Transition.AddExitTime(builder, exitTime);
    Transition.AddTargetName(builder, targetNameOffset);
    Transition.AddPriority(builder, priority);
    Transition.AddCanSelfTransition(builder, canSelfTransition);
    Transition.AddCanInterruption(builder, canInterruption);
    Transition.AddHasExitTime(builder, hasExitTime);
    Transition.AddIsVirtual(builder, isVirtual);
    return Transition.EndTransition(builder);
  }

  public static void StartTransition(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(0, priority, 0); }
  public static void AddIsVirtual(FlatBufferBuilder builder, bool isVirtual) { builder.AddBool(1, isVirtual, false); }
  public static void AddTargetName(FlatBufferBuilder builder, StringOffset targetNameOffset) { builder.AddOffset(2, targetNameOffset.Value, 0); }
  public static void AddHasExitTime(FlatBufferBuilder builder, bool hasExitTime) { builder.AddBool(3, hasExitTime, false); }
  public static void AddExitTime(FlatBufferBuilder builder, float exitTime) { builder.AddFloat(4, exitTime, 0.0f); }
  public static void AddExitTimeParameterName(FlatBufferBuilder builder, StringOffset exitTimeParameterNameOffset) { builder.AddOffset(5, exitTimeParameterNameOffset.Value, 0); }
  public static void AddLogicalOperator(FlatBufferBuilder builder, gfl.anm2.fbj.LogicalOperator logicalOperator) { builder.AddUint(6, (uint)logicalOperator, 0); }
  public static void AddDurationMode(FlatBufferBuilder builder, gfl.anm2.fbj.DurationMode durationMode) { builder.AddUint(7, (uint)durationMode, 0); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(8, duration, 0.0f); }
  public static void AddDurationParameterName(FlatBufferBuilder builder, StringOffset durationParameterNameOffset) { builder.AddOffset(9, durationParameterNameOffset.Value, 0); }
  public static void AddOffsetMode(FlatBufferBuilder builder, gfl.anm2.fbj.OffsetMode offsetMode) { builder.AddUint(10, (uint)offsetMode, 0); }
  public static void AddOffset(FlatBufferBuilder builder, float offset) { builder.AddFloat(11, offset, 0.0f); }
  public static void AddOffsetParameterName(FlatBufferBuilder builder, StringOffset offsetParameterNameOffset) { builder.AddOffset(12, offsetParameterNameOffset.Value, 0); }
  public static void AddCanInterruption(FlatBufferBuilder builder, bool canInterruption) { builder.AddBool(13, canInterruption, false); }
  public static void AddCanSelfTransition(FlatBufferBuilder builder, bool canSelfTransition) { builder.AddBool(14, canSelfTransition, false); }
  public static void AddConditionList(FlatBufferBuilder builder, VectorOffset conditionListOffset) { builder.AddOffset(15, conditionListOffset.Value, 0); }
  public static VectorOffset CreateConditionListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Condition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Condition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Transition> EndTransition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Transition>(o);
  }
  public TransitionT UnPack() {
    var _o = new TransitionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TransitionT _o) {
    _o.Priority = this.Priority;
    _o.IsVirtual = this.IsVirtual;
    _o.TargetName = this.TargetName;
    _o.HasExitTime = this.HasExitTime;
    _o.ExitTime = this.ExitTime;
    _o.ExitTimeParameterName = this.ExitTimeParameterName;
    _o.LogicalOperator = this.LogicalOperator;
    _o.DurationMode = this.DurationMode;
    _o.Duration = this.Duration;
    _o.DurationParameterName = this.DurationParameterName;
    _o.OffsetMode = this.OffsetMode;
    _o.Offset = this.Offset;
    _o.OffsetParameterName = this.OffsetParameterName;
    _o.CanInterruption = this.CanInterruption;
    _o.CanSelfTransition = this.CanSelfTransition;
    _o.ConditionList = new List<gfl.anm2.fbj.ConditionT>();
    for (var _j = 0; _j < this.ConditionListLength; ++_j) {_o.ConditionList.Add(this.ConditionList(_j).HasValue ? this.ConditionList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Transition> Pack(FlatBufferBuilder builder, TransitionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Transition>);
    var _targetName = _o.TargetName == null ? default(StringOffset) : builder.CreateString(_o.TargetName);
    var _exitTimeParameterName = _o.ExitTimeParameterName == null ? default(StringOffset) : builder.CreateString(_o.ExitTimeParameterName);
    var _durationParameterName = _o.DurationParameterName == null ? default(StringOffset) : builder.CreateString(_o.DurationParameterName);
    var _offsetParameterName = _o.OffsetParameterName == null ? default(StringOffset) : builder.CreateString(_o.OffsetParameterName);
    var _conditionList = default(VectorOffset);
    if (_o.ConditionList != null) {
      var __conditionList = new Offset<gfl.anm2.fbj.Condition>[_o.ConditionList.Count];
      for (var _j = 0; _j < __conditionList.Length; ++_j) { __conditionList[_j] = gfl.anm2.fbj.Condition.Pack(builder, _o.ConditionList[_j]); }
      _conditionList = CreateConditionListVector(builder, __conditionList);
    }
    return CreateTransition(
      builder,
      _o.Priority,
      _o.IsVirtual,
      _targetName,
      _o.HasExitTime,
      _o.ExitTime,
      _exitTimeParameterName,
      _o.LogicalOperator,
      _o.DurationMode,
      _o.Duration,
      _durationParameterName,
      _o.OffsetMode,
      _o.Offset,
      _offsetParameterName,
      _o.CanInterruption,
      _o.CanSelfTransition,
      _conditionList);
  }
};

public class TransitionT
{
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("isVirtual")]
  public bool IsVirtual { get; set; }
  [Newtonsoft.Json.JsonProperty("targetName")]
  public string TargetName { get; set; }
  [Newtonsoft.Json.JsonProperty("hasExitTime")]
  public bool HasExitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("exitTime")]
  public float ExitTime { get; set; }
  [Newtonsoft.Json.JsonProperty("exitTimeParameterName")]
  public string ExitTimeParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("logicalOperator")]
  public gfl.anm2.fbj.LogicalOperator LogicalOperator { get; set; }
  [Newtonsoft.Json.JsonProperty("durationMode")]
  public gfl.anm2.fbj.DurationMode DurationMode { get; set; }
  [Newtonsoft.Json.JsonProperty("duration")]
  public float Duration { get; set; }
  [Newtonsoft.Json.JsonProperty("durationParameterName")]
  public string DurationParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetMode")]
  public gfl.anm2.fbj.OffsetMode OffsetMode { get; set; }
  [Newtonsoft.Json.JsonProperty("offset")]
  public float Offset { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetParameterName")]
  public string OffsetParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("canInterruption")]
  public bool CanInterruption { get; set; }
  [Newtonsoft.Json.JsonProperty("canSelfTransition")]
  public bool CanSelfTransition { get; set; }
  [Newtonsoft.Json.JsonProperty("conditionList")]
  public List<gfl.anm2.fbj.ConditionT> ConditionList { get; set; }

  public TransitionT() {
    this.Priority = 0;
    this.IsVirtual = false;
    this.TargetName = null;
    this.HasExitTime = false;
    this.ExitTime = 0.0f;
    this.ExitTimeParameterName = null;
    this.LogicalOperator = gfl.anm2.fbj.LogicalOperator.And;
    this.DurationMode = gfl.anm2.fbj.DurationMode.NormalizedFrame;
    this.Duration = 0.0f;
    this.DurationParameterName = null;
    this.OffsetMode = gfl.anm2.fbj.OffsetMode.NormalizedFrame;
    this.Offset = 0.0f;
    this.OffsetParameterName = null;
    this.CanInterruption = false;
    this.CanSelfTransition = false;
    this.ConditionList = null;
  }
}

public struct Source : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Source GetRootAsSource(ByteBuffer _bb) { return GetRootAsSource(_bb, new Source()); }
  public static Source GetRootAsSource(ByteBuffer _bb, Source obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Source __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(4); }
  public float Speed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SpeedParameterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpeedParameterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSpeedParameterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSpeedParameterNameArray() { return __p.__vector_as_array<byte>(8); }
  public float PhysicsWeight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public string PhysicsWeightParameterName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhysicsWeightParameterNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPhysicsWeightParameterNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPhysicsWeightParameterNameArray() { return __p.__vector_as_array<byte>(12); }
  public float WindWeight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public string WindWeightParameterName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindWeightParameterNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetWindWeightParameterNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetWindWeightParameterNameArray() { return __p.__vector_as_array<byte>(16); }
  public float WindNoiseWeight { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public string WindNoiseWeightParameterName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindNoiseWeightParameterNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetWindNoiseWeightParameterNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetWindNoiseWeightParameterNameArray() { return __p.__vector_as_array<byte>(20); }
  public gfl.anm2.fb.FloatOrParameter? AdditionalParameterList(int j) { int o = __p.__offset(22); return o != 0 ? (gfl.anm2.fb.FloatOrParameter?)(new gfl.anm2.fb.FloatOrParameter()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AdditionalParameterListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string AdditionalParameterNameList(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AdditionalParameterNameListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Source> CreateSource(FlatBufferBuilder builder,
      StringOffset resourceNameOffset = default(StringOffset),
      float speed = 0.0f,
      StringOffset speedParameterNameOffset = default(StringOffset),
      float physicsWeight = 1.0f,
      StringOffset physicsWeightParameterNameOffset = default(StringOffset),
      float windWeight = 1.0f,
      StringOffset windWeightParameterNameOffset = default(StringOffset),
      float windNoiseWeight = 1.0f,
      StringOffset windNoiseWeightParameterNameOffset = default(StringOffset),
      VectorOffset additionalParameterListOffset = default(VectorOffset),
      VectorOffset additionalParameterNameListOffset = default(VectorOffset)) {
    builder.StartTable(11);
    Source.AddAdditionalParameterNameList(builder, additionalParameterNameListOffset);
    Source.AddAdditionalParameterList(builder, additionalParameterListOffset);
    Source.AddWindNoiseWeightParameterName(builder, windNoiseWeightParameterNameOffset);
    Source.AddWindNoiseWeight(builder, windNoiseWeight);
    Source.AddWindWeightParameterName(builder, windWeightParameterNameOffset);
    Source.AddWindWeight(builder, windWeight);
    Source.AddPhysicsWeightParameterName(builder, physicsWeightParameterNameOffset);
    Source.AddPhysicsWeight(builder, physicsWeight);
    Source.AddSpeedParameterName(builder, speedParameterNameOffset);
    Source.AddSpeed(builder, speed);
    Source.AddResourceName(builder, resourceNameOffset);
    return Source.EndSource(builder);
  }

  public static void StartSource(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset resourceNameOffset) { builder.AddOffset(0, resourceNameOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(1, speed, 0.0f); }
  public static void AddSpeedParameterName(FlatBufferBuilder builder, StringOffset speedParameterNameOffset) { builder.AddOffset(2, speedParameterNameOffset.Value, 0); }
  public static void AddPhysicsWeight(FlatBufferBuilder builder, float physicsWeight) { builder.AddFloat(3, physicsWeight, 1.0f); }
  public static void AddPhysicsWeightParameterName(FlatBufferBuilder builder, StringOffset physicsWeightParameterNameOffset) { builder.AddOffset(4, physicsWeightParameterNameOffset.Value, 0); }
  public static void AddWindWeight(FlatBufferBuilder builder, float windWeight) { builder.AddFloat(5, windWeight, 1.0f); }
  public static void AddWindWeightParameterName(FlatBufferBuilder builder, StringOffset windWeightParameterNameOffset) { builder.AddOffset(6, windWeightParameterNameOffset.Value, 0); }
  public static void AddWindNoiseWeight(FlatBufferBuilder builder, float windNoiseWeight) { builder.AddFloat(7, windNoiseWeight, 1.0f); }
  public static void AddWindNoiseWeightParameterName(FlatBufferBuilder builder, StringOffset windNoiseWeightParameterNameOffset) { builder.AddOffset(8, windNoiseWeightParameterNameOffset.Value, 0); }
  public static void AddAdditionalParameterList(FlatBufferBuilder builder, VectorOffset additionalParameterListOffset) { builder.AddOffset(9, additionalParameterListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FloatOrParameter>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FloatOrParameter>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdditionalParameterNameList(FlatBufferBuilder builder, VectorOffset additionalParameterNameListOffset) { builder.AddOffset(10, additionalParameterNameListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterNameListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterNameListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterNameListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Source> EndSource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Source>(o);
  }
  public SourceT UnPack() {
    var _o = new SourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SourceT _o) {
    _o.ResourceName = this.ResourceName;
    _o.Speed = this.Speed;
    _o.SpeedParameterName = this.SpeedParameterName;
    _o.PhysicsWeight = this.PhysicsWeight;
    _o.PhysicsWeightParameterName = this.PhysicsWeightParameterName;
    _o.WindWeight = this.WindWeight;
    _o.WindWeightParameterName = this.WindWeightParameterName;
    _o.WindNoiseWeight = this.WindNoiseWeight;
    _o.WindNoiseWeightParameterName = this.WindNoiseWeightParameterName;
    _o.AdditionalParameterList = new List<gfl.anm2.fb.FloatOrParameterT>();
    for (var _j = 0; _j < this.AdditionalParameterListLength; ++_j) {_o.AdditionalParameterList.Add(this.AdditionalParameterList(_j).HasValue ? this.AdditionalParameterList(_j).Value.UnPack() : null);}
    _o.AdditionalParameterNameList = new List<string>();
    for (var _j = 0; _j < this.AdditionalParameterNameListLength; ++_j) {_o.AdditionalParameterNameList.Add(this.AdditionalParameterNameList(_j));}
  }
  public static Offset<gfl.anm2.fbj.Source> Pack(FlatBufferBuilder builder, SourceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Source>);
    var _resourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    var _speedParameterName = _o.SpeedParameterName == null ? default(StringOffset) : builder.CreateString(_o.SpeedParameterName);
    var _physicsWeightParameterName = _o.PhysicsWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.PhysicsWeightParameterName);
    var _windWeightParameterName = _o.WindWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.WindWeightParameterName);
    var _windNoiseWeightParameterName = _o.WindNoiseWeightParameterName == null ? default(StringOffset) : builder.CreateString(_o.WindNoiseWeightParameterName);
    var _additionalParameterList = default(VectorOffset);
    if (_o.AdditionalParameterList != null) {
      var __additionalParameterList = new Offset<gfl.anm2.fb.FloatOrParameter>[_o.AdditionalParameterList.Count];
      for (var _j = 0; _j < __additionalParameterList.Length; ++_j) { __additionalParameterList[_j] = gfl.anm2.fb.FloatOrParameter.Pack(builder, _o.AdditionalParameterList[_j]); }
      _additionalParameterList = CreateAdditionalParameterListVector(builder, __additionalParameterList);
    }
    var _additionalParameterNameList = default(VectorOffset);
    if (_o.AdditionalParameterNameList != null) {
      var __additionalParameterNameList = new StringOffset[_o.AdditionalParameterNameList.Count];
      for (var _j = 0; _j < __additionalParameterNameList.Length; ++_j) { __additionalParameterNameList[_j] = builder.CreateString(_o.AdditionalParameterNameList[_j]); }
      _additionalParameterNameList = CreateAdditionalParameterNameListVector(builder, __additionalParameterNameList);
    }
    return CreateSource(
      builder,
      _resourceName,
      _o.Speed,
      _speedParameterName,
      _o.PhysicsWeight,
      _physicsWeightParameterName,
      _o.WindWeight,
      _windWeightParameterName,
      _o.WindNoiseWeight,
      _windNoiseWeightParameterName,
      _additionalParameterList,
      _additionalParameterNameList);
  }
};

public class SourceT
{
  [Newtonsoft.Json.JsonProperty("resourceName")]
  public string ResourceName { get; set; }
  [Newtonsoft.Json.JsonProperty("speed")]
  public float Speed { get; set; }
  [Newtonsoft.Json.JsonProperty("speedParameterName")]
  public string SpeedParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("physicsWeight")]
  public float PhysicsWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("physicsWeightParameterName")]
  public string PhysicsWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("windWeight")]
  public float WindWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("windWeightParameterName")]
  public string WindWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("windNoiseWeight")]
  public float WindNoiseWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("windNoiseWeightParameterName")]
  public string WindNoiseWeightParameterName { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterList")]
  public List<gfl.anm2.fb.FloatOrParameterT> AdditionalParameterList { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterNameList")]
  public List<string> AdditionalParameterNameList { get; set; }

  public SourceT() {
    this.ResourceName = null;
    this.Speed = 0.0f;
    this.SpeedParameterName = null;
    this.PhysicsWeight = 1.0f;
    this.PhysicsWeightParameterName = null;
    this.WindWeight = 1.0f;
    this.WindWeightParameterName = null;
    this.WindNoiseWeight = 1.0f;
    this.WindNoiseWeightParameterName = null;
    this.AdditionalParameterList = null;
    this.AdditionalParameterNameList = null;
  }
}

public struct Vector2 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Vector2 GetRootAsVector2(ByteBuffer _bb) { return GetRootAsVector2(_bb, new Vector2()); }
  public static Vector2 GetRootAsVector2(ByteBuffer _bb, Vector2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fbj.Vector2> CreateVector2(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f) {
    builder.StartTable(2);
    Vector2.AddY(builder, y);
    Vector2.AddX(builder, x);
    return Vector2.EndVector2(builder);
  }

  public static void StartVector2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static Offset<gfl.anm2.fbj.Vector2> EndVector2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Vector2>(o);
  }
  public Vector2T UnPack() {
    var _o = new Vector2T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector2T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<gfl.anm2.fbj.Vector2> Pack(FlatBufferBuilder builder, Vector2T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Vector2>);
    return CreateVector2(
      builder,
      _o.X,
      _o.Y);
  }
};

public class Vector2T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }

  public Vector2T() {
    this.X = 0.0f;
    this.Y = 0.0f;
  }
}

public struct ResourceOverride : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ResourceOverride GetRootAsResourceOverride(ByteBuffer _bb) { return GetRootAsResourceOverride(_bb, new ResourceOverride()); }
  public static ResourceOverride GetRootAsResourceOverride(ByteBuffer _bb, ResourceOverride obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResourceOverride __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Original { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginalBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOriginalBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOriginalArray() { return __p.__vector_as_array<byte>(4); }
  public string Override { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOverrideBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetOverrideBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetOverrideArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fbj.ResourceOverride> CreateResourceOverride(FlatBufferBuilder builder,
      StringOffset originalOffset = default(StringOffset),
      StringOffset overrideOffset = default(StringOffset)) {
    builder.StartTable(2);
    ResourceOverride.AddOverride(builder, overrideOffset);
    ResourceOverride.AddOriginal(builder, originalOffset);
    return ResourceOverride.EndResourceOverride(builder);
  }

  public static void StartResourceOverride(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddOriginal(FlatBufferBuilder builder, StringOffset originalOffset) { builder.AddOffset(0, originalOffset.Value, 0); }
  public static void AddOverride(FlatBufferBuilder builder, StringOffset overrideOffset) { builder.AddOffset(1, overrideOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.ResourceOverride> EndResourceOverride(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.ResourceOverride>(o);
  }
  public ResourceOverrideT UnPack() {
    var _o = new ResourceOverrideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResourceOverrideT _o) {
    _o.Original = this.Original;
    _o.Override = this.Override;
  }
  public static Offset<gfl.anm2.fbj.ResourceOverride> Pack(FlatBufferBuilder builder, ResourceOverrideT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.ResourceOverride>);
    var _original = _o.Original == null ? default(StringOffset) : builder.CreateString(_o.Original);
    var _override = _o.Override == null ? default(StringOffset) : builder.CreateString(_o.Override);
    return CreateResourceOverride(
      builder,
      _original,
      _override);
  }
};

public class ResourceOverrideT
{
  [Newtonsoft.Json.JsonProperty("original")]
  public string Original { get; set; }
  [Newtonsoft.Json.JsonProperty("override")]
  public string Override { get; set; }

  public ResourceOverrideT() {
    this.Original = null;
    this.Override = null;
  }
}

public struct TransitionOverride : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TransitionOverride GetRootAsTransitionOverride(ByteBuffer _bb) { return GetRootAsTransitionOverride(_bb, new TransitionOverride()); }
  public static TransitionOverride GetRootAsTransitionOverride(ByteBuffer _bb, TransitionOverride obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TransitionOverride __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string From { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFromBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFromBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFromArray() { return __p.__vector_as_array<byte>(4); }
  public string To { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetToBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetToBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetToArray() { return __p.__vector_as_array<byte>(6); }
  public bool Enabled { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.TransitionOverride> CreateTransitionOverride(FlatBufferBuilder builder,
      StringOffset fromOffset = default(StringOffset),
      StringOffset toOffset = default(StringOffset),
      bool enabled = false) {
    builder.StartTable(3);
    TransitionOverride.AddTo(builder, toOffset);
    TransitionOverride.AddFrom(builder, fromOffset);
    TransitionOverride.AddEnabled(builder, enabled);
    return TransitionOverride.EndTransitionOverride(builder);
  }

  public static void StartTransitionOverride(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFrom(FlatBufferBuilder builder, StringOffset fromOffset) { builder.AddOffset(0, fromOffset.Value, 0); }
  public static void AddTo(FlatBufferBuilder builder, StringOffset toOffset) { builder.AddOffset(1, toOffset.Value, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(2, enabled, false); }
  public static Offset<gfl.anm2.fbj.TransitionOverride> EndTransitionOverride(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.TransitionOverride>(o);
  }
  public TransitionOverrideT UnPack() {
    var _o = new TransitionOverrideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TransitionOverrideT _o) {
    _o.From = this.From;
    _o.To = this.To;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.anm2.fbj.TransitionOverride> Pack(FlatBufferBuilder builder, TransitionOverrideT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.TransitionOverride>);
    var _from = _o.From == null ? default(StringOffset) : builder.CreateString(_o.From);
    var _to = _o.To == null ? default(StringOffset) : builder.CreateString(_o.To);
    return CreateTransitionOverride(
      builder,
      _from,
      _to,
      _o.Enabled);
  }
};

public class TransitionOverrideT
{
  [Newtonsoft.Json.JsonProperty("from")]
  public string From { get; set; }
  [Newtonsoft.Json.JsonProperty("to")]
  public string To { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public TransitionOverrideT() {
    this.From = null;
    this.To = null;
    this.Enabled = false;
  }
}

public struct Reference : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Reference GetRootAsReference(ByteBuffer _bb) { return GetRootAsReference(_bb, new Reference()); }
  public static Reference GetRootAsReference(ByteBuffer _bb, Reference obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Reference __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.ResourceOverride? ResourceOverrideList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.ResourceOverride?)(new gfl.anm2.fbj.ResourceOverride()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ResourceOverrideListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.TransitionOverride? TransitionOverrideList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.TransitionOverride?)(new gfl.anm2.fbj.TransitionOverride()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TransitionOverrideListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Reference> CreateReference(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      VectorOffset resourceOverrideListOffset = default(VectorOffset),
      VectorOffset transitionOverrideListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Reference.AddTransitionOverrideList(builder, transitionOverrideListOffset);
    Reference.AddResourceOverrideList(builder, resourceOverrideListOffset);
    Reference.AddFilePath(builder, filePathOffset);
    return Reference.EndReference(builder);
  }

  public static void StartReference(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddResourceOverrideList(FlatBufferBuilder builder, VectorOffset resourceOverrideListOffset) { builder.AddOffset(1, resourceOverrideListOffset.Value, 0); }
  public static VectorOffset CreateResourceOverrideListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ResourceOverride>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateResourceOverrideListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ResourceOverride>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartResourceOverrideListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransitionOverrideList(FlatBufferBuilder builder, VectorOffset transitionOverrideListOffset) { builder.AddOffset(2, transitionOverrideListOffset.Value, 0); }
  public static VectorOffset CreateTransitionOverrideListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.TransitionOverride>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransitionOverrideListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.TransitionOverride>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTransitionOverrideListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Reference> EndReference(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Reference>(o);
  }
  public ReferenceT UnPack() {
    var _o = new ReferenceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ReferenceT _o) {
    _o.FilePath = this.FilePath;
    _o.ResourceOverrideList = new List<gfl.anm2.fbj.ResourceOverrideT>();
    for (var _j = 0; _j < this.ResourceOverrideListLength; ++_j) {_o.ResourceOverrideList.Add(this.ResourceOverrideList(_j).HasValue ? this.ResourceOverrideList(_j).Value.UnPack() : null);}
    _o.TransitionOverrideList = new List<gfl.anm2.fbj.TransitionOverrideT>();
    for (var _j = 0; _j < this.TransitionOverrideListLength; ++_j) {_o.TransitionOverrideList.Add(this.TransitionOverrideList(_j).HasValue ? this.TransitionOverrideList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Reference> Pack(FlatBufferBuilder builder, ReferenceT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Reference>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _resourceOverrideList = default(VectorOffset);
    if (_o.ResourceOverrideList != null) {
      var __resourceOverrideList = new Offset<gfl.anm2.fbj.ResourceOverride>[_o.ResourceOverrideList.Count];
      for (var _j = 0; _j < __resourceOverrideList.Length; ++_j) { __resourceOverrideList[_j] = gfl.anm2.fbj.ResourceOverride.Pack(builder, _o.ResourceOverrideList[_j]); }
      _resourceOverrideList = CreateResourceOverrideListVector(builder, __resourceOverrideList);
    }
    var _transitionOverrideList = default(VectorOffset);
    if (_o.TransitionOverrideList != null) {
      var __transitionOverrideList = new Offset<gfl.anm2.fbj.TransitionOverride>[_o.TransitionOverrideList.Count];
      for (var _j = 0; _j < __transitionOverrideList.Length; ++_j) { __transitionOverrideList[_j] = gfl.anm2.fbj.TransitionOverride.Pack(builder, _o.TransitionOverrideList[_j]); }
      _transitionOverrideList = CreateTransitionOverrideListVector(builder, __transitionOverrideList);
    }
    return CreateReference(
      builder,
      _filePath,
      _resourceOverrideList,
      _transitionOverrideList);
  }
};

public class ReferenceT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("resourceOverrideList")]
  public List<gfl.anm2.fbj.ResourceOverrideT> ResourceOverrideList { get; set; }
  [Newtonsoft.Json.JsonProperty("transitionOverrideList")]
  public List<gfl.anm2.fbj.TransitionOverrideT> TransitionOverrideList { get; set; }

  public ReferenceT() {
    this.FilePath = null;
    this.ResourceOverrideList = null;
    this.TransitionOverrideList = null;
  }
}

public struct State : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static State GetRootAsState(ByteBuffer _bb) { return GetRootAsState(_bb, new State()); }
  public static State GetRootAsState(ByteBuffer _bb, State obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.StateType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.StateType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.StateType.Normal; } }
  public gfl.anm2.fbj.Vector2? Position { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.Vector2?)(new gfl.anm2.fbj.Vector2()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.Source? Source { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.Source?)(new gfl.anm2.fbj.Source()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.Reference? Reference { get { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fbj.Reference?)(new gfl.anm2.fbj.Reference()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string LayerName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLayerNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLayerNameArray() { return __p.__vector_as_array<byte>(16); }
  public gfl.anm2.fbj.Transition? TransitionList(int j) { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fbj.Transition?)(new gfl.anm2.fbj.Transition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TransitionListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.State? SubStateList(int j) { int o = __p.__offset(20); return o != 0 ? (gfl.anm2.fbj.State?)(new gfl.anm2.fbj.State()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubStateListLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Tags(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.StateDetail DetailType { get { int o = __p.__offset(24); return o != 0 ? (gfl.anm2.fb.StateDetail)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.StateDetail.NONE; } }
  public TTable? Detail<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(26); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fbj.State> CreateState(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fbj.StateType type = gfl.anm2.fbj.StateType.Normal,
      Offset<gfl.anm2.fbj.Vector2> positionOffset = default(Offset<gfl.anm2.fbj.Vector2>),
      Offset<gfl.anm2.fbj.Source> sourceOffset = default(Offset<gfl.anm2.fbj.Source>),
      Offset<gfl.anm2.fbj.Reference> referenceOffset = default(Offset<gfl.anm2.fbj.Reference>),
      StringOffset layerNameOffset = default(StringOffset),
      VectorOffset transitionListOffset = default(VectorOffset),
      VectorOffset subStateListOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      gfl.anm2.fb.StateDetail detail_type = gfl.anm2.fb.StateDetail.NONE,
      int detailOffset = 0) {
    builder.StartTable(12);
    State.AddDetail(builder, detailOffset);
    State.AddTags(builder, tagsOffset);
    State.AddSubStateList(builder, subStateListOffset);
    State.AddTransitionList(builder, transitionListOffset);
    State.AddLayerName(builder, layerNameOffset);
    State.AddReference(builder, referenceOffset);
    State.AddSource(builder, sourceOffset);
    State.AddPosition(builder, positionOffset);
    State.AddType(builder, type);
    State.AddName(builder, nameOffset);
    State.AddDetailType(builder, detail_type);
    return State.EndState(builder);
  }

  public static void StartState(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fbj.StateType type) { builder.AddUint(1, (uint)type, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Vector2> positionOffset) { builder.AddOffset(3, positionOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Source> sourceOffset) { builder.AddOffset(4, sourceOffset.Value, 0); }
  public static void AddReference(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Reference> referenceOffset) { builder.AddOffset(5, referenceOffset.Value, 0); }
  public static void AddLayerName(FlatBufferBuilder builder, StringOffset layerNameOffset) { builder.AddOffset(6, layerNameOffset.Value, 0); }
  public static void AddTransitionList(FlatBufferBuilder builder, VectorOffset transitionListOffset) { builder.AddOffset(7, transitionListOffset.Value, 0); }
  public static VectorOffset CreateTransitionListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Transition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransitionListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Transition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTransitionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubStateList(FlatBufferBuilder builder, VectorOffset subStateListOffset) { builder.AddOffset(8, subStateListOffset.Value, 0); }
  public static VectorOffset CreateSubStateListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.State>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubStateListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.State>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(9, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDetailType(FlatBufferBuilder builder, gfl.anm2.fb.StateDetail detailType) { builder.AddByte(10, (byte)detailType, 0); }
  public static void AddDetail(FlatBufferBuilder builder, int detailOffset) { builder.AddOffset(11, detailOffset, 0); }
  public static Offset<gfl.anm2.fbj.State> EndState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.State>(o);
  }
  public StateT UnPack() {
    var _o = new StateT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Source = this.Source.HasValue ? this.Source.Value.UnPack() : null;
    _o.Reference = this.Reference.HasValue ? this.Reference.Value.UnPack() : null;
    _o.LayerName = this.LayerName;
    _o.TransitionList = new List<gfl.anm2.fbj.TransitionT>();
    for (var _j = 0; _j < this.TransitionListLength; ++_j) {_o.TransitionList.Add(this.TransitionList(_j).HasValue ? this.TransitionList(_j).Value.UnPack() : null);}
    _o.SubStateList = new List<gfl.anm2.fbj.StateT>();
    for (var _j = 0; _j < this.SubStateListLength; ++_j) {_o.SubStateList.Add(this.SubStateList(_j).HasValue ? this.SubStateList(_j).Value.UnPack() : null);}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Detail = new gfl.anm2.fb.StateDetailUnion();
    _o.Detail.Type = this.DetailType;
    switch (this.DetailType) {
      default: break;
      case gfl.anm2.fb.StateDetail.StateDetail_Any:
        _o.Detail.Value = this.Detail<gfl.anm2.fb.StateDetail_Any>().HasValue ? this.Detail<gfl.anm2.fb.StateDetail_Any>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fbj.State> Pack(FlatBufferBuilder builder, StateT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.State>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _position = _o.Position == null ? default(Offset<gfl.anm2.fbj.Vector2>) : gfl.anm2.fbj.Vector2.Pack(builder, _o.Position);
    var _source = _o.Source == null ? default(Offset<gfl.anm2.fbj.Source>) : gfl.anm2.fbj.Source.Pack(builder, _o.Source);
    var _reference = _o.Reference == null ? default(Offset<gfl.anm2.fbj.Reference>) : gfl.anm2.fbj.Reference.Pack(builder, _o.Reference);
    var _layerName = _o.LayerName == null ? default(StringOffset) : builder.CreateString(_o.LayerName);
    var _transitionList = default(VectorOffset);
    if (_o.TransitionList != null) {
      var __transitionList = new Offset<gfl.anm2.fbj.Transition>[_o.TransitionList.Count];
      for (var _j = 0; _j < __transitionList.Length; ++_j) { __transitionList[_j] = gfl.anm2.fbj.Transition.Pack(builder, _o.TransitionList[_j]); }
      _transitionList = CreateTransitionListVector(builder, __transitionList);
    }
    var _subStateList = default(VectorOffset);
    if (_o.SubStateList != null) {
      var __subStateList = new Offset<gfl.anm2.fbj.State>[_o.SubStateList.Count];
      for (var _j = 0; _j < __subStateList.Length; ++_j) { __subStateList[_j] = gfl.anm2.fbj.State.Pack(builder, _o.SubStateList[_j]); }
      _subStateList = CreateSubStateListVector(builder, __subStateList);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _detail_type = _o.Detail == null ? gfl.anm2.fb.StateDetail.NONE : _o.Detail.Type;
    var _detail = _o.Detail == null ? 0 : gfl.anm2.fb.StateDetailUnion.Pack(builder, _o.Detail);
    return CreateState(
      builder,
      _name,
      _o.Type,
      _position,
      _source,
      _reference,
      _layerName,
      _transitionList,
      _subStateList,
      _tags,
      _detail_type,
      _detail);
  }
};

public class StateT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fbj.StateType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("position")]
  public gfl.anm2.fbj.Vector2T Position { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public gfl.anm2.fbj.SourceT Source { get; set; }
  [Newtonsoft.Json.JsonProperty("reference")]
  public gfl.anm2.fbj.ReferenceT Reference { get; set; }
  [Newtonsoft.Json.JsonProperty("layerName")]
  public string LayerName { get; set; }
  [Newtonsoft.Json.JsonProperty("transitionList")]
  public List<gfl.anm2.fbj.TransitionT> TransitionList { get; set; }
  [Newtonsoft.Json.JsonProperty("subStateList")]
  public List<gfl.anm2.fbj.StateT> SubStateList { get; set; }
  [Newtonsoft.Json.JsonProperty("tags")]
  public List<string> Tags { get; set; }
  [Newtonsoft.Json.JsonProperty("detail_type")]
  private gfl.anm2.fb.StateDetail DetailType {
    get {
      return this.Detail != null ? this.Detail.Type : gfl.anm2.fb.StateDetail.NONE;
    }
    set {
      this.Detail = new gfl.anm2.fb.StateDetailUnion();
      this.Detail.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("detail")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.StateDetailUnion_JsonConverter))]
  public gfl.anm2.fb.StateDetailUnion Detail { get; set; }

  public StateT() {
    this.Name = null;
    this.Type = gfl.anm2.fbj.StateType.Normal;
    this.Position = null;
    this.Source = null;
    this.Reference = null;
    this.LayerName = null;
    this.TransitionList = null;
    this.SubStateList = null;
    this.Tags = null;
    this.Detail = null;
  }
}

public struct StateConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StateConfig GetRootAsStateConfig(ByteBuffer _bb) { return GetRootAsStateConfig(_bb, new StateConfig()); }
  public static StateConfig GetRootAsStateConfig(ByteBuffer _bb, StateConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StateConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.State? TopStateList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.State?)(new gfl.anm2.fbj.State()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TopStateListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.StateConfig> CreateStateConfig(FlatBufferBuilder builder,
      VectorOffset topStateListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StateConfig.AddTopStateList(builder, topStateListOffset);
    return StateConfig.EndStateConfig(builder);
  }

  public static void StartStateConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTopStateList(FlatBufferBuilder builder, VectorOffset topStateListOffset) { builder.AddOffset(0, topStateListOffset.Value, 0); }
  public static VectorOffset CreateTopStateListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.State>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTopStateListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.State>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTopStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.StateConfig> EndStateConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.StateConfig>(o);
  }
  public static void FinishStateConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.StateConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedStateConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.StateConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public StateConfigT UnPack() {
    var _o = new StateConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateConfigT _o) {
    _o.TopStateList = new List<gfl.anm2.fbj.StateT>();
    for (var _j = 0; _j < this.TopStateListLength; ++_j) {_o.TopStateList.Add(this.TopStateList(_j).HasValue ? this.TopStateList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.StateConfig> Pack(FlatBufferBuilder builder, StateConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.StateConfig>);
    var _topStateList = default(VectorOffset);
    if (_o.TopStateList != null) {
      var __topStateList = new Offset<gfl.anm2.fbj.State>[_o.TopStateList.Count];
      for (var _j = 0; _j < __topStateList.Length; ++_j) { __topStateList[_j] = gfl.anm2.fbj.State.Pack(builder, _o.TopStateList[_j]); }
      _topStateList = CreateTopStateListVector(builder, __topStateList);
    }
    return CreateStateConfig(
      builder,
      _topStateList);
  }
};

public class StateConfigT
{
  [Newtonsoft.Json.JsonProperty("topStateList")]
  public List<gfl.anm2.fbj.StateT> TopStateList { get; set; }

  public StateConfigT() {
    this.TopStateList = null;
  }

  public static StateConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<StateConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static StateConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return StateConfig.GetRootAsStateConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    StateConfig.FinishStateConfigBuffer(fbb, StateConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
