// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum InterpType : uint
{
  Linear = 0,
  Step = 1,
};

public struct RootMotion : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RootMotion GetRootAsRootMotion(ByteBuffer _bb) { return GetRootAsRootMotion(_bb, new RootMotion()); }
  public static RootMotion GetRootAsRootMotion(ByteBuffer _bb, RootMotion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RootMotion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.SRT? BasePose { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.SRT?)(new gfl.anm2.fbj.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.RootMotion> CreateRootMotion(FlatBufferBuilder builder,
      Offset<gfl.anm2.fbj.SRT> basePoseOffset = default(Offset<gfl.anm2.fbj.SRT>)) {
    builder.StartTable(1);
    RootMotion.AddBasePose(builder, basePoseOffset);
    return RootMotion.EndRootMotion(builder);
  }

  public static void StartRootMotion(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddBasePose(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.SRT> basePoseOffset) { builder.AddOffset(0, basePoseOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.RootMotion> EndRootMotion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.RootMotion>(o);
  }
  public RootMotionT UnPack() {
    var _o = new RootMotionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RootMotionT _o) {
    _o.BasePose = this.BasePose.HasValue ? this.BasePose.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.RootMotion> Pack(FlatBufferBuilder builder, RootMotionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.RootMotion>);
    var _basePose = _o.BasePose == null ? default(Offset<gfl.anm2.fbj.SRT>) : gfl.anm2.fbj.SRT.Pack(builder, _o.BasePose);
    return CreateRootMotion(
      builder,
      _basePose);
  }
};

public class RootMotionT
{
  [Newtonsoft.Json.JsonProperty("basePose")]
  public gfl.anm2.fbj.SRTT BasePose { get; set; }

  public RootMotionT() {
    this.BasePose = null;
  }
}

public struct KeyList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyList GetRootAsKeyList(ByteBuffer _bb) { return GetRootAsKeyList(_bb, new KeyList()); }
  public static KeyList GetRootAsKeyList(ByteBuffer _bb, KeyList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.KeyBase? ScaleX(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScaleXLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? ScaleY(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScaleYLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? ScaleZ(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ScaleZLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotateX(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotateXLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotateY(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotateYLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotateZ(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotateZLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateX(int j) { int o = __p.__offset(16); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateXLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateY(int j) { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateYLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateZ(int j) { int o = __p.__offset(20); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateZLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.KeyList> CreateKeyList(FlatBufferBuilder builder,
      VectorOffset scaleXOffset = default(VectorOffset),
      VectorOffset scaleYOffset = default(VectorOffset),
      VectorOffset scaleZOffset = default(VectorOffset),
      VectorOffset rotateXOffset = default(VectorOffset),
      VectorOffset rotateYOffset = default(VectorOffset),
      VectorOffset rotateZOffset = default(VectorOffset),
      VectorOffset translateXOffset = default(VectorOffset),
      VectorOffset translateYOffset = default(VectorOffset),
      VectorOffset translateZOffset = default(VectorOffset)) {
    builder.StartTable(9);
    KeyList.AddTranslateZ(builder, translateZOffset);
    KeyList.AddTranslateY(builder, translateYOffset);
    KeyList.AddTranslateX(builder, translateXOffset);
    KeyList.AddRotateZ(builder, rotateZOffset);
    KeyList.AddRotateY(builder, rotateYOffset);
    KeyList.AddRotateX(builder, rotateXOffset);
    KeyList.AddScaleZ(builder, scaleZOffset);
    KeyList.AddScaleY(builder, scaleYOffset);
    KeyList.AddScaleX(builder, scaleXOffset);
    return KeyList.EndKeyList(builder);
  }

  public static void StartKeyList(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddScaleX(FlatBufferBuilder builder, VectorOffset scaleXOffset) { builder.AddOffset(0, scaleXOffset.Value, 0); }
  public static VectorOffset CreateScaleXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScaleXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScaleXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScaleY(FlatBufferBuilder builder, VectorOffset scaleYOffset) { builder.AddOffset(1, scaleYOffset.Value, 0); }
  public static VectorOffset CreateScaleYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScaleYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScaleYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScaleZ(FlatBufferBuilder builder, VectorOffset scaleZOffset) { builder.AddOffset(2, scaleZOffset.Value, 0); }
  public static VectorOffset CreateScaleZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateScaleZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScaleZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateX(FlatBufferBuilder builder, VectorOffset rotateXOffset) { builder.AddOffset(3, rotateXOffset.Value, 0); }
  public static VectorOffset CreateRotateXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotateXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotateXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateY(FlatBufferBuilder builder, VectorOffset rotateYOffset) { builder.AddOffset(4, rotateYOffset.Value, 0); }
  public static VectorOffset CreateRotateYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotateYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotateYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotateZ(FlatBufferBuilder builder, VectorOffset rotateZOffset) { builder.AddOffset(5, rotateZOffset.Value, 0); }
  public static VectorOffset CreateRotateZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotateZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotateZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateX(FlatBufferBuilder builder, VectorOffset translateXOffset) { builder.AddOffset(6, translateXOffset.Value, 0); }
  public static VectorOffset CreateTranslateXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateY(FlatBufferBuilder builder, VectorOffset translateYOffset) { builder.AddOffset(7, translateYOffset.Value, 0); }
  public static VectorOffset CreateTranslateYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateZ(FlatBufferBuilder builder, VectorOffset translateZOffset) { builder.AddOffset(8, translateZOffset.Value, 0); }
  public static VectorOffset CreateTranslateZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.KeyList> EndKeyList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.KeyList>(o);
  }
  public KeyListT UnPack() {
    var _o = new KeyListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(KeyListT _o) {
    _o.ScaleX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.ScaleXLength; ++_j) {_o.ScaleX.Add(this.ScaleX(_j).HasValue ? this.ScaleX(_j).Value.UnPack() : null);}
    _o.ScaleY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.ScaleYLength; ++_j) {_o.ScaleY.Add(this.ScaleY(_j).HasValue ? this.ScaleY(_j).Value.UnPack() : null);}
    _o.ScaleZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.ScaleZLength; ++_j) {_o.ScaleZ.Add(this.ScaleZ(_j).HasValue ? this.ScaleZ(_j).Value.UnPack() : null);}
    _o.RotateX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotateXLength; ++_j) {_o.RotateX.Add(this.RotateX(_j).HasValue ? this.RotateX(_j).Value.UnPack() : null);}
    _o.RotateY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotateYLength; ++_j) {_o.RotateY.Add(this.RotateY(_j).HasValue ? this.RotateY(_j).Value.UnPack() : null);}
    _o.RotateZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotateZLength; ++_j) {_o.RotateZ.Add(this.RotateZ(_j).HasValue ? this.RotateZ(_j).Value.UnPack() : null);}
    _o.TranslateX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateXLength; ++_j) {_o.TranslateX.Add(this.TranslateX(_j).HasValue ? this.TranslateX(_j).Value.UnPack() : null);}
    _o.TranslateY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateYLength; ++_j) {_o.TranslateY.Add(this.TranslateY(_j).HasValue ? this.TranslateY(_j).Value.UnPack() : null);}
    _o.TranslateZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateZLength; ++_j) {_o.TranslateZ.Add(this.TranslateZ(_j).HasValue ? this.TranslateZ(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.KeyList> Pack(FlatBufferBuilder builder, KeyListT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.KeyList>);
    var _scaleX = default(VectorOffset);
    if (_o.ScaleX != null) {
      var __scaleX = new Offset<gfl.anm2.fbj.KeyBase>[_o.ScaleX.Count];
      for (var _j = 0; _j < __scaleX.Length; ++_j) { __scaleX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.ScaleX[_j]); }
      _scaleX = CreateScaleXVector(builder, __scaleX);
    }
    var _scaleY = default(VectorOffset);
    if (_o.ScaleY != null) {
      var __scaleY = new Offset<gfl.anm2.fbj.KeyBase>[_o.ScaleY.Count];
      for (var _j = 0; _j < __scaleY.Length; ++_j) { __scaleY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.ScaleY[_j]); }
      _scaleY = CreateScaleYVector(builder, __scaleY);
    }
    var _scaleZ = default(VectorOffset);
    if (_o.ScaleZ != null) {
      var __scaleZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.ScaleZ.Count];
      for (var _j = 0; _j < __scaleZ.Length; ++_j) { __scaleZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.ScaleZ[_j]); }
      _scaleZ = CreateScaleZVector(builder, __scaleZ);
    }
    var _rotateX = default(VectorOffset);
    if (_o.RotateX != null) {
      var __rotateX = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotateX.Count];
      for (var _j = 0; _j < __rotateX.Length; ++_j) { __rotateX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotateX[_j]); }
      _rotateX = CreateRotateXVector(builder, __rotateX);
    }
    var _rotateY = default(VectorOffset);
    if (_o.RotateY != null) {
      var __rotateY = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotateY.Count];
      for (var _j = 0; _j < __rotateY.Length; ++_j) { __rotateY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotateY[_j]); }
      _rotateY = CreateRotateYVector(builder, __rotateY);
    }
    var _rotateZ = default(VectorOffset);
    if (_o.RotateZ != null) {
      var __rotateZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotateZ.Count];
      for (var _j = 0; _j < __rotateZ.Length; ++_j) { __rotateZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotateZ[_j]); }
      _rotateZ = CreateRotateZVector(builder, __rotateZ);
    }
    var _translateX = default(VectorOffset);
    if (_o.TranslateX != null) {
      var __translateX = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateX.Count];
      for (var _j = 0; _j < __translateX.Length; ++_j) { __translateX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateX[_j]); }
      _translateX = CreateTranslateXVector(builder, __translateX);
    }
    var _translateY = default(VectorOffset);
    if (_o.TranslateY != null) {
      var __translateY = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateY.Count];
      for (var _j = 0; _j < __translateY.Length; ++_j) { __translateY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateY[_j]); }
      _translateY = CreateTranslateYVector(builder, __translateY);
    }
    var _translateZ = default(VectorOffset);
    if (_o.TranslateZ != null) {
      var __translateZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateZ.Count];
      for (var _j = 0; _j < __translateZ.Length; ++_j) { __translateZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateZ[_j]); }
      _translateZ = CreateTranslateZVector(builder, __translateZ);
    }
    return CreateKeyList(
      builder,
      _scaleX,
      _scaleY,
      _scaleZ,
      _rotateX,
      _rotateY,
      _rotateZ,
      _translateX,
      _translateY,
      _translateZ);
  }
};

public class KeyListT
{
  [Newtonsoft.Json.JsonProperty("scaleX")]
  public List<gfl.anm2.fbj.KeyBaseT> ScaleX { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleY")]
  public List<gfl.anm2.fbj.KeyBaseT> ScaleY { get; set; }
  [Newtonsoft.Json.JsonProperty("scaleZ")]
  public List<gfl.anm2.fbj.KeyBaseT> ScaleZ { get; set; }
  [Newtonsoft.Json.JsonProperty("rotateX")]
  public List<gfl.anm2.fbj.KeyBaseT> RotateX { get; set; }
  [Newtonsoft.Json.JsonProperty("rotateY")]
  public List<gfl.anm2.fbj.KeyBaseT> RotateY { get; set; }
  [Newtonsoft.Json.JsonProperty("rotateZ")]
  public List<gfl.anm2.fbj.KeyBaseT> RotateZ { get; set; }
  [Newtonsoft.Json.JsonProperty("translateX")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateX { get; set; }
  [Newtonsoft.Json.JsonProperty("translateY")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateY { get; set; }
  [Newtonsoft.Json.JsonProperty("translateZ")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateZ { get; set; }

  public KeyListT() {
    this.ScaleX = null;
    this.ScaleY = null;
    this.ScaleZ = null;
    this.RotateX = null;
    this.RotateY = null;
    this.RotateZ = null;
    this.TranslateX = null;
    this.TranslateY = null;
    this.TranslateZ = null;
  }
}

public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string ParentName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParentNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParentNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParentNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fbj.SRT? BindPose { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.SRT?)(new gfl.anm2.fbj.SRT()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.RootMotion? RootMotion { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.RootMotion?)(new gfl.anm2.fbj.RootMotion()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.KeyList? KeyList { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.KeyList?)(new gfl.anm2.fbj.KeyList()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.Node> CreateNode(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset parentNameOffset = default(StringOffset),
      Offset<gfl.anm2.fbj.SRT> bindPoseOffset = default(Offset<gfl.anm2.fbj.SRT>),
      Offset<gfl.anm2.fbj.RootMotion> rootMotionOffset = default(Offset<gfl.anm2.fbj.RootMotion>),
      Offset<gfl.anm2.fbj.KeyList> keyListOffset = default(Offset<gfl.anm2.fbj.KeyList>)) {
    builder.StartTable(5);
    Node.AddKeyList(builder, keyListOffset);
    Node.AddRootMotion(builder, rootMotionOffset);
    Node.AddBindPose(builder, bindPoseOffset);
    Node.AddParentName(builder, parentNameOffset);
    Node.AddName(builder, nameOffset);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddParentName(FlatBufferBuilder builder, StringOffset parentNameOffset) { builder.AddOffset(1, parentNameOffset.Value, 0); }
  public static void AddBindPose(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.SRT> bindPoseOffset) { builder.AddOffset(2, bindPoseOffset.Value, 0); }
  public static void AddRootMotion(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.RootMotion> rootMotionOffset) { builder.AddOffset(3, rootMotionOffset.Value, 0); }
  public static void AddKeyList(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyList> keyListOffset) { builder.AddOffset(4, keyListOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Node>(o);
  }
  public NodeT UnPack() {
    var _o = new NodeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NodeT _o) {
    _o.Name = this.Name;
    _o.ParentName = this.ParentName;
    _o.BindPose = this.BindPose.HasValue ? this.BindPose.Value.UnPack() : null;
    _o.RootMotion = this.RootMotion.HasValue ? this.RootMotion.Value.UnPack() : null;
    _o.KeyList = this.KeyList.HasValue ? this.KeyList.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.Node> Pack(FlatBufferBuilder builder, NodeT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Node>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _parentName = _o.ParentName == null ? default(StringOffset) : builder.CreateString(_o.ParentName);
    var _bindPose = _o.BindPose == null ? default(Offset<gfl.anm2.fbj.SRT>) : gfl.anm2.fbj.SRT.Pack(builder, _o.BindPose);
    var _rootMotion = _o.RootMotion == null ? default(Offset<gfl.anm2.fbj.RootMotion>) : gfl.anm2.fbj.RootMotion.Pack(builder, _o.RootMotion);
    var _keyList = _o.KeyList == null ? default(Offset<gfl.anm2.fbj.KeyList>) : gfl.anm2.fbj.KeyList.Pack(builder, _o.KeyList);
    return CreateNode(
      builder,
      _name,
      _parentName,
      _bindPose,
      _rootMotion,
      _keyList);
  }
};

public class NodeT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("parentName")]
  public string ParentName { get; set; }
  [Newtonsoft.Json.JsonProperty("bindPose")]
  public gfl.anm2.fbj.SRTT BindPose { get; set; }
  [Newtonsoft.Json.JsonProperty("rootMotion")]
  public gfl.anm2.fbj.RootMotionT RootMotion { get; set; }
  [Newtonsoft.Json.JsonProperty("keyList")]
  public gfl.anm2.fbj.KeyListT KeyList { get; set; }

  public NodeT() {
    this.Name = null;
    this.ParentName = null;
    this.BindPose = null;
    this.RootMotion = null;
    this.KeyList = null;
  }
}

public struct JointAnimation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static JointAnimation GetRootAsJointAnimation(ByteBuffer _bb) { return GetRootAsJointAnimation(_bb, new JointAnimation()); }
  public static JointAnimation GetRootAsJointAnimation(ByteBuffer _bb, JointAnimation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JointAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.Node? NodeList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.Node?)(new gfl.anm2.fbj.Node()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NodeListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.JointAnimation> CreateJointAnimation(FlatBufferBuilder builder,
      VectorOffset nodeListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    JointAnimation.AddNodeList(builder, nodeListOffset);
    return JointAnimation.EndJointAnimation(builder);
  }

  public static void StartJointAnimation(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddNodeList(FlatBufferBuilder builder, VectorOffset nodeListOffset) { builder.AddOffset(0, nodeListOffset.Value, 0); }
  public static VectorOffset CreateNodeListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Node>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNodeListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Node>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNodeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.JointAnimation> EndJointAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.JointAnimation>(o);
  }
  public JointAnimationT UnPack() {
    var _o = new JointAnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(JointAnimationT _o) {
    _o.NodeList = new List<gfl.anm2.fbj.NodeT>();
    for (var _j = 0; _j < this.NodeListLength; ++_j) {_o.NodeList.Add(this.NodeList(_j).HasValue ? this.NodeList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.JointAnimation> Pack(FlatBufferBuilder builder, JointAnimationT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.JointAnimation>);
    var _nodeList = default(VectorOffset);
    if (_o.NodeList != null) {
      var __nodeList = new Offset<gfl.anm2.fbj.Node>[_o.NodeList.Count];
      for (var _j = 0; _j < __nodeList.Length; ++_j) { __nodeList[_j] = gfl.anm2.fbj.Node.Pack(builder, _o.NodeList[_j]); }
      _nodeList = CreateNodeListVector(builder, __nodeList);
    }
    return CreateJointAnimation(
      builder,
      _nodeList);
  }
};

public class JointAnimationT
{
  [Newtonsoft.Json.JsonProperty("nodeList")]
  public List<gfl.anm2.fbj.NodeT> NodeList { get; set; }

  public JointAnimationT() {
    this.NodeList = null;
  }
}

public struct Mesh : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Mesh GetRootAsMesh(ByteBuffer _bb) { return GetRootAsMesh(_bb, new Mesh()); }
  public static Mesh GetRootAsMesh(ByteBuffer _bb, Mesh obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mesh __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.BoolKey? KeyList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.BoolKey?)(new gfl.anm2.fbj.BoolKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeyListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Mesh> CreateMesh(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset keyListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Mesh.AddKeyList(builder, keyListOffset);
    Mesh.AddName(builder, nameOffset);
    return Mesh.EndMesh(builder);
  }

  public static void StartMesh(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddKeyList(FlatBufferBuilder builder, VectorOffset keyListOffset) { builder.AddOffset(1, keyListOffset.Value, 0); }
  public static VectorOffset CreateKeyListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.BoolKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeyListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.BoolKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeyListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Mesh> EndMesh(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Mesh>(o);
  }
  public MeshT UnPack() {
    var _o = new MeshT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshT _o) {
    _o.Name = this.Name;
    _o.KeyList = new List<gfl.anm2.fbj.BoolKeyT>();
    for (var _j = 0; _j < this.KeyListLength; ++_j) {_o.KeyList.Add(this.KeyList(_j).HasValue ? this.KeyList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Mesh> Pack(FlatBufferBuilder builder, MeshT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Mesh>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _keyList = default(VectorOffset);
    if (_o.KeyList != null) {
      var __keyList = new Offset<gfl.anm2.fbj.BoolKey>[_o.KeyList.Count];
      for (var _j = 0; _j < __keyList.Length; ++_j) { __keyList[_j] = gfl.anm2.fbj.BoolKey.Pack(builder, _o.KeyList[_j]); }
      _keyList = CreateKeyListVector(builder, __keyList);
    }
    return CreateMesh(
      builder,
      _name,
      _keyList);
  }
};

public class MeshT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("keyList")]
  public List<gfl.anm2.fbj.BoolKeyT> KeyList { get; set; }

  public MeshT() {
    this.Name = null;
    this.KeyList = null;
  }
}

public struct VisibilityAnimation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VisibilityAnimation GetRootAsVisibilityAnimation(ByteBuffer _bb) { return GetRootAsVisibilityAnimation(_bb, new VisibilityAnimation()); }
  public static VisibilityAnimation GetRootAsVisibilityAnimation(ByteBuffer _bb, VisibilityAnimation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VisibilityAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.Mesh? MeshList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.Mesh?)(new gfl.anm2.fbj.Mesh()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.VisibilityAnimation> CreateVisibilityAnimation(FlatBufferBuilder builder,
      VectorOffset meshListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    VisibilityAnimation.AddMeshList(builder, meshListOffset);
    return VisibilityAnimation.EndVisibilityAnimation(builder);
  }

  public static void StartVisibilityAnimation(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMeshList(FlatBufferBuilder builder, VectorOffset meshListOffset) { builder.AddOffset(0, meshListOffset.Value, 0); }
  public static VectorOffset CreateMeshListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Mesh>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Mesh>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.VisibilityAnimation> EndVisibilityAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.VisibilityAnimation>(o);
  }
  public VisibilityAnimationT UnPack() {
    var _o = new VisibilityAnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisibilityAnimationT _o) {
    _o.MeshList = new List<gfl.anm2.fbj.MeshT>();
    for (var _j = 0; _j < this.MeshListLength; ++_j) {_o.MeshList.Add(this.MeshList(_j).HasValue ? this.MeshList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.VisibilityAnimation> Pack(FlatBufferBuilder builder, VisibilityAnimationT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.VisibilityAnimation>);
    var _meshList = default(VectorOffset);
    if (_o.MeshList != null) {
      var __meshList = new Offset<gfl.anm2.fbj.Mesh>[_o.MeshList.Count];
      for (var _j = 0; _j < __meshList.Length; ++_j) { __meshList[_j] = gfl.anm2.fbj.Mesh.Pack(builder, _o.MeshList[_j]); }
      _meshList = CreateMeshListVector(builder, __meshList);
    }
    return CreateVisibilityAnimation(
      builder,
      _meshList);
  }
};

public class VisibilityAnimationT
{
  [Newtonsoft.Json.JsonProperty("meshList")]
  public List<gfl.anm2.fbj.MeshT> MeshList { get; set; }

  public VisibilityAnimationT() {
    this.MeshList = null;
  }
}

public struct AttributeKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AttributeKey GetRootAsAttributeKey(ByteBuffer _bb) { return GetRootAsAttributeKey(_bb, new AttributeKey()); }
  public static AttributeKey GetRootAsAttributeKey(ByteBuffer _bb, AttributeKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttributeKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.InterpType InterpType { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.InterpType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fbj.InterpType.Linear; } }
  public int Frame { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double Value { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<gfl.anm2.fbj.AttributeKey> CreateAttributeKey(FlatBufferBuilder builder,
      gfl.anm2.fbj.InterpType interpType = gfl.anm2.fbj.InterpType.Linear,
      int frame = 0,
      double value = 0.0) {
    builder.StartTable(3);
    AttributeKey.AddValue(builder, value);
    AttributeKey.AddFrame(builder, frame);
    AttributeKey.AddInterpType(builder, interpType);
    return AttributeKey.EndAttributeKey(builder);
  }

  public static void StartAttributeKey(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddInterpType(FlatBufferBuilder builder, gfl.anm2.fbj.InterpType interpType) { builder.AddUint(0, (uint)interpType, 0); }
  public static void AddFrame(FlatBufferBuilder builder, int frame) { builder.AddInt(1, frame, 0); }
  public static void AddValue(FlatBufferBuilder builder, double value) { builder.AddDouble(2, value, 0.0); }
  public static Offset<gfl.anm2.fbj.AttributeKey> EndAttributeKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.AttributeKey>(o);
  }
  public AttributeKeyT UnPack() {
    var _o = new AttributeKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttributeKeyT _o) {
    _o.InterpType = this.InterpType;
    _o.Frame = this.Frame;
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fbj.AttributeKey> Pack(FlatBufferBuilder builder, AttributeKeyT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.AttributeKey>);
    return CreateAttributeKey(
      builder,
      _o.InterpType,
      _o.Frame,
      _o.Value);
  }
};

public class AttributeKeyT
{
  [Newtonsoft.Json.JsonProperty("interpType")]
  public gfl.anm2.fbj.InterpType InterpType { get; set; }
  [Newtonsoft.Json.JsonProperty("frame")]
  public int Frame { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public double Value { get; set; }

  public AttributeKeyT() {
    this.InterpType = gfl.anm2.fbj.InterpType.Linear;
    this.Frame = 0;
    this.Value = 0.0;
  }
}

public struct Attribute : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Attribute GetRootAsAttribute(ByteBuffer _bb) { return GetRootAsAttribute(_bb, new Attribute()); }
  public static Attribute GetRootAsAttribute(ByteBuffer _bb, Attribute obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Attribute __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.AttributeKey? X(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.AttributeKey?)(new gfl.anm2.fbj.AttributeKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int XLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.AttributeKey? Y(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.AttributeKey?)(new gfl.anm2.fbj.AttributeKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int YLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.AttributeKey? Z(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.AttributeKey?)(new gfl.anm2.fbj.AttributeKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ZLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.AttributeKey? W(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.AttributeKey?)(new gfl.anm2.fbj.AttributeKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Attribute> CreateAttribute(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset xOffset = default(VectorOffset),
      VectorOffset yOffset = default(VectorOffset),
      VectorOffset zOffset = default(VectorOffset),
      VectorOffset wOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Attribute.AddW(builder, wOffset);
    Attribute.AddZ(builder, zOffset);
    Attribute.AddY(builder, yOffset);
    Attribute.AddX(builder, xOffset);
    Attribute.AddName(builder, nameOffset);
    return Attribute.EndAttribute(builder);
  }

  public static void StartAttribute(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddX(FlatBufferBuilder builder, VectorOffset xOffset) { builder.AddOffset(1, xOffset.Value, 0); }
  public static VectorOffset CreateXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddY(FlatBufferBuilder builder, VectorOffset yOffset) { builder.AddOffset(2, yOffset.Value, 0); }
  public static VectorOffset CreateYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZ(FlatBufferBuilder builder, VectorOffset zOffset) { builder.AddOffset(3, zOffset.Value, 0); }
  public static VectorOffset CreateZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddW(FlatBufferBuilder builder, VectorOffset wOffset) { builder.AddOffset(4, wOffset.Value, 0); }
  public static VectorOffset CreateWVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartWVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Attribute> EndAttribute(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Attribute>(o);
  }
  public AttributeT UnPack() {
    var _o = new AttributeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttributeT _o) {
    _o.Name = this.Name;
    _o.X = new List<gfl.anm2.fbj.AttributeKeyT>();
    for (var _j = 0; _j < this.XLength; ++_j) {_o.X.Add(this.X(_j).HasValue ? this.X(_j).Value.UnPack() : null);}
    _o.Y = new List<gfl.anm2.fbj.AttributeKeyT>();
    for (var _j = 0; _j < this.YLength; ++_j) {_o.Y.Add(this.Y(_j).HasValue ? this.Y(_j).Value.UnPack() : null);}
    _o.Z = new List<gfl.anm2.fbj.AttributeKeyT>();
    for (var _j = 0; _j < this.ZLength; ++_j) {_o.Z.Add(this.Z(_j).HasValue ? this.Z(_j).Value.UnPack() : null);}
    _o.W = new List<gfl.anm2.fbj.AttributeKeyT>();
    for (var _j = 0; _j < this.WLength; ++_j) {_o.W.Add(this.W(_j).HasValue ? this.W(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Attribute> Pack(FlatBufferBuilder builder, AttributeT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Attribute>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _x = default(VectorOffset);
    if (_o.X != null) {
      var __x = new Offset<gfl.anm2.fbj.AttributeKey>[_o.X.Count];
      for (var _j = 0; _j < __x.Length; ++_j) { __x[_j] = gfl.anm2.fbj.AttributeKey.Pack(builder, _o.X[_j]); }
      _x = CreateXVector(builder, __x);
    }
    var _y = default(VectorOffset);
    if (_o.Y != null) {
      var __y = new Offset<gfl.anm2.fbj.AttributeKey>[_o.Y.Count];
      for (var _j = 0; _j < __y.Length; ++_j) { __y[_j] = gfl.anm2.fbj.AttributeKey.Pack(builder, _o.Y[_j]); }
      _y = CreateYVector(builder, __y);
    }
    var _z = default(VectorOffset);
    if (_o.Z != null) {
      var __z = new Offset<gfl.anm2.fbj.AttributeKey>[_o.Z.Count];
      for (var _j = 0; _j < __z.Length; ++_j) { __z[_j] = gfl.anm2.fbj.AttributeKey.Pack(builder, _o.Z[_j]); }
      _z = CreateZVector(builder, __z);
    }
    var _w = default(VectorOffset);
    if (_o.W != null) {
      var __w = new Offset<gfl.anm2.fbj.AttributeKey>[_o.W.Count];
      for (var _j = 0; _j < __w.Length; ++_j) { __w[_j] = gfl.anm2.fbj.AttributeKey.Pack(builder, _o.W[_j]); }
      _w = CreateWVector(builder, __w);
    }
    return CreateAttribute(
      builder,
      _name,
      _x,
      _y,
      _z,
      _w);
  }
};

public class AttributeT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("x")]
  public List<gfl.anm2.fbj.AttributeKeyT> X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public List<gfl.anm2.fbj.AttributeKeyT> Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public List<gfl.anm2.fbj.AttributeKeyT> Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public List<gfl.anm2.fbj.AttributeKeyT> W { get; set; }

  public AttributeT() {
    this.Name = null;
    this.X = null;
    this.Y = null;
    this.Z = null;
    this.W = null;
  }
}

public struct Material : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Material GetRootAsMaterial(ByteBuffer _bb) { return GetRootAsMaterial(_bb, new Material()); }
  public static Material GetRootAsMaterial(ByteBuffer _bb, Material obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.Attribute? AttributeList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.Attribute?)(new gfl.anm2.fbj.Attribute()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttributeListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Material> CreateMaterial(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset attributeListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Material.AddAttributeList(builder, attributeListOffset);
    Material.AddName(builder, nameOffset);
    return Material.EndMaterial(builder);
  }

  public static void StartMaterial(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddAttributeList(FlatBufferBuilder builder, VectorOffset attributeListOffset) { builder.AddOffset(1, attributeListOffset.Value, 0); }
  public static VectorOffset CreateAttributeListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Attribute>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributeListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Attribute>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAttributeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Material> EndMaterial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Material>(o);
  }
  public MaterialT UnPack() {
    var _o = new MaterialT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialT _o) {
    _o.Name = this.Name;
    _o.AttributeList = new List<gfl.anm2.fbj.AttributeT>();
    for (var _j = 0; _j < this.AttributeListLength; ++_j) {_o.AttributeList.Add(this.AttributeList(_j).HasValue ? this.AttributeList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Material> Pack(FlatBufferBuilder builder, MaterialT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Material>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _attributeList = default(VectorOffset);
    if (_o.AttributeList != null) {
      var __attributeList = new Offset<gfl.anm2.fbj.Attribute>[_o.AttributeList.Count];
      for (var _j = 0; _j < __attributeList.Length; ++_j) { __attributeList[_j] = gfl.anm2.fbj.Attribute.Pack(builder, _o.AttributeList[_j]); }
      _attributeList = CreateAttributeListVector(builder, __attributeList);
    }
    return CreateMaterial(
      builder,
      _name,
      _attributeList);
  }
};

public class MaterialT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("attributeList")]
  public List<gfl.anm2.fbj.AttributeT> AttributeList { get; set; }

  public MaterialT() {
    this.Name = null;
    this.AttributeList = null;
  }
}

public struct MaterialAnimation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialAnimation GetRootAsMaterialAnimation(ByteBuffer _bb) { return GetRootAsMaterialAnimation(_bb, new MaterialAnimation()); }
  public static MaterialAnimation GetRootAsMaterialAnimation(ByteBuffer _bb, MaterialAnimation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.Material? MaterialList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.Material?)(new gfl.anm2.fbj.Material()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MaterialListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.MaterialAnimation> CreateMaterialAnimation(FlatBufferBuilder builder,
      VectorOffset materialListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MaterialAnimation.AddMaterialList(builder, materialListOffset);
    return MaterialAnimation.EndMaterialAnimation(builder);
  }

  public static void StartMaterialAnimation(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMaterialList(FlatBufferBuilder builder, VectorOffset materialListOffset) { builder.AddOffset(0, materialListOffset.Value, 0); }
  public static VectorOffset CreateMaterialListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Material>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMaterialListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Material>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMaterialListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.MaterialAnimation> EndMaterialAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.MaterialAnimation>(o);
  }
  public MaterialAnimationT UnPack() {
    var _o = new MaterialAnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialAnimationT _o) {
    _o.MaterialList = new List<gfl.anm2.fbj.MaterialT>();
    for (var _j = 0; _j < this.MaterialListLength; ++_j) {_o.MaterialList.Add(this.MaterialList(_j).HasValue ? this.MaterialList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.MaterialAnimation> Pack(FlatBufferBuilder builder, MaterialAnimationT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.MaterialAnimation>);
    var _materialList = default(VectorOffset);
    if (_o.MaterialList != null) {
      var __materialList = new Offset<gfl.anm2.fbj.Material>[_o.MaterialList.Count];
      for (var _j = 0; _j < __materialList.Length; ++_j) { __materialList[_j] = gfl.anm2.fbj.Material.Pack(builder, _o.MaterialList[_j]); }
      _materialList = CreateMaterialListVector(builder, __materialList);
    }
    return CreateMaterialAnimation(
      builder,
      _materialList);
  }
};

public class MaterialAnimationT
{
  [Newtonsoft.Json.JsonProperty("materialList")]
  public List<gfl.anm2.fbj.MaterialT> MaterialList { get; set; }

  public MaterialAnimationT() {
    this.MaterialList = null;
  }
}

public struct Animation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Animation GetRootAsAnimation(ByteBuffer _bb) { return GetRootAsAnimation(_bb, new Animation()); }
  public static Animation GetRootAsAnimation(ByteBuffer _bb, Animation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Animation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.ExporterInfo? ExporterInfo { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.ExporterInfo?)(new gfl.anm2.fbj.ExporterInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.DccSource? Source { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.DccSource?)(new gfl.anm2.fbj.DccSource()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.FrameSetting? FrameSetting { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.FrameSetting?)(new gfl.anm2.fbj.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.JointAnimation? JointAnimation { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.JointAnimation?)(new gfl.anm2.fbj.JointAnimation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.VisibilityAnimation? VisibilityAnimation { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.VisibilityAnimation?)(new gfl.anm2.fbj.VisibilityAnimation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.MaterialAnimation? MaterialAnimation { get { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fbj.MaterialAnimation?)(new gfl.anm2.fbj.MaterialAnimation()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.Animation> CreateAnimation(FlatBufferBuilder builder,
      Offset<gfl.anm2.fbj.ExporterInfo> exporterInfoOffset = default(Offset<gfl.anm2.fbj.ExporterInfo>),
      Offset<gfl.anm2.fbj.DccSource> sourceOffset = default(Offset<gfl.anm2.fbj.DccSource>),
      Offset<gfl.anm2.fbj.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fbj.FrameSetting>),
      Offset<gfl.anm2.fbj.JointAnimation> jointAnimationOffset = default(Offset<gfl.anm2.fbj.JointAnimation>),
      Offset<gfl.anm2.fbj.VisibilityAnimation> visibilityAnimationOffset = default(Offset<gfl.anm2.fbj.VisibilityAnimation>),
      Offset<gfl.anm2.fbj.MaterialAnimation> materialAnimationOffset = default(Offset<gfl.anm2.fbj.MaterialAnimation>)) {
    builder.StartTable(6);
    Animation.AddMaterialAnimation(builder, materialAnimationOffset);
    Animation.AddVisibilityAnimation(builder, visibilityAnimationOffset);
    Animation.AddJointAnimation(builder, jointAnimationOffset);
    Animation.AddFrameSetting(builder, frameSettingOffset);
    Animation.AddSource(builder, sourceOffset);
    Animation.AddExporterInfo(builder, exporterInfoOffset);
    return Animation.EndAnimation(builder);
  }

  public static void StartAnimation(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddExporterInfo(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ExporterInfo> exporterInfoOffset) { builder.AddOffset(0, exporterInfoOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.DccSource> sourceOffset) { builder.AddOffset(1, sourceOffset.Value, 0); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.FrameSetting> frameSettingOffset) { builder.AddOffset(2, frameSettingOffset.Value, 0); }
  public static void AddJointAnimation(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.JointAnimation> jointAnimationOffset) { builder.AddOffset(3, jointAnimationOffset.Value, 0); }
  public static void AddVisibilityAnimation(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.VisibilityAnimation> visibilityAnimationOffset) { builder.AddOffset(4, visibilityAnimationOffset.Value, 0); }
  public static void AddMaterialAnimation(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.MaterialAnimation> materialAnimationOffset) { builder.AddOffset(5, materialAnimationOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.Animation> EndAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Animation>(o);
  }
  public static void FinishAnimationBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Animation> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Animation> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationT UnPack() {
    var _o = new AnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationT _o) {
    _o.ExporterInfo = this.ExporterInfo.HasValue ? this.ExporterInfo.Value.UnPack() : null;
    _o.Source = this.Source.HasValue ? this.Source.Value.UnPack() : null;
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.JointAnimation = this.JointAnimation.HasValue ? this.JointAnimation.Value.UnPack() : null;
    _o.VisibilityAnimation = this.VisibilityAnimation.HasValue ? this.VisibilityAnimation.Value.UnPack() : null;
    _o.MaterialAnimation = this.MaterialAnimation.HasValue ? this.MaterialAnimation.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.Animation> Pack(FlatBufferBuilder builder, AnimationT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Animation>);
    var _exporterInfo = _o.ExporterInfo == null ? default(Offset<gfl.anm2.fbj.ExporterInfo>) : gfl.anm2.fbj.ExporterInfo.Pack(builder, _o.ExporterInfo);
    var _source = _o.Source == null ? default(Offset<gfl.anm2.fbj.DccSource>) : gfl.anm2.fbj.DccSource.Pack(builder, _o.Source);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fbj.FrameSetting>) : gfl.anm2.fbj.FrameSetting.Pack(builder, _o.FrameSetting);
    var _jointAnimation = _o.JointAnimation == null ? default(Offset<gfl.anm2.fbj.JointAnimation>) : gfl.anm2.fbj.JointAnimation.Pack(builder, _o.JointAnimation);
    var _visibilityAnimation = _o.VisibilityAnimation == null ? default(Offset<gfl.anm2.fbj.VisibilityAnimation>) : gfl.anm2.fbj.VisibilityAnimation.Pack(builder, _o.VisibilityAnimation);
    var _materialAnimation = _o.MaterialAnimation == null ? default(Offset<gfl.anm2.fbj.MaterialAnimation>) : gfl.anm2.fbj.MaterialAnimation.Pack(builder, _o.MaterialAnimation);
    return CreateAnimation(
      builder,
      _exporterInfo,
      _source,
      _frameSetting,
      _jointAnimation,
      _visibilityAnimation,
      _materialAnimation);
  }
};

public class AnimationT
{
  [Newtonsoft.Json.JsonProperty("exporterInfo")]
  public gfl.anm2.fbj.ExporterInfoT ExporterInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public gfl.anm2.fbj.DccSourceT Source { get; set; }
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fbj.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("jointAnimation")]
  public gfl.anm2.fbj.JointAnimationT JointAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityAnimation")]
  public gfl.anm2.fbj.VisibilityAnimationT VisibilityAnimation { get; set; }
  [Newtonsoft.Json.JsonProperty("materialAnimation")]
  public gfl.anm2.fbj.MaterialAnimationT MaterialAnimation { get; set; }

  public AnimationT() {
    this.ExporterInfo = null;
    this.Source = null;
    this.FrameSetting = null;
    this.JointAnimation = null;
    this.VisibilityAnimation = null;
    this.MaterialAnimation = null;
  }

  public static AnimationT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationT DeserializeFromBinary(byte[] fbBuffer) {
    return Animation.GetRootAsAnimation(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Animation.FinishAnimationBuffer(fbb, Animation.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
