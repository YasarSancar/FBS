// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EffectPathTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EffectPathTable GetRootAsEffectPathTable(ByteBuffer _bb) { return GetRootAsEffectPathTable(_bb, new EffectPathTable()); }
  public static EffectPathTable GetRootAsEffectPathTable(ByteBuffer _bb, EffectPathTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectPathTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MetaDataName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetaDataNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMetaDataNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMetaDataNameArray() { return __p.__vector_as_array<byte>(4); }
  public string EffectPath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectPathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEffectPathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEffectPathArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.EffectPathTable> CreateEffectPathTable(FlatBufferBuilder builder,
      StringOffset metaDataNameOffset = default(StringOffset),
      StringOffset effectPathOffset = default(StringOffset)) {
    builder.StartTable(2);
    EffectPathTable.AddEffectPath(builder, effectPathOffset);
    EffectPathTable.AddMetaDataName(builder, metaDataNameOffset);
    return EffectPathTable.EndEffectPathTable(builder);
  }

  public static void StartEffectPathTable(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMetaDataName(FlatBufferBuilder builder, StringOffset metaDataNameOffset) { builder.AddOffset(0, metaDataNameOffset.Value, 0); }
  public static void AddEffectPath(FlatBufferBuilder builder, StringOffset effectPathOffset) { builder.AddOffset(1, effectPathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EffectPathTable> EndEffectPathTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EffectPathTable>(o);
  }
  public EffectPathTableT UnPack() {
    var _o = new EffectPathTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectPathTableT _o) {
    _o.MetaDataName = this.MetaDataName;
    _o.EffectPath = this.EffectPath;
  }
  public static Offset<gfl.anm2.fb.EffectPathTable> Pack(FlatBufferBuilder builder, EffectPathTableT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EffectPathTable>);
    var _metaDataName = _o.MetaDataName == null ? default(StringOffset) : builder.CreateString(_o.MetaDataName);
    var _effectPath = _o.EffectPath == null ? default(StringOffset) : builder.CreateString(_o.EffectPath);
    return CreateEffectPathTable(
      builder,
      _metaDataName,
      _effectPath);
  }
};

public class EffectPathTableT
{
  [Newtonsoft.Json.JsonProperty("metaDataName")]
  public string MetaDataName { get; set; }
  [Newtonsoft.Json.JsonProperty("effectPath")]
  public string EffectPath { get; set; }

  public EffectPathTableT() {
    this.MetaDataName = null;
    this.EffectPath = null;
  }
}

public struct EffectData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EffectData GetRootAsEffectData(ByteBuffer _bb) { return GetRootAsEffectData(_bb, new EffectData()); }
  public static EffectData GetRootAsEffectData(ByteBuffer _bb, EffectData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EffectName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEffectNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEffectNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.EffectPathTable? EffectPathTable(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EffectPathTable?)(new gfl.anm2.fb.EffectPathTable()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EffectPathTableLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string JointName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(8); }
  public bool DefaultEmit { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.EffectData> CreateEffectData(FlatBufferBuilder builder,
      StringOffset effectNameOffset = default(StringOffset),
      VectorOffset effectPathTableOffset = default(VectorOffset),
      StringOffset jointNameOffset = default(StringOffset),
      bool defaultEmit = false) {
    builder.StartTable(4);
    EffectData.AddJointName(builder, jointNameOffset);
    EffectData.AddEffectPathTable(builder, effectPathTableOffset);
    EffectData.AddEffectName(builder, effectNameOffset);
    EffectData.AddDefaultEmit(builder, defaultEmit);
    return EffectData.EndEffectData(builder);
  }

  public static void StartEffectData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEffectName(FlatBufferBuilder builder, StringOffset effectNameOffset) { builder.AddOffset(0, effectNameOffset.Value, 0); }
  public static void AddEffectPathTable(FlatBufferBuilder builder, VectorOffset effectPathTableOffset) { builder.AddOffset(1, effectPathTableOffset.Value, 0); }
  public static VectorOffset CreateEffectPathTableVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EffectPathTable>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectPathTableVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EffectPathTable>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectPathTableVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(2, jointNameOffset.Value, 0); }
  public static void AddDefaultEmit(FlatBufferBuilder builder, bool defaultEmit) { builder.AddBool(3, defaultEmit, false); }
  public static Offset<gfl.anm2.fb.EffectData> EndEffectData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EffectData>(o);
  }
  public EffectDataT UnPack() {
    var _o = new EffectDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectDataT _o) {
    _o.EffectName = this.EffectName;
    _o.EffectPathTable = new List<gfl.anm2.fb.EffectPathTableT>();
    for (var _j = 0; _j < this.EffectPathTableLength; ++_j) {_o.EffectPathTable.Add(this.EffectPathTable(_j).HasValue ? this.EffectPathTable(_j).Value.UnPack() : null);}
    _o.JointName = this.JointName;
    _o.DefaultEmit = this.DefaultEmit;
  }
  public static Offset<gfl.anm2.fb.EffectData> Pack(FlatBufferBuilder builder, EffectDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EffectData>);
    var _effectName = _o.EffectName == null ? default(StringOffset) : builder.CreateString(_o.EffectName);
    var _effectPathTable = default(VectorOffset);
    if (_o.EffectPathTable != null) {
      var __effectPathTable = new Offset<gfl.anm2.fb.EffectPathTable>[_o.EffectPathTable.Count];
      for (var _j = 0; _j < __effectPathTable.Length; ++_j) { __effectPathTable[_j] = gfl.anm2.fb.EffectPathTable.Pack(builder, _o.EffectPathTable[_j]); }
      _effectPathTable = CreateEffectPathTableVector(builder, __effectPathTable);
    }
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateEffectData(
      builder,
      _effectName,
      _effectPathTable,
      _jointName,
      _o.DefaultEmit);
  }
};

public class EffectDataT
{
  [Newtonsoft.Json.JsonProperty("effectName")]
  public string EffectName { get; set; }
  [Newtonsoft.Json.JsonProperty("effectPathTable")]
  public List<gfl.anm2.fb.EffectPathTableT> EffectPathTable { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }
  [Newtonsoft.Json.JsonProperty("defaultEmit")]
  public bool DefaultEmit { get; set; }

  public EffectDataT() {
    this.EffectName = null;
    this.EffectPathTable = null;
    this.JointName = null;
    this.DefaultEmit = false;
  }
}

public struct ModelAttachEffect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ModelAttachEffect GetRootAsModelAttachEffect(ByteBuffer _bb) { return GetRootAsModelAttachEffect(_bb, new ModelAttachEffect()); }
  public static ModelAttachEffect GetRootAsModelAttachEffect(ByteBuffer _bb, ModelAttachEffect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ModelAttachEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.EffectData? EffectDataList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.EffectData?)(new gfl.anm2.fb.EffectData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EffectDataListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.ModelAttachEffect> CreateModelAttachEffect(FlatBufferBuilder builder,
      VectorOffset effectDataListOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ModelAttachEffect.AddEffectDataList(builder, effectDataListOffset);
    return ModelAttachEffect.EndModelAttachEffect(builder);
  }

  public static void StartModelAttachEffect(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEffectDataList(FlatBufferBuilder builder, VectorOffset effectDataListOffset) { builder.AddOffset(0, effectDataListOffset.Value, 0); }
  public static VectorOffset CreateEffectDataListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EffectData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectDataListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EffectData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEffectDataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.ModelAttachEffect> EndModelAttachEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ModelAttachEffect>(o);
  }
  public static void FinishModelAttachEffectBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ModelAttachEffect> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedModelAttachEffectBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.ModelAttachEffect> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ModelAttachEffectT UnPack() {
    var _o = new ModelAttachEffectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ModelAttachEffectT _o) {
    _o.EffectDataList = new List<gfl.anm2.fb.EffectDataT>();
    for (var _j = 0; _j < this.EffectDataListLength; ++_j) {_o.EffectDataList.Add(this.EffectDataList(_j).HasValue ? this.EffectDataList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.ModelAttachEffect> Pack(FlatBufferBuilder builder, ModelAttachEffectT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ModelAttachEffect>);
    var _effectDataList = default(VectorOffset);
    if (_o.EffectDataList != null) {
      var __effectDataList = new Offset<gfl.anm2.fb.EffectData>[_o.EffectDataList.Count];
      for (var _j = 0; _j < __effectDataList.Length; ++_j) { __effectDataList[_j] = gfl.anm2.fb.EffectData.Pack(builder, _o.EffectDataList[_j]); }
      _effectDataList = CreateEffectDataListVector(builder, __effectDataList);
    }
    return CreateModelAttachEffect(
      builder,
      _effectDataList);
  }
};

public class ModelAttachEffectT
{
  [Newtonsoft.Json.JsonProperty("effectDataList")]
  public List<gfl.anm2.fb.EffectDataT> EffectDataList { get; set; }

  public ModelAttachEffectT() {
    this.EffectDataList = null;
  }

  public static ModelAttachEffectT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ModelAttachEffectT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ModelAttachEffectT DeserializeFromBinary(byte[] fbBuffer) {
    return ModelAttachEffect.GetRootAsModelAttachEffect(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ModelAttachEffect.FinishModelAttachEffectBuffer(fbb, ModelAttachEffect.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
