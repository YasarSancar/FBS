// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Camera : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Camera GetRootAsCamera(ByteBuffer _bb) { return GetRootAsCamera(_bb, new Camera()); }
  public static Camera GetRootAsCamera(ByteBuffer _bb, Camera obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Camera __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.KeyBase? Near(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NearLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? Far(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FarLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? Fovy(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FovyLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotationX(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationXLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotationY(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationYLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? RotationZ(int j) { int o = __p.__offset(16); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationZLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateX(int j) { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateXLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateY(int j) { int o = __p.__offset(20); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateYLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? TranslateZ(int j) { int o = __p.__offset(22); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateZLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? UpVectorX(int j) { int o = __p.__offset(24); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpVectorXLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? UpVectorY(int j) { int o = __p.__offset(26); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpVectorYLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? UpVectorZ(int j) { int o = __p.__offset(28); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpVectorZLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? Twist(int j) { int o = __p.__offset(30); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TwistLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? AimPosX(int j) { int o = __p.__offset(32); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AimPosXLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? AimPosY(int j) { int o = __p.__offset(34); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AimPosYLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.KeyBase? AimPosZ(int j) { int o = __p.__offset(36); return o != 0 ? (gfl.anm2.fbj.KeyBase?)(new gfl.anm2.fbj.KeyBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AimPosZLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Camera> CreateCamera(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset nearOffset = default(VectorOffset),
      VectorOffset farOffset = default(VectorOffset),
      VectorOffset fovyOffset = default(VectorOffset),
      VectorOffset rotationXOffset = default(VectorOffset),
      VectorOffset rotationYOffset = default(VectorOffset),
      VectorOffset rotationZOffset = default(VectorOffset),
      VectorOffset translateXOffset = default(VectorOffset),
      VectorOffset translateYOffset = default(VectorOffset),
      VectorOffset translateZOffset = default(VectorOffset),
      VectorOffset upVectorXOffset = default(VectorOffset),
      VectorOffset upVectorYOffset = default(VectorOffset),
      VectorOffset upVectorZOffset = default(VectorOffset),
      VectorOffset twistOffset = default(VectorOffset),
      VectorOffset aimPosXOffset = default(VectorOffset),
      VectorOffset aimPosYOffset = default(VectorOffset),
      VectorOffset aimPosZOffset = default(VectorOffset)) {
    builder.StartTable(17);
    Camera.AddAimPosZ(builder, aimPosZOffset);
    Camera.AddAimPosY(builder, aimPosYOffset);
    Camera.AddAimPosX(builder, aimPosXOffset);
    Camera.AddTwist(builder, twistOffset);
    Camera.AddUpVectorZ(builder, upVectorZOffset);
    Camera.AddUpVectorY(builder, upVectorYOffset);
    Camera.AddUpVectorX(builder, upVectorXOffset);
    Camera.AddTranslateZ(builder, translateZOffset);
    Camera.AddTranslateY(builder, translateYOffset);
    Camera.AddTranslateX(builder, translateXOffset);
    Camera.AddRotationZ(builder, rotationZOffset);
    Camera.AddRotationY(builder, rotationYOffset);
    Camera.AddRotationX(builder, rotationXOffset);
    Camera.AddFovy(builder, fovyOffset);
    Camera.AddFar(builder, farOffset);
    Camera.AddNear(builder, nearOffset);
    Camera.AddName(builder, nameOffset);
    return Camera.EndCamera(builder);
  }

  public static void StartCamera(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddNear(FlatBufferBuilder builder, VectorOffset nearOffset) { builder.AddOffset(1, nearOffset.Value, 0); }
  public static VectorOffset CreateNearVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNearVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNearVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFar(FlatBufferBuilder builder, VectorOffset farOffset) { builder.AddOffset(2, farOffset.Value, 0); }
  public static VectorOffset CreateFarVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFarVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFarVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFovy(FlatBufferBuilder builder, VectorOffset fovyOffset) { builder.AddOffset(3, fovyOffset.Value, 0); }
  public static VectorOffset CreateFovyVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFovyVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFovyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotationX(FlatBufferBuilder builder, VectorOffset rotationXOffset) { builder.AddOffset(4, rotationXOffset.Value, 0); }
  public static VectorOffset CreateRotationXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotationY(FlatBufferBuilder builder, VectorOffset rotationYOffset) { builder.AddOffset(5, rotationYOffset.Value, 0); }
  public static VectorOffset CreateRotationYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotationZ(FlatBufferBuilder builder, VectorOffset rotationZOffset) { builder.AddOffset(6, rotationZOffset.Value, 0); }
  public static VectorOffset CreateRotationZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateX(FlatBufferBuilder builder, VectorOffset translateXOffset) { builder.AddOffset(7, translateXOffset.Value, 0); }
  public static VectorOffset CreateTranslateXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateY(FlatBufferBuilder builder, VectorOffset translateYOffset) { builder.AddOffset(8, translateYOffset.Value, 0); }
  public static VectorOffset CreateTranslateYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateZ(FlatBufferBuilder builder, VectorOffset translateZOffset) { builder.AddOffset(9, translateZOffset.Value, 0); }
  public static VectorOffset CreateTranslateZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpVectorX(FlatBufferBuilder builder, VectorOffset upVectorXOffset) { builder.AddOffset(10, upVectorXOffset.Value, 0); }
  public static VectorOffset CreateUpVectorXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUpVectorXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUpVectorXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpVectorY(FlatBufferBuilder builder, VectorOffset upVectorYOffset) { builder.AddOffset(11, upVectorYOffset.Value, 0); }
  public static VectorOffset CreateUpVectorYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUpVectorYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUpVectorYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpVectorZ(FlatBufferBuilder builder, VectorOffset upVectorZOffset) { builder.AddOffset(12, upVectorZOffset.Value, 0); }
  public static VectorOffset CreateUpVectorZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUpVectorZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUpVectorZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTwist(FlatBufferBuilder builder, VectorOffset twistOffset) { builder.AddOffset(13, twistOffset.Value, 0); }
  public static VectorOffset CreateTwistVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTwistVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTwistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAimPosX(FlatBufferBuilder builder, VectorOffset aimPosXOffset) { builder.AddOffset(14, aimPosXOffset.Value, 0); }
  public static VectorOffset CreateAimPosXVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAimPosXVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAimPosXVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAimPosY(FlatBufferBuilder builder, VectorOffset aimPosYOffset) { builder.AddOffset(15, aimPosYOffset.Value, 0); }
  public static VectorOffset CreateAimPosYVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAimPosYVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAimPosYVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAimPosZ(FlatBufferBuilder builder, VectorOffset aimPosZOffset) { builder.AddOffset(16, aimPosZOffset.Value, 0); }
  public static VectorOffset CreateAimPosZVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAimPosZVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.KeyBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAimPosZVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Camera> EndCamera(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Camera>(o);
  }
  public CameraT UnPack() {
    var _o = new CameraT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraT _o) {
    _o.Name = this.Name;
    _o.Near = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.NearLength; ++_j) {_o.Near.Add(this.Near(_j).HasValue ? this.Near(_j).Value.UnPack() : null);}
    _o.Far = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.FarLength; ++_j) {_o.Far.Add(this.Far(_j).HasValue ? this.Far(_j).Value.UnPack() : null);}
    _o.Fovy = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.FovyLength; ++_j) {_o.Fovy.Add(this.Fovy(_j).HasValue ? this.Fovy(_j).Value.UnPack() : null);}
    _o.RotationX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotationXLength; ++_j) {_o.RotationX.Add(this.RotationX(_j).HasValue ? this.RotationX(_j).Value.UnPack() : null);}
    _o.RotationY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotationYLength; ++_j) {_o.RotationY.Add(this.RotationY(_j).HasValue ? this.RotationY(_j).Value.UnPack() : null);}
    _o.RotationZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.RotationZLength; ++_j) {_o.RotationZ.Add(this.RotationZ(_j).HasValue ? this.RotationZ(_j).Value.UnPack() : null);}
    _o.TranslateX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateXLength; ++_j) {_o.TranslateX.Add(this.TranslateX(_j).HasValue ? this.TranslateX(_j).Value.UnPack() : null);}
    _o.TranslateY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateYLength; ++_j) {_o.TranslateY.Add(this.TranslateY(_j).HasValue ? this.TranslateY(_j).Value.UnPack() : null);}
    _o.TranslateZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TranslateZLength; ++_j) {_o.TranslateZ.Add(this.TranslateZ(_j).HasValue ? this.TranslateZ(_j).Value.UnPack() : null);}
    _o.UpVectorX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.UpVectorXLength; ++_j) {_o.UpVectorX.Add(this.UpVectorX(_j).HasValue ? this.UpVectorX(_j).Value.UnPack() : null);}
    _o.UpVectorY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.UpVectorYLength; ++_j) {_o.UpVectorY.Add(this.UpVectorY(_j).HasValue ? this.UpVectorY(_j).Value.UnPack() : null);}
    _o.UpVectorZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.UpVectorZLength; ++_j) {_o.UpVectorZ.Add(this.UpVectorZ(_j).HasValue ? this.UpVectorZ(_j).Value.UnPack() : null);}
    _o.Twist = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.TwistLength; ++_j) {_o.Twist.Add(this.Twist(_j).HasValue ? this.Twist(_j).Value.UnPack() : null);}
    _o.AimPosX = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.AimPosXLength; ++_j) {_o.AimPosX.Add(this.AimPosX(_j).HasValue ? this.AimPosX(_j).Value.UnPack() : null);}
    _o.AimPosY = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.AimPosYLength; ++_j) {_o.AimPosY.Add(this.AimPosY(_j).HasValue ? this.AimPosY(_j).Value.UnPack() : null);}
    _o.AimPosZ = new List<gfl.anm2.fbj.KeyBaseT>();
    for (var _j = 0; _j < this.AimPosZLength; ++_j) {_o.AimPosZ.Add(this.AimPosZ(_j).HasValue ? this.AimPosZ(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Camera> Pack(FlatBufferBuilder builder, CameraT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Camera>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _near = default(VectorOffset);
    if (_o.Near != null) {
      var __near = new Offset<gfl.anm2.fbj.KeyBase>[_o.Near.Count];
      for (var _j = 0; _j < __near.Length; ++_j) { __near[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.Near[_j]); }
      _near = CreateNearVector(builder, __near);
    }
    var _far = default(VectorOffset);
    if (_o.Far != null) {
      var __far = new Offset<gfl.anm2.fbj.KeyBase>[_o.Far.Count];
      for (var _j = 0; _j < __far.Length; ++_j) { __far[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.Far[_j]); }
      _far = CreateFarVector(builder, __far);
    }
    var _fovy = default(VectorOffset);
    if (_o.Fovy != null) {
      var __fovy = new Offset<gfl.anm2.fbj.KeyBase>[_o.Fovy.Count];
      for (var _j = 0; _j < __fovy.Length; ++_j) { __fovy[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.Fovy[_j]); }
      _fovy = CreateFovyVector(builder, __fovy);
    }
    var _rotationX = default(VectorOffset);
    if (_o.RotationX != null) {
      var __rotationX = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotationX.Count];
      for (var _j = 0; _j < __rotationX.Length; ++_j) { __rotationX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotationX[_j]); }
      _rotationX = CreateRotationXVector(builder, __rotationX);
    }
    var _rotationY = default(VectorOffset);
    if (_o.RotationY != null) {
      var __rotationY = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotationY.Count];
      for (var _j = 0; _j < __rotationY.Length; ++_j) { __rotationY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotationY[_j]); }
      _rotationY = CreateRotationYVector(builder, __rotationY);
    }
    var _rotationZ = default(VectorOffset);
    if (_o.RotationZ != null) {
      var __rotationZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.RotationZ.Count];
      for (var _j = 0; _j < __rotationZ.Length; ++_j) { __rotationZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.RotationZ[_j]); }
      _rotationZ = CreateRotationZVector(builder, __rotationZ);
    }
    var _translateX = default(VectorOffset);
    if (_o.TranslateX != null) {
      var __translateX = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateX.Count];
      for (var _j = 0; _j < __translateX.Length; ++_j) { __translateX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateX[_j]); }
      _translateX = CreateTranslateXVector(builder, __translateX);
    }
    var _translateY = default(VectorOffset);
    if (_o.TranslateY != null) {
      var __translateY = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateY.Count];
      for (var _j = 0; _j < __translateY.Length; ++_j) { __translateY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateY[_j]); }
      _translateY = CreateTranslateYVector(builder, __translateY);
    }
    var _translateZ = default(VectorOffset);
    if (_o.TranslateZ != null) {
      var __translateZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.TranslateZ.Count];
      for (var _j = 0; _j < __translateZ.Length; ++_j) { __translateZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.TranslateZ[_j]); }
      _translateZ = CreateTranslateZVector(builder, __translateZ);
    }
    var _upVectorX = default(VectorOffset);
    if (_o.UpVectorX != null) {
      var __upVectorX = new Offset<gfl.anm2.fbj.KeyBase>[_o.UpVectorX.Count];
      for (var _j = 0; _j < __upVectorX.Length; ++_j) { __upVectorX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.UpVectorX[_j]); }
      _upVectorX = CreateUpVectorXVector(builder, __upVectorX);
    }
    var _upVectorY = default(VectorOffset);
    if (_o.UpVectorY != null) {
      var __upVectorY = new Offset<gfl.anm2.fbj.KeyBase>[_o.UpVectorY.Count];
      for (var _j = 0; _j < __upVectorY.Length; ++_j) { __upVectorY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.UpVectorY[_j]); }
      _upVectorY = CreateUpVectorYVector(builder, __upVectorY);
    }
    var _upVectorZ = default(VectorOffset);
    if (_o.UpVectorZ != null) {
      var __upVectorZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.UpVectorZ.Count];
      for (var _j = 0; _j < __upVectorZ.Length; ++_j) { __upVectorZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.UpVectorZ[_j]); }
      _upVectorZ = CreateUpVectorZVector(builder, __upVectorZ);
    }
    var _twist = default(VectorOffset);
    if (_o.Twist != null) {
      var __twist = new Offset<gfl.anm2.fbj.KeyBase>[_o.Twist.Count];
      for (var _j = 0; _j < __twist.Length; ++_j) { __twist[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.Twist[_j]); }
      _twist = CreateTwistVector(builder, __twist);
    }
    var _aimPosX = default(VectorOffset);
    if (_o.AimPosX != null) {
      var __aimPosX = new Offset<gfl.anm2.fbj.KeyBase>[_o.AimPosX.Count];
      for (var _j = 0; _j < __aimPosX.Length; ++_j) { __aimPosX[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.AimPosX[_j]); }
      _aimPosX = CreateAimPosXVector(builder, __aimPosX);
    }
    var _aimPosY = default(VectorOffset);
    if (_o.AimPosY != null) {
      var __aimPosY = new Offset<gfl.anm2.fbj.KeyBase>[_o.AimPosY.Count];
      for (var _j = 0; _j < __aimPosY.Length; ++_j) { __aimPosY[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.AimPosY[_j]); }
      _aimPosY = CreateAimPosYVector(builder, __aimPosY);
    }
    var _aimPosZ = default(VectorOffset);
    if (_o.AimPosZ != null) {
      var __aimPosZ = new Offset<gfl.anm2.fbj.KeyBase>[_o.AimPosZ.Count];
      for (var _j = 0; _j < __aimPosZ.Length; ++_j) { __aimPosZ[_j] = gfl.anm2.fbj.KeyBase.Pack(builder, _o.AimPosZ[_j]); }
      _aimPosZ = CreateAimPosZVector(builder, __aimPosZ);
    }
    return CreateCamera(
      builder,
      _name,
      _near,
      _far,
      _fovy,
      _rotationX,
      _rotationY,
      _rotationZ,
      _translateX,
      _translateY,
      _translateZ,
      _upVectorX,
      _upVectorY,
      _upVectorZ,
      _twist,
      _aimPosX,
      _aimPosY,
      _aimPosZ);
  }
};

public class CameraT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("near")]
  public List<gfl.anm2.fbj.KeyBaseT> Near { get; set; }
  [Newtonsoft.Json.JsonProperty("far")]
  public List<gfl.anm2.fbj.KeyBaseT> Far { get; set; }
  [Newtonsoft.Json.JsonProperty("fovy")]
  public List<gfl.anm2.fbj.KeyBaseT> Fovy { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationX")]
  public List<gfl.anm2.fbj.KeyBaseT> RotationX { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationY")]
  public List<gfl.anm2.fbj.KeyBaseT> RotationY { get; set; }
  [Newtonsoft.Json.JsonProperty("rotationZ")]
  public List<gfl.anm2.fbj.KeyBaseT> RotationZ { get; set; }
  [Newtonsoft.Json.JsonProperty("translateX")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateX { get; set; }
  [Newtonsoft.Json.JsonProperty("translateY")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateY { get; set; }
  [Newtonsoft.Json.JsonProperty("translateZ")]
  public List<gfl.anm2.fbj.KeyBaseT> TranslateZ { get; set; }
  [Newtonsoft.Json.JsonProperty("upVectorX")]
  public List<gfl.anm2.fbj.KeyBaseT> UpVectorX { get; set; }
  [Newtonsoft.Json.JsonProperty("upVectorY")]
  public List<gfl.anm2.fbj.KeyBaseT> UpVectorY { get; set; }
  [Newtonsoft.Json.JsonProperty("upVectorZ")]
  public List<gfl.anm2.fbj.KeyBaseT> UpVectorZ { get; set; }
  [Newtonsoft.Json.JsonProperty("twist")]
  public List<gfl.anm2.fbj.KeyBaseT> Twist { get; set; }
  [Newtonsoft.Json.JsonProperty("aimPosX")]
  public List<gfl.anm2.fbj.KeyBaseT> AimPosX { get; set; }
  [Newtonsoft.Json.JsonProperty("aimPosY")]
  public List<gfl.anm2.fbj.KeyBaseT> AimPosY { get; set; }
  [Newtonsoft.Json.JsonProperty("aimPosZ")]
  public List<gfl.anm2.fbj.KeyBaseT> AimPosZ { get; set; }

  public CameraT() {
    this.Name = null;
    this.Near = null;
    this.Far = null;
    this.Fovy = null;
    this.RotationX = null;
    this.RotationY = null;
    this.RotationZ = null;
    this.TranslateX = null;
    this.TranslateY = null;
    this.TranslateZ = null;
    this.UpVectorX = null;
    this.UpVectorY = null;
    this.UpVectorZ = null;
    this.Twist = null;
    this.AimPosX = null;
    this.AimPosY = null;
    this.AimPosZ = null;
  }
}

public struct CameraAnimation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraAnimation GetRootAsCameraAnimation(ByteBuffer _bb) { return GetRootAsCameraAnimation(_bb, new CameraAnimation()); }
  public static CameraAnimation GetRootAsCameraAnimation(ByteBuffer _bb, CameraAnimation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.ExporterInfo? ExporterInfo { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.ExporterInfo?)(new gfl.anm2.fbj.ExporterInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.DccSource? Source { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.DccSource?)(new gfl.anm2.fbj.DccSource()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.FrameSetting? FrameSetting { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.FrameSetting?)(new gfl.anm2.fbj.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.Camera? Camera { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.Camera?)(new gfl.anm2.fbj.Camera()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.CameraAnimation> CreateCameraAnimation(FlatBufferBuilder builder,
      Offset<gfl.anm2.fbj.ExporterInfo> exporterInfoOffset = default(Offset<gfl.anm2.fbj.ExporterInfo>),
      Offset<gfl.anm2.fbj.DccSource> sourceOffset = default(Offset<gfl.anm2.fbj.DccSource>),
      Offset<gfl.anm2.fbj.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fbj.FrameSetting>),
      Offset<gfl.anm2.fbj.Camera> cameraOffset = default(Offset<gfl.anm2.fbj.Camera>)) {
    builder.StartTable(4);
    CameraAnimation.AddCamera(builder, cameraOffset);
    CameraAnimation.AddFrameSetting(builder, frameSettingOffset);
    CameraAnimation.AddSource(builder, sourceOffset);
    CameraAnimation.AddExporterInfo(builder, exporterInfoOffset);
    return CameraAnimation.EndCameraAnimation(builder);
  }

  public static void StartCameraAnimation(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddExporterInfo(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.ExporterInfo> exporterInfoOffset) { builder.AddOffset(0, exporterInfoOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.DccSource> sourceOffset) { builder.AddOffset(1, sourceOffset.Value, 0); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.FrameSetting> frameSettingOffset) { builder.AddOffset(2, frameSettingOffset.Value, 0); }
  public static void AddCamera(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Camera> cameraOffset) { builder.AddOffset(3, cameraOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.CameraAnimation> EndCameraAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.CameraAnimation>(o);
  }
  public static void FinishCameraAnimationBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.CameraAnimation> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCameraAnimationBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.CameraAnimation> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CameraAnimationT UnPack() {
    var _o = new CameraAnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraAnimationT _o) {
    _o.ExporterInfo = this.ExporterInfo.HasValue ? this.ExporterInfo.Value.UnPack() : null;
    _o.Source = this.Source.HasValue ? this.Source.Value.UnPack() : null;
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.Camera = this.Camera.HasValue ? this.Camera.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.CameraAnimation> Pack(FlatBufferBuilder builder, CameraAnimationT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.CameraAnimation>);
    var _exporterInfo = _o.ExporterInfo == null ? default(Offset<gfl.anm2.fbj.ExporterInfo>) : gfl.anm2.fbj.ExporterInfo.Pack(builder, _o.ExporterInfo);
    var _source = _o.Source == null ? default(Offset<gfl.anm2.fbj.DccSource>) : gfl.anm2.fbj.DccSource.Pack(builder, _o.Source);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fbj.FrameSetting>) : gfl.anm2.fbj.FrameSetting.Pack(builder, _o.FrameSetting);
    var _camera = _o.Camera == null ? default(Offset<gfl.anm2.fbj.Camera>) : gfl.anm2.fbj.Camera.Pack(builder, _o.Camera);
    return CreateCameraAnimation(
      builder,
      _exporterInfo,
      _source,
      _frameSetting,
      _camera);
  }
};

public class CameraAnimationT
{
  [Newtonsoft.Json.JsonProperty("exporterInfo")]
  public gfl.anm2.fbj.ExporterInfoT ExporterInfo { get; set; }
  [Newtonsoft.Json.JsonProperty("source")]
  public gfl.anm2.fbj.DccSourceT Source { get; set; }
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fbj.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("camera")]
  public gfl.anm2.fbj.CameraT Camera { get; set; }

  public CameraAnimationT() {
    this.ExporterInfo = null;
    this.Source = null;
    this.FrameSetting = null;
    this.Camera = null;
  }

  public static CameraAnimationT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CameraAnimationT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CameraAnimationT DeserializeFromBinary(byte[] fbBuffer) {
    return CameraAnimation.GetRootAsCameraAnimation(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CameraAnimation.FinishCameraAnimationBuffer(fbb, CameraAnimation.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
