// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fbj
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum LayerMode : int
{
  Override = 0,
  Additive = 1,
};

public struct JointMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static JointMask GetRootAsJointMask(ByteBuffer _bb) { return GetRootAsJointMask(_bb, new JointMask()); }
  public static JointMask GetRootAsJointMask(ByteBuffer _bb, JointMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public JointMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Enabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.JointMask> CreateJointMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool enabled = false) {
    builder.StartTable(2);
    JointMask.AddName(builder, nameOffset);
    JointMask.AddEnabled(builder, enabled);
    return JointMask.EndJointMask(builder);
  }

  public static void StartJointMask(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(1, enabled, false); }
  public static Offset<gfl.anm2.fbj.JointMask> EndJointMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.JointMask>(o);
  }
  public JointMaskT UnPack() {
    var _o = new JointMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(JointMaskT _o) {
    _o.Name = this.Name;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.anm2.fbj.JointMask> Pack(FlatBufferBuilder builder, JointMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.JointMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateJointMask(
      builder,
      _name,
      _o.Enabled);
  }
};

public class JointMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public JointMaskT() {
    this.Name = null;
    this.Enabled = false;
  }
}

public struct MeshMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshMask GetRootAsMeshMask(ByteBuffer _bb) { return GetRootAsMeshMask(_bb, new MeshMask()); }
  public static MeshMask GetRootAsMeshMask(ByteBuffer _bb, MeshMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Enabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.MeshMask> CreateMeshMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool enabled = false) {
    builder.StartTable(2);
    MeshMask.AddName(builder, nameOffset);
    MeshMask.AddEnabled(builder, enabled);
    return MeshMask.EndMeshMask(builder);
  }

  public static void StartMeshMask(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(1, enabled, false); }
  public static Offset<gfl.anm2.fbj.MeshMask> EndMeshMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.MeshMask>(o);
  }
  public MeshMaskT UnPack() {
    var _o = new MeshMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshMaskT _o) {
    _o.Name = this.Name;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.anm2.fbj.MeshMask> Pack(FlatBufferBuilder builder, MeshMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.MeshMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateMeshMask(
      builder,
      _name,
      _o.Enabled);
  }
};

public class MeshMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public MeshMaskT() {
    this.Name = null;
    this.Enabled = false;
  }
}

public struct AttributeMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AttributeMask GetRootAsAttributeMask(ByteBuffer _bb) { return GetRootAsAttributeMask(_bb, new AttributeMask()); }
  public static AttributeMask GetRootAsAttributeMask(ByteBuffer _bb, AttributeMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttributeMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Enabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.AttributeMask> CreateAttributeMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool enabled = false) {
    builder.StartTable(2);
    AttributeMask.AddName(builder, nameOffset);
    AttributeMask.AddEnabled(builder, enabled);
    return AttributeMask.EndAttributeMask(builder);
  }

  public static void StartAttributeMask(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(1, enabled, false); }
  public static Offset<gfl.anm2.fbj.AttributeMask> EndAttributeMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.AttributeMask>(o);
  }
  public AttributeMaskT UnPack() {
    var _o = new AttributeMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttributeMaskT _o) {
    _o.Name = this.Name;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.anm2.fbj.AttributeMask> Pack(FlatBufferBuilder builder, AttributeMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.AttributeMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateAttributeMask(
      builder,
      _name,
      _o.Enabled);
  }
};

public class AttributeMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public AttributeMaskT() {
    this.Name = null;
    this.Enabled = false;
  }
}

public struct MaterialMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialMask GetRootAsMaterialMask(ByteBuffer _bb) { return GetRootAsMaterialMask(_bb, new MaterialMask()); }
  public static MaterialMask GetRootAsMaterialMask(ByteBuffer _bb, MaterialMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fbj.AttributeMask? FloatMaskList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.AttributeMask?)(new gfl.anm2.fbj.AttributeMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatMaskListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.AttributeMask? Float4MaskList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.AttributeMask?)(new gfl.anm2.fbj.AttributeMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Float4MaskListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.MaterialMask> CreateMaterialMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset floatMaskListOffset = default(VectorOffset),
      VectorOffset float4MaskListOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MaterialMask.AddFloat4MaskList(builder, float4MaskListOffset);
    MaterialMask.AddFloatMaskList(builder, floatMaskListOffset);
    MaterialMask.AddName(builder, nameOffset);
    return MaterialMask.EndMaterialMask(builder);
  }

  public static void StartMaterialMask(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFloatMaskList(FlatBufferBuilder builder, VectorOffset floatMaskListOffset) { builder.AddOffset(1, floatMaskListOffset.Value, 0); }
  public static VectorOffset CreateFloatMaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatMaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatMaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloat4MaskList(FlatBufferBuilder builder, VectorOffset float4MaskListOffset) { builder.AddOffset(2, float4MaskListOffset.Value, 0); }
  public static VectorOffset CreateFloat4MaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloat4MaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.AttributeMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloat4MaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.MaterialMask> EndMaterialMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.MaterialMask>(o);
  }
  public MaterialMaskT UnPack() {
    var _o = new MaterialMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialMaskT _o) {
    _o.Name = this.Name;
    _o.FloatMaskList = new List<gfl.anm2.fbj.AttributeMaskT>();
    for (var _j = 0; _j < this.FloatMaskListLength; ++_j) {_o.FloatMaskList.Add(this.FloatMaskList(_j).HasValue ? this.FloatMaskList(_j).Value.UnPack() : null);}
    _o.Float4MaskList = new List<gfl.anm2.fbj.AttributeMaskT>();
    for (var _j = 0; _j < this.Float4MaskListLength; ++_j) {_o.Float4MaskList.Add(this.Float4MaskList(_j).HasValue ? this.Float4MaskList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.MaterialMask> Pack(FlatBufferBuilder builder, MaterialMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.MaterialMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _floatMaskList = default(VectorOffset);
    if (_o.FloatMaskList != null) {
      var __floatMaskList = new Offset<gfl.anm2.fbj.AttributeMask>[_o.FloatMaskList.Count];
      for (var _j = 0; _j < __floatMaskList.Length; ++_j) { __floatMaskList[_j] = gfl.anm2.fbj.AttributeMask.Pack(builder, _o.FloatMaskList[_j]); }
      _floatMaskList = CreateFloatMaskListVector(builder, __floatMaskList);
    }
    var _float4MaskList = default(VectorOffset);
    if (_o.Float4MaskList != null) {
      var __float4MaskList = new Offset<gfl.anm2.fbj.AttributeMask>[_o.Float4MaskList.Count];
      for (var _j = 0; _j < __float4MaskList.Length; ++_j) { __float4MaskList[_j] = gfl.anm2.fbj.AttributeMask.Pack(builder, _o.Float4MaskList[_j]); }
      _float4MaskList = CreateFloat4MaskListVector(builder, __float4MaskList);
    }
    return CreateMaterialMask(
      builder,
      _name,
      _floatMaskList,
      _float4MaskList);
  }
};

public class MaterialMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("floatMaskList")]
  public List<gfl.anm2.fbj.AttributeMaskT> FloatMaskList { get; set; }
  [Newtonsoft.Json.JsonProperty("float4MaskList")]
  public List<gfl.anm2.fbj.AttributeMaskT> Float4MaskList { get; set; }

  public MaterialMaskT() {
    this.Name = null;
    this.FloatMaskList = null;
    this.Float4MaskList = null;
  }
}

public struct DeformerMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DeformerMask GetRootAsDeformerMask(ByteBuffer _bb) { return GetRootAsDeformerMask(_bb, new DeformerMask()); }
  public static DeformerMask GetRootAsDeformerMask(ByteBuffer _bb, DeformerMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeformerMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool Enabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fbj.DeformerMask> CreateDeformerMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      bool enabled = false) {
    builder.StartTable(2);
    DeformerMask.AddName(builder, nameOffset);
    DeformerMask.AddEnabled(builder, enabled);
    return DeformerMask.EndDeformerMask(builder);
  }

  public static void StartDeformerMask(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(1, enabled, false); }
  public static Offset<gfl.anm2.fbj.DeformerMask> EndDeformerMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.DeformerMask>(o);
  }
  public DeformerMaskT UnPack() {
    var _o = new DeformerMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DeformerMaskT _o) {
    _o.Name = this.Name;
    _o.Enabled = this.Enabled;
  }
  public static Offset<gfl.anm2.fbj.DeformerMask> Pack(FlatBufferBuilder builder, DeformerMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.DeformerMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateDeformerMask(
      builder,
      _name,
      _o.Enabled);
  }
};

public class DeformerMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }

  public DeformerMaskT() {
    this.Name = null;
    this.Enabled = false;
  }
}

public struct Mask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Mask GetRootAsMask(ByteBuffer _bb) { return GetRootAsMask(_bb, new Mask()); }
  public static Mask GetRootAsMask(ByteBuffer _bb, Mask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.JointMask? JointMaskList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.JointMask?)(new gfl.anm2.fbj.JointMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int JointMaskListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.MeshMask? MeshMaskList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.MeshMask?)(new gfl.anm2.fbj.MeshMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshMaskListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.MaterialMask? MaterialMaskList(int j) { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.MaterialMask?)(new gfl.anm2.fbj.MaterialMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MaterialMaskListLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.DeformerMask? DeformerMaskList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.DeformerMask?)(new gfl.anm2.fbj.DeformerMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeformerMaskListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fbj.Mask> CreateMask(FlatBufferBuilder builder,
      VectorOffset jointMaskListOffset = default(VectorOffset),
      VectorOffset meshMaskListOffset = default(VectorOffset),
      VectorOffset materialMaskListOffset = default(VectorOffset),
      VectorOffset deformerMaskListOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Mask.AddDeformerMaskList(builder, deformerMaskListOffset);
    Mask.AddMaterialMaskList(builder, materialMaskListOffset);
    Mask.AddMeshMaskList(builder, meshMaskListOffset);
    Mask.AddJointMaskList(builder, jointMaskListOffset);
    return Mask.EndMask(builder);
  }

  public static void StartMask(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddJointMaskList(FlatBufferBuilder builder, VectorOffset jointMaskListOffset) { builder.AddOffset(0, jointMaskListOffset.Value, 0); }
  public static VectorOffset CreateJointMaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.JointMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJointMaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.JointMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartJointMaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMeshMaskList(FlatBufferBuilder builder, VectorOffset meshMaskListOffset) { builder.AddOffset(1, meshMaskListOffset.Value, 0); }
  public static VectorOffset CreateMeshMaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.MeshMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshMaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.MeshMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshMaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaterialMaskList(FlatBufferBuilder builder, VectorOffset materialMaskListOffset) { builder.AddOffset(2, materialMaskListOffset.Value, 0); }
  public static VectorOffset CreateMaterialMaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.MaterialMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMaterialMaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.MaterialMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMaterialMaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeformerMaskList(FlatBufferBuilder builder, VectorOffset deformerMaskListOffset) { builder.AddOffset(3, deformerMaskListOffset.Value, 0); }
  public static VectorOffset CreateDeformerMaskListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.DeformerMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeformerMaskListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.DeformerMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeformerMaskListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fbj.Mask> EndMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Mask>(o);
  }
  public MaskT UnPack() {
    var _o = new MaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaskT _o) {
    _o.JointMaskList = new List<gfl.anm2.fbj.JointMaskT>();
    for (var _j = 0; _j < this.JointMaskListLength; ++_j) {_o.JointMaskList.Add(this.JointMaskList(_j).HasValue ? this.JointMaskList(_j).Value.UnPack() : null);}
    _o.MeshMaskList = new List<gfl.anm2.fbj.MeshMaskT>();
    for (var _j = 0; _j < this.MeshMaskListLength; ++_j) {_o.MeshMaskList.Add(this.MeshMaskList(_j).HasValue ? this.MeshMaskList(_j).Value.UnPack() : null);}
    _o.MaterialMaskList = new List<gfl.anm2.fbj.MaterialMaskT>();
    for (var _j = 0; _j < this.MaterialMaskListLength; ++_j) {_o.MaterialMaskList.Add(this.MaterialMaskList(_j).HasValue ? this.MaterialMaskList(_j).Value.UnPack() : null);}
    _o.DeformerMaskList = new List<gfl.anm2.fbj.DeformerMaskT>();
    for (var _j = 0; _j < this.DeformerMaskListLength; ++_j) {_o.DeformerMaskList.Add(this.DeformerMaskList(_j).HasValue ? this.DeformerMaskList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fbj.Mask> Pack(FlatBufferBuilder builder, MaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Mask>);
    var _jointMaskList = default(VectorOffset);
    if (_o.JointMaskList != null) {
      var __jointMaskList = new Offset<gfl.anm2.fbj.JointMask>[_o.JointMaskList.Count];
      for (var _j = 0; _j < __jointMaskList.Length; ++_j) { __jointMaskList[_j] = gfl.anm2.fbj.JointMask.Pack(builder, _o.JointMaskList[_j]); }
      _jointMaskList = CreateJointMaskListVector(builder, __jointMaskList);
    }
    var _meshMaskList = default(VectorOffset);
    if (_o.MeshMaskList != null) {
      var __meshMaskList = new Offset<gfl.anm2.fbj.MeshMask>[_o.MeshMaskList.Count];
      for (var _j = 0; _j < __meshMaskList.Length; ++_j) { __meshMaskList[_j] = gfl.anm2.fbj.MeshMask.Pack(builder, _o.MeshMaskList[_j]); }
      _meshMaskList = CreateMeshMaskListVector(builder, __meshMaskList);
    }
    var _materialMaskList = default(VectorOffset);
    if (_o.MaterialMaskList != null) {
      var __materialMaskList = new Offset<gfl.anm2.fbj.MaterialMask>[_o.MaterialMaskList.Count];
      for (var _j = 0; _j < __materialMaskList.Length; ++_j) { __materialMaskList[_j] = gfl.anm2.fbj.MaterialMask.Pack(builder, _o.MaterialMaskList[_j]); }
      _materialMaskList = CreateMaterialMaskListVector(builder, __materialMaskList);
    }
    var _deformerMaskList = default(VectorOffset);
    if (_o.DeformerMaskList != null) {
      var __deformerMaskList = new Offset<gfl.anm2.fbj.DeformerMask>[_o.DeformerMaskList.Count];
      for (var _j = 0; _j < __deformerMaskList.Length; ++_j) { __deformerMaskList[_j] = gfl.anm2.fbj.DeformerMask.Pack(builder, _o.DeformerMaskList[_j]); }
      _deformerMaskList = CreateDeformerMaskListVector(builder, __deformerMaskList);
    }
    return CreateMask(
      builder,
      _jointMaskList,
      _meshMaskList,
      _materialMaskList,
      _deformerMaskList);
  }
};

public class MaskT
{
  [Newtonsoft.Json.JsonProperty("jointMaskList")]
  public List<gfl.anm2.fbj.JointMaskT> JointMaskList { get; set; }
  [Newtonsoft.Json.JsonProperty("meshMaskList")]
  public List<gfl.anm2.fbj.MeshMaskT> MeshMaskList { get; set; }
  [Newtonsoft.Json.JsonProperty("materialMaskList")]
  public List<gfl.anm2.fbj.MaterialMaskT> MaterialMaskList { get; set; }
  [Newtonsoft.Json.JsonProperty("deformerMaskList")]
  public List<gfl.anm2.fbj.DeformerMaskT> DeformerMaskList { get; set; }

  public MaskT() {
    this.JointMaskList = null;
    this.MeshMaskList = null;
    this.MaterialMaskList = null;
    this.DeformerMaskList = null;
  }
}

public struct Layer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Layer GetRootAsLayer(ByteBuffer _bb) { return GetRootAsLayer(_bb, new Layer()); }
  public static Layer GetRootAsLayer(ByteBuffer _bb, Layer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Layer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int No { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fbj.Mask? Mask { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fbj.Mask?)(new gfl.anm2.fbj.Mask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fbj.LayerMode Mode { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fbj.LayerMode)__p.bb.GetInt(o + __p.bb_pos) : gfl.anm2.fbj.LayerMode.Override; } }
  public bool EnablePhysicsWeight { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool EnableWindWeight { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool EnableWindNoiseWeight { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool AdditionalParameterEnableList(int j) { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int AdditionalParameterEnableListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetAdditionalParameterEnableListBytes() { return __p.__vector_as_span<bool>(18, 1); }
#else
  public ArraySegment<byte>? GetAdditionalParameterEnableListBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public bool[] GetAdditionalParameterEnableListArray() { return __p.__vector_as_array<bool>(18); }

  public static Offset<gfl.anm2.fbj.Layer> CreateLayer(FlatBufferBuilder builder,
      int no = 0,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fbj.Mask> maskOffset = default(Offset<gfl.anm2.fbj.Mask>),
      gfl.anm2.fbj.LayerMode mode = gfl.anm2.fbj.LayerMode.Override,
      bool enablePhysicsWeight = true,
      bool enableWindWeight = true,
      bool enableWindNoiseWeight = true,
      VectorOffset additionalParameterEnableListOffset = default(VectorOffset)) {
    builder.StartTable(8);
    Layer.AddAdditionalParameterEnableList(builder, additionalParameterEnableListOffset);
    Layer.AddMode(builder, mode);
    Layer.AddMask(builder, maskOffset);
    Layer.AddName(builder, nameOffset);
    Layer.AddNo(builder, no);
    Layer.AddEnableWindNoiseWeight(builder, enableWindNoiseWeight);
    Layer.AddEnableWindWeight(builder, enableWindWeight);
    Layer.AddEnablePhysicsWeight(builder, enablePhysicsWeight);
    return Layer.EndLayer(builder);
  }

  public static void StartLayer(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddNo(FlatBufferBuilder builder, int no) { builder.AddInt(0, no, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddMask(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Mask> maskOffset) { builder.AddOffset(2, maskOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, gfl.anm2.fbj.LayerMode mode) { builder.AddInt(3, (int)mode, 0); }
  public static void AddEnablePhysicsWeight(FlatBufferBuilder builder, bool enablePhysicsWeight) { builder.AddBool(4, enablePhysicsWeight, true); }
  public static void AddEnableWindWeight(FlatBufferBuilder builder, bool enableWindWeight) { builder.AddBool(5, enableWindWeight, true); }
  public static void AddEnableWindNoiseWeight(FlatBufferBuilder builder, bool enableWindNoiseWeight) { builder.AddBool(6, enableWindNoiseWeight, true); }
  public static void AddAdditionalParameterEnableList(FlatBufferBuilder builder, VectorOffset additionalParameterEnableListOffset) { builder.AddOffset(7, additionalParameterEnableListOffset.Value, 0); }
  public static VectorOffset CreateAdditionalParameterEnableListVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalParameterEnableListVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartAdditionalParameterEnableListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.anm2.fbj.Layer> EndLayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.Layer>(o);
  }
  public LayerT UnPack() {
    var _o = new LayerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LayerT _o) {
    _o.No = this.No;
    _o.Name = this.Name;
    _o.Mask = this.Mask.HasValue ? this.Mask.Value.UnPack() : null;
    _o.Mode = this.Mode;
    _o.EnablePhysicsWeight = this.EnablePhysicsWeight;
    _o.EnableWindWeight = this.EnableWindWeight;
    _o.EnableWindNoiseWeight = this.EnableWindNoiseWeight;
    _o.AdditionalParameterEnableList = new List<bool>();
    for (var _j = 0; _j < this.AdditionalParameterEnableListLength; ++_j) {_o.AdditionalParameterEnableList.Add(this.AdditionalParameterEnableList(_j));}
  }
  public static Offset<gfl.anm2.fbj.Layer> Pack(FlatBufferBuilder builder, LayerT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.Layer>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _mask = _o.Mask == null ? default(Offset<gfl.anm2.fbj.Mask>) : gfl.anm2.fbj.Mask.Pack(builder, _o.Mask);
    var _additionalParameterEnableList = default(VectorOffset);
    if (_o.AdditionalParameterEnableList != null) {
      var __additionalParameterEnableList = _o.AdditionalParameterEnableList.ToArray();
      _additionalParameterEnableList = CreateAdditionalParameterEnableListVector(builder, __additionalParameterEnableList);
    }
    return CreateLayer(
      builder,
      _o.No,
      _name,
      _mask,
      _o.Mode,
      _o.EnablePhysicsWeight,
      _o.EnableWindWeight,
      _o.EnableWindNoiseWeight,
      _additionalParameterEnableList);
  }
};

public class LayerT
{
  [Newtonsoft.Json.JsonProperty("no")]
  public int No { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("mask")]
  public gfl.anm2.fbj.MaskT Mask { get; set; }
  [Newtonsoft.Json.JsonProperty("mode")]
  public gfl.anm2.fbj.LayerMode Mode { get; set; }
  [Newtonsoft.Json.JsonProperty("enablePhysicsWeight")]
  public bool EnablePhysicsWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("enableWindWeight")]
  public bool EnableWindWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("enableWindNoiseWeight")]
  public bool EnableWindNoiseWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("additionalParameterEnableList")]
  public List<bool> AdditionalParameterEnableList { get; set; }

  public LayerT() {
    this.No = 0;
    this.Name = null;
    this.Mask = null;
    this.Mode = gfl.anm2.fbj.LayerMode.Override;
    this.EnablePhysicsWeight = true;
    this.EnableWindWeight = true;
    this.EnableWindNoiseWeight = true;
    this.AdditionalParameterEnableList = null;
  }
}

public struct LayerConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LayerConfig GetRootAsLayerConfig(ByteBuffer _bb) { return GetRootAsLayerConfig(_bb, new LayerConfig()); }
  public static LayerConfig GetRootAsLayerConfig(ByteBuffer _bb, LayerConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LayerConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fbj.Layer? LayerList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fbj.Layer?)(new gfl.anm2.fbj.Layer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LayerListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fbj.Mask? BlendMask { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fbj.Mask?)(new gfl.anm2.fbj.Mask()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fbj.LayerConfig> CreateLayerConfig(FlatBufferBuilder builder,
      VectorOffset layerListOffset = default(VectorOffset),
      Offset<gfl.anm2.fbj.Mask> blendMaskOffset = default(Offset<gfl.anm2.fbj.Mask>)) {
    builder.StartTable(2);
    LayerConfig.AddBlendMask(builder, blendMaskOffset);
    LayerConfig.AddLayerList(builder, layerListOffset);
    return LayerConfig.EndLayerConfig(builder);
  }

  public static void StartLayerConfig(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddLayerList(FlatBufferBuilder builder, VectorOffset layerListOffset) { builder.AddOffset(0, layerListOffset.Value, 0); }
  public static VectorOffset CreateLayerListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Layer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLayerListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Layer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLayerListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlendMask(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.Mask> blendMaskOffset) { builder.AddOffset(1, blendMaskOffset.Value, 0); }
  public static Offset<gfl.anm2.fbj.LayerConfig> EndLayerConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fbj.LayerConfig>(o);
  }
  public static void FinishLayerConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.LayerConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLayerConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fbj.LayerConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LayerConfigT UnPack() {
    var _o = new LayerConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LayerConfigT _o) {
    _o.LayerList = new List<gfl.anm2.fbj.LayerT>();
    for (var _j = 0; _j < this.LayerListLength; ++_j) {_o.LayerList.Add(this.LayerList(_j).HasValue ? this.LayerList(_j).Value.UnPack() : null);}
    _o.BlendMask = this.BlendMask.HasValue ? this.BlendMask.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fbj.LayerConfig> Pack(FlatBufferBuilder builder, LayerConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fbj.LayerConfig>);
    var _layerList = default(VectorOffset);
    if (_o.LayerList != null) {
      var __layerList = new Offset<gfl.anm2.fbj.Layer>[_o.LayerList.Count];
      for (var _j = 0; _j < __layerList.Length; ++_j) { __layerList[_j] = gfl.anm2.fbj.Layer.Pack(builder, _o.LayerList[_j]); }
      _layerList = CreateLayerListVector(builder, __layerList);
    }
    var _blendMask = _o.BlendMask == null ? default(Offset<gfl.anm2.fbj.Mask>) : gfl.anm2.fbj.Mask.Pack(builder, _o.BlendMask);
    return CreateLayerConfig(
      builder,
      _layerList,
      _blendMask);
  }
};

public class LayerConfigT
{
  [Newtonsoft.Json.JsonProperty("layerList")]
  public List<gfl.anm2.fbj.LayerT> LayerList { get; set; }
  [Newtonsoft.Json.JsonProperty("blendMask")]
  public gfl.anm2.fbj.MaskT BlendMask { get; set; }

  public LayerConfigT() {
    this.LayerList = null;
    this.BlendMask = null;
  }

  public static LayerConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LayerConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LayerConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return LayerConfig.GetRootAsLayerConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LayerConfig.FinishLayerConfigBuffer(fbb, LayerConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
