// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct UnitData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UnitData GetRootAsUnitData(ByteBuffer _bb) { return GetRootAsUnitData(_bb, new UnitData()); }
  public static UnitData GetRootAsUnitData(ByteBuffer _bb, UnitData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnitData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Node { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNodeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNodeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNodeArray() { return __p.__vector_as_array<byte>(4); }
  public string AnimationNode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnimationNodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAnimationNodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAnimationNodeArray() { return __p.__vector_as_array<byte>(6); }
  public float FootOffsetY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinX { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.05f; } }
  public float MaxX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.05f; } }
  public float MinY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.0f; } }
  public float MaxY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinZ { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.05f; } }
  public float MaxZ { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.05f; } }
  public float TranslateXzTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TranslateYTime { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PitchLimitInDegrees { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RollLimitInDegrees { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RotateSpeed { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.5f; } }
  public float RayCastDistance { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)2.0f; } }
  public float RayCastHeightOffset { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public float RayCastFrontOffset { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.25f; } }
  public float RayCastBehindOffset { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.25f; } }
  public float RayCastLeftOffset { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)-0.25f; } }
  public float RayCastRightOffset { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.25f; } }
  public float DelayThresholdTranslate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DelayTranslateTime { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.UnitData> CreateUnitData(FlatBufferBuilder builder,
      StringOffset nodeOffset = default(StringOffset),
      StringOffset animation_nodeOffset = default(StringOffset),
      float foot_offset_y = 0.0f,
      float min_x = -0.05f,
      float max_x = 0.05f,
      float min_y = -0.0f,
      float max_y = 0.0f,
      float min_z = -0.05f,
      float max_z = 0.05f,
      float translate_xz_time = 0.0f,
      float translate_y_time = 0.0f,
      float pitch_limit_in_degrees = 0.0f,
      float roll_limit_in_degrees = 0.0f,
      float rotate_speed = 0.5f,
      float ray_cast_distance = 2.0f,
      float ray_cast_height_offset = 1.0f,
      float ray_cast_front_offset = 0.25f,
      float ray_cast_behind_offset = -0.25f,
      float ray_cast_left_offset = -0.25f,
      float ray_cast_right_offset = 0.25f,
      float delay_threshold_translate = 0.0f,
      float delay_translate_time = 0.0f) {
    builder.StartTable(22);
    UnitData.AddDelayTranslateTime(builder, delay_translate_time);
    UnitData.AddDelayThresholdTranslate(builder, delay_threshold_translate);
    UnitData.AddRayCastRightOffset(builder, ray_cast_right_offset);
    UnitData.AddRayCastLeftOffset(builder, ray_cast_left_offset);
    UnitData.AddRayCastBehindOffset(builder, ray_cast_behind_offset);
    UnitData.AddRayCastFrontOffset(builder, ray_cast_front_offset);
    UnitData.AddRayCastHeightOffset(builder, ray_cast_height_offset);
    UnitData.AddRayCastDistance(builder, ray_cast_distance);
    UnitData.AddRotateSpeed(builder, rotate_speed);
    UnitData.AddRollLimitInDegrees(builder, roll_limit_in_degrees);
    UnitData.AddPitchLimitInDegrees(builder, pitch_limit_in_degrees);
    UnitData.AddTranslateYTime(builder, translate_y_time);
    UnitData.AddTranslateXzTime(builder, translate_xz_time);
    UnitData.AddMaxZ(builder, max_z);
    UnitData.AddMinZ(builder, min_z);
    UnitData.AddMaxY(builder, max_y);
    UnitData.AddMinY(builder, min_y);
    UnitData.AddMaxX(builder, max_x);
    UnitData.AddMinX(builder, min_x);
    UnitData.AddFootOffsetY(builder, foot_offset_y);
    UnitData.AddAnimationNode(builder, animation_nodeOffset);
    UnitData.AddNode(builder, nodeOffset);
    return UnitData.EndUnitData(builder);
  }

  public static void StartUnitData(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddNode(FlatBufferBuilder builder, StringOffset nodeOffset) { builder.AddOffset(0, nodeOffset.Value, 0); }
  public static void AddAnimationNode(FlatBufferBuilder builder, StringOffset animationNodeOffset) { builder.AddOffset(1, animationNodeOffset.Value, 0); }
  public static void AddFootOffsetY(FlatBufferBuilder builder, float footOffsetY) { builder.AddFloat(2, footOffsetY, 0.0f); }
  public static void AddMinX(FlatBufferBuilder builder, float minX) { builder.AddFloat(3, minX, -0.05f); }
  public static void AddMaxX(FlatBufferBuilder builder, float maxX) { builder.AddFloat(4, maxX, 0.05f); }
  public static void AddMinY(FlatBufferBuilder builder, float minY) { builder.AddFloat(5, minY, -0.0f); }
  public static void AddMaxY(FlatBufferBuilder builder, float maxY) { builder.AddFloat(6, maxY, 0.0f); }
  public static void AddMinZ(FlatBufferBuilder builder, float minZ) { builder.AddFloat(7, minZ, -0.05f); }
  public static void AddMaxZ(FlatBufferBuilder builder, float maxZ) { builder.AddFloat(8, maxZ, 0.05f); }
  public static void AddTranslateXzTime(FlatBufferBuilder builder, float translateXzTime) { builder.AddFloat(9, translateXzTime, 0.0f); }
  public static void AddTranslateYTime(FlatBufferBuilder builder, float translateYTime) { builder.AddFloat(10, translateYTime, 0.0f); }
  public static void AddPitchLimitInDegrees(FlatBufferBuilder builder, float pitchLimitInDegrees) { builder.AddFloat(11, pitchLimitInDegrees, 0.0f); }
  public static void AddRollLimitInDegrees(FlatBufferBuilder builder, float rollLimitInDegrees) { builder.AddFloat(12, rollLimitInDegrees, 0.0f); }
  public static void AddRotateSpeed(FlatBufferBuilder builder, float rotateSpeed) { builder.AddFloat(13, rotateSpeed, 0.5f); }
  public static void AddRayCastDistance(FlatBufferBuilder builder, float rayCastDistance) { builder.AddFloat(14, rayCastDistance, 2.0f); }
  public static void AddRayCastHeightOffset(FlatBufferBuilder builder, float rayCastHeightOffset) { builder.AddFloat(15, rayCastHeightOffset, 1.0f); }
  public static void AddRayCastFrontOffset(FlatBufferBuilder builder, float rayCastFrontOffset) { builder.AddFloat(16, rayCastFrontOffset, 0.25f); }
  public static void AddRayCastBehindOffset(FlatBufferBuilder builder, float rayCastBehindOffset) { builder.AddFloat(17, rayCastBehindOffset, -0.25f); }
  public static void AddRayCastLeftOffset(FlatBufferBuilder builder, float rayCastLeftOffset) { builder.AddFloat(18, rayCastLeftOffset, -0.25f); }
  public static void AddRayCastRightOffset(FlatBufferBuilder builder, float rayCastRightOffset) { builder.AddFloat(19, rayCastRightOffset, 0.25f); }
  public static void AddDelayThresholdTranslate(FlatBufferBuilder builder, float delayThresholdTranslate) { builder.AddFloat(20, delayThresholdTranslate, 0.0f); }
  public static void AddDelayTranslateTime(FlatBufferBuilder builder, float delayTranslateTime) { builder.AddFloat(21, delayTranslateTime, 0.0f); }
  public static Offset<gfl.anm2.fb.UnitData> EndUnitData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.UnitData>(o);
  }
  public UnitDataT UnPack() {
    var _o = new UnitDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UnitDataT _o) {
    _o.Node = this.Node;
    _o.AnimationNode = this.AnimationNode;
    _o.FootOffsetY = this.FootOffsetY;
    _o.MinX = this.MinX;
    _o.MaxX = this.MaxX;
    _o.MinY = this.MinY;
    _o.MaxY = this.MaxY;
    _o.MinZ = this.MinZ;
    _o.MaxZ = this.MaxZ;
    _o.TranslateXzTime = this.TranslateXzTime;
    _o.TranslateYTime = this.TranslateYTime;
    _o.PitchLimitInDegrees = this.PitchLimitInDegrees;
    _o.RollLimitInDegrees = this.RollLimitInDegrees;
    _o.RotateSpeed = this.RotateSpeed;
    _o.RayCastDistance = this.RayCastDistance;
    _o.RayCastHeightOffset = this.RayCastHeightOffset;
    _o.RayCastFrontOffset = this.RayCastFrontOffset;
    _o.RayCastBehindOffset = this.RayCastBehindOffset;
    _o.RayCastLeftOffset = this.RayCastLeftOffset;
    _o.RayCastRightOffset = this.RayCastRightOffset;
    _o.DelayThresholdTranslate = this.DelayThresholdTranslate;
    _o.DelayTranslateTime = this.DelayTranslateTime;
  }
  public static Offset<gfl.anm2.fb.UnitData> Pack(FlatBufferBuilder builder, UnitDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.UnitData>);
    var _node = _o.Node == null ? default(StringOffset) : builder.CreateString(_o.Node);
    var _animation_node = _o.AnimationNode == null ? default(StringOffset) : builder.CreateString(_o.AnimationNode);
    return CreateUnitData(
      builder,
      _node,
      _animation_node,
      _o.FootOffsetY,
      _o.MinX,
      _o.MaxX,
      _o.MinY,
      _o.MaxY,
      _o.MinZ,
      _o.MaxZ,
      _o.TranslateXzTime,
      _o.TranslateYTime,
      _o.PitchLimitInDegrees,
      _o.RollLimitInDegrees,
      _o.RotateSpeed,
      _o.RayCastDistance,
      _o.RayCastHeightOffset,
      _o.RayCastFrontOffset,
      _o.RayCastBehindOffset,
      _o.RayCastLeftOffset,
      _o.RayCastRightOffset,
      _o.DelayThresholdTranslate,
      _o.DelayTranslateTime);
  }
};

public class UnitDataT
{
  [Newtonsoft.Json.JsonProperty("node")]
  public string Node { get; set; }
  [Newtonsoft.Json.JsonProperty("animation_node")]
  public string AnimationNode { get; set; }
  [Newtonsoft.Json.JsonProperty("foot_offset_y")]
  public float FootOffsetY { get; set; }
  [Newtonsoft.Json.JsonProperty("min_x")]
  public float MinX { get; set; }
  [Newtonsoft.Json.JsonProperty("max_x")]
  public float MaxX { get; set; }
  [Newtonsoft.Json.JsonProperty("min_y")]
  public float MinY { get; set; }
  [Newtonsoft.Json.JsonProperty("max_y")]
  public float MaxY { get; set; }
  [Newtonsoft.Json.JsonProperty("min_z")]
  public float MinZ { get; set; }
  [Newtonsoft.Json.JsonProperty("max_z")]
  public float MaxZ { get; set; }
  [Newtonsoft.Json.JsonProperty("translate_xz_time")]
  public float TranslateXzTime { get; set; }
  [Newtonsoft.Json.JsonProperty("translate_y_time")]
  public float TranslateYTime { get; set; }
  [Newtonsoft.Json.JsonProperty("pitch_limit_in_degrees")]
  public float PitchLimitInDegrees { get; set; }
  [Newtonsoft.Json.JsonProperty("roll_limit_in_degrees")]
  public float RollLimitInDegrees { get; set; }
  [Newtonsoft.Json.JsonProperty("rotate_speed")]
  public float RotateSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_distance")]
  public float RayCastDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_height_offset")]
  public float RayCastHeightOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_front_offset")]
  public float RayCastFrontOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_behind_offset")]
  public float RayCastBehindOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_left_offset")]
  public float RayCastLeftOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("ray_cast_right_offset")]
  public float RayCastRightOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("delay_threshold_translate")]
  public float DelayThresholdTranslate { get; set; }
  [Newtonsoft.Json.JsonProperty("delay_translate_time")]
  public float DelayTranslateTime { get; set; }

  public UnitDataT() {
    this.Node = null;
    this.AnimationNode = null;
    this.FootOffsetY = 0.0f;
    this.MinX = -0.05f;
    this.MaxX = 0.05f;
    this.MinY = -0.0f;
    this.MaxY = 0.0f;
    this.MinZ = -0.05f;
    this.MaxZ = 0.05f;
    this.TranslateXzTime = 0.0f;
    this.TranslateYTime = 0.0f;
    this.PitchLimitInDegrees = 0.0f;
    this.RollLimitInDegrees = 0.0f;
    this.RotateSpeed = 0.5f;
    this.RayCastDistance = 2.0f;
    this.RayCastHeightOffset = 1.0f;
    this.RayCastFrontOffset = 0.25f;
    this.RayCastBehindOffset = -0.25f;
    this.RayCastLeftOffset = -0.25f;
    this.RayCastRightOffset = 0.25f;
    this.DelayThresholdTranslate = 0.0f;
    this.DelayTranslateTime = 0.0f;
  }
}

public struct StateData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StateData GetRootAsStateData(ByteBuffer _bb) { return GetRootAsStateData(_bb, new StateData()); }
  public static StateData GetRootAsStateData(ByteBuffer _bb, StateData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StateData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string State { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(4); }
  public float InterpolationTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.StateData> CreateStateData(FlatBufferBuilder builder,
      StringOffset stateOffset = default(StringOffset),
      float interpolation_time = 0.0f) {
    builder.StartTable(2);
    StateData.AddInterpolationTime(builder, interpolation_time);
    StateData.AddState(builder, stateOffset);
    return StateData.EndStateData(builder);
  }

  public static void StartStateData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(0, stateOffset.Value, 0); }
  public static void AddInterpolationTime(FlatBufferBuilder builder, float interpolationTime) { builder.AddFloat(1, interpolationTime, 0.0f); }
  public static Offset<gfl.anm2.fb.StateData> EndStateData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.StateData>(o);
  }
  public StateDataT UnPack() {
    var _o = new StateDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateDataT _o) {
    _o.State = this.State;
    _o.InterpolationTime = this.InterpolationTime;
  }
  public static Offset<gfl.anm2.fb.StateData> Pack(FlatBufferBuilder builder, StateDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.StateData>);
    var _state = _o.State == null ? default(StringOffset) : builder.CreateString(_o.State);
    return CreateStateData(
      builder,
      _state,
      _o.InterpolationTime);
  }
};

public class StateDataT
{
  [Newtonsoft.Json.JsonProperty("state")]
  public string State { get; set; }
  [Newtonsoft.Json.JsonProperty("interpolation_time")]
  public float InterpolationTime { get; set; }

  public StateDataT() {
    this.State = null;
    this.InterpolationTime = 0.0f;
  }
}

public struct UnitOperatorConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static UnitOperatorConfig GetRootAsUnitOperatorConfig(ByteBuffer _bb) { return GetRootAsUnitOperatorConfig(_bb, new UnitOperatorConfig()); }
  public static UnitOperatorConfig GetRootAsUnitOperatorConfig(ByteBuffer _bb, UnitOperatorConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnitOperatorConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.UnitData? Leader { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.UnitData?)(new gfl.anm2.fb.UnitData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.UnitData? Children(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.UnitData?)(new gfl.anm2.fb.UnitData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChildrenLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint TerrainLayer { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)2; } }
  public gfl.anm2.fb.StateData? RotationEnableStateList(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.StateData?)(new gfl.anm2.fb.StateData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationEnableStateListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.StateData? TranslateEnableStateList(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.StateData?)(new gfl.anm2.fb.StateData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TranslateEnableStateListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.StateData? LandEnableStateList(int j) { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.StateData?)(new gfl.anm2.fb.StateData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LandEnableStateListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.UnitOperatorConfig> CreateUnitOperatorConfig(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.UnitData> leaderOffset = default(Offset<gfl.anm2.fb.UnitData>),
      VectorOffset childrenOffset = default(VectorOffset),
      uint terrain_layer = 2,
      VectorOffset rotation_enable_state_listOffset = default(VectorOffset),
      VectorOffset translate_enable_state_listOffset = default(VectorOffset),
      VectorOffset land_enable_state_listOffset = default(VectorOffset)) {
    builder.StartTable(6);
    UnitOperatorConfig.AddLandEnableStateList(builder, land_enable_state_listOffset);
    UnitOperatorConfig.AddTranslateEnableStateList(builder, translate_enable_state_listOffset);
    UnitOperatorConfig.AddRotationEnableStateList(builder, rotation_enable_state_listOffset);
    UnitOperatorConfig.AddTerrainLayer(builder, terrain_layer);
    UnitOperatorConfig.AddChildren(builder, childrenOffset);
    UnitOperatorConfig.AddLeader(builder, leaderOffset);
    return UnitOperatorConfig.EndUnitOperatorConfig(builder);
  }

  public static void StartUnitOperatorConfig(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddLeader(FlatBufferBuilder builder, Offset<gfl.anm2.fb.UnitData> leaderOffset) { builder.AddOffset(0, leaderOffset.Value, 0); }
  public static void AddChildren(FlatBufferBuilder builder, VectorOffset childrenOffset) { builder.AddOffset(1, childrenOffset.Value, 0); }
  public static VectorOffset CreateChildrenVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.UnitData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChildrenVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.UnitData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChildrenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTerrainLayer(FlatBufferBuilder builder, uint terrainLayer) { builder.AddUint(2, terrainLayer, 2); }
  public static void AddRotationEnableStateList(FlatBufferBuilder builder, VectorOffset rotationEnableStateListOffset) { builder.AddOffset(3, rotationEnableStateListOffset.Value, 0); }
  public static VectorOffset CreateRotationEnableStateListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationEnableStateListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationEnableStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTranslateEnableStateList(FlatBufferBuilder builder, VectorOffset translateEnableStateListOffset) { builder.AddOffset(4, translateEnableStateListOffset.Value, 0); }
  public static VectorOffset CreateTranslateEnableStateListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTranslateEnableStateListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTranslateEnableStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLandEnableStateList(FlatBufferBuilder builder, VectorOffset landEnableStateListOffset) { builder.AddOffset(5, landEnableStateListOffset.Value, 0); }
  public static VectorOffset CreateLandEnableStateListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLandEnableStateListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.StateData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLandEnableStateListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.UnitOperatorConfig> EndUnitOperatorConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.UnitOperatorConfig>(o);
  }
  public static void FinishUnitOperatorConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.UnitOperatorConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedUnitOperatorConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.UnitOperatorConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public UnitOperatorConfigT UnPack() {
    var _o = new UnitOperatorConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UnitOperatorConfigT _o) {
    _o.Leader = this.Leader.HasValue ? this.Leader.Value.UnPack() : null;
    _o.Children = new List<gfl.anm2.fb.UnitDataT>();
    for (var _j = 0; _j < this.ChildrenLength; ++_j) {_o.Children.Add(this.Children(_j).HasValue ? this.Children(_j).Value.UnPack() : null);}
    _o.TerrainLayer = this.TerrainLayer;
    _o.RotationEnableStateList = new List<gfl.anm2.fb.StateDataT>();
    for (var _j = 0; _j < this.RotationEnableStateListLength; ++_j) {_o.RotationEnableStateList.Add(this.RotationEnableStateList(_j).HasValue ? this.RotationEnableStateList(_j).Value.UnPack() : null);}
    _o.TranslateEnableStateList = new List<gfl.anm2.fb.StateDataT>();
    for (var _j = 0; _j < this.TranslateEnableStateListLength; ++_j) {_o.TranslateEnableStateList.Add(this.TranslateEnableStateList(_j).HasValue ? this.TranslateEnableStateList(_j).Value.UnPack() : null);}
    _o.LandEnableStateList = new List<gfl.anm2.fb.StateDataT>();
    for (var _j = 0; _j < this.LandEnableStateListLength; ++_j) {_o.LandEnableStateList.Add(this.LandEnableStateList(_j).HasValue ? this.LandEnableStateList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.UnitOperatorConfig> Pack(FlatBufferBuilder builder, UnitOperatorConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.UnitOperatorConfig>);
    var _leader = _o.Leader == null ? default(Offset<gfl.anm2.fb.UnitData>) : gfl.anm2.fb.UnitData.Pack(builder, _o.Leader);
    var _children = default(VectorOffset);
    if (_o.Children != null) {
      var __children = new Offset<gfl.anm2.fb.UnitData>[_o.Children.Count];
      for (var _j = 0; _j < __children.Length; ++_j) { __children[_j] = gfl.anm2.fb.UnitData.Pack(builder, _o.Children[_j]); }
      _children = CreateChildrenVector(builder, __children);
    }
    var _rotation_enable_state_list = default(VectorOffset);
    if (_o.RotationEnableStateList != null) {
      var __rotation_enable_state_list = new Offset<gfl.anm2.fb.StateData>[_o.RotationEnableStateList.Count];
      for (var _j = 0; _j < __rotation_enable_state_list.Length; ++_j) { __rotation_enable_state_list[_j] = gfl.anm2.fb.StateData.Pack(builder, _o.RotationEnableStateList[_j]); }
      _rotation_enable_state_list = CreateRotationEnableStateListVector(builder, __rotation_enable_state_list);
    }
    var _translate_enable_state_list = default(VectorOffset);
    if (_o.TranslateEnableStateList != null) {
      var __translate_enable_state_list = new Offset<gfl.anm2.fb.StateData>[_o.TranslateEnableStateList.Count];
      for (var _j = 0; _j < __translate_enable_state_list.Length; ++_j) { __translate_enable_state_list[_j] = gfl.anm2.fb.StateData.Pack(builder, _o.TranslateEnableStateList[_j]); }
      _translate_enable_state_list = CreateTranslateEnableStateListVector(builder, __translate_enable_state_list);
    }
    var _land_enable_state_list = default(VectorOffset);
    if (_o.LandEnableStateList != null) {
      var __land_enable_state_list = new Offset<gfl.anm2.fb.StateData>[_o.LandEnableStateList.Count];
      for (var _j = 0; _j < __land_enable_state_list.Length; ++_j) { __land_enable_state_list[_j] = gfl.anm2.fb.StateData.Pack(builder, _o.LandEnableStateList[_j]); }
      _land_enable_state_list = CreateLandEnableStateListVector(builder, __land_enable_state_list);
    }
    return CreateUnitOperatorConfig(
      builder,
      _leader,
      _children,
      _o.TerrainLayer,
      _rotation_enable_state_list,
      _translate_enable_state_list,
      _land_enable_state_list);
  }
};

public class UnitOperatorConfigT
{
  [Newtonsoft.Json.JsonProperty("leader")]
  public gfl.anm2.fb.UnitDataT Leader { get; set; }
  [Newtonsoft.Json.JsonProperty("children")]
  public List<gfl.anm2.fb.UnitDataT> Children { get; set; }
  [Newtonsoft.Json.JsonProperty("terrain_layer")]
  public uint TerrainLayer { get; set; }
  [Newtonsoft.Json.JsonProperty("rotation_enable_state_list")]
  public List<gfl.anm2.fb.StateDataT> RotationEnableStateList { get; set; }
  [Newtonsoft.Json.JsonProperty("translate_enable_state_list")]
  public List<gfl.anm2.fb.StateDataT> TranslateEnableStateList { get; set; }
  [Newtonsoft.Json.JsonProperty("land_enable_state_list")]
  public List<gfl.anm2.fb.StateDataT> LandEnableStateList { get; set; }

  public UnitOperatorConfigT() {
    this.Leader = null;
    this.Children = null;
    this.TerrainLayer = 2;
    this.RotationEnableStateList = null;
    this.TranslateEnableStateList = null;
    this.LandEnableStateList = null;
  }

  public static UnitOperatorConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<UnitOperatorConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static UnitOperatorConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return UnitOperatorConfig.GetRootAsUnitOperatorConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    UnitOperatorConfig.FinishUnitOperatorConfigBuffer(fbb, UnitOperatorConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
