// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SlopeOrientorConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SlopeOrientorConfig GetRootAsSlopeOrientorConfig(ByteBuffer _bb) { return GetRootAsSlopeOrientorConfig(_bb, new SlopeOrientorConfig()); }
  public static SlopeOrientorConfig GetRootAsSlopeOrientorConfig(ByteBuffer _bb, SlopeOrientorConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SlopeOrientorConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string OriginJointName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginJointNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetOriginJointNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetOriginJointNameArray() { return __p.__vector_as_array<byte>(4); }
  public float PitchLimitInDegrees { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RollLimitInDegrees { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RotateSpeed { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int TerrainLayer { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float RayCastDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RayCastHeightOffset { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RayCastFrontOffset { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RayCastBehindOffset { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RayCastLeftOffset { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float RayCastRightOffset { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsTerrainNormal { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.SlopeOrientorConfig> CreateSlopeOrientorConfig(FlatBufferBuilder builder,
      StringOffset originJointNameOffset = default(StringOffset),
      float pitchLimitInDegrees = 0.0f,
      float rollLimitInDegrees = 0.0f,
      float rotateSpeed = 0.0f,
      int terrainLayer = 0,
      float rayCastDistance = 0.0f,
      float rayCastHeightOffset = 0.0f,
      float rayCastFrontOffset = 0.0f,
      float rayCastBehindOffset = 0.0f,
      float rayCastLeftOffset = 0.0f,
      float rayCastRightOffset = 0.0f,
      bool isTerrainNormal = false) {
    builder.StartTable(12);
    SlopeOrientorConfig.AddRayCastRightOffset(builder, rayCastRightOffset);
    SlopeOrientorConfig.AddRayCastLeftOffset(builder, rayCastLeftOffset);
    SlopeOrientorConfig.AddRayCastBehindOffset(builder, rayCastBehindOffset);
    SlopeOrientorConfig.AddRayCastFrontOffset(builder, rayCastFrontOffset);
    SlopeOrientorConfig.AddRayCastHeightOffset(builder, rayCastHeightOffset);
    SlopeOrientorConfig.AddRayCastDistance(builder, rayCastDistance);
    SlopeOrientorConfig.AddTerrainLayer(builder, terrainLayer);
    SlopeOrientorConfig.AddRotateSpeed(builder, rotateSpeed);
    SlopeOrientorConfig.AddRollLimitInDegrees(builder, rollLimitInDegrees);
    SlopeOrientorConfig.AddPitchLimitInDegrees(builder, pitchLimitInDegrees);
    SlopeOrientorConfig.AddOriginJointName(builder, originJointNameOffset);
    SlopeOrientorConfig.AddIsTerrainNormal(builder, isTerrainNormal);
    return SlopeOrientorConfig.EndSlopeOrientorConfig(builder);
  }

  public static void StartSlopeOrientorConfig(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddOriginJointName(FlatBufferBuilder builder, StringOffset originJointNameOffset) { builder.AddOffset(0, originJointNameOffset.Value, 0); }
  public static void AddPitchLimitInDegrees(FlatBufferBuilder builder, float pitchLimitInDegrees) { builder.AddFloat(1, pitchLimitInDegrees, 0.0f); }
  public static void AddRollLimitInDegrees(FlatBufferBuilder builder, float rollLimitInDegrees) { builder.AddFloat(2, rollLimitInDegrees, 0.0f); }
  public static void AddRotateSpeed(FlatBufferBuilder builder, float rotateSpeed) { builder.AddFloat(3, rotateSpeed, 0.0f); }
  public static void AddTerrainLayer(FlatBufferBuilder builder, int terrainLayer) { builder.AddInt(4, terrainLayer, 0); }
  public static void AddRayCastDistance(FlatBufferBuilder builder, float rayCastDistance) { builder.AddFloat(5, rayCastDistance, 0.0f); }
  public static void AddRayCastHeightOffset(FlatBufferBuilder builder, float rayCastHeightOffset) { builder.AddFloat(6, rayCastHeightOffset, 0.0f); }
  public static void AddRayCastFrontOffset(FlatBufferBuilder builder, float rayCastFrontOffset) { builder.AddFloat(7, rayCastFrontOffset, 0.0f); }
  public static void AddRayCastBehindOffset(FlatBufferBuilder builder, float rayCastBehindOffset) { builder.AddFloat(8, rayCastBehindOffset, 0.0f); }
  public static void AddRayCastLeftOffset(FlatBufferBuilder builder, float rayCastLeftOffset) { builder.AddFloat(9, rayCastLeftOffset, 0.0f); }
  public static void AddRayCastRightOffset(FlatBufferBuilder builder, float rayCastRightOffset) { builder.AddFloat(10, rayCastRightOffset, 0.0f); }
  public static void AddIsTerrainNormal(FlatBufferBuilder builder, bool isTerrainNormal) { builder.AddBool(11, isTerrainNormal, false); }
  public static Offset<gfl.anm2.fb.SlopeOrientorConfig> EndSlopeOrientorConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.SlopeOrientorConfig>(o);
  }
  public static void FinishSlopeOrientorConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.SlopeOrientorConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSlopeOrientorConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.SlopeOrientorConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SlopeOrientorConfigT UnPack() {
    var _o = new SlopeOrientorConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlopeOrientorConfigT _o) {
    _o.OriginJointName = this.OriginJointName;
    _o.PitchLimitInDegrees = this.PitchLimitInDegrees;
    _o.RollLimitInDegrees = this.RollLimitInDegrees;
    _o.RotateSpeed = this.RotateSpeed;
    _o.TerrainLayer = this.TerrainLayer;
    _o.RayCastDistance = this.RayCastDistance;
    _o.RayCastHeightOffset = this.RayCastHeightOffset;
    _o.RayCastFrontOffset = this.RayCastFrontOffset;
    _o.RayCastBehindOffset = this.RayCastBehindOffset;
    _o.RayCastLeftOffset = this.RayCastLeftOffset;
    _o.RayCastRightOffset = this.RayCastRightOffset;
    _o.IsTerrainNormal = this.IsTerrainNormal;
  }
  public static Offset<gfl.anm2.fb.SlopeOrientorConfig> Pack(FlatBufferBuilder builder, SlopeOrientorConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.SlopeOrientorConfig>);
    var _originJointName = _o.OriginJointName == null ? default(StringOffset) : builder.CreateString(_o.OriginJointName);
    return CreateSlopeOrientorConfig(
      builder,
      _originJointName,
      _o.PitchLimitInDegrees,
      _o.RollLimitInDegrees,
      _o.RotateSpeed,
      _o.TerrainLayer,
      _o.RayCastDistance,
      _o.RayCastHeightOffset,
      _o.RayCastFrontOffset,
      _o.RayCastBehindOffset,
      _o.RayCastLeftOffset,
      _o.RayCastRightOffset,
      _o.IsTerrainNormal);
  }
};

public class SlopeOrientorConfigT
{
  [Newtonsoft.Json.JsonProperty("originJointName")]
  public string OriginJointName { get; set; }
  [Newtonsoft.Json.JsonProperty("pitchLimitInDegrees")]
  public float PitchLimitInDegrees { get; set; }
  [Newtonsoft.Json.JsonProperty("rollLimitInDegrees")]
  public float RollLimitInDegrees { get; set; }
  [Newtonsoft.Json.JsonProperty("rotateSpeed")]
  public float RotateSpeed { get; set; }
  [Newtonsoft.Json.JsonProperty("terrainLayer")]
  public int TerrainLayer { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastDistance")]
  public float RayCastDistance { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastHeightOffset")]
  public float RayCastHeightOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastFrontOffset")]
  public float RayCastFrontOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastBehindOffset")]
  public float RayCastBehindOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastLeftOffset")]
  public float RayCastLeftOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("rayCastRightOffset")]
  public float RayCastRightOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("isTerrainNormal")]
  public bool IsTerrainNormal { get; set; }

  public SlopeOrientorConfigT() {
    this.OriginJointName = null;
    this.PitchLimitInDegrees = 0.0f;
    this.RollLimitInDegrees = 0.0f;
    this.RotateSpeed = 0.0f;
    this.TerrainLayer = 0;
    this.RayCastDistance = 0.0f;
    this.RayCastHeightOffset = 0.0f;
    this.RayCastFrontOffset = 0.0f;
    this.RayCastBehindOffset = 0.0f;
    this.RayCastLeftOffset = 0.0f;
    this.RayCastRightOffset = 0.0f;
    this.IsTerrainNormal = false;
  }

  public static SlopeOrientorConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SlopeOrientorConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SlopeOrientorConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return SlopeOrientorConfig.GetRootAsSlopeOrientorConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SlopeOrientorConfig.FinishSlopeOrientorConfigBuffer(fbb, SlopeOrientorConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
