// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum PlayMode : uint
{
  Once = 0,
  Loop = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum KeyData_Float : byte
{
  NONE = 0,
  OneFrame_Float = 1,
  AllFrame_Float = 2,
  CatmullRom_Float_u16 = 3,
  CatmullRom_Float_u8 = 4,
};

public class KeyData_FloatUnion {
  public KeyData_Float Type { get; set; }
  public object Value { get; set; }

  public KeyData_FloatUnion() {
    this.Type = KeyData_Float.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.OneFrame_FloatT AsOneFrame_Float() { return this.As<gfl.anm2.fb.OneFrame_FloatT>(); }
  public gfl.anm2.fb.AllFrame_FloatT AsAllFrame_Float() { return this.As<gfl.anm2.fb.AllFrame_FloatT>(); }
  public gfl.anm2.fb.CatmullRom_Float_u16T AsCatmullRom_Float_u16() { return this.As<gfl.anm2.fb.CatmullRom_Float_u16T>(); }
  public gfl.anm2.fb.CatmullRom_Float_u8T AsCatmullRom_Float_u8() { return this.As<gfl.anm2.fb.CatmullRom_Float_u8T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, KeyData_FloatUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case KeyData_Float.OneFrame_Float: return gfl.anm2.fb.OneFrame_Float.Pack(builder, _o.AsOneFrame_Float()).Value;
      case KeyData_Float.AllFrame_Float: return gfl.anm2.fb.AllFrame_Float.Pack(builder, _o.AsAllFrame_Float()).Value;
      case KeyData_Float.CatmullRom_Float_u16: return gfl.anm2.fb.CatmullRom_Float_u16.Pack(builder, _o.AsCatmullRom_Float_u16()).Value;
      case KeyData_Float.CatmullRom_Float_u8: return gfl.anm2.fb.CatmullRom_Float_u8.Pack(builder, _o.AsCatmullRom_Float_u8()).Value;
    }
  }
}

public class KeyData_FloatUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(KeyData_FloatUnion) || objectType == typeof(System.Collections.Generic.List<KeyData_FloatUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<KeyData_FloatUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as KeyData_FloatUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, KeyData_FloatUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<KeyData_FloatUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as KeyData_FloatUnion, serializer);
    }
  }
  public KeyData_FloatUnion ReadJson(Newtonsoft.Json.JsonReader reader, KeyData_FloatUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case KeyData_Float.OneFrame_Float: _o.Value = serializer.Deserialize<gfl.anm2.fb.OneFrame_FloatT>(reader); break;
      case KeyData_Float.AllFrame_Float: _o.Value = serializer.Deserialize<gfl.anm2.fb.AllFrame_FloatT>(reader); break;
      case KeyData_Float.CatmullRom_Float_u16: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Float_u16T>(reader); break;
      case KeyData_Float.CatmullRom_Float_u8: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Float_u8T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum KeyData_Vector3 : byte
{
  NONE = 0,
  OneFrame_Vector3 = 1,
  AllFrame_Vector3 = 2,
  CatmullRom_Vector3_u16 = 3,
  CatmullRom_Vector3_u8 = 4,
};

public class KeyData_Vector3Union {
  public KeyData_Vector3 Type { get; set; }
  public object Value { get; set; }

  public KeyData_Vector3Union() {
    this.Type = KeyData_Vector3.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.OneFrame_Vector3T AsOneFrame_Vector3() { return this.As<gfl.anm2.fb.OneFrame_Vector3T>(); }
  public gfl.anm2.fb.AllFrame_Vector3T AsAllFrame_Vector3() { return this.As<gfl.anm2.fb.AllFrame_Vector3T>(); }
  public gfl.anm2.fb.CatmullRom_Vector3_u16T AsCatmullRom_Vector3_u16() { return this.As<gfl.anm2.fb.CatmullRom_Vector3_u16T>(); }
  public gfl.anm2.fb.CatmullRom_Vector3_u8T AsCatmullRom_Vector3_u8() { return this.As<gfl.anm2.fb.CatmullRom_Vector3_u8T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, KeyData_Vector3Union _o) {
    switch (_o.Type) {
      default: return 0;
      case KeyData_Vector3.OneFrame_Vector3: return gfl.anm2.fb.OneFrame_Vector3.Pack(builder, _o.AsOneFrame_Vector3()).Value;
      case KeyData_Vector3.AllFrame_Vector3: return gfl.anm2.fb.AllFrame_Vector3.Pack(builder, _o.AsAllFrame_Vector3()).Value;
      case KeyData_Vector3.CatmullRom_Vector3_u16: return gfl.anm2.fb.CatmullRom_Vector3_u16.Pack(builder, _o.AsCatmullRom_Vector3_u16()).Value;
      case KeyData_Vector3.CatmullRom_Vector3_u8: return gfl.anm2.fb.CatmullRom_Vector3_u8.Pack(builder, _o.AsCatmullRom_Vector3_u8()).Value;
    }
  }
}

public class KeyData_Vector3Union_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(KeyData_Vector3Union) || objectType == typeof(System.Collections.Generic.List<KeyData_Vector3Union>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<KeyData_Vector3Union>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as KeyData_Vector3Union, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, KeyData_Vector3Union _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<KeyData_Vector3Union>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as KeyData_Vector3Union, serializer);
    }
  }
  public KeyData_Vector3Union ReadJson(Newtonsoft.Json.JsonReader reader, KeyData_Vector3Union _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case KeyData_Vector3.OneFrame_Vector3: _o.Value = serializer.Deserialize<gfl.anm2.fb.OneFrame_Vector3T>(reader); break;
      case KeyData_Vector3.AllFrame_Vector3: _o.Value = serializer.Deserialize<gfl.anm2.fb.AllFrame_Vector3T>(reader); break;
      case KeyData_Vector3.CatmullRom_Vector3_u16: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Vector3_u16T>(reader); break;
      case KeyData_Vector3.CatmullRom_Vector3_u8: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Vector3_u8T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum KeyData_Vector4 : byte
{
  NONE = 0,
  OneFrame_Vector4 = 1,
  AllFrame_Vector4 = 2,
  CatmullRom_Vector4_u16 = 3,
  CatmullRom_Vector4_u8 = 4,
};

public class KeyData_Vector4Union {
  public KeyData_Vector4 Type { get; set; }
  public object Value { get; set; }

  public KeyData_Vector4Union() {
    this.Type = KeyData_Vector4.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.OneFrame_Vector4T AsOneFrame_Vector4() { return this.As<gfl.anm2.fb.OneFrame_Vector4T>(); }
  public gfl.anm2.fb.AllFrame_Vector4T AsAllFrame_Vector4() { return this.As<gfl.anm2.fb.AllFrame_Vector4T>(); }
  public gfl.anm2.fb.CatmullRom_Vector4_u16T AsCatmullRom_Vector4_u16() { return this.As<gfl.anm2.fb.CatmullRom_Vector4_u16T>(); }
  public gfl.anm2.fb.CatmullRom_Vector4_u8T AsCatmullRom_Vector4_u8() { return this.As<gfl.anm2.fb.CatmullRom_Vector4_u8T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, KeyData_Vector4Union _o) {
    switch (_o.Type) {
      default: return 0;
      case KeyData_Vector4.OneFrame_Vector4: return gfl.anm2.fb.OneFrame_Vector4.Pack(builder, _o.AsOneFrame_Vector4()).Value;
      case KeyData_Vector4.AllFrame_Vector4: return gfl.anm2.fb.AllFrame_Vector4.Pack(builder, _o.AsAllFrame_Vector4()).Value;
      case KeyData_Vector4.CatmullRom_Vector4_u16: return gfl.anm2.fb.CatmullRom_Vector4_u16.Pack(builder, _o.AsCatmullRom_Vector4_u16()).Value;
      case KeyData_Vector4.CatmullRom_Vector4_u8: return gfl.anm2.fb.CatmullRom_Vector4_u8.Pack(builder, _o.AsCatmullRom_Vector4_u8()).Value;
    }
  }
}

public class KeyData_Vector4Union_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(KeyData_Vector4Union) || objectType == typeof(System.Collections.Generic.List<KeyData_Vector4Union>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<KeyData_Vector4Union>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as KeyData_Vector4Union, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, KeyData_Vector4Union _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<KeyData_Vector4Union>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as KeyData_Vector4Union, serializer);
    }
  }
  public KeyData_Vector4Union ReadJson(Newtonsoft.Json.JsonReader reader, KeyData_Vector4Union _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case KeyData_Vector4.OneFrame_Vector4: _o.Value = serializer.Deserialize<gfl.anm2.fb.OneFrame_Vector4T>(reader); break;
      case KeyData_Vector4.AllFrame_Vector4: _o.Value = serializer.Deserialize<gfl.anm2.fb.AllFrame_Vector4T>(reader); break;
      case KeyData_Vector4.CatmullRom_Vector4_u16: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Vector4_u16T>(reader); break;
      case KeyData_Vector4.CatmullRom_Vector4_u8: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Vector4_u8T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum KeyData_Quaternion48bit : byte
{
  NONE = 0,
  OneFrame_Quaternion48bit = 1,
  AllFrame_Quaternion48bit = 2,
  CatmullRom_Quaternion48bit_u16 = 3,
  CatmullRom_Quaternion48bit_u8 = 4,
};

public class KeyData_Quaternion48bitUnion {
  public KeyData_Quaternion48bit Type { get; set; }
  public object Value { get; set; }

  public KeyData_Quaternion48bitUnion() {
    this.Type = KeyData_Quaternion48bit.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.OneFrame_Quaternion48bitT AsOneFrame_Quaternion48bit() { return this.As<gfl.anm2.fb.OneFrame_Quaternion48bitT>(); }
  public gfl.anm2.fb.AllFrame_Quaternion48bitT AsAllFrame_Quaternion48bit() { return this.As<gfl.anm2.fb.AllFrame_Quaternion48bitT>(); }
  public gfl.anm2.fb.CatmullRom_Quaternion48bit_u16T AsCatmullRom_Quaternion48bit_u16() { return this.As<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16T>(); }
  public gfl.anm2.fb.CatmullRom_Quaternion48bit_u8T AsCatmullRom_Quaternion48bit_u8() { return this.As<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, KeyData_Quaternion48bitUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case KeyData_Quaternion48bit.OneFrame_Quaternion48bit: return gfl.anm2.fb.OneFrame_Quaternion48bit.Pack(builder, _o.AsOneFrame_Quaternion48bit()).Value;
      case KeyData_Quaternion48bit.AllFrame_Quaternion48bit: return gfl.anm2.fb.AllFrame_Quaternion48bit.Pack(builder, _o.AsAllFrame_Quaternion48bit()).Value;
      case KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u16: return gfl.anm2.fb.CatmullRom_Quaternion48bit_u16.Pack(builder, _o.AsCatmullRom_Quaternion48bit_u16()).Value;
      case KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u8: return gfl.anm2.fb.CatmullRom_Quaternion48bit_u8.Pack(builder, _o.AsCatmullRom_Quaternion48bit_u8()).Value;
    }
  }
}

public class KeyData_Quaternion48bitUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(KeyData_Quaternion48bitUnion) || objectType == typeof(System.Collections.Generic.List<KeyData_Quaternion48bitUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<KeyData_Quaternion48bitUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as KeyData_Quaternion48bitUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, KeyData_Quaternion48bitUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<KeyData_Quaternion48bitUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as KeyData_Quaternion48bitUnion, serializer);
    }
  }
  public KeyData_Quaternion48bitUnion ReadJson(Newtonsoft.Json.JsonReader reader, KeyData_Quaternion48bitUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case KeyData_Quaternion48bit.OneFrame_Quaternion48bit: _o.Value = serializer.Deserialize<gfl.anm2.fb.OneFrame_Quaternion48bitT>(reader); break;
      case KeyData_Quaternion48bit.AllFrame_Quaternion48bit: _o.Value = serializer.Deserialize<gfl.anm2.fb.AllFrame_Quaternion48bitT>(reader); break;
      case KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u16: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16T>(reader); break;
      case KeyData_Quaternion48bit.CatmullRom_Quaternion48bit_u8: _o.Value = serializer.Deserialize<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum KeyData_Bool : byte
{
  NONE = 0,
  OneFrame_Bool = 1,
  AllFrame_Bool = 2,
  Step_Bool_u16 = 3,
  Step_Bool_u8 = 4,
};

public class KeyData_BoolUnion {
  public KeyData_Bool Type { get; set; }
  public object Value { get; set; }

  public KeyData_BoolUnion() {
    this.Type = KeyData_Bool.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.OneFrame_BoolT AsOneFrame_Bool() { return this.As<gfl.anm2.fb.OneFrame_BoolT>(); }
  public gfl.anm2.fb.AllFrame_BoolT AsAllFrame_Bool() { return this.As<gfl.anm2.fb.AllFrame_BoolT>(); }
  public gfl.anm2.fb.Step_Bool_u16T AsStep_Bool_u16() { return this.As<gfl.anm2.fb.Step_Bool_u16T>(); }
  public gfl.anm2.fb.Step_Bool_u8T AsStep_Bool_u8() { return this.As<gfl.anm2.fb.Step_Bool_u8T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, KeyData_BoolUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case KeyData_Bool.OneFrame_Bool: return gfl.anm2.fb.OneFrame_Bool.Pack(builder, _o.AsOneFrame_Bool()).Value;
      case KeyData_Bool.AllFrame_Bool: return gfl.anm2.fb.AllFrame_Bool.Pack(builder, _o.AsAllFrame_Bool()).Value;
      case KeyData_Bool.Step_Bool_u16: return gfl.anm2.fb.Step_Bool_u16.Pack(builder, _o.AsStep_Bool_u16()).Value;
      case KeyData_Bool.Step_Bool_u8: return gfl.anm2.fb.Step_Bool_u8.Pack(builder, _o.AsStep_Bool_u8()).Value;
    }
  }
}

public class KeyData_BoolUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(KeyData_BoolUnion) || objectType == typeof(System.Collections.Generic.List<KeyData_BoolUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<KeyData_BoolUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as KeyData_BoolUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, KeyData_BoolUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<KeyData_BoolUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as KeyData_BoolUnion, serializer);
    }
  }
  public KeyData_BoolUnion ReadJson(Newtonsoft.Json.JsonReader reader, KeyData_BoolUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case KeyData_Bool.OneFrame_Bool: _o.Value = serializer.Deserialize<gfl.anm2.fb.OneFrame_BoolT>(reader); break;
      case KeyData_Bool.AllFrame_Bool: _o.Value = serializer.Deserialize<gfl.anm2.fb.AllFrame_BoolT>(reader); break;
      case KeyData_Bool.Step_Bool_u16: _o.Value = serializer.Deserialize<gfl.anm2.fb.Step_Bool_u16T>(reader); break;
      case KeyData_Bool.Step_Bool_u8: _o.Value = serializer.Deserialize<gfl.anm2.fb.Step_Bool_u8T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum ResourceType : uint
{
  File = 0,
  Blend1D = 1,
  Blend2D = 2,
  Null = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CurveInterpType : uint
{
  Constant = 0,
  Linear = 1,
  TangentAuto = 2,
  TangentBreak = 3,
  TangentUser = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum CurveType : uint
{
  FloatCurve = 0,
  Float4Curve = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RuntimeCurveType : byte
{
  NONE = 0,
  RuntimeCurveFloat = 1,
  RuntimeCurveFloat4 = 2,
};

public class RuntimeCurveTypeUnion {
  public RuntimeCurveType Type { get; set; }
  public object Value { get; set; }

  public RuntimeCurveTypeUnion() {
    this.Type = RuntimeCurveType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.RuntimeCurveFloatT AsRuntimeCurveFloat() { return this.As<gfl.anm2.fb.RuntimeCurveFloatT>(); }
  public gfl.anm2.fb.RuntimeCurveFloat4T AsRuntimeCurveFloat4() { return this.As<gfl.anm2.fb.RuntimeCurveFloat4T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, RuntimeCurveTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case RuntimeCurveType.RuntimeCurveFloat: return gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.AsRuntimeCurveFloat()).Value;
      case RuntimeCurveType.RuntimeCurveFloat4: return gfl.anm2.fb.RuntimeCurveFloat4.Pack(builder, _o.AsRuntimeCurveFloat4()).Value;
    }
  }
}

public class RuntimeCurveTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(RuntimeCurveTypeUnion) || objectType == typeof(System.Collections.Generic.List<RuntimeCurveTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<RuntimeCurveTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as RuntimeCurveTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, RuntimeCurveTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<RuntimeCurveTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as RuntimeCurveTypeUnion, serializer);
    }
  }
  public RuntimeCurveTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, RuntimeCurveTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case RuntimeCurveType.RuntimeCurveFloat: _o.Value = serializer.Deserialize<gfl.anm2.fb.RuntimeCurveFloatT>(reader); break;
      case RuntimeCurveType.RuntimeCurveFloat4: _o.Value = serializer.Deserialize<gfl.anm2.fb.RuntimeCurveFloat4T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EditorCurveType : byte
{
  NONE = 0,
  EditorCurveFloat = 1,
  EditorCurveFloat4 = 2,
};

public class EditorCurveTypeUnion {
  public EditorCurveType Type { get; set; }
  public object Value { get; set; }

  public EditorCurveTypeUnion() {
    this.Type = EditorCurveType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.EditorCurveFloatT AsEditorCurveFloat() { return this.As<gfl.anm2.fb.EditorCurveFloatT>(); }
  public gfl.anm2.fb.EditorCurveFloat4T AsEditorCurveFloat4() { return this.As<gfl.anm2.fb.EditorCurveFloat4T>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, EditorCurveTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case EditorCurveType.EditorCurveFloat: return gfl.anm2.fb.EditorCurveFloat.Pack(builder, _o.AsEditorCurveFloat()).Value;
      case EditorCurveType.EditorCurveFloat4: return gfl.anm2.fb.EditorCurveFloat4.Pack(builder, _o.AsEditorCurveFloat4()).Value;
    }
  }
}

public class EditorCurveTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(EditorCurveTypeUnion) || objectType == typeof(System.Collections.Generic.List<EditorCurveTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<EditorCurveTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as EditorCurveTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, EditorCurveTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<EditorCurveTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as EditorCurveTypeUnion, serializer);
    }
  }
  public EditorCurveTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, EditorCurveTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case EditorCurveType.EditorCurveFloat: _o.Value = serializer.Deserialize<gfl.anm2.fb.EditorCurveFloatT>(reader); break;
      case EditorCurveType.EditorCurveFloat4: _o.Value = serializer.Deserialize<gfl.anm2.fb.EditorCurveFloat4T>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum EventValueType : byte
{
  NONE = 0,
  EventValueType_Int = 1,
  EventValueType_Float = 2,
  EventValueType_Bool = 3,
  EventValueType_String = 4,
};

public class EventValueTypeUnion {
  public EventValueType Type { get; set; }
  public object Value { get; set; }

  public EventValueTypeUnion() {
    this.Type = EventValueType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.EventValueType_IntT AsEventValueType_Int() { return this.As<gfl.anm2.fb.EventValueType_IntT>(); }
  public gfl.anm2.fb.EventValueType_FloatT AsEventValueType_Float() { return this.As<gfl.anm2.fb.EventValueType_FloatT>(); }
  public gfl.anm2.fb.EventValueType_BoolT AsEventValueType_Bool() { return this.As<gfl.anm2.fb.EventValueType_BoolT>(); }
  public gfl.anm2.fb.EventValueType_StringT AsEventValueType_String() { return this.As<gfl.anm2.fb.EventValueType_StringT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, EventValueTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case EventValueType.EventValueType_Int: return gfl.anm2.fb.EventValueType_Int.Pack(builder, _o.AsEventValueType_Int()).Value;
      case EventValueType.EventValueType_Float: return gfl.anm2.fb.EventValueType_Float.Pack(builder, _o.AsEventValueType_Float()).Value;
      case EventValueType.EventValueType_Bool: return gfl.anm2.fb.EventValueType_Bool.Pack(builder, _o.AsEventValueType_Bool()).Value;
      case EventValueType.EventValueType_String: return gfl.anm2.fb.EventValueType_String.Pack(builder, _o.AsEventValueType_String()).Value;
    }
  }
}

public class EventValueTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(EventValueTypeUnion) || objectType == typeof(System.Collections.Generic.List<EventValueTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<EventValueTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as EventValueTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, EventValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<EventValueTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as EventValueTypeUnion, serializer);
    }
  }
  public EventValueTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, EventValueTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case EventValueType.EventValueType_Int: _o.Value = serializer.Deserialize<gfl.anm2.fb.EventValueType_IntT>(reader); break;
      case EventValueType.EventValueType_Float: _o.Value = serializer.Deserialize<gfl.anm2.fb.EventValueType_FloatT>(reader); break;
      case EventValueType.EventValueType_Bool: _o.Value = serializer.Deserialize<gfl.anm2.fb.EventValueType_BoolT>(reader); break;
      case EventValueType.EventValueType_String: _o.Value = serializer.Deserialize<gfl.anm2.fb.EventValueType_StringT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AxisType : uint
{
  None = 0,
  X = 1,
  Y = 2,
  Z = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum RotateAxisType : uint
{
  None = 0,
  Yaw = 1,
  Pitch = 2,
  Roll = 3,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum StateDetail : byte
{
  NONE = 0,
  StateDetail_Any = 1,
};

public class StateDetailUnion {
  public StateDetail Type { get; set; }
  public object Value { get; set; }

  public StateDetailUnion() {
    this.Type = StateDetail.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.StateDetail_AnyT AsStateDetail_Any() { return this.As<gfl.anm2.fb.StateDetail_AnyT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, StateDetailUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case StateDetail.StateDetail_Any: return gfl.anm2.fb.StateDetail_Any.Pack(builder, _o.AsStateDetail_Any()).Value;
    }
  }
}

public class StateDetailUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(StateDetailUnion) || objectType == typeof(System.Collections.Generic.List<StateDetailUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<StateDetailUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as StateDetailUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, StateDetailUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<StateDetailUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as StateDetailUnion, serializer);
    }
  }
  public StateDetailUnion ReadJson(Newtonsoft.Json.JsonReader reader, StateDetailUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case StateDetail.StateDetail_Any: _o.Value = serializer.Deserialize<gfl.anm2.fb.StateDetail_AnyT>(reader); break;
    }
    return _o;
  }
}

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AnyType : uint
{
  Normal = 0,
  All = 1,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum AdditionalParameterType : uint
{
  Physics = 0,
  Wind = 1,
  WindNoise = 2,
};

public struct Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<gfl.anm2.fb.Vector3> CreateVector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.anm2.fb.Vector3>(builder.Offset);
  }
  public Vector3T UnPack() {
    var _o = new Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<gfl.anm2.fb.Vector3> Pack(FlatBufferBuilder builder, Vector3T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Vector3>);
    return CreateVector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vector3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct Vector4 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<gfl.anm2.fb.Vector4> CreateVector4(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.anm2.fb.Vector4>(builder.Offset);
  }
  public Vector4T UnPack() {
    var _o = new Vector4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vector4T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<gfl.anm2.fb.Vector4> Pack(FlatBufferBuilder builder, Vector4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Vector4>);
    return CreateVector4(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class Vector4T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public float W { get; set; }

  public Vector4T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

public struct Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<gfl.anm2.fb.Quaternion> CreateQuaternion(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<gfl.anm2.fb.Quaternion>(builder.Offset);
  }
  public QuaternionT UnPack() {
    var _o = new QuaternionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuaternionT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<gfl.anm2.fb.Quaternion> Pack(FlatBufferBuilder builder, QuaternionT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Quaternion>);
    return CreateQuaternion(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class QuaternionT
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public float W { get; set; }

  public QuaternionT() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

public struct Quaternion48bit : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Quaternion48bit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Buf0 { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte Buf1 { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte Buf2 { get { return __p.bb.Get(__p.bb_pos + 2); } }
  public byte Buf3 { get { return __p.bb.Get(__p.bb_pos + 3); } }
  public byte Buf4 { get { return __p.bb.Get(__p.bb_pos + 4); } }
  public byte Buf5 { get { return __p.bb.Get(__p.bb_pos + 5); } }

  public static Offset<gfl.anm2.fb.Quaternion48bit> CreateQuaternion48bit(FlatBufferBuilder builder, byte Buf0, byte Buf1, byte Buf2, byte Buf3, byte Buf4, byte Buf5) {
    builder.Prep(1, 6);
    builder.PutByte(Buf5);
    builder.PutByte(Buf4);
    builder.PutByte(Buf3);
    builder.PutByte(Buf2);
    builder.PutByte(Buf1);
    builder.PutByte(Buf0);
    return new Offset<gfl.anm2.fb.Quaternion48bit>(builder.Offset);
  }
  public Quaternion48bitT UnPack() {
    var _o = new Quaternion48bitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Quaternion48bitT _o) {
    _o.Buf0 = this.Buf0;
    _o.Buf1 = this.Buf1;
    _o.Buf2 = this.Buf2;
    _o.Buf3 = this.Buf3;
    _o.Buf4 = this.Buf4;
    _o.Buf5 = this.Buf5;
  }
  public static Offset<gfl.anm2.fb.Quaternion48bit> Pack(FlatBufferBuilder builder, Quaternion48bitT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Quaternion48bit>);
    return CreateQuaternion48bit(
      builder,
      _o.Buf0,
      _o.Buf1,
      _o.Buf2,
      _o.Buf3,
      _o.Buf4,
      _o.Buf5);
  }
};

public class Quaternion48bitT
{
  [Newtonsoft.Json.JsonProperty("buf0")]
  public byte Buf0 { get; set; }
  [Newtonsoft.Json.JsonProperty("buf1")]
  public byte Buf1 { get; set; }
  [Newtonsoft.Json.JsonProperty("buf2")]
  public byte Buf2 { get; set; }
  [Newtonsoft.Json.JsonProperty("buf3")]
  public byte Buf3 { get; set; }
  [Newtonsoft.Json.JsonProperty("buf4")]
  public byte Buf4 { get; set; }
  [Newtonsoft.Json.JsonProperty("buf5")]
  public byte Buf5 { get; set; }

  public Quaternion48bitT() {
    this.Buf0 = 0;
    this.Buf1 = 0;
    this.Buf2 = 0;
    this.Buf3 = 0;
    this.Buf4 = 0;
    this.Buf5 = 0;
  }
}

public struct _SRT : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public _SRT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Vector3 Scale { get { return (new gfl.anm2.fb.Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public gfl.anm2.fb.Quaternion Rotate { get { return (new gfl.anm2.fb.Quaternion()).__assign(__p.bb_pos + 12, __p.bb); } }
  public gfl.anm2.fb.Vector3 Translate { get { return (new gfl.anm2.fb.Vector3()).__assign(__p.bb_pos + 28, __p.bb); } }

  public static Offset<gfl.anm2.fb._SRT> Create_SRT(FlatBufferBuilder builder, float scale_X, float scale_Y, float scale_Z, float rotate_X, float rotate_Y, float rotate_Z, float rotate_W, float translate_X, float translate_Y, float translate_Z) {
    builder.Prep(4, 40);
    builder.Prep(4, 12);
    builder.PutFloat(translate_Z);
    builder.PutFloat(translate_Y);
    builder.PutFloat(translate_X);
    builder.Prep(4, 16);
    builder.PutFloat(rotate_W);
    builder.PutFloat(rotate_Z);
    builder.PutFloat(rotate_Y);
    builder.PutFloat(rotate_X);
    builder.Prep(4, 12);
    builder.PutFloat(scale_Z);
    builder.PutFloat(scale_Y);
    builder.PutFloat(scale_X);
    return new Offset<gfl.anm2.fb._SRT>(builder.Offset);
  }
  public _SRTT UnPack() {
    var _o = new _SRTT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(_SRTT _o) {
    _o.Scale = this.Scale.UnPack();
    _o.Rotate = this.Rotate.UnPack();
    _o.Translate = this.Translate.UnPack();
  }
  public static Offset<gfl.anm2.fb._SRT> Pack(FlatBufferBuilder builder, _SRTT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb._SRT>);
    var _scale_x = _o.Scale.X;
    var _scale_y = _o.Scale.Y;
    var _scale_z = _o.Scale.Z;
    var _rotate_x = _o.Rotate.X;
    var _rotate_y = _o.Rotate.Y;
    var _rotate_z = _o.Rotate.Z;
    var _rotate_w = _o.Rotate.W;
    var _translate_x = _o.Translate.X;
    var _translate_y = _o.Translate.Y;
    var _translate_z = _o.Translate.Z;
    return Create_SRT(
      builder,
      _scale_x,
      _scale_y,
      _scale_z,
      _rotate_x,
      _rotate_y,
      _rotate_z,
      _rotate_w,
      _translate_x,
      _translate_y,
      _translate_z);
  }
};

public class _SRTT
{
  [Newtonsoft.Json.JsonProperty("scale")]
  public gfl.anm2.fb.Vector3T Scale { get; set; }
  [Newtonsoft.Json.JsonProperty("rotate")]
  public gfl.anm2.fb.QuaternionT Rotate { get; set; }
  [Newtonsoft.Json.JsonProperty("translate")]
  public gfl.anm2.fb.Vector3T Translate { get; set; }

  public _SRTT() {
    this.Scale = new gfl.anm2.fb.Vector3T();
    this.Rotate = new gfl.anm2.fb.QuaternionT();
    this.Translate = new gfl.anm2.fb.Vector3T();
  }
}

public struct OneFrame_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OneFrame_Float GetRootAsOneFrame_Float(ByteBuffer _bb) { return GetRootAsOneFrame_Float(_bb, new OneFrame_Float()); }
  public static OneFrame_Float GetRootAsOneFrame_Float(ByteBuffer _bb, OneFrame_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OneFrame_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.OneFrame_Float> CreateOneFrame_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    OneFrame_Float.AddValue(builder, value);
    return OneFrame_Float.EndOneFrame_Float(builder);
  }

  public static void StartOneFrame_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<gfl.anm2.fb.OneFrame_Float> EndOneFrame_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.OneFrame_Float>(o);
  }
  public OneFrame_FloatT UnPack() {
    var _o = new OneFrame_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OneFrame_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.OneFrame_Float> Pack(FlatBufferBuilder builder, OneFrame_FloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.OneFrame_Float>);
    return CreateOneFrame_Float(
      builder,
      _o.Value);
  }
};

public class OneFrame_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public OneFrame_FloatT() {
    this.Value = 0.0f;
  }
}

public struct OneFrame_Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OneFrame_Vector3 GetRootAsOneFrame_Vector3(ByteBuffer _bb) { return GetRootAsOneFrame_Vector3(_bb, new OneFrame_Vector3()); }
  public static OneFrame_Vector3 GetRootAsOneFrame_Vector3(ByteBuffer _bb, OneFrame_Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OneFrame_Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Vector3? Value { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Vector3?)(new gfl.anm2.fb.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartOneFrame_Vector3(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Vector3> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.OneFrame_Vector3> EndOneFrame_Vector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.OneFrame_Vector3>(o);
  }
  public OneFrame_Vector3T UnPack() {
    var _o = new OneFrame_Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OneFrame_Vector3T _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.OneFrame_Vector3> Pack(FlatBufferBuilder builder, OneFrame_Vector3T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.OneFrame_Vector3>);
    StartOneFrame_Vector3(builder);
    AddValue(builder, gfl.anm2.fb.Vector3.Pack(builder, _o.Value));
    return EndOneFrame_Vector3(builder);
  }
};

public class OneFrame_Vector3T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.anm2.fb.Vector3T Value { get; set; }

  public OneFrame_Vector3T() {
    this.Value = new gfl.anm2.fb.Vector3T();
  }
}

public struct OneFrame_Vector4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OneFrame_Vector4 GetRootAsOneFrame_Vector4(ByteBuffer _bb) { return GetRootAsOneFrame_Vector4(_bb, new OneFrame_Vector4()); }
  public static OneFrame_Vector4 GetRootAsOneFrame_Vector4(ByteBuffer _bb, OneFrame_Vector4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OneFrame_Vector4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Vector4? Value { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Vector4?)(new gfl.anm2.fb.Vector4()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartOneFrame_Vector4(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Vector4> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.OneFrame_Vector4> EndOneFrame_Vector4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.OneFrame_Vector4>(o);
  }
  public OneFrame_Vector4T UnPack() {
    var _o = new OneFrame_Vector4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OneFrame_Vector4T _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.OneFrame_Vector4> Pack(FlatBufferBuilder builder, OneFrame_Vector4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.OneFrame_Vector4>);
    StartOneFrame_Vector4(builder);
    AddValue(builder, gfl.anm2.fb.Vector4.Pack(builder, _o.Value));
    return EndOneFrame_Vector4(builder);
  }
};

public class OneFrame_Vector4T
{
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.anm2.fb.Vector4T Value { get; set; }

  public OneFrame_Vector4T() {
    this.Value = new gfl.anm2.fb.Vector4T();
  }
}

public struct OneFrame_Quaternion48bit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OneFrame_Quaternion48bit GetRootAsOneFrame_Quaternion48bit(ByteBuffer _bb) { return GetRootAsOneFrame_Quaternion48bit(_bb, new OneFrame_Quaternion48bit()); }
  public static OneFrame_Quaternion48bit GetRootAsOneFrame_Quaternion48bit(ByteBuffer _bb, OneFrame_Quaternion48bit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OneFrame_Quaternion48bit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Quaternion48bit? Value { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Quaternion48bit?)(new gfl.anm2.fb.Quaternion48bit()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartOneFrame_Quaternion48bit(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Quaternion48bit> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.OneFrame_Quaternion48bit> EndOneFrame_Quaternion48bit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.OneFrame_Quaternion48bit>(o);
  }
  public OneFrame_Quaternion48bitT UnPack() {
    var _o = new OneFrame_Quaternion48bitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OneFrame_Quaternion48bitT _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.OneFrame_Quaternion48bit> Pack(FlatBufferBuilder builder, OneFrame_Quaternion48bitT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.OneFrame_Quaternion48bit>);
    StartOneFrame_Quaternion48bit(builder);
    AddValue(builder, gfl.anm2.fb.Quaternion48bit.Pack(builder, _o.Value));
    return EndOneFrame_Quaternion48bit(builder);
  }
};

public class OneFrame_Quaternion48bitT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public gfl.anm2.fb.Quaternion48bitT Value { get; set; }

  public OneFrame_Quaternion48bitT() {
    this.Value = new gfl.anm2.fb.Quaternion48bitT();
  }
}

public struct OneFrame_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OneFrame_Bool GetRootAsOneFrame_Bool(ByteBuffer _bb) { return GetRootAsOneFrame_Bool(_bb, new OneFrame_Bool()); }
  public static OneFrame_Bool GetRootAsOneFrame_Bool(ByteBuffer _bb, OneFrame_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OneFrame_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.OneFrame_Bool> CreateOneFrame_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    OneFrame_Bool.AddValue(builder, value);
    return OneFrame_Bool.EndOneFrame_Bool(builder);
  }

  public static void StartOneFrame_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fb.OneFrame_Bool> EndOneFrame_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.OneFrame_Bool>(o);
  }
  public OneFrame_BoolT UnPack() {
    var _o = new OneFrame_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OneFrame_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.OneFrame_Bool> Pack(FlatBufferBuilder builder, OneFrame_BoolT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.OneFrame_Bool>);
    return CreateOneFrame_Bool(
      builder,
      _o.Value);
  }
};

public class OneFrame_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public OneFrame_BoolT() {
    this.Value = false;
  }
}

public struct AllFrame_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AllFrame_Float GetRootAsAllFrame_Float(ByteBuffer _bb) { return GetRootAsAllFrame_Float(_bb, new AllFrame_Float()); }
  public static AllFrame_Float GetRootAsAllFrame_Float(ByteBuffer _bb, AllFrame_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AllFrame_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Values(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetValuesBytes() { return __p.__vector_as_span<float>(4, 4); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetValuesArray() { return __p.__vector_as_array<float>(4); }

  public static Offset<gfl.anm2.fb.AllFrame_Float> CreateAllFrame_Float(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AllFrame_Float.AddValues(builder, valuesOffset);
    return AllFrame_Float.EndAllFrame_Float(builder);
  }

  public static void StartAllFrame_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.AllFrame_Float> EndAllFrame_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AllFrame_Float>(o);
  }
  public AllFrame_FloatT UnPack() {
    var _o = new AllFrame_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AllFrame_FloatT _o) {
    _o.Values = new List<float>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
  }
  public static Offset<gfl.anm2.fb.AllFrame_Float> Pack(FlatBufferBuilder builder, AllFrame_FloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AllFrame_Float>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = _o.Values.ToArray();
      _values = CreateValuesVector(builder, __values);
    }
    return CreateAllFrame_Float(
      builder,
      _values);
  }
};

public class AllFrame_FloatT
{
  [Newtonsoft.Json.JsonProperty("values")]
  public List<float> Values { get; set; }

  public AllFrame_FloatT() {
    this.Values = null;
  }
}

public struct AllFrame_Vector3 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AllFrame_Vector3 GetRootAsAllFrame_Vector3(ByteBuffer _bb) { return GetRootAsAllFrame_Vector3(_bb, new AllFrame_Vector3()); }
  public static AllFrame_Vector3 GetRootAsAllFrame_Vector3(ByteBuffer _bb, AllFrame_Vector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AllFrame_Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Vector3? Values(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Vector3?)(new gfl.anm2.fb.Vector3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.AllFrame_Vector3> CreateAllFrame_Vector3(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AllFrame_Vector3.AddValues(builder, valuesOffset);
    return AllFrame_Vector3.EndAllFrame_Vector3(builder);
  }

  public static void StartAllFrame_Vector3(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<gfl.anm2.fb.AllFrame_Vector3> EndAllFrame_Vector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AllFrame_Vector3>(o);
  }
  public AllFrame_Vector3T UnPack() {
    var _o = new AllFrame_Vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AllFrame_Vector3T _o) {
    _o.Values = new List<gfl.anm2.fb.Vector3T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.AllFrame_Vector3> Pack(FlatBufferBuilder builder, AllFrame_Vector3T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AllFrame_Vector3>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector3.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateAllFrame_Vector3(
      builder,
      _values);
  }
};

public class AllFrame_Vector3T
{
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector3T> Values { get; set; }

  public AllFrame_Vector3T() {
    this.Values = null;
  }
}

public struct AllFrame_Vector4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AllFrame_Vector4 GetRootAsAllFrame_Vector4(ByteBuffer _bb) { return GetRootAsAllFrame_Vector4(_bb, new AllFrame_Vector4()); }
  public static AllFrame_Vector4 GetRootAsAllFrame_Vector4(ByteBuffer _bb, AllFrame_Vector4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AllFrame_Vector4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Vector4? Values(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Vector4?)(new gfl.anm2.fb.Vector4()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.AllFrame_Vector4> CreateAllFrame_Vector4(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AllFrame_Vector4.AddValues(builder, valuesOffset);
    return AllFrame_Vector4.EndAllFrame_Vector4(builder);
  }

  public static void StartAllFrame_Vector4(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<gfl.anm2.fb.AllFrame_Vector4> EndAllFrame_Vector4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AllFrame_Vector4>(o);
  }
  public AllFrame_Vector4T UnPack() {
    var _o = new AllFrame_Vector4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AllFrame_Vector4T _o) {
    _o.Values = new List<gfl.anm2.fb.Vector4T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.AllFrame_Vector4> Pack(FlatBufferBuilder builder, AllFrame_Vector4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AllFrame_Vector4>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector4.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateAllFrame_Vector4(
      builder,
      _values);
  }
};

public class AllFrame_Vector4T
{
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector4T> Values { get; set; }

  public AllFrame_Vector4T() {
    this.Values = null;
  }
}

public struct AllFrame_Quaternion48bit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AllFrame_Quaternion48bit GetRootAsAllFrame_Quaternion48bit(ByteBuffer _bb) { return GetRootAsAllFrame_Quaternion48bit(_bb, new AllFrame_Quaternion48bit()); }
  public static AllFrame_Quaternion48bit GetRootAsAllFrame_Quaternion48bit(ByteBuffer _bb, AllFrame_Quaternion48bit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AllFrame_Quaternion48bit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.Quaternion48bit? Values(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.Quaternion48bit?)(new gfl.anm2.fb.Quaternion48bit()).__assign(__p.__vector(o) + j * 6, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.AllFrame_Quaternion48bit> CreateAllFrame_Quaternion48bit(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AllFrame_Quaternion48bit.AddValues(builder, valuesOffset);
    return AllFrame_Quaternion48bit.EndAllFrame_Quaternion48bit(builder);
  }

  public static void StartAllFrame_Quaternion48bit(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(6, numElems, 1); }
  public static Offset<gfl.anm2.fb.AllFrame_Quaternion48bit> EndAllFrame_Quaternion48bit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AllFrame_Quaternion48bit>(o);
  }
  public AllFrame_Quaternion48bitT UnPack() {
    var _o = new AllFrame_Quaternion48bitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AllFrame_Quaternion48bitT _o) {
    _o.Values = new List<gfl.anm2.fb.Quaternion48bitT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.AllFrame_Quaternion48bit> Pack(FlatBufferBuilder builder, AllFrame_Quaternion48bitT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AllFrame_Quaternion48bit>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Quaternion48bit.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateAllFrame_Quaternion48bit(
      builder,
      _values);
  }
};

public class AllFrame_Quaternion48bitT
{
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Quaternion48bitT> Values { get; set; }

  public AllFrame_Quaternion48bitT() {
    this.Values = null;
  }
}

public struct AllFrame_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AllFrame_Bool GetRootAsAllFrame_Bool(ByteBuffer _bb) { return GetRootAsAllFrame_Bool(_bb, new AllFrame_Bool()); }
  public static AllFrame_Bool GetRootAsAllFrame_Bool(ByteBuffer _bb, AllFrame_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AllFrame_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte ValuesBit(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValuesBitLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValuesBitBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValuesBitBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValuesBitArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.AllFrame_Bool> CreateAllFrame_Bool(FlatBufferBuilder builder,
      VectorOffset values_bitOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AllFrame_Bool.AddValuesBit(builder, values_bitOffset);
    return AllFrame_Bool.EndAllFrame_Bool(builder);
  }

  public static void StartAllFrame_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValuesBit(FlatBufferBuilder builder, VectorOffset valuesBitOffset) { builder.AddOffset(0, valuesBitOffset.Value, 0); }
  public static VectorOffset CreateValuesBitVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesBitVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesBitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.anm2.fb.AllFrame_Bool> EndAllFrame_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AllFrame_Bool>(o);
  }
  public AllFrame_BoolT UnPack() {
    var _o = new AllFrame_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AllFrame_BoolT _o) {
    _o.ValuesBit = new List<byte>();
    for (var _j = 0; _j < this.ValuesBitLength; ++_j) {_o.ValuesBit.Add(this.ValuesBit(_j));}
  }
  public static Offset<gfl.anm2.fb.AllFrame_Bool> Pack(FlatBufferBuilder builder, AllFrame_BoolT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AllFrame_Bool>);
    var _values_bit = default(VectorOffset);
    if (_o.ValuesBit != null) {
      var __values_bit = _o.ValuesBit.ToArray();
      _values_bit = CreateValuesBitVector(builder, __values_bit);
    }
    return CreateAllFrame_Bool(
      builder,
      _values_bit);
  }
};

public class AllFrame_BoolT
{
  [Newtonsoft.Json.JsonProperty("values_bit")]
  public List<byte> ValuesBit { get; set; }

  public AllFrame_BoolT() {
    this.ValuesBit = null;
  }
}

public struct CatmullRom_Float_u16 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Float_u16 GetRootAsCatmullRom_Float_u16(ByteBuffer _bb) { return GetRootAsCatmullRom_Float_u16(_bb, new CatmullRom_Float_u16()); }
  public static CatmullRom_Float_u16 GetRootAsCatmullRom_Float_u16(ByteBuffer _bb, CatmullRom_Float_u16 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Float_u16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetFramesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetFramesArray() { return __p.__vector_as_array<ushort>(4); }
  public float Values(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetValuesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetValuesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.anm2.fb.CatmullRom_Float_u16> CreateCatmullRom_Float_u16(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Float_u16.AddValues(builder, valuesOffset);
    CatmullRom_Float_u16.AddFrames(builder, framesOffset);
    return CatmullRom_Float_u16.EndCatmullRom_Float_u16(builder);
  }

  public static void StartCatmullRom_Float_u16(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Float_u16> EndCatmullRom_Float_u16(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Float_u16>(o);
  }
  public CatmullRom_Float_u16T UnPack() {
    var _o = new CatmullRom_Float_u16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Float_u16T _o) {
    _o.Frames = new List<ushort>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<float>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Float_u16> Pack(FlatBufferBuilder builder, CatmullRom_Float_u16T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Float_u16>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = _o.Values.ToArray();
      _values = CreateValuesVector(builder, __values);
    }
    return CreateCatmullRom_Float_u16(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Float_u16T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<ushort> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<float> Values { get; set; }

  public CatmullRom_Float_u16T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Float_u8 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Float_u8 GetRootAsCatmullRom_Float_u8(ByteBuffer _bb) { return GetRootAsCatmullRom_Float_u8(_bb, new CatmullRom_Float_u8()); }
  public static CatmullRom_Float_u8 GetRootAsCatmullRom_Float_u8(ByteBuffer _bb, CatmullRom_Float_u8 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Float_u8 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFramesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFramesArray() { return __p.__vector_as_array<byte>(4); }
  public float Values(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetValuesBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetValuesArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<gfl.anm2.fb.CatmullRom_Float_u8> CreateCatmullRom_Float_u8(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Float_u8.AddValues(builder, valuesOffset);
    CatmullRom_Float_u8.AddFrames(builder, framesOffset);
    return CatmullRom_Float_u8.EndCatmullRom_Float_u8(builder);
  }

  public static void StartCatmullRom_Float_u8(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Float_u8> EndCatmullRom_Float_u8(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Float_u8>(o);
  }
  public CatmullRom_Float_u8T UnPack() {
    var _o = new CatmullRom_Float_u8T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Float_u8T _o) {
    _o.Frames = new List<byte>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<float>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Float_u8> Pack(FlatBufferBuilder builder, CatmullRom_Float_u8T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Float_u8>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = _o.Values.ToArray();
      _values = CreateValuesVector(builder, __values);
    }
    return CreateCatmullRom_Float_u8(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Float_u8T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<byte> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<float> Values { get; set; }

  public CatmullRom_Float_u8T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Vector3_u16 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Vector3_u16 GetRootAsCatmullRom_Vector3_u16(ByteBuffer _bb) { return GetRootAsCatmullRom_Vector3_u16(_bb, new CatmullRom_Vector3_u16()); }
  public static CatmullRom_Vector3_u16 GetRootAsCatmullRom_Vector3_u16(ByteBuffer _bb, CatmullRom_Vector3_u16 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Vector3_u16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetFramesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetFramesArray() { return __p.__vector_as_array<ushort>(4); }
  public gfl.anm2.fb.Vector3? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Vector3?)(new gfl.anm2.fb.Vector3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u16> CreateCatmullRom_Vector3_u16(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Vector3_u16.AddValues(builder, valuesOffset);
    CatmullRom_Vector3_u16.AddFrames(builder, framesOffset);
    return CatmullRom_Vector3_u16.EndCatmullRom_Vector3_u16(builder);
  }

  public static void StartCatmullRom_Vector3_u16(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u16> EndCatmullRom_Vector3_u16(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Vector3_u16>(o);
  }
  public CatmullRom_Vector3_u16T UnPack() {
    var _o = new CatmullRom_Vector3_u16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Vector3_u16T _o) {
    _o.Frames = new List<ushort>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Vector3T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u16> Pack(FlatBufferBuilder builder, CatmullRom_Vector3_u16T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Vector3_u16>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector3.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Vector3_u16(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Vector3_u16T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<ushort> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector3T> Values { get; set; }

  public CatmullRom_Vector3_u16T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Vector3_u8 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Vector3_u8 GetRootAsCatmullRom_Vector3_u8(ByteBuffer _bb) { return GetRootAsCatmullRom_Vector3_u8(_bb, new CatmullRom_Vector3_u8()); }
  public static CatmullRom_Vector3_u8 GetRootAsCatmullRom_Vector3_u8(ByteBuffer _bb, CatmullRom_Vector3_u8 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Vector3_u8 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFramesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFramesArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.Vector3? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Vector3?)(new gfl.anm2.fb.Vector3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u8> CreateCatmullRom_Vector3_u8(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Vector3_u8.AddValues(builder, valuesOffset);
    CatmullRom_Vector3_u8.AddFrames(builder, framesOffset);
    return CatmullRom_Vector3_u8.EndCatmullRom_Vector3_u8(builder);
  }

  public static void StartCatmullRom_Vector3_u8(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u8> EndCatmullRom_Vector3_u8(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Vector3_u8>(o);
  }
  public CatmullRom_Vector3_u8T UnPack() {
    var _o = new CatmullRom_Vector3_u8T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Vector3_u8T _o) {
    _o.Frames = new List<byte>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Vector3T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector3_u8> Pack(FlatBufferBuilder builder, CatmullRom_Vector3_u8T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Vector3_u8>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector3.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Vector3_u8(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Vector3_u8T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<byte> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector3T> Values { get; set; }

  public CatmullRom_Vector3_u8T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Vector4_u16 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Vector4_u16 GetRootAsCatmullRom_Vector4_u16(ByteBuffer _bb) { return GetRootAsCatmullRom_Vector4_u16(_bb, new CatmullRom_Vector4_u16()); }
  public static CatmullRom_Vector4_u16 GetRootAsCatmullRom_Vector4_u16(ByteBuffer _bb, CatmullRom_Vector4_u16 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Vector4_u16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetFramesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetFramesArray() { return __p.__vector_as_array<ushort>(4); }
  public gfl.anm2.fb.Vector4? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Vector4?)(new gfl.anm2.fb.Vector4()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u16> CreateCatmullRom_Vector4_u16(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Vector4_u16.AddValues(builder, valuesOffset);
    CatmullRom_Vector4_u16.AddFrames(builder, framesOffset);
    return CatmullRom_Vector4_u16.EndCatmullRom_Vector4_u16(builder);
  }

  public static void StartCatmullRom_Vector4_u16(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u16> EndCatmullRom_Vector4_u16(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Vector4_u16>(o);
  }
  public CatmullRom_Vector4_u16T UnPack() {
    var _o = new CatmullRom_Vector4_u16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Vector4_u16T _o) {
    _o.Frames = new List<ushort>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Vector4T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u16> Pack(FlatBufferBuilder builder, CatmullRom_Vector4_u16T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Vector4_u16>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector4.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Vector4_u16(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Vector4_u16T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<ushort> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector4T> Values { get; set; }

  public CatmullRom_Vector4_u16T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Vector4_u8 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Vector4_u8 GetRootAsCatmullRom_Vector4_u8(ByteBuffer _bb) { return GetRootAsCatmullRom_Vector4_u8(_bb, new CatmullRom_Vector4_u8()); }
  public static CatmullRom_Vector4_u8 GetRootAsCatmullRom_Vector4_u8(ByteBuffer _bb, CatmullRom_Vector4_u8 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Vector4_u8 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFramesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFramesArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.Vector4? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Vector4?)(new gfl.anm2.fb.Vector4()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u8> CreateCatmullRom_Vector4_u8(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Vector4_u8.AddValues(builder, valuesOffset);
    CatmullRom_Vector4_u8.AddFrames(builder, framesOffset);
    return CatmullRom_Vector4_u8.EndCatmullRom_Vector4_u8(builder);
  }

  public static void StartCatmullRom_Vector4_u8(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u8> EndCatmullRom_Vector4_u8(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Vector4_u8>(o);
  }
  public CatmullRom_Vector4_u8T UnPack() {
    var _o = new CatmullRom_Vector4_u8T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Vector4_u8T _o) {
    _o.Frames = new List<byte>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Vector4T>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Vector4_u8> Pack(FlatBufferBuilder builder, CatmullRom_Vector4_u8T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Vector4_u8>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Vector4.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Vector4_u8(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Vector4_u8T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<byte> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Vector4T> Values { get; set; }

  public CatmullRom_Vector4_u8T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Quaternion48bit_u16 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Quaternion48bit_u16 GetRootAsCatmullRom_Quaternion48bit_u16(ByteBuffer _bb) { return GetRootAsCatmullRom_Quaternion48bit_u16(_bb, new CatmullRom_Quaternion48bit_u16()); }
  public static CatmullRom_Quaternion48bit_u16 GetRootAsCatmullRom_Quaternion48bit_u16(ByteBuffer _bb, CatmullRom_Quaternion48bit_u16 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Quaternion48bit_u16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetFramesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetFramesArray() { return __p.__vector_as_array<ushort>(4); }
  public gfl.anm2.fb.Quaternion48bit? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Quaternion48bit?)(new gfl.anm2.fb.Quaternion48bit()).__assign(__p.__vector(o) + j * 6, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16> CreateCatmullRom_Quaternion48bit_u16(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Quaternion48bit_u16.AddValues(builder, valuesOffset);
    CatmullRom_Quaternion48bit_u16.AddFrames(builder, framesOffset);
    return CatmullRom_Quaternion48bit_u16.EndCatmullRom_Quaternion48bit_u16(builder);
  }

  public static void StartCatmullRom_Quaternion48bit_u16(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(6, numElems, 1); }
  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16> EndCatmullRom_Quaternion48bit_u16(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16>(o);
  }
  public CatmullRom_Quaternion48bit_u16T UnPack() {
    var _o = new CatmullRom_Quaternion48bit_u16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Quaternion48bit_u16T _o) {
    _o.Frames = new List<ushort>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Quaternion48bitT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16> Pack(FlatBufferBuilder builder, CatmullRom_Quaternion48bit_u16T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u16>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Quaternion48bit.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Quaternion48bit_u16(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Quaternion48bit_u16T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<ushort> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Quaternion48bitT> Values { get; set; }

  public CatmullRom_Quaternion48bit_u16T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct CatmullRom_Quaternion48bit_u8 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CatmullRom_Quaternion48bit_u8 GetRootAsCatmullRom_Quaternion48bit_u8(ByteBuffer _bb) { return GetRootAsCatmullRom_Quaternion48bit_u8(_bb, new CatmullRom_Quaternion48bit_u8()); }
  public static CatmullRom_Quaternion48bit_u8 GetRootAsCatmullRom_Quaternion48bit_u8(ByteBuffer _bb, CatmullRom_Quaternion48bit_u8 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CatmullRom_Quaternion48bit_u8 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFramesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFramesArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.Quaternion48bit? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.Quaternion48bit?)(new gfl.anm2.fb.Quaternion48bit()).__assign(__p.__vector(o) + j * 6, __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8> CreateCatmullRom_Quaternion48bit_u8(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CatmullRom_Quaternion48bit_u8.AddValues(builder, valuesOffset);
    CatmullRom_Quaternion48bit_u8.AddFrames(builder, framesOffset);
    return CatmullRom_Quaternion48bit_u8.EndCatmullRom_Quaternion48bit_u8(builder);
  }

  public static void StartCatmullRom_Quaternion48bit_u8(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(6, numElems, 1); }
  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8> EndCatmullRom_Quaternion48bit_u8(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8>(o);
  }
  public CatmullRom_Quaternion48bit_u8T UnPack() {
    var _o = new CatmullRom_Quaternion48bit_u8T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CatmullRom_Quaternion48bit_u8T _o) {
    _o.Frames = new List<byte>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.Values = new List<gfl.anm2.fb.Quaternion48bitT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8> Pack(FlatBufferBuilder builder, CatmullRom_Quaternion48bit_u8T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CatmullRom_Quaternion48bit_u8>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      StartValuesVector(builder, _o.Values.Count);
      for (var _j = _o.Values.Count - 1; _j >= 0; --_j) { gfl.anm2.fb.Quaternion48bit.Pack(builder, _o.Values[_j]); }
      _values = builder.EndVector();
    }
    return CreateCatmullRom_Quaternion48bit_u8(
      builder,
      _frames,
      _values);
  }
};

public class CatmullRom_Quaternion48bit_u8T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<byte> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.Quaternion48bitT> Values { get; set; }

  public CatmullRom_Quaternion48bit_u8T() {
    this.Frames = null;
    this.Values = null;
  }
}

public struct Step_Bool_u16 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Step_Bool_u16 GetRootAsStep_Bool_u16(ByteBuffer _bb) { return GetRootAsStep_Bool_u16(_bb, new Step_Bool_u16()); }
  public static Step_Bool_u16 GetRootAsStep_Bool_u16(ByteBuffer _bb, Step_Bool_u16 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Step_Bool_u16 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetFramesBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetFramesArray() { return __p.__vector_as_array<ushort>(4); }
  public byte ValuesBit(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValuesBitLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValuesBitBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetValuesBitBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValuesBitArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.Step_Bool_u16> CreateStep_Bool_u16(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset values_bitOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Step_Bool_u16.AddValuesBit(builder, values_bitOffset);
    Step_Bool_u16.AddFrames(builder, framesOffset);
    return Step_Bool_u16.EndStep_Bool_u16(builder);
  }

  public static void StartStep_Bool_u16(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddValuesBit(FlatBufferBuilder builder, VectorOffset valuesBitOffset) { builder.AddOffset(1, valuesBitOffset.Value, 0); }
  public static VectorOffset CreateValuesBitVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesBitVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesBitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.anm2.fb.Step_Bool_u16> EndStep_Bool_u16(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Step_Bool_u16>(o);
  }
  public Step_Bool_u16T UnPack() {
    var _o = new Step_Bool_u16T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Step_Bool_u16T _o) {
    _o.Frames = new List<ushort>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.ValuesBit = new List<byte>();
    for (var _j = 0; _j < this.ValuesBitLength; ++_j) {_o.ValuesBit.Add(this.ValuesBit(_j));}
  }
  public static Offset<gfl.anm2.fb.Step_Bool_u16> Pack(FlatBufferBuilder builder, Step_Bool_u16T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Step_Bool_u16>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values_bit = default(VectorOffset);
    if (_o.ValuesBit != null) {
      var __values_bit = _o.ValuesBit.ToArray();
      _values_bit = CreateValuesBitVector(builder, __values_bit);
    }
    return CreateStep_Bool_u16(
      builder,
      _frames,
      _values_bit);
  }
};

public class Step_Bool_u16T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<ushort> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values_bit")]
  public List<byte> ValuesBit { get; set; }

  public Step_Bool_u16T() {
    this.Frames = null;
    this.ValuesBit = null;
  }
}

public struct Step_Bool_u8 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Step_Bool_u8 GetRootAsStep_Bool_u8(ByteBuffer _bb) { return GetRootAsStep_Bool_u8(_bb, new Step_Bool_u8()); }
  public static Step_Bool_u8 GetRootAsStep_Bool_u8(ByteBuffer _bb, Step_Bool_u8 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Step_Bool_u8 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Frames(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFramesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFramesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFramesArray() { return __p.__vector_as_array<byte>(4); }
  public byte ValuesBit(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValuesBitLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValuesBitBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetValuesBitBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValuesBitArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.Step_Bool_u8> CreateStep_Bool_u8(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      VectorOffset values_bitOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Step_Bool_u8.AddValuesBit(builder, values_bitOffset);
    Step_Bool_u8.AddFrames(builder, framesOffset);
    return Step_Bool_u8.EndStep_Bool_u8(builder);
  }

  public static void StartStep_Bool_u8(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static VectorOffset CreateFramesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFramesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValuesBit(FlatBufferBuilder builder, VectorOffset valuesBitOffset) { builder.AddOffset(1, valuesBitOffset.Value, 0); }
  public static VectorOffset CreateValuesBitVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesBitVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesBitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.anm2.fb.Step_Bool_u8> EndStep_Bool_u8(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Step_Bool_u8>(o);
  }
  public Step_Bool_u8T UnPack() {
    var _o = new Step_Bool_u8T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Step_Bool_u8T _o) {
    _o.Frames = new List<byte>();
    for (var _j = 0; _j < this.FramesLength; ++_j) {_o.Frames.Add(this.Frames(_j));}
    _o.ValuesBit = new List<byte>();
    for (var _j = 0; _j < this.ValuesBitLength; ++_j) {_o.ValuesBit.Add(this.ValuesBit(_j));}
  }
  public static Offset<gfl.anm2.fb.Step_Bool_u8> Pack(FlatBufferBuilder builder, Step_Bool_u8T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Step_Bool_u8>);
    var _frames = default(VectorOffset);
    if (_o.Frames != null) {
      var __frames = _o.Frames.ToArray();
      _frames = CreateFramesVector(builder, __frames);
    }
    var _values_bit = default(VectorOffset);
    if (_o.ValuesBit != null) {
      var __values_bit = _o.ValuesBit.ToArray();
      _values_bit = CreateValuesBitVector(builder, __values_bit);
    }
    return CreateStep_Bool_u8(
      builder,
      _frames,
      _values_bit);
  }
};

public class Step_Bool_u8T
{
  [Newtonsoft.Json.JsonProperty("frames")]
  public List<byte> Frames { get; set; }
  [Newtonsoft.Json.JsonProperty("values_bit")]
  public List<byte> ValuesBit { get; set; }

  public Step_Bool_u8T() {
    this.Frames = null;
    this.ValuesBit = null;
  }
}

public struct FrameSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb) { return GetRootAsFrameSetting(_bb, new FrameSetting()); }
  public static FrameSetting GetRootAsFrameSetting(ByteBuffer _bb, FrameSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FrameSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.PlayMode PlayMode { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.PlayMode)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.PlayMode.Once; } }
  public uint FrameLength { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Fps { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<gfl.anm2.fb.FrameSetting> CreateFrameSetting(FlatBufferBuilder builder,
      gfl.anm2.fb.PlayMode playMode = gfl.anm2.fb.PlayMode.Once,
      uint frameLength = 0,
      uint fps = 0) {
    builder.StartTable(3);
    FrameSetting.AddFps(builder, fps);
    FrameSetting.AddFrameLength(builder, frameLength);
    FrameSetting.AddPlayMode(builder, playMode);
    return FrameSetting.EndFrameSetting(builder);
  }

  public static void StartFrameSetting(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPlayMode(FlatBufferBuilder builder, gfl.anm2.fb.PlayMode playMode) { builder.AddUint(0, (uint)playMode, 0); }
  public static void AddFrameLength(FlatBufferBuilder builder, uint frameLength) { builder.AddUint(1, frameLength, 0); }
  public static void AddFps(FlatBufferBuilder builder, uint fps) { builder.AddUint(2, fps, 0); }
  public static Offset<gfl.anm2.fb.FrameSetting> EndFrameSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.FrameSetting>(o);
  }
  public FrameSettingT UnPack() {
    var _o = new FrameSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FrameSettingT _o) {
    _o.PlayMode = this.PlayMode;
    _o.FrameLength = this.FrameLength;
    _o.Fps = this.Fps;
  }
  public static Offset<gfl.anm2.fb.FrameSetting> Pack(FlatBufferBuilder builder, FrameSettingT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.FrameSetting>);
    return CreateFrameSetting(
      builder,
      _o.PlayMode,
      _o.FrameLength,
      _o.Fps);
  }
};

public class FrameSettingT
{
  [Newtonsoft.Json.JsonProperty("playMode")]
  public gfl.anm2.fb.PlayMode PlayMode { get; set; }
  [Newtonsoft.Json.JsonProperty("frameLength")]
  public uint FrameLength { get; set; }
  [Newtonsoft.Json.JsonProperty("fps")]
  public uint Fps { get; set; }

  public FrameSettingT() {
    this.PlayMode = gfl.anm2.fb.PlayMode.Once;
    this.FrameLength = 0;
    this.Fps = 0;
  }
}

public struct MaskUnit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaskUnit GetRootAsMaskUnit(ByteBuffer _bb) { return GetRootAsMaskUnit(_bb, new MaskUnit()); }
  public static MaskUnit GetRootAsMaskUnit(ByteBuffer _bb, MaskUnit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaskUnit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.MaskUnit> CreateMaskUnit(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(1);
    MaskUnit.AddName(builder, nameOffset);
    return MaskUnit.EndMaskUnit(builder);
  }

  public static void StartMaskUnit(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MaskUnit> EndMaskUnit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaskUnit>(o);
  }
  public MaskUnitT UnPack() {
    var _o = new MaskUnitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaskUnitT _o) {
    _o.Name = this.Name;
  }
  public static Offset<gfl.anm2.fb.MaskUnit> Pack(FlatBufferBuilder builder, MaskUnitT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaskUnit>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateMaskUnit(
      builder,
      _name);
  }
};

public class MaskUnitT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }

  public MaskUnitT() {
    this.Name = null;
  }
}

public struct MaskSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaskSet GetRootAsMaskSet(ByteBuffer _bb) { return GetRootAsMaskSet(_bb, new MaskSet()); }
  public static MaskSet GetRootAsMaskSet(ByteBuffer _bb, MaskSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaskSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.anm2.fb.MaskUnit? Masks(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaskUnit?)(new gfl.anm2.fb.MaskUnit()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MasksLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MaskSet> CreateMaskSet(FlatBufferBuilder builder,
      bool enabled = false,
      VectorOffset masksOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MaskSet.AddMasks(builder, masksOffset);
    MaskSet.AddEnabled(builder, enabled);
    return MaskSet.EndMaskSet(builder);
  }

  public static void StartMaskSet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static void AddMasks(FlatBufferBuilder builder, VectorOffset masksOffset) { builder.AddOffset(1, masksOffset.Value, 0); }
  public static VectorOffset CreateMasksVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskUnit>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMasksVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskUnit>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMasksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MaskSet> EndMaskSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaskSet>(o);
  }
  public MaskSetT UnPack() {
    var _o = new MaskSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaskSetT _o) {
    _o.Enabled = this.Enabled;
    _o.Masks = new List<gfl.anm2.fb.MaskUnitT>();
    for (var _j = 0; _j < this.MasksLength; ++_j) {_o.Masks.Add(this.Masks(_j).HasValue ? this.Masks(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MaskSet> Pack(FlatBufferBuilder builder, MaskSetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaskSet>);
    var _masks = default(VectorOffset);
    if (_o.Masks != null) {
      var __masks = new Offset<gfl.anm2.fb.MaskUnit>[_o.Masks.Count];
      for (var _j = 0; _j < __masks.Length; ++_j) { __masks[_j] = gfl.anm2.fb.MaskUnit.Pack(builder, _o.Masks[_j]); }
      _masks = CreateMasksVector(builder, __masks);
    }
    return CreateMaskSet(
      builder,
      _o.Enabled,
      _masks);
  }
};

public class MaskSetT
{
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }
  [Newtonsoft.Json.JsonProperty("masks")]
  public List<gfl.anm2.fb.MaskUnitT> Masks { get; set; }

  public MaskSetT() {
    this.Enabled = false;
    this.Masks = null;
  }
}

public struct MaterialMask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialMask GetRootAsMaterialMask(ByteBuffer _bb) { return GetRootAsMaterialMask(_bb, new MaterialMask()); }
  public static MaterialMask GetRootAsMaterialMask(ByteBuffer _bb, MaterialMask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialMask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.MaskSet? FloatMaskSet { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaskSet?)(new gfl.anm2.fb.MaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MaskSet? Vector4MaskSet { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.MaskSet?)(new gfl.anm2.fb.MaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.MaterialMask> CreateMaterialMask(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.MaskSet> floatMaskSetOffset = default(Offset<gfl.anm2.fb.MaskSet>),
      Offset<gfl.anm2.fb.MaskSet> vector4MaskSetOffset = default(Offset<gfl.anm2.fb.MaskSet>)) {
    builder.StartTable(3);
    MaterialMask.AddVector4MaskSet(builder, vector4MaskSetOffset);
    MaterialMask.AddFloatMaskSet(builder, floatMaskSetOffset);
    MaterialMask.AddName(builder, nameOffset);
    return MaterialMask.EndMaterialMask(builder);
  }

  public static void StartMaterialMask(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddFloatMaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskSet> floatMaskSetOffset) { builder.AddOffset(1, floatMaskSetOffset.Value, 0); }
  public static void AddVector4MaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskSet> vector4MaskSetOffset) { builder.AddOffset(2, vector4MaskSetOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MaterialMask> EndMaterialMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialMask>(o);
  }
  public MaterialMaskT UnPack() {
    var _o = new MaterialMaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialMaskT _o) {
    _o.Name = this.Name;
    _o.FloatMaskSet = this.FloatMaskSet.HasValue ? this.FloatMaskSet.Value.UnPack() : null;
    _o.Vector4MaskSet = this.Vector4MaskSet.HasValue ? this.Vector4MaskSet.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.MaterialMask> Pack(FlatBufferBuilder builder, MaterialMaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialMask>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _floatMaskSet = _o.FloatMaskSet == null ? default(Offset<gfl.anm2.fb.MaskSet>) : gfl.anm2.fb.MaskSet.Pack(builder, _o.FloatMaskSet);
    var _vector4MaskSet = _o.Vector4MaskSet == null ? default(Offset<gfl.anm2.fb.MaskSet>) : gfl.anm2.fb.MaskSet.Pack(builder, _o.Vector4MaskSet);
    return CreateMaterialMask(
      builder,
      _name,
      _floatMaskSet,
      _vector4MaskSet);
  }
};

public class MaterialMaskT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("floatMaskSet")]
  public gfl.anm2.fb.MaskSetT FloatMaskSet { get; set; }
  [Newtonsoft.Json.JsonProperty("vector4MaskSet")]
  public gfl.anm2.fb.MaskSetT Vector4MaskSet { get; set; }

  public MaterialMaskT() {
    this.Name = null;
    this.FloatMaskSet = null;
    this.Vector4MaskSet = null;
  }
}

public struct MaterialMaskSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialMaskSet GetRootAsMaterialMaskSet(ByteBuffer _bb) { return GetRootAsMaterialMaskSet(_bb, new MaterialMaskSet()); }
  public static MaterialMaskSet GetRootAsMaterialMaskSet(ByteBuffer _bb, MaterialMaskSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialMaskSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Enabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.anm2.fb.MaterialMask? Masks(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaterialMask?)(new gfl.anm2.fb.MaterialMask()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MasksLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MaterialMaskSet> CreateMaterialMaskSet(FlatBufferBuilder builder,
      bool enabled = false,
      VectorOffset masksOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MaterialMaskSet.AddMasks(builder, masksOffset);
    MaterialMaskSet.AddEnabled(builder, enabled);
    return MaterialMaskSet.EndMaterialMaskSet(builder);
  }

  public static void StartMaterialMaskSet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEnabled(FlatBufferBuilder builder, bool enabled) { builder.AddBool(0, enabled, false); }
  public static void AddMasks(FlatBufferBuilder builder, VectorOffset masksOffset) { builder.AddOffset(1, masksOffset.Value, 0); }
  public static VectorOffset CreateMasksVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialMask>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMasksVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialMask>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMasksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MaterialMaskSet> EndMaterialMaskSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialMaskSet>(o);
  }
  public MaterialMaskSetT UnPack() {
    var _o = new MaterialMaskSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialMaskSetT _o) {
    _o.Enabled = this.Enabled;
    _o.Masks = new List<gfl.anm2.fb.MaterialMaskT>();
    for (var _j = 0; _j < this.MasksLength; ++_j) {_o.Masks.Add(this.Masks(_j).HasValue ? this.Masks(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MaterialMaskSet> Pack(FlatBufferBuilder builder, MaterialMaskSetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialMaskSet>);
    var _masks = default(VectorOffset);
    if (_o.Masks != null) {
      var __masks = new Offset<gfl.anm2.fb.MaterialMask>[_o.Masks.Count];
      for (var _j = 0; _j < __masks.Length; ++_j) { __masks[_j] = gfl.anm2.fb.MaterialMask.Pack(builder, _o.Masks[_j]); }
      _masks = CreateMasksVector(builder, __masks);
    }
    return CreateMaterialMaskSet(
      builder,
      _o.Enabled,
      _masks);
  }
};

public class MaterialMaskSetT
{
  [Newtonsoft.Json.JsonProperty("enabled")]
  public bool Enabled { get; set; }
  [Newtonsoft.Json.JsonProperty("masks")]
  public List<gfl.anm2.fb.MaterialMaskT> Masks { get; set; }

  public MaterialMaskSetT() {
    this.Enabled = false;
    this.Masks = null;
  }
}

public struct Mask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Mask GetRootAsMask(ByteBuffer _bb) { return GetRootAsMask(_bb, new Mask()); }
  public static Mask GetRootAsMask(ByteBuffer _bb, Mask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MaskSet? JointMaskSet { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MaskSet?)(new gfl.anm2.fb.MaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MaskSet? MeshMaskSet { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaskSet?)(new gfl.anm2.fb.MaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MaterialMaskSet? MaterialMaskSet { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.MaterialMaskSet?)(new gfl.anm2.fb.MaterialMaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MaskSet? DeformerMaskSet { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.MaskSet?)(new gfl.anm2.fb.MaskSet()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.Mask> CreateMask(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MaskSet> jointMaskSetOffset = default(Offset<gfl.anm2.fb.MaskSet>),
      Offset<gfl.anm2.fb.MaskSet> meshMaskSetOffset = default(Offset<gfl.anm2.fb.MaskSet>),
      Offset<gfl.anm2.fb.MaterialMaskSet> materialMaskSetOffset = default(Offset<gfl.anm2.fb.MaterialMaskSet>),
      Offset<gfl.anm2.fb.MaskSet> deformerMaskSetOffset = default(Offset<gfl.anm2.fb.MaskSet>)) {
    builder.StartTable(4);
    Mask.AddDeformerMaskSet(builder, deformerMaskSetOffset);
    Mask.AddMaterialMaskSet(builder, materialMaskSetOffset);
    Mask.AddMeshMaskSet(builder, meshMaskSetOffset);
    Mask.AddJointMaskSet(builder, jointMaskSetOffset);
    return Mask.EndMask(builder);
  }

  public static void StartMask(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddJointMaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskSet> jointMaskSetOffset) { builder.AddOffset(0, jointMaskSetOffset.Value, 0); }
  public static void AddMeshMaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskSet> meshMaskSetOffset) { builder.AddOffset(1, meshMaskSetOffset.Value, 0); }
  public static void AddMaterialMaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialMaskSet> materialMaskSetOffset) { builder.AddOffset(2, materialMaskSetOffset.Value, 0); }
  public static void AddDeformerMaskSet(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaskSet> deformerMaskSetOffset) { builder.AddOffset(3, deformerMaskSetOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.Mask> EndMask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.Mask>(o);
  }
  public MaskT UnPack() {
    var _o = new MaskT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaskT _o) {
    _o.JointMaskSet = this.JointMaskSet.HasValue ? this.JointMaskSet.Value.UnPack() : null;
    _o.MeshMaskSet = this.MeshMaskSet.HasValue ? this.MeshMaskSet.Value.UnPack() : null;
    _o.MaterialMaskSet = this.MaterialMaskSet.HasValue ? this.MaterialMaskSet.Value.UnPack() : null;
    _o.DeformerMaskSet = this.DeformerMaskSet.HasValue ? this.DeformerMaskSet.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.Mask> Pack(FlatBufferBuilder builder, MaskT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.Mask>);
    var _jointMaskSet = _o.JointMaskSet == null ? default(Offset<gfl.anm2.fb.MaskSet>) : gfl.anm2.fb.MaskSet.Pack(builder, _o.JointMaskSet);
    var _meshMaskSet = _o.MeshMaskSet == null ? default(Offset<gfl.anm2.fb.MaskSet>) : gfl.anm2.fb.MaskSet.Pack(builder, _o.MeshMaskSet);
    var _materialMaskSet = _o.MaterialMaskSet == null ? default(Offset<gfl.anm2.fb.MaterialMaskSet>) : gfl.anm2.fb.MaterialMaskSet.Pack(builder, _o.MaterialMaskSet);
    var _deformerMaskSet = _o.DeformerMaskSet == null ? default(Offset<gfl.anm2.fb.MaskSet>) : gfl.anm2.fb.MaskSet.Pack(builder, _o.DeformerMaskSet);
    return CreateMask(
      builder,
      _jointMaskSet,
      _meshMaskSet,
      _materialMaskSet,
      _deformerMaskSet);
  }
};

public class MaskT
{
  [Newtonsoft.Json.JsonProperty("jointMaskSet")]
  public gfl.anm2.fb.MaskSetT JointMaskSet { get; set; }
  [Newtonsoft.Json.JsonProperty("meshMaskSet")]
  public gfl.anm2.fb.MaskSetT MeshMaskSet { get; set; }
  [Newtonsoft.Json.JsonProperty("materialMaskSet")]
  public gfl.anm2.fb.MaterialMaskSetT MaterialMaskSet { get; set; }
  [Newtonsoft.Json.JsonProperty("deformerMaskSet")]
  public gfl.anm2.fb.MaskSetT DeformerMaskSet { get; set; }

  public MaskT() {
    this.JointMaskSet = null;
    this.MeshMaskSet = null;
    this.MaterialMaskSet = null;
    this.DeformerMaskSet = null;
  }
}

public struct ResourceLabel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ResourceLabel GetRootAsResourceLabel(ByteBuffer _bb) { return GetRootAsResourceLabel(_bb, new ResourceLabel()); }
  public static ResourceLabel GetRootAsResourceLabel(ByteBuffer _bb, ResourceLabel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResourceLabel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.ResourceType Type { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.ResourceType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.ResourceType.File; } }

  public static Offset<gfl.anm2.fb.ResourceLabel> CreateResourceLabel(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.ResourceType type = gfl.anm2.fb.ResourceType.File) {
    builder.StartTable(2);
    ResourceLabel.AddType(builder, type);
    ResourceLabel.AddName(builder, nameOffset);
    return ResourceLabel.EndResourceLabel(builder);
  }

  public static void StartResourceLabel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fb.ResourceType type) { builder.AddUint(1, (uint)type, 0); }
  public static Offset<gfl.anm2.fb.ResourceLabel> EndResourceLabel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.ResourceLabel>(o);
  }
  public ResourceLabelT UnPack() {
    var _o = new ResourceLabelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResourceLabelT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type;
  }
  public static Offset<gfl.anm2.fb.ResourceLabel> Pack(FlatBufferBuilder builder, ResourceLabelT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.ResourceLabel>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateResourceLabel(
      builder,
      _name,
      _o.Type);
  }
};

public class ResourceLabelT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fb.ResourceType Type { get; set; }

  public ResourceLabelT() {
    this.Name = null;
    this.Type = gfl.anm2.fb.ResourceType.File;
  }
}

public struct RuntimeCurveKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveKey GetRootAsRuntimeCurveKey(ByteBuffer _bb) { return GetRootAsRuntimeCurveKey(_bb, new RuntimeCurveKey()); }
  public static RuntimeCurveKey GetRootAsRuntimeCurveKey(ByteBuffer _bb, RuntimeCurveKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentLeft { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentRight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.anm2.fb.CurveInterpType InterpType { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.CurveInterpType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.CurveInterpType.Constant; } }

  public static Offset<gfl.anm2.fb.RuntimeCurveKey> CreateRuntimeCurveKey(FlatBufferBuilder builder,
      float time = 0.0f,
      float value = 0.0f,
      float tangentLeft = 0.0f,
      float tangentRight = 0.0f,
      gfl.anm2.fb.CurveInterpType interpType = gfl.anm2.fb.CurveInterpType.Constant) {
    builder.StartTable(5);
    RuntimeCurveKey.AddInterpType(builder, interpType);
    RuntimeCurveKey.AddTangentRight(builder, tangentRight);
    RuntimeCurveKey.AddTangentLeft(builder, tangentLeft);
    RuntimeCurveKey.AddValue(builder, value);
    RuntimeCurveKey.AddTime(builder, time);
    return RuntimeCurveKey.EndRuntimeCurveKey(builder);
  }

  public static void StartRuntimeCurveKey(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(0, time, 0.0f); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static void AddTangentLeft(FlatBufferBuilder builder, float tangentLeft) { builder.AddFloat(2, tangentLeft, 0.0f); }
  public static void AddTangentRight(FlatBufferBuilder builder, float tangentRight) { builder.AddFloat(3, tangentRight, 0.0f); }
  public static void AddInterpType(FlatBufferBuilder builder, gfl.anm2.fb.CurveInterpType interpType) { builder.AddUint(4, (uint)interpType, 0); }
  public static Offset<gfl.anm2.fb.RuntimeCurveKey> EndRuntimeCurveKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.RuntimeCurveKey>(o);
  }
  public RuntimeCurveKeyT UnPack() {
    var _o = new RuntimeCurveKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveKeyT _o) {
    _o.Time = this.Time;
    _o.Value = this.Value;
    _o.TangentLeft = this.TangentLeft;
    _o.TangentRight = this.TangentRight;
    _o.InterpType = this.InterpType;
  }
  public static Offset<gfl.anm2.fb.RuntimeCurveKey> Pack(FlatBufferBuilder builder, RuntimeCurveKeyT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.RuntimeCurveKey>);
    return CreateRuntimeCurveKey(
      builder,
      _o.Time,
      _o.Value,
      _o.TangentLeft,
      _o.TangentRight,
      _o.InterpType);
  }
};

public class RuntimeCurveKeyT
{
  [Newtonsoft.Json.JsonProperty("time")]
  public float Time { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentLeft")]
  public float TangentLeft { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentRight")]
  public float TangentRight { get; set; }
  [Newtonsoft.Json.JsonProperty("interpType")]
  public gfl.anm2.fb.CurveInterpType InterpType { get; set; }

  public RuntimeCurveKeyT() {
    this.Time = 0.0f;
    this.Value = 0.0f;
    this.TangentLeft = 0.0f;
    this.TangentRight = 0.0f;
    this.InterpType = gfl.anm2.fb.CurveInterpType.Constant;
  }
}

public struct RuntimeCurveFloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveFloat GetRootAsRuntimeCurveFloat(ByteBuffer _bb) { return GetRootAsRuntimeCurveFloat(_bb, new RuntimeCurveFloat()); }
  public static RuntimeCurveFloat GetRootAsRuntimeCurveFloat(ByteBuffer _bb, RuntimeCurveFloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.RuntimeCurveKey? Keys(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.RuntimeCurveKey?)(new gfl.anm2.fb.RuntimeCurveKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeysLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.RuntimeCurveFloat> CreateRuntimeCurveFloat(FlatBufferBuilder builder,
      VectorOffset keysOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RuntimeCurveFloat.AddKeys(builder, keysOffset);
    return RuntimeCurveFloat.EndRuntimeCurveFloat(builder);
  }

  public static void StartRuntimeCurveFloat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(0, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.RuntimeCurveFloat> EndRuntimeCurveFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.RuntimeCurveFloat>(o);
  }
  public RuntimeCurveFloatT UnPack() {
    var _o = new RuntimeCurveFloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveFloatT _o) {
    _o.Keys = new List<gfl.anm2.fb.RuntimeCurveKeyT>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j).HasValue ? this.Keys(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.RuntimeCurveFloat> Pack(FlatBufferBuilder builder, RuntimeCurveFloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.RuntimeCurveFloat>);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new Offset<gfl.anm2.fb.RuntimeCurveKey>[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = gfl.anm2.fb.RuntimeCurveKey.Pack(builder, _o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    return CreateRuntimeCurveFloat(
      builder,
      _keys);
  }
};

public class RuntimeCurveFloatT
{
  [Newtonsoft.Json.JsonProperty("keys")]
  public List<gfl.anm2.fb.RuntimeCurveKeyT> Keys { get; set; }

  public RuntimeCurveFloatT() {
    this.Keys = null;
  }
}

public struct RuntimeCurveFloat4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RuntimeCurveFloat4 GetRootAsRuntimeCurveFloat4(ByteBuffer _bb) { return GetRootAsRuntimeCurveFloat4(_bb, new RuntimeCurveFloat4()); }
  public static RuntimeCurveFloat4 GetRootAsRuntimeCurveFloat4(ByteBuffer _bb, RuntimeCurveFloat4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RuntimeCurveFloat4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.RuntimeCurveFloat? X { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat?)(new gfl.anm2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.RuntimeCurveFloat? Y { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat?)(new gfl.anm2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.RuntimeCurveFloat? Z { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat?)(new gfl.anm2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.RuntimeCurveFloat? W { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.RuntimeCurveFloat?)(new gfl.anm2.fb.RuntimeCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.RuntimeCurveFloat4> CreateRuntimeCurveFloat4(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.RuntimeCurveFloat> xOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat>),
      Offset<gfl.anm2.fb.RuntimeCurveFloat> yOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat>),
      Offset<gfl.anm2.fb.RuntimeCurveFloat> zOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat>),
      Offset<gfl.anm2.fb.RuntimeCurveFloat> wOffset = default(Offset<gfl.anm2.fb.RuntimeCurveFloat>)) {
    builder.StartTable(4);
    RuntimeCurveFloat4.AddW(builder, wOffset);
    RuntimeCurveFloat4.AddZ(builder, zOffset);
    RuntimeCurveFloat4.AddY(builder, yOffset);
    RuntimeCurveFloat4.AddX(builder, xOffset);
    return RuntimeCurveFloat4.EndRuntimeCurveFloat4(builder);
  }

  public static void StartRuntimeCurveFloat4(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddX(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat> xOffset) { builder.AddOffset(0, xOffset.Value, 0); }
  public static void AddY(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat> yOffset) { builder.AddOffset(1, yOffset.Value, 0); }
  public static void AddZ(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat> zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static void AddW(FlatBufferBuilder builder, Offset<gfl.anm2.fb.RuntimeCurveFloat> wOffset) { builder.AddOffset(3, wOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.RuntimeCurveFloat4> EndRuntimeCurveFloat4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.RuntimeCurveFloat4>(o);
  }
  public RuntimeCurveFloat4T UnPack() {
    var _o = new RuntimeCurveFloat4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RuntimeCurveFloat4T _o) {
    _o.X = this.X.HasValue ? this.X.Value.UnPack() : null;
    _o.Y = this.Y.HasValue ? this.Y.Value.UnPack() : null;
    _o.Z = this.Z.HasValue ? this.Z.Value.UnPack() : null;
    _o.W = this.W.HasValue ? this.W.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.RuntimeCurveFloat4> Pack(FlatBufferBuilder builder, RuntimeCurveFloat4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.RuntimeCurveFloat4>);
    var _x = _o.X == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat>) : gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.X);
    var _y = _o.Y == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat>) : gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.Y);
    var _z = _o.Z == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat>) : gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.Z);
    var _w = _o.W == null ? default(Offset<gfl.anm2.fb.RuntimeCurveFloat>) : gfl.anm2.fb.RuntimeCurveFloat.Pack(builder, _o.W);
    return CreateRuntimeCurveFloat4(
      builder,
      _x,
      _y,
      _z,
      _w);
  }
};

public class RuntimeCurveFloat4T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public gfl.anm2.fb.RuntimeCurveFloatT X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public gfl.anm2.fb.RuntimeCurveFloatT Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public gfl.anm2.fb.RuntimeCurveFloatT Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public gfl.anm2.fb.RuntimeCurveFloatT W { get; set; }

  public RuntimeCurveFloat4T() {
    this.X = null;
    this.Y = null;
    this.Z = null;
    this.W = null;
  }
}

public struct EditorCurveKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorCurveKey GetRootAsEditorCurveKey(ByteBuffer _bb) { return GetRootAsEditorCurveKey(_bb, new EditorCurveKey()); }
  public static EditorCurveKey GetRootAsEditorCurveKey(ByteBuffer _bb, EditorCurveKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorCurveKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Time { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentLeft { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float TangentRight { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.anm2.fb.CurveInterpType InterpType { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.CurveInterpType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.CurveInterpType.Constant; } }

  public static Offset<gfl.anm2.fb.EditorCurveKey> CreateEditorCurveKey(FlatBufferBuilder builder,
      float time = 0.0f,
      float value = 0.0f,
      float tangentLeft = 0.0f,
      float tangentRight = 0.0f,
      gfl.anm2.fb.CurveInterpType interpType = gfl.anm2.fb.CurveInterpType.Constant) {
    builder.StartTable(5);
    EditorCurveKey.AddInterpType(builder, interpType);
    EditorCurveKey.AddTangentRight(builder, tangentRight);
    EditorCurveKey.AddTangentLeft(builder, tangentLeft);
    EditorCurveKey.AddValue(builder, value);
    EditorCurveKey.AddTime(builder, time);
    return EditorCurveKey.EndEditorCurveKey(builder);
  }

  public static void StartEditorCurveKey(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(0, time, 0.0f); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(1, value, 0.0f); }
  public static void AddTangentLeft(FlatBufferBuilder builder, float tangentLeft) { builder.AddFloat(2, tangentLeft, 0.0f); }
  public static void AddTangentRight(FlatBufferBuilder builder, float tangentRight) { builder.AddFloat(3, tangentRight, 0.0f); }
  public static void AddInterpType(FlatBufferBuilder builder, gfl.anm2.fb.CurveInterpType interpType) { builder.AddUint(4, (uint)interpType, 0); }
  public static Offset<gfl.anm2.fb.EditorCurveKey> EndEditorCurveKey(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorCurveKey>(o);
  }
  public EditorCurveKeyT UnPack() {
    var _o = new EditorCurveKeyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorCurveKeyT _o) {
    _o.Time = this.Time;
    _o.Value = this.Value;
    _o.TangentLeft = this.TangentLeft;
    _o.TangentRight = this.TangentRight;
    _o.InterpType = this.InterpType;
  }
  public static Offset<gfl.anm2.fb.EditorCurveKey> Pack(FlatBufferBuilder builder, EditorCurveKeyT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorCurveKey>);
    return CreateEditorCurveKey(
      builder,
      _o.Time,
      _o.Value,
      _o.TangentLeft,
      _o.TangentRight,
      _o.InterpType);
  }
};

public class EditorCurveKeyT
{
  [Newtonsoft.Json.JsonProperty("time")]
  public float Time { get; set; }
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentLeft")]
  public float TangentLeft { get; set; }
  [Newtonsoft.Json.JsonProperty("tangentRight")]
  public float TangentRight { get; set; }
  [Newtonsoft.Json.JsonProperty("interpType")]
  public gfl.anm2.fb.CurveInterpType InterpType { get; set; }

  public EditorCurveKeyT() {
    this.Time = 0.0f;
    this.Value = 0.0f;
    this.TangentLeft = 0.0f;
    this.TangentRight = 0.0f;
    this.InterpType = gfl.anm2.fb.CurveInterpType.Constant;
  }
}

public struct EditorCurveFloat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorCurveFloat GetRootAsEditorCurveFloat(ByteBuffer _bb) { return GetRootAsEditorCurveFloat(_bb, new EditorCurveFloat()); }
  public static EditorCurveFloat GetRootAsEditorCurveFloat(ByteBuffer _bb, EditorCurveFloat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorCurveFloat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.EditorCurveKey? Keys(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.EditorCurveKey?)(new gfl.anm2.fb.EditorCurveKey()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeysLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EditorCurveFloat> CreateEditorCurveFloat(FlatBufferBuilder builder,
      VectorOffset keysOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EditorCurveFloat.AddKeys(builder, keysOffset);
    return EditorCurveFloat.EndEditorCurveFloat(builder);
  }

  public static void StartEditorCurveFloat(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(0, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveKey>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveKey>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EditorCurveFloat> EndEditorCurveFloat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorCurveFloat>(o);
  }
  public EditorCurveFloatT UnPack() {
    var _o = new EditorCurveFloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorCurveFloatT _o) {
    _o.Keys = new List<gfl.anm2.fb.EditorCurveKeyT>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j).HasValue ? this.Keys(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EditorCurveFloat> Pack(FlatBufferBuilder builder, EditorCurveFloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorCurveFloat>);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new Offset<gfl.anm2.fb.EditorCurveKey>[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = gfl.anm2.fb.EditorCurveKey.Pack(builder, _o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    return CreateEditorCurveFloat(
      builder,
      _keys);
  }
};

public class EditorCurveFloatT
{
  [Newtonsoft.Json.JsonProperty("keys")]
  public List<gfl.anm2.fb.EditorCurveKeyT> Keys { get; set; }

  public EditorCurveFloatT() {
    this.Keys = null;
  }
}

public struct EditorCurveFloat4 : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EditorCurveFloat4 GetRootAsEditorCurveFloat4(ByteBuffer _bb) { return GetRootAsEditorCurveFloat4(_bb, new EditorCurveFloat4()); }
  public static EditorCurveFloat4 GetRootAsEditorCurveFloat4(ByteBuffer _bb, EditorCurveFloat4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EditorCurveFloat4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.EditorCurveFloat? X { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.EditorCurveFloat?)(new gfl.anm2.fb.EditorCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorCurveFloat? Y { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EditorCurveFloat?)(new gfl.anm2.fb.EditorCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorCurveFloat? Z { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.EditorCurveFloat?)(new gfl.anm2.fb.EditorCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.EditorCurveFloat? W { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.EditorCurveFloat?)(new gfl.anm2.fb.EditorCurveFloat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.EditorCurveFloat4> CreateEditorCurveFloat4(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.EditorCurveFloat> xOffset = default(Offset<gfl.anm2.fb.EditorCurveFloat>),
      Offset<gfl.anm2.fb.EditorCurveFloat> yOffset = default(Offset<gfl.anm2.fb.EditorCurveFloat>),
      Offset<gfl.anm2.fb.EditorCurveFloat> zOffset = default(Offset<gfl.anm2.fb.EditorCurveFloat>),
      Offset<gfl.anm2.fb.EditorCurveFloat> wOffset = default(Offset<gfl.anm2.fb.EditorCurveFloat>)) {
    builder.StartTable(4);
    EditorCurveFloat4.AddW(builder, wOffset);
    EditorCurveFloat4.AddZ(builder, zOffset);
    EditorCurveFloat4.AddY(builder, yOffset);
    EditorCurveFloat4.AddX(builder, xOffset);
    return EditorCurveFloat4.EndEditorCurveFloat4(builder);
  }

  public static void StartEditorCurveFloat4(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddX(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveFloat> xOffset) { builder.AddOffset(0, xOffset.Value, 0); }
  public static void AddY(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveFloat> yOffset) { builder.AddOffset(1, yOffset.Value, 0); }
  public static void AddZ(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveFloat> zOffset) { builder.AddOffset(2, zOffset.Value, 0); }
  public static void AddW(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EditorCurveFloat> wOffset) { builder.AddOffset(3, wOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EditorCurveFloat4> EndEditorCurveFloat4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EditorCurveFloat4>(o);
  }
  public EditorCurveFloat4T UnPack() {
    var _o = new EditorCurveFloat4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EditorCurveFloat4T _o) {
    _o.X = this.X.HasValue ? this.X.Value.UnPack() : null;
    _o.Y = this.Y.HasValue ? this.Y.Value.UnPack() : null;
    _o.Z = this.Z.HasValue ? this.Z.Value.UnPack() : null;
    _o.W = this.W.HasValue ? this.W.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.EditorCurveFloat4> Pack(FlatBufferBuilder builder, EditorCurveFloat4T _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EditorCurveFloat4>);
    var _x = _o.X == null ? default(Offset<gfl.anm2.fb.EditorCurveFloat>) : gfl.anm2.fb.EditorCurveFloat.Pack(builder, _o.X);
    var _y = _o.Y == null ? default(Offset<gfl.anm2.fb.EditorCurveFloat>) : gfl.anm2.fb.EditorCurveFloat.Pack(builder, _o.Y);
    var _z = _o.Z == null ? default(Offset<gfl.anm2.fb.EditorCurveFloat>) : gfl.anm2.fb.EditorCurveFloat.Pack(builder, _o.Z);
    var _w = _o.W == null ? default(Offset<gfl.anm2.fb.EditorCurveFloat>) : gfl.anm2.fb.EditorCurveFloat.Pack(builder, _o.W);
    return CreateEditorCurveFloat4(
      builder,
      _x,
      _y,
      _z,
      _w);
  }
};

public class EditorCurveFloat4T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public gfl.anm2.fb.EditorCurveFloatT X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public gfl.anm2.fb.EditorCurveFloatT Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public gfl.anm2.fb.EditorCurveFloatT Z { get; set; }
  [Newtonsoft.Json.JsonProperty("w")]
  public gfl.anm2.fb.EditorCurveFloatT W { get; set; }

  public EditorCurveFloat4T() {
    this.X = null;
    this.Y = null;
    this.Z = null;
    this.W = null;
  }
}

public struct EventValueType_Int : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Int GetRootAsEventValueType_Int(ByteBuffer _bb) { return GetRootAsEventValueType_Int(_bb, new EventValueType_Int()); }
  public static EventValueType_Int GetRootAsEventValueType_Int(ByteBuffer _bb, EventValueType_Int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<gfl.anm2.fb.EventValueType_Int> CreateEventValueType_Int(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    EventValueType_Int.AddValue(builder, value);
    return EventValueType_Int.EndEventValueType_Int(builder);
  }

  public static void StartEventValueType_Int(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<gfl.anm2.fb.EventValueType_Int> EndEventValueType_Int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValueType_Int>(o);
  }
  public EventValueType_IntT UnPack() {
    var _o = new EventValueType_IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_IntT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.EventValueType_Int> Pack(FlatBufferBuilder builder, EventValueType_IntT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValueType_Int>);
    return CreateEventValueType_Int(
      builder,
      _o.Value);
  }
};

public class EventValueType_IntT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public int Value { get; set; }

  public EventValueType_IntT() {
    this.Value = 0;
  }
}

public struct EventValueType_Float : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Float GetRootAsEventValueType_Float(ByteBuffer _bb) { return GetRootAsEventValueType_Float(_bb, new EventValueType_Float()); }
  public static EventValueType_Float GetRootAsEventValueType_Float(ByteBuffer _bb, EventValueType_Float obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Float __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.EventValueType_Float> CreateEventValueType_Float(FlatBufferBuilder builder,
      float value = 0.0f) {
    builder.StartTable(1);
    EventValueType_Float.AddValue(builder, value);
    return EventValueType_Float.EndEventValueType_Float(builder);
  }

  public static void StartEventValueType_Float(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, float value) { builder.AddFloat(0, value, 0.0f); }
  public static Offset<gfl.anm2.fb.EventValueType_Float> EndEventValueType_Float(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValueType_Float>(o);
  }
  public EventValueType_FloatT UnPack() {
    var _o = new EventValueType_FloatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_FloatT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.EventValueType_Float> Pack(FlatBufferBuilder builder, EventValueType_FloatT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValueType_Float>);
    return CreateEventValueType_Float(
      builder,
      _o.Value);
  }
};

public class EventValueType_FloatT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public float Value { get; set; }

  public EventValueType_FloatT() {
    this.Value = 0.0f;
  }
}

public struct EventValueType_Bool : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_Bool GetRootAsEventValueType_Bool(ByteBuffer _bb) { return GetRootAsEventValueType_Bool(_bb, new EventValueType_Bool()); }
  public static EventValueType_Bool GetRootAsEventValueType_Bool(ByteBuffer _bb, EventValueType_Bool obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_Bool __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Value { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.EventValueType_Bool> CreateEventValueType_Bool(FlatBufferBuilder builder,
      bool value = false) {
    builder.StartTable(1);
    EventValueType_Bool.AddValue(builder, value);
    return EventValueType_Bool.EndEventValueType_Bool(builder);
  }

  public static void StartEventValueType_Bool(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, bool value) { builder.AddBool(0, value, false); }
  public static Offset<gfl.anm2.fb.EventValueType_Bool> EndEventValueType_Bool(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValueType_Bool>(o);
  }
  public EventValueType_BoolT UnPack() {
    var _o = new EventValueType_BoolT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_BoolT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.EventValueType_Bool> Pack(FlatBufferBuilder builder, EventValueType_BoolT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValueType_Bool>);
    return CreateEventValueType_Bool(
      builder,
      _o.Value);
  }
};

public class EventValueType_BoolT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public bool Value { get; set; }

  public EventValueType_BoolT() {
    this.Value = false;
  }
}

public struct EventValueType_String : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValueType_String GetRootAsEventValueType_String(ByteBuffer _bb) { return GetRootAsEventValueType_String(_bb, new EventValueType_String()); }
  public static EventValueType_String GetRootAsEventValueType_String(ByteBuffer _bb, EventValueType_String obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValueType_String __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.EventValueType_String> CreateEventValueType_String(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    EventValueType_String.AddValue(builder, valueOffset);
    return EventValueType_String.EndEventValueType_String(builder);
  }

  public static void StartEventValueType_String(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.EventValueType_String> EndEventValueType_String(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValueType_String>(o);
  }
  public EventValueType_StringT UnPack() {
    var _o = new EventValueType_StringT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueType_StringT _o) {
    _o.Value = this.Value;
  }
  public static Offset<gfl.anm2.fb.EventValueType_String> Pack(FlatBufferBuilder builder, EventValueType_StringT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValueType_String>);
    var _value = _o.Value == null ? default(StringOffset) : builder.CreateString(_o.Value);
    return CreateEventValueType_String(
      builder,
      _value);
  }
};

public class EventValueType_StringT
{
  [Newtonsoft.Json.JsonProperty("value")]
  public string Value { get; set; }

  public EventValueType_StringT() {
    this.Value = null;
  }
}

public struct EventValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventValue GetRootAsEventValue(ByteBuffer _bb) { return GetRootAsEventValue(_bb, new EventValue()); }
  public static EventValue GetRootAsEventValue(ByteBuffer _bb, EventValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.EventValueType ValueType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EventValueType)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.EventValueType.NONE; } }
  public TTable? Value<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.EventValue> CreateEventValue(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.EventValueType value_type = gfl.anm2.fb.EventValueType.NONE,
      int valueOffset = 0) {
    builder.StartTable(3);
    EventValue.AddValue(builder, valueOffset);
    EventValue.AddName(builder, nameOffset);
    EventValue.AddValueType(builder, value_type);
    return EventValue.EndEventValue(builder);
  }

  public static void StartEventValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueType(FlatBufferBuilder builder, gfl.anm2.fb.EventValueType valueType) { builder.AddByte(1, (byte)valueType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int valueOffset) { builder.AddOffset(2, valueOffset, 0); }
  public static Offset<gfl.anm2.fb.EventValue> EndEventValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventValue>(o);
  }
  public EventValueT UnPack() {
    var _o = new EventValueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventValueT _o) {
    _o.Name = this.Name;
    _o.Value = new gfl.anm2.fb.EventValueTypeUnion();
    _o.Value.Type = this.ValueType;
    switch (this.ValueType) {
      default: break;
      case gfl.anm2.fb.EventValueType.EventValueType_Int:
        _o.Value.Value = this.Value<gfl.anm2.fb.EventValueType_Int>().HasValue ? this.Value<gfl.anm2.fb.EventValueType_Int>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.EventValueType.EventValueType_Float:
        _o.Value.Value = this.Value<gfl.anm2.fb.EventValueType_Float>().HasValue ? this.Value<gfl.anm2.fb.EventValueType_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.EventValueType.EventValueType_Bool:
        _o.Value.Value = this.Value<gfl.anm2.fb.EventValueType_Bool>().HasValue ? this.Value<gfl.anm2.fb.EventValueType_Bool>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.EventValueType.EventValueType_String:
        _o.Value.Value = this.Value<gfl.anm2.fb.EventValueType_String>().HasValue ? this.Value<gfl.anm2.fb.EventValueType_String>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.EventValue> Pack(FlatBufferBuilder builder, EventValueT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventValue>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _value_type = _o.Value == null ? gfl.anm2.fb.EventValueType.NONE : _o.Value.Type;
    var _value = _o.Value == null ? 0 : gfl.anm2.fb.EventValueTypeUnion.Pack(builder, _o.Value);
    return CreateEventValue(
      builder,
      _name,
      _value_type,
      _value);
  }
};

public class EventValueT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("value_type")]
  private gfl.anm2.fb.EventValueType ValueType {
    get {
      return this.Value != null ? this.Value.Type : gfl.anm2.fb.EventValueType.NONE;
    }
    set {
      this.Value = new gfl.anm2.fb.EventValueTypeUnion();
      this.Value.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("value")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.EventValueTypeUnion_JsonConverter))]
  public gfl.anm2.fb.EventValueTypeUnion Value { get; set; }

  public EventValueT() {
    this.Name = null;
    this.Value = null;
  }
}

public struct MotionEventParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MotionEventParam GetRootAsMotionEventParam(ByteBuffer _bb) { return GetRootAsMotionEventParam(_bb, new MotionEventParam()); }
  public static MotionEventParam GetRootAsMotionEventParam(ByteBuffer _bb, MotionEventParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MotionEventParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Threashold { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.anm2.fb.EventValue? Values(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.EventValue?)(new gfl.anm2.fb.EventValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MotionEventParam> CreateMotionEventParam(FlatBufferBuilder builder,
      float threashold = 0.0f,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MotionEventParam.AddValues(builder, valuesOffset);
    MotionEventParam.AddThreashold(builder, threashold);
    return MotionEventParam.EndMotionEventParam(builder);
  }

  public static void StartMotionEventParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddThreashold(FlatBufferBuilder builder, float threashold) { builder.AddFloat(0, threashold, 0.0f); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MotionEventParam> EndMotionEventParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MotionEventParam>(o);
  }
  public MotionEventParamT UnPack() {
    var _o = new MotionEventParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MotionEventParamT _o) {
    _o.Threashold = this.Threashold;
    _o.Values = new List<gfl.anm2.fb.EventValueT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.MotionEventParam> Pack(FlatBufferBuilder builder, MotionEventParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MotionEventParam>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new Offset<gfl.anm2.fb.EventValue>[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = gfl.anm2.fb.EventValue.Pack(builder, _o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    return CreateMotionEventParam(
      builder,
      _o.Threashold,
      _values);
  }
};

public class MotionEventParamT
{
  [Newtonsoft.Json.JsonProperty("threashold")]
  public float Threashold { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.EventValueT> Values { get; set; }

  public MotionEventParamT() {
    this.Threashold = 0.0f;
    this.Values = null;
  }
}

public struct MotionDetectorBaseParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MotionDetectorBaseParam GetRootAsMotionDetectorBaseParam(ByteBuffer _bb) { return GetRootAsMotionDetectorBaseParam(_bb, new MotionDetectorBaseParam()); }
  public static MotionDetectorBaseParam GetRootAsMotionDetectorBaseParam(ByteBuffer _bb, MotionDetectorBaseParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MotionDetectorBaseParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionEventParam? Events(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionEventParam?)(new gfl.anm2.fb.MotionEventParam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TemplateName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTemplateNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTemplateNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTemplateNameArray() { return __p.__vector_as_array<byte>(6); }
  public float RepeatPreventTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool CanTriggerMultipleEvents { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsEnabled { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.MotionDetectorBaseParam> CreateMotionDetectorBaseParam(FlatBufferBuilder builder,
      VectorOffset eventsOffset = default(VectorOffset),
      StringOffset templateNameOffset = default(StringOffset),
      float repeatPreventTime = 0.0f,
      bool canTriggerMultipleEvents = false,
      bool isEnabled = false) {
    builder.StartTable(5);
    MotionDetectorBaseParam.AddRepeatPreventTime(builder, repeatPreventTime);
    MotionDetectorBaseParam.AddTemplateName(builder, templateNameOffset);
    MotionDetectorBaseParam.AddEvents(builder, eventsOffset);
    MotionDetectorBaseParam.AddIsEnabled(builder, isEnabled);
    MotionDetectorBaseParam.AddCanTriggerMultipleEvents(builder, canTriggerMultipleEvents);
    return MotionDetectorBaseParam.EndMotionDetectorBaseParam(builder);
  }

  public static void StartMotionDetectorBaseParam(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(0, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionEventParam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionEventParam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTemplateName(FlatBufferBuilder builder, StringOffset templateNameOffset) { builder.AddOffset(1, templateNameOffset.Value, 0); }
  public static void AddRepeatPreventTime(FlatBufferBuilder builder, float repeatPreventTime) { builder.AddFloat(2, repeatPreventTime, 0.0f); }
  public static void AddCanTriggerMultipleEvents(FlatBufferBuilder builder, bool canTriggerMultipleEvents) { builder.AddBool(3, canTriggerMultipleEvents, false); }
  public static void AddIsEnabled(FlatBufferBuilder builder, bool isEnabled) { builder.AddBool(4, isEnabled, false); }
  public static Offset<gfl.anm2.fb.MotionDetectorBaseParam> EndMotionDetectorBaseParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MotionDetectorBaseParam>(o);
  }
  public MotionDetectorBaseParamT UnPack() {
    var _o = new MotionDetectorBaseParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MotionDetectorBaseParamT _o) {
    _o.Events = new List<gfl.anm2.fb.MotionEventParamT>();
    for (var _j = 0; _j < this.EventsLength; ++_j) {_o.Events.Add(this.Events(_j).HasValue ? this.Events(_j).Value.UnPack() : null);}
    _o.TemplateName = this.TemplateName;
    _o.RepeatPreventTime = this.RepeatPreventTime;
    _o.CanTriggerMultipleEvents = this.CanTriggerMultipleEvents;
    _o.IsEnabled = this.IsEnabled;
  }
  public static Offset<gfl.anm2.fb.MotionDetectorBaseParam> Pack(FlatBufferBuilder builder, MotionDetectorBaseParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>);
    var _events = default(VectorOffset);
    if (_o.Events != null) {
      var __events = new Offset<gfl.anm2.fb.MotionEventParam>[_o.Events.Count];
      for (var _j = 0; _j < __events.Length; ++_j) { __events[_j] = gfl.anm2.fb.MotionEventParam.Pack(builder, _o.Events[_j]); }
      _events = CreateEventsVector(builder, __events);
    }
    var _templateName = _o.TemplateName == null ? default(StringOffset) : builder.CreateString(_o.TemplateName);
    return CreateMotionDetectorBaseParam(
      builder,
      _events,
      _templateName,
      _o.RepeatPreventTime,
      _o.CanTriggerMultipleEvents,
      _o.IsEnabled);
  }
};

public class MotionDetectorBaseParamT
{
  [Newtonsoft.Json.JsonProperty("events")]
  public List<gfl.anm2.fb.MotionEventParamT> Events { get; set; }
  [Newtonsoft.Json.JsonProperty("templateName")]
  public string TemplateName { get; set; }
  [Newtonsoft.Json.JsonProperty("repeatPreventTime")]
  public float RepeatPreventTime { get; set; }
  [Newtonsoft.Json.JsonProperty("canTriggerMultipleEvents")]
  public bool CanTriggerMultipleEvents { get; set; }
  [Newtonsoft.Json.JsonProperty("isEnabled")]
  public bool IsEnabled { get; set; }

  public MotionDetectorBaseParamT() {
    this.Events = null;
    this.TemplateName = null;
    this.RepeatPreventTime = 0.0f;
    this.CanTriggerMultipleEvents = false;
    this.IsEnabled = false;
  }
}

public struct StateDetail_Any : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StateDetail_Any GetRootAsStateDetail_Any(ByteBuffer _bb) { return GetRootAsStateDetail_Any(_bb, new StateDetail_Any()); }
  public static StateDetail_Any GetRootAsStateDetail_Any(ByteBuffer _bb, StateDetail_Any obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StateDetail_Any __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.AnyType Type { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.AnyType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.AnyType.Normal; } }

  public static Offset<gfl.anm2.fb.StateDetail_Any> CreateStateDetail_Any(FlatBufferBuilder builder,
      gfl.anm2.fb.AnyType type = gfl.anm2.fb.AnyType.Normal) {
    builder.StartTable(1);
    StateDetail_Any.AddType(builder, type);
    return StateDetail_Any.EndStateDetail_Any(builder);
  }

  public static void StartStateDetail_Any(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddType(FlatBufferBuilder builder, gfl.anm2.fb.AnyType type) { builder.AddUint(0, (uint)type, 0); }
  public static Offset<gfl.anm2.fb.StateDetail_Any> EndStateDetail_Any(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.StateDetail_Any>(o);
  }
  public StateDetail_AnyT UnPack() {
    var _o = new StateDetail_AnyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StateDetail_AnyT _o) {
    _o.Type = this.Type;
  }
  public static Offset<gfl.anm2.fb.StateDetail_Any> Pack(FlatBufferBuilder builder, StateDetail_AnyT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.StateDetail_Any>);
    return CreateStateDetail_Any(
      builder,
      _o.Type);
  }
};

public class StateDetail_AnyT
{
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.anm2.fb.AnyType Type { get; set; }

  public StateDetail_AnyT() {
    this.Type = gfl.anm2.fb.AnyType.Normal;
  }
}

public struct FloatOrParameter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FloatOrParameter GetRootAsFloatOrParameter(ByteBuffer _bb) { return GetRootAsFloatOrParameter(_bb, new FloatOrParameter()); }
  public static FloatOrParameter GetRootAsFloatOrParameter(ByteBuffer _bb, FloatOrParameter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FloatOrParameter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Constant { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)1.0f; } }
  public string ParameterName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParameterNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetParameterNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetParameterNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.FloatOrParameter> CreateFloatOrParameter(FlatBufferBuilder builder,
      float constant = 1.0f,
      StringOffset parameterNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    FloatOrParameter.AddParameterName(builder, parameterNameOffset);
    FloatOrParameter.AddConstant(builder, constant);
    return FloatOrParameter.EndFloatOrParameter(builder);
  }

  public static void StartFloatOrParameter(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddConstant(FlatBufferBuilder builder, float constant) { builder.AddFloat(0, constant, 1.0f); }
  public static void AddParameterName(FlatBufferBuilder builder, StringOffset parameterNameOffset) { builder.AddOffset(1, parameterNameOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.FloatOrParameter> EndFloatOrParameter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.FloatOrParameter>(o);
  }
  public FloatOrParameterT UnPack() {
    var _o = new FloatOrParameterT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FloatOrParameterT _o) {
    _o.Constant = this.Constant;
    _o.ParameterName = this.ParameterName;
  }
  public static Offset<gfl.anm2.fb.FloatOrParameter> Pack(FlatBufferBuilder builder, FloatOrParameterT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.FloatOrParameter>);
    var _parameterName = _o.ParameterName == null ? default(StringOffset) : builder.CreateString(_o.ParameterName);
    return CreateFloatOrParameter(
      builder,
      _o.Constant,
      _parameterName);
  }
};

public class FloatOrParameterT
{
  [Newtonsoft.Json.JsonProperty("constant")]
  public float Constant { get; set; }
  [Newtonsoft.Json.JsonProperty("parameterName")]
  public string ParameterName { get; set; }

  public FloatOrParameterT() {
    this.Constant = 1.0f;
    this.ParameterName = null;
  }
}


}
