// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CurveDataUnit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CurveDataUnit GetRootAsCurveDataUnit(ByteBuffer _bb) { return GetRootAsCurveDataUnit(_bb, new CurveDataUnit()); }
  public static CurveDataUnit GetRootAsCurveDataUnit(ByteBuffer _bb, CurveDataUnit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CurveDataUnit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.CurveData? CurveData { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.CurveData?)(new gfl.anm2.fb.CurveData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.CurveDataUnit> CreateCurveDataUnit(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.CurveData> curveDataOffset = default(Offset<gfl.anm2.fb.CurveData>)) {
    builder.StartTable(2);
    CurveDataUnit.AddCurveData(builder, curveDataOffset);
    CurveDataUnit.AddName(builder, nameOffset);
    return CurveDataUnit.EndCurveDataUnit(builder);
  }

  public static void StartCurveDataUnit(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddCurveData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveData> curveDataOffset) { builder.AddOffset(1, curveDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.CurveDataUnit> EndCurveDataUnit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CurveDataUnit>(o);
  }
  public CurveDataUnitT UnPack() {
    var _o = new CurveDataUnitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CurveDataUnitT _o) {
    _o.Name = this.Name;
    _o.CurveData = this.CurveData.HasValue ? this.CurveData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.CurveDataUnit> Pack(FlatBufferBuilder builder, CurveDataUnitT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CurveDataUnit>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _curveData = _o.CurveData == null ? default(Offset<gfl.anm2.fb.CurveData>) : gfl.anm2.fb.CurveData.Pack(builder, _o.CurveData);
    return CreateCurveDataUnit(
      builder,
      _name,
      _curveData);
  }
};

public class CurveDataUnitT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("curveData")]
  public gfl.anm2.fb.CurveDataT CurveData { get; set; }

  public CurveDataUnitT() {
    this.Name = null;
    this.CurveData = null;
  }
}

public struct CurveDataSet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CurveDataSet GetRootAsCurveDataSet(ByteBuffer _bb) { return GetRootAsCurveDataSet(_bb, new CurveDataSet()); }
  public static CurveDataSet GetRootAsCurveDataSet(ByteBuffer _bb, CurveDataSet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CurveDataSet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.CurveDataUnit? FloatCurveList(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.CurveDataUnit?)(new gfl.anm2.fb.CurveDataUnit()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FloatCurveListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.anm2.fb.CurveDataUnit? Float4CurveList(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.CurveDataUnit?)(new gfl.anm2.fb.CurveDataUnit()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Float4CurveListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.CurveDataSet> CreateCurveDataSet(FlatBufferBuilder builder,
      VectorOffset floatCurveListOffset = default(VectorOffset),
      VectorOffset float4CurveListOffset = default(VectorOffset)) {
    builder.StartTable(2);
    CurveDataSet.AddFloat4CurveList(builder, float4CurveListOffset);
    CurveDataSet.AddFloatCurveList(builder, floatCurveListOffset);
    return CurveDataSet.EndCurveDataSet(builder);
  }

  public static void StartCurveDataSet(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFloatCurveList(FlatBufferBuilder builder, VectorOffset floatCurveListOffset) { builder.AddOffset(0, floatCurveListOffset.Value, 0); }
  public static VectorOffset CreateFloatCurveListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataUnit>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloatCurveListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataUnit>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatCurveListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloat4CurveList(FlatBufferBuilder builder, VectorOffset float4CurveListOffset) { builder.AddOffset(1, float4CurveListOffset.Value, 0); }
  public static VectorOffset CreateFloat4CurveListVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataUnit>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFloat4CurveListVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataUnit>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloat4CurveListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.CurveDataSet> EndCurveDataSet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.CurveDataSet>(o);
  }
  public static void FinishCurveDataSetBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataSet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCurveDataSetBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.CurveDataSet> offset) { builder.FinishSizePrefixed(offset.Value); }
  public CurveDataSetT UnPack() {
    var _o = new CurveDataSetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CurveDataSetT _o) {
    _o.FloatCurveList = new List<gfl.anm2.fb.CurveDataUnitT>();
    for (var _j = 0; _j < this.FloatCurveListLength; ++_j) {_o.FloatCurveList.Add(this.FloatCurveList(_j).HasValue ? this.FloatCurveList(_j).Value.UnPack() : null);}
    _o.Float4CurveList = new List<gfl.anm2.fb.CurveDataUnitT>();
    for (var _j = 0; _j < this.Float4CurveListLength; ++_j) {_o.Float4CurveList.Add(this.Float4CurveList(_j).HasValue ? this.Float4CurveList(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.CurveDataSet> Pack(FlatBufferBuilder builder, CurveDataSetT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.CurveDataSet>);
    var _floatCurveList = default(VectorOffset);
    if (_o.FloatCurveList != null) {
      var __floatCurveList = new Offset<gfl.anm2.fb.CurveDataUnit>[_o.FloatCurveList.Count];
      for (var _j = 0; _j < __floatCurveList.Length; ++_j) { __floatCurveList[_j] = gfl.anm2.fb.CurveDataUnit.Pack(builder, _o.FloatCurveList[_j]); }
      _floatCurveList = CreateFloatCurveListVector(builder, __floatCurveList);
    }
    var _float4CurveList = default(VectorOffset);
    if (_o.Float4CurveList != null) {
      var __float4CurveList = new Offset<gfl.anm2.fb.CurveDataUnit>[_o.Float4CurveList.Count];
      for (var _j = 0; _j < __float4CurveList.Length; ++_j) { __float4CurveList[_j] = gfl.anm2.fb.CurveDataUnit.Pack(builder, _o.Float4CurveList[_j]); }
      _float4CurveList = CreateFloat4CurveListVector(builder, __float4CurveList);
    }
    return CreateCurveDataSet(
      builder,
      _floatCurveList,
      _float4CurveList);
  }
};

public class CurveDataSetT
{
  [Newtonsoft.Json.JsonProperty("floatCurveList")]
  public List<gfl.anm2.fb.CurveDataUnitT> FloatCurveList { get; set; }
  [Newtonsoft.Json.JsonProperty("float4CurveList")]
  public List<gfl.anm2.fb.CurveDataUnitT> Float4CurveList { get; set; }

  public CurveDataSetT() {
    this.FloatCurveList = null;
    this.Float4CurveList = null;
  }

  public static CurveDataSetT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<CurveDataSetT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static CurveDataSetT DeserializeFromBinary(byte[] fbBuffer) {
    return CurveDataSet.GetRootAsCurveDataSet(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CurveDataSet.FinishCurveDataSetBuffer(fbb, CurveDataSet.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
