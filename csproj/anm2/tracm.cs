// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MaterialAnimeFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MaterialAnimeFilePath GetRootAsMaterialAnimeFilePath(ByteBuffer _bb) { return GetRootAsMaterialAnimeFilePath(_bb, new MaterialAnimeFilePath()); }
  public static MaterialAnimeFilePath GetRootAsMaterialAnimeFilePath(ByteBuffer _bb, MaterialAnimeFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MaterialAnimeFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.MaterialAnimeFilePath> CreateMaterialAnimeFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    MaterialAnimeFilePath.AddPath(builder, pathOffset);
    return MaterialAnimeFilePath.EndMaterialAnimeFilePath(builder);
  }

  public static void StartMaterialAnimeFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MaterialAnimeFilePath> EndMaterialAnimeFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MaterialAnimeFilePath>(o);
  }
  public MaterialAnimeFilePathT UnPack() {
    var _o = new MaterialAnimeFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MaterialAnimeFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.MaterialAnimeFilePath> Pack(FlatBufferBuilder builder, MaterialAnimeFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MaterialAnimeFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateMaterialAnimeFilePath(
      builder,
      _path);
  }
};

public class MaterialAnimeFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public MaterialAnimeFilePathT() {
    this.Path = null;
  }
}

public struct VisibilityAnimeFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VisibilityAnimeFilePath GetRootAsVisibilityAnimeFilePath(ByteBuffer _bb) { return GetRootAsVisibilityAnimeFilePath(_bb, new VisibilityAnimeFilePath()); }
  public static VisibilityAnimeFilePath GetRootAsVisibilityAnimeFilePath(ByteBuffer _bb, VisibilityAnimeFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VisibilityAnimeFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.VisibilityAnimeFilePath> CreateVisibilityAnimeFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    VisibilityAnimeFilePath.AddPath(builder, pathOffset);
    return VisibilityAnimeFilePath.EndVisibilityAnimeFilePath(builder);
  }

  public static void StartVisibilityAnimeFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.VisibilityAnimeFilePath> EndVisibilityAnimeFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.VisibilityAnimeFilePath>(o);
  }
  public VisibilityAnimeFilePathT UnPack() {
    var _o = new VisibilityAnimeFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VisibilityAnimeFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.VisibilityAnimeFilePath> Pack(FlatBufferBuilder builder, VisibilityAnimeFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.VisibilityAnimeFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateVisibilityAnimeFilePath(
      builder,
      _path);
  }
};

public class VisibilityAnimeFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public VisibilityAnimeFilePathT() {
    this.Path = null;
  }
}

public struct BlendShapeAnimeFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BlendShapeAnimeFilePath GetRootAsBlendShapeAnimeFilePath(ByteBuffer _bb) { return GetRootAsBlendShapeAnimeFilePath(_bb, new BlendShapeAnimeFilePath()); }
  public static BlendShapeAnimeFilePath GetRootAsBlendShapeAnimeFilePath(ByteBuffer _bb, BlendShapeAnimeFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlendShapeAnimeFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<gfl.anm2.fb.BlendShapeAnimeFilePath> CreateBlendShapeAnimeFilePath(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(1);
    BlendShapeAnimeFilePath.AddPath(builder, pathOffset);
    return BlendShapeAnimeFilePath.EndBlendShapeAnimeFilePath(builder);
  }

  public static void StartBlendShapeAnimeFilePath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.BlendShapeAnimeFilePath> EndBlendShapeAnimeFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.BlendShapeAnimeFilePath>(o);
  }
  public BlendShapeAnimeFilePathT UnPack() {
    var _o = new BlendShapeAnimeFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BlendShapeAnimeFilePathT _o) {
    _o.Path = this.Path;
  }
  public static Offset<gfl.anm2.fb.BlendShapeAnimeFilePath> Pack(FlatBufferBuilder builder, BlendShapeAnimeFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.BlendShapeAnimeFilePath>);
    var _path = _o.Path == null ? default(StringOffset) : builder.CreateString(_o.Path);
    return CreateBlendShapeAnimeFilePath(
      builder,
      _path);
  }
};

public class BlendShapeAnimeFilePathT
{
  [Newtonsoft.Json.JsonProperty("path")]
  public string Path { get; set; }

  public BlendShapeAnimeFilePathT() {
    this.Path = null;
  }
}

public struct MeshAnimeFilePath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshAnimeFilePath GetRootAsMeshAnimeFilePath(ByteBuffer _bb) { return GetRootAsMeshAnimeFilePath(_bb, new MeshAnimeFilePath()); }
  public static MeshAnimeFilePath GetRootAsMeshAnimeFilePath(ByteBuffer _bb, MeshAnimeFilePath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshAnimeFilePath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MeshName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeshNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMeshNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMeshNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.MaterialAnimeFilePath? MaterialAnimeFilePath { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MaterialAnimeFilePath?)(new gfl.anm2.fb.MaterialAnimeFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.VisibilityAnimeFilePath? VisibilityAnimeFilePath { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.VisibilityAnimeFilePath?)(new gfl.anm2.fb.VisibilityAnimeFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.BlendShapeAnimeFilePath? BlendShapeAnimeFilePath { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.BlendShapeAnimeFilePath?)(new gfl.anm2.fb.BlendShapeAnimeFilePath()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MaterialAnimationData? MaterialData { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.MaterialAnimationData?)(new gfl.anm2.fb.MaterialAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.VisibilityMeshAnimationData? VisibilityData { get { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.VisibilityMeshAnimationData?)(new gfl.anm2.fb.VisibilityMeshAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.BlendShapeAnimationData? BlendShapeData { get { int o = __p.__offset(16); return o != 0 ? (gfl.anm2.fb.BlendShapeAnimationData?)(new gfl.anm2.fb.BlendShapeAnimationData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.MeshAnimeFilePath> CreateMeshAnimeFilePath(FlatBufferBuilder builder,
      StringOffset meshNameOffset = default(StringOffset),
      Offset<gfl.anm2.fb.MaterialAnimeFilePath> materialAnimeFilePathOffset = default(Offset<gfl.anm2.fb.MaterialAnimeFilePath>),
      Offset<gfl.anm2.fb.VisibilityAnimeFilePath> visibilityAnimeFilePathOffset = default(Offset<gfl.anm2.fb.VisibilityAnimeFilePath>),
      Offset<gfl.anm2.fb.BlendShapeAnimeFilePath> blendShapeAnimeFilePathOffset = default(Offset<gfl.anm2.fb.BlendShapeAnimeFilePath>),
      Offset<gfl.anm2.fb.MaterialAnimationData> materialDataOffset = default(Offset<gfl.anm2.fb.MaterialAnimationData>),
      Offset<gfl.anm2.fb.VisibilityMeshAnimationData> visibilityDataOffset = default(Offset<gfl.anm2.fb.VisibilityMeshAnimationData>),
      Offset<gfl.anm2.fb.BlendShapeAnimationData> blendShapeDataOffset = default(Offset<gfl.anm2.fb.BlendShapeAnimationData>)) {
    builder.StartTable(7);
    MeshAnimeFilePath.AddBlendShapeData(builder, blendShapeDataOffset);
    MeshAnimeFilePath.AddVisibilityData(builder, visibilityDataOffset);
    MeshAnimeFilePath.AddMaterialData(builder, materialDataOffset);
    MeshAnimeFilePath.AddBlendShapeAnimeFilePath(builder, blendShapeAnimeFilePathOffset);
    MeshAnimeFilePath.AddVisibilityAnimeFilePath(builder, visibilityAnimeFilePathOffset);
    MeshAnimeFilePath.AddMaterialAnimeFilePath(builder, materialAnimeFilePathOffset);
    MeshAnimeFilePath.AddMeshName(builder, meshNameOffset);
    return MeshAnimeFilePath.EndMeshAnimeFilePath(builder);
  }

  public static void StartMeshAnimeFilePath(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddMeshName(FlatBufferBuilder builder, StringOffset meshNameOffset) { builder.AddOffset(0, meshNameOffset.Value, 0); }
  public static void AddMaterialAnimeFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialAnimeFilePath> materialAnimeFilePathOffset) { builder.AddOffset(1, materialAnimeFilePathOffset.Value, 0); }
  public static void AddVisibilityAnimeFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityAnimeFilePath> visibilityAnimeFilePathOffset) { builder.AddOffset(2, visibilityAnimeFilePathOffset.Value, 0); }
  public static void AddBlendShapeAnimeFilePath(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeAnimeFilePath> blendShapeAnimeFilePathOffset) { builder.AddOffset(3, blendShapeAnimeFilePathOffset.Value, 0); }
  public static void AddMaterialData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MaterialAnimationData> materialDataOffset) { builder.AddOffset(4, materialDataOffset.Value, 0); }
  public static void AddVisibilityData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.VisibilityMeshAnimationData> visibilityDataOffset) { builder.AddOffset(5, visibilityDataOffset.Value, 0); }
  public static void AddBlendShapeData(FlatBufferBuilder builder, Offset<gfl.anm2.fb.BlendShapeAnimationData> blendShapeDataOffset) { builder.AddOffset(6, blendShapeDataOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MeshAnimeFilePath> EndMeshAnimeFilePath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MeshAnimeFilePath>(o);
  }
  public MeshAnimeFilePathT UnPack() {
    var _o = new MeshAnimeFilePathT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshAnimeFilePathT _o) {
    _o.MeshName = this.MeshName;
    _o.MaterialAnimeFilePath = this.MaterialAnimeFilePath.HasValue ? this.MaterialAnimeFilePath.Value.UnPack() : null;
    _o.VisibilityAnimeFilePath = this.VisibilityAnimeFilePath.HasValue ? this.VisibilityAnimeFilePath.Value.UnPack() : null;
    _o.BlendShapeAnimeFilePath = this.BlendShapeAnimeFilePath.HasValue ? this.BlendShapeAnimeFilePath.Value.UnPack() : null;
    _o.MaterialData = this.MaterialData.HasValue ? this.MaterialData.Value.UnPack() : null;
    _o.VisibilityData = this.VisibilityData.HasValue ? this.VisibilityData.Value.UnPack() : null;
    _o.BlendShapeData = this.BlendShapeData.HasValue ? this.BlendShapeData.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.MeshAnimeFilePath> Pack(FlatBufferBuilder builder, MeshAnimeFilePathT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MeshAnimeFilePath>);
    var _meshName = _o.MeshName == null ? default(StringOffset) : builder.CreateString(_o.MeshName);
    var _materialAnimeFilePath = _o.MaterialAnimeFilePath == null ? default(Offset<gfl.anm2.fb.MaterialAnimeFilePath>) : gfl.anm2.fb.MaterialAnimeFilePath.Pack(builder, _o.MaterialAnimeFilePath);
    var _visibilityAnimeFilePath = _o.VisibilityAnimeFilePath == null ? default(Offset<gfl.anm2.fb.VisibilityAnimeFilePath>) : gfl.anm2.fb.VisibilityAnimeFilePath.Pack(builder, _o.VisibilityAnimeFilePath);
    var _blendShapeAnimeFilePath = _o.BlendShapeAnimeFilePath == null ? default(Offset<gfl.anm2.fb.BlendShapeAnimeFilePath>) : gfl.anm2.fb.BlendShapeAnimeFilePath.Pack(builder, _o.BlendShapeAnimeFilePath);
    var _materialData = _o.MaterialData == null ? default(Offset<gfl.anm2.fb.MaterialAnimationData>) : gfl.anm2.fb.MaterialAnimationData.Pack(builder, _o.MaterialData);
    var _visibilityData = _o.VisibilityData == null ? default(Offset<gfl.anm2.fb.VisibilityMeshAnimationData>) : gfl.anm2.fb.VisibilityMeshAnimationData.Pack(builder, _o.VisibilityData);
    var _blendShapeData = _o.BlendShapeData == null ? default(Offset<gfl.anm2.fb.BlendShapeAnimationData>) : gfl.anm2.fb.BlendShapeAnimationData.Pack(builder, _o.BlendShapeData);
    return CreateMeshAnimeFilePath(
      builder,
      _meshName,
      _materialAnimeFilePath,
      _visibilityAnimeFilePath,
      _blendShapeAnimeFilePath,
      _materialData,
      _visibilityData,
      _blendShapeData);
  }
};

public class MeshAnimeFilePathT
{
  [Newtonsoft.Json.JsonProperty("meshName")]
  public string MeshName { get; set; }
  [Newtonsoft.Json.JsonProperty("materialAnimeFilePath")]
  public gfl.anm2.fb.MaterialAnimeFilePathT MaterialAnimeFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityAnimeFilePath")]
  public gfl.anm2.fb.VisibilityAnimeFilePathT VisibilityAnimeFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("blendShapeAnimeFilePath")]
  public gfl.anm2.fb.BlendShapeAnimeFilePathT BlendShapeAnimeFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("materialData")]
  public gfl.anm2.fb.MaterialAnimationDataT MaterialData { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityData")]
  public gfl.anm2.fb.VisibilityMeshAnimationDataT VisibilityData { get; set; }
  [Newtonsoft.Json.JsonProperty("blendShapeData")]
  public gfl.anm2.fb.BlendShapeAnimationDataT BlendShapeData { get; set; }

  public MeshAnimeFilePathT() {
    this.MeshName = null;
    this.MaterialAnimeFilePath = null;
    this.VisibilityAnimeFilePath = null;
    this.BlendShapeAnimeFilePath = null;
    this.MaterialData = null;
    this.VisibilityData = null;
    this.BlendShapeData = null;
  }
}

public struct MeshAnimeConfigData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MeshAnimeConfigData GetRootAsMeshAnimeConfigData(ByteBuffer _bb) { return GetRootAsMeshAnimeConfigData(_bb, new MeshAnimeConfigData()); }
  public static MeshAnimeConfigData GetRootAsMeshAnimeConfigData(ByteBuffer _bb, MeshAnimeConfigData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshAnimeConfigData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.MeshAnimeFilePath? MeshAnimePaths(int j) { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.MeshAnimeFilePath?)(new gfl.anm2.fb.MeshAnimeFilePath()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshAnimePathsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte MaterialAnimeCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte VisibilityAnimeCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte BlendShapeAnimeCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<gfl.anm2.fb.MeshAnimeConfigData> CreateMeshAnimeConfigData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      VectorOffset meshAnimePathsOffset = default(VectorOffset),
      byte materialAnimeCount = 0,
      byte visibilityAnimeCount = 0,
      byte blendShapeAnimeCount = 0) {
    builder.StartTable(5);
    MeshAnimeConfigData.AddMeshAnimePaths(builder, meshAnimePathsOffset);
    MeshAnimeConfigData.AddFrameSetting(builder, frameSettingOffset);
    MeshAnimeConfigData.AddBlendShapeAnimeCount(builder, blendShapeAnimeCount);
    MeshAnimeConfigData.AddVisibilityAnimeCount(builder, visibilityAnimeCount);
    MeshAnimeConfigData.AddMaterialAnimeCount(builder, materialAnimeCount);
    return MeshAnimeConfigData.EndMeshAnimeConfigData(builder);
  }

  public static void StartMeshAnimeConfigData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddMeshAnimePaths(FlatBufferBuilder builder, VectorOffset meshAnimePathsOffset) { builder.AddOffset(1, meshAnimePathsOffset.Value, 0); }
  public static VectorOffset CreateMeshAnimePathsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshAnimeFilePath>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMeshAnimePathsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshAnimeFilePath>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMeshAnimePathsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMaterialAnimeCount(FlatBufferBuilder builder, byte materialAnimeCount) { builder.AddByte(2, materialAnimeCount, 0); }
  public static void AddVisibilityAnimeCount(FlatBufferBuilder builder, byte visibilityAnimeCount) { builder.AddByte(3, visibilityAnimeCount, 0); }
  public static void AddBlendShapeAnimeCount(FlatBufferBuilder builder, byte blendShapeAnimeCount) { builder.AddByte(4, blendShapeAnimeCount, 0); }
  public static Offset<gfl.anm2.fb.MeshAnimeConfigData> EndMeshAnimeConfigData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MeshAnimeConfigData>(o);
  }
  public static void FinishMeshAnimeConfigDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshAnimeConfigData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMeshAnimeConfigDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MeshAnimeConfigData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MeshAnimeConfigDataT UnPack() {
    var _o = new MeshAnimeConfigDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshAnimeConfigDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.MeshAnimePaths = new List<gfl.anm2.fb.MeshAnimeFilePathT>();
    for (var _j = 0; _j < this.MeshAnimePathsLength; ++_j) {_o.MeshAnimePaths.Add(this.MeshAnimePaths(_j).HasValue ? this.MeshAnimePaths(_j).Value.UnPack() : null);}
    _o.MaterialAnimeCount = this.MaterialAnimeCount;
    _o.VisibilityAnimeCount = this.VisibilityAnimeCount;
    _o.BlendShapeAnimeCount = this.BlendShapeAnimeCount;
  }
  public static Offset<gfl.anm2.fb.MeshAnimeConfigData> Pack(FlatBufferBuilder builder, MeshAnimeConfigDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MeshAnimeConfigData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _meshAnimePaths = default(VectorOffset);
    if (_o.MeshAnimePaths != null) {
      var __meshAnimePaths = new Offset<gfl.anm2.fb.MeshAnimeFilePath>[_o.MeshAnimePaths.Count];
      for (var _j = 0; _j < __meshAnimePaths.Length; ++_j) { __meshAnimePaths[_j] = gfl.anm2.fb.MeshAnimeFilePath.Pack(builder, _o.MeshAnimePaths[_j]); }
      _meshAnimePaths = CreateMeshAnimePathsVector(builder, __meshAnimePaths);
    }
    return CreateMeshAnimeConfigData(
      builder,
      _frameSetting,
      _meshAnimePaths,
      _o.MaterialAnimeCount,
      _o.VisibilityAnimeCount,
      _o.BlendShapeAnimeCount);
  }
};

public class MeshAnimeConfigDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("meshAnimePaths")]
  public List<gfl.anm2.fb.MeshAnimeFilePathT> MeshAnimePaths { get; set; }
  [Newtonsoft.Json.JsonProperty("materialAnimeCount")]
  public byte MaterialAnimeCount { get; set; }
  [Newtonsoft.Json.JsonProperty("visibilityAnimeCount")]
  public byte VisibilityAnimeCount { get; set; }
  [Newtonsoft.Json.JsonProperty("blendShapeAnimeCount")]
  public byte BlendShapeAnimeCount { get; set; }

  public MeshAnimeConfigDataT() {
    this.FrameSetting = null;
    this.MeshAnimePaths = null;
    this.MaterialAnimeCount = 0;
    this.VisibilityAnimeCount = 0;
    this.BlendShapeAnimeCount = 0;
  }

  public static MeshAnimeConfigDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MeshAnimeConfigDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MeshAnimeConfigDataT DeserializeFromBinary(byte[] fbBuffer) {
    return MeshAnimeConfigData.GetRootAsMeshAnimeConfigData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MeshAnimeConfigData.FinishMeshAnimeConfigDataBuffer(fbb, MeshAnimeConfigData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
