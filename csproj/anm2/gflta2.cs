// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightData GetRootAsLightData(ByteBuffer _bb) { return GetRootAsLightData(_bb, new LightData()); }
  public static LightData GetRootAsLightData(ByteBuffer _bb, LightData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public gfl.anm2.fb.KeyData_Float IntensitiesType { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.KeyData_Float)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Float.NONE; } }
  public TTable? Intensities<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Float ConeAnglesType { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.KeyData_Float)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Float.NONE; } }
  public TTable? ConeAngles<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Vector3 ColorsType { get { int o = __p.__offset(14); return o != 0 ? (gfl.anm2.fb.KeyData_Vector3)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Vector3.NONE; } }
  public TTable? Colors<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(16); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Vector3 DirectionsType { get { int o = __p.__offset(18); return o != 0 ? (gfl.anm2.fb.KeyData_Vector3)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Vector3.NONE; } }
  public TTable? Directions<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(20); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public gfl.anm2.fb.KeyData_Vector3 PositionsType { get { int o = __p.__offset(22); return o != 0 ? (gfl.anm2.fb.KeyData_Vector3)__p.bb.Get(o + __p.bb_pos) : gfl.anm2.fb.KeyData_Vector3.NONE; } }
  public TTable? Positions<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(24); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<gfl.anm2.fb.LightData> CreateLightData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      gfl.anm2.fb.KeyData_Float intensities_type = gfl.anm2.fb.KeyData_Float.NONE,
      int intensitiesOffset = 0,
      gfl.anm2.fb.KeyData_Float coneAngles_type = gfl.anm2.fb.KeyData_Float.NONE,
      int coneAnglesOffset = 0,
      gfl.anm2.fb.KeyData_Vector3 colors_type = gfl.anm2.fb.KeyData_Vector3.NONE,
      int colorsOffset = 0,
      gfl.anm2.fb.KeyData_Vector3 directions_type = gfl.anm2.fb.KeyData_Vector3.NONE,
      int directionsOffset = 0,
      gfl.anm2.fb.KeyData_Vector3 positions_type = gfl.anm2.fb.KeyData_Vector3.NONE,
      int positionsOffset = 0) {
    builder.StartTable(11);
    LightData.AddPositions(builder, positionsOffset);
    LightData.AddDirections(builder, directionsOffset);
    LightData.AddColors(builder, colorsOffset);
    LightData.AddConeAngles(builder, coneAnglesOffset);
    LightData.AddIntensities(builder, intensitiesOffset);
    LightData.AddName(builder, nameOffset);
    LightData.AddPositionsType(builder, positions_type);
    LightData.AddDirectionsType(builder, directions_type);
    LightData.AddColorsType(builder, colors_type);
    LightData.AddConeAnglesType(builder, coneAngles_type);
    LightData.AddIntensitiesType(builder, intensities_type);
    return LightData.EndLightData(builder);
  }

  public static void StartLightData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddIntensitiesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Float intensitiesType) { builder.AddByte(1, (byte)intensitiesType, 0); }
  public static void AddIntensities(FlatBufferBuilder builder, int intensitiesOffset) { builder.AddOffset(2, intensitiesOffset, 0); }
  public static void AddConeAnglesType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Float coneAnglesType) { builder.AddByte(3, (byte)coneAnglesType, 0); }
  public static void AddConeAngles(FlatBufferBuilder builder, int coneAnglesOffset) { builder.AddOffset(4, coneAnglesOffset, 0); }
  public static void AddColorsType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Vector3 colorsType) { builder.AddByte(5, (byte)colorsType, 0); }
  public static void AddColors(FlatBufferBuilder builder, int colorsOffset) { builder.AddOffset(6, colorsOffset, 0); }
  public static void AddDirectionsType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Vector3 directionsType) { builder.AddByte(7, (byte)directionsType, 0); }
  public static void AddDirections(FlatBufferBuilder builder, int directionsOffset) { builder.AddOffset(8, directionsOffset, 0); }
  public static void AddPositionsType(FlatBufferBuilder builder, gfl.anm2.fb.KeyData_Vector3 positionsType) { builder.AddByte(9, (byte)positionsType, 0); }
  public static void AddPositions(FlatBufferBuilder builder, int positionsOffset) { builder.AddOffset(10, positionsOffset, 0); }
  public static Offset<gfl.anm2.fb.LightData> EndLightData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.LightData>(o);
  }
  public LightDataT UnPack() {
    var _o = new LightDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightDataT _o) {
    _o.Name = this.Name;
    _o.Intensities = new gfl.anm2.fb.KeyData_FloatUnion();
    _o.Intensities.Type = this.IntensitiesType;
    switch (this.IntensitiesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Float.OneFrame_Float:
        _o.Intensities.Value = this.Intensities<gfl.anm2.fb.OneFrame_Float>().HasValue ? this.Intensities<gfl.anm2.fb.OneFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.AllFrame_Float:
        _o.Intensities.Value = this.Intensities<gfl.anm2.fb.AllFrame_Float>().HasValue ? this.Intensities<gfl.anm2.fb.AllFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u16:
        _o.Intensities.Value = this.Intensities<gfl.anm2.fb.CatmullRom_Float_u16>().HasValue ? this.Intensities<gfl.anm2.fb.CatmullRom_Float_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u8:
        _o.Intensities.Value = this.Intensities<gfl.anm2.fb.CatmullRom_Float_u8>().HasValue ? this.Intensities<gfl.anm2.fb.CatmullRom_Float_u8>().Value.UnPack() : null;
        break;
    }
    _o.ConeAngles = new gfl.anm2.fb.KeyData_FloatUnion();
    _o.ConeAngles.Type = this.ConeAnglesType;
    switch (this.ConeAnglesType) {
      default: break;
      case gfl.anm2.fb.KeyData_Float.OneFrame_Float:
        _o.ConeAngles.Value = this.ConeAngles<gfl.anm2.fb.OneFrame_Float>().HasValue ? this.ConeAngles<gfl.anm2.fb.OneFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.AllFrame_Float:
        _o.ConeAngles.Value = this.ConeAngles<gfl.anm2.fb.AllFrame_Float>().HasValue ? this.ConeAngles<gfl.anm2.fb.AllFrame_Float>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u16:
        _o.ConeAngles.Value = this.ConeAngles<gfl.anm2.fb.CatmullRom_Float_u16>().HasValue ? this.ConeAngles<gfl.anm2.fb.CatmullRom_Float_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Float.CatmullRom_Float_u8:
        _o.ConeAngles.Value = this.ConeAngles<gfl.anm2.fb.CatmullRom_Float_u8>().HasValue ? this.ConeAngles<gfl.anm2.fb.CatmullRom_Float_u8>().Value.UnPack() : null;
        break;
    }
    _o.Colors = new gfl.anm2.fb.KeyData_Vector3Union();
    _o.Colors.Type = this.ColorsType;
    switch (this.ColorsType) {
      default: break;
      case gfl.anm2.fb.KeyData_Vector3.OneFrame_Vector3:
        _o.Colors.Value = this.Colors<gfl.anm2.fb.OneFrame_Vector3>().HasValue ? this.Colors<gfl.anm2.fb.OneFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.AllFrame_Vector3:
        _o.Colors.Value = this.Colors<gfl.anm2.fb.AllFrame_Vector3>().HasValue ? this.Colors<gfl.anm2.fb.AllFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u16:
        _o.Colors.Value = this.Colors<gfl.anm2.fb.CatmullRom_Vector3_u16>().HasValue ? this.Colors<gfl.anm2.fb.CatmullRom_Vector3_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u8:
        _o.Colors.Value = this.Colors<gfl.anm2.fb.CatmullRom_Vector3_u8>().HasValue ? this.Colors<gfl.anm2.fb.CatmullRom_Vector3_u8>().Value.UnPack() : null;
        break;
    }
    _o.Directions = new gfl.anm2.fb.KeyData_Vector3Union();
    _o.Directions.Type = this.DirectionsType;
    switch (this.DirectionsType) {
      default: break;
      case gfl.anm2.fb.KeyData_Vector3.OneFrame_Vector3:
        _o.Directions.Value = this.Directions<gfl.anm2.fb.OneFrame_Vector3>().HasValue ? this.Directions<gfl.anm2.fb.OneFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.AllFrame_Vector3:
        _o.Directions.Value = this.Directions<gfl.anm2.fb.AllFrame_Vector3>().HasValue ? this.Directions<gfl.anm2.fb.AllFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u16:
        _o.Directions.Value = this.Directions<gfl.anm2.fb.CatmullRom_Vector3_u16>().HasValue ? this.Directions<gfl.anm2.fb.CatmullRom_Vector3_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u8:
        _o.Directions.Value = this.Directions<gfl.anm2.fb.CatmullRom_Vector3_u8>().HasValue ? this.Directions<gfl.anm2.fb.CatmullRom_Vector3_u8>().Value.UnPack() : null;
        break;
    }
    _o.Positions = new gfl.anm2.fb.KeyData_Vector3Union();
    _o.Positions.Type = this.PositionsType;
    switch (this.PositionsType) {
      default: break;
      case gfl.anm2.fb.KeyData_Vector3.OneFrame_Vector3:
        _o.Positions.Value = this.Positions<gfl.anm2.fb.OneFrame_Vector3>().HasValue ? this.Positions<gfl.anm2.fb.OneFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.AllFrame_Vector3:
        _o.Positions.Value = this.Positions<gfl.anm2.fb.AllFrame_Vector3>().HasValue ? this.Positions<gfl.anm2.fb.AllFrame_Vector3>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u16:
        _o.Positions.Value = this.Positions<gfl.anm2.fb.CatmullRom_Vector3_u16>().HasValue ? this.Positions<gfl.anm2.fb.CatmullRom_Vector3_u16>().Value.UnPack() : null;
        break;
      case gfl.anm2.fb.KeyData_Vector3.CatmullRom_Vector3_u8:
        _o.Positions.Value = this.Positions<gfl.anm2.fb.CatmullRom_Vector3_u8>().HasValue ? this.Positions<gfl.anm2.fb.CatmullRom_Vector3_u8>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<gfl.anm2.fb.LightData> Pack(FlatBufferBuilder builder, LightDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.LightData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _intensities_type = _o.Intensities == null ? gfl.anm2.fb.KeyData_Float.NONE : _o.Intensities.Type;
    var _intensities = _o.Intensities == null ? 0 : gfl.anm2.fb.KeyData_FloatUnion.Pack(builder, _o.Intensities);
    var _coneAngles_type = _o.ConeAngles == null ? gfl.anm2.fb.KeyData_Float.NONE : _o.ConeAngles.Type;
    var _coneAngles = _o.ConeAngles == null ? 0 : gfl.anm2.fb.KeyData_FloatUnion.Pack(builder, _o.ConeAngles);
    var _colors_type = _o.Colors == null ? gfl.anm2.fb.KeyData_Vector3.NONE : _o.Colors.Type;
    var _colors = _o.Colors == null ? 0 : gfl.anm2.fb.KeyData_Vector3Union.Pack(builder, _o.Colors);
    var _directions_type = _o.Directions == null ? gfl.anm2.fb.KeyData_Vector3.NONE : _o.Directions.Type;
    var _directions = _o.Directions == null ? 0 : gfl.anm2.fb.KeyData_Vector3Union.Pack(builder, _o.Directions);
    var _positions_type = _o.Positions == null ? gfl.anm2.fb.KeyData_Vector3.NONE : _o.Positions.Type;
    var _positions = _o.Positions == null ? 0 : gfl.anm2.fb.KeyData_Vector3Union.Pack(builder, _o.Positions);
    return CreateLightData(
      builder,
      _name,
      _intensities_type,
      _intensities,
      _coneAngles_type,
      _coneAngles,
      _colors_type,
      _colors,
      _directions_type,
      _directions,
      _positions_type,
      _positions);
  }
};

public class LightDataT
{
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("intensities_type")]
  private gfl.anm2.fb.KeyData_Float IntensitiesType {
    get {
      return this.Intensities != null ? this.Intensities.Type : gfl.anm2.fb.KeyData_Float.NONE;
    }
    set {
      this.Intensities = new gfl.anm2.fb.KeyData_FloatUnion();
      this.Intensities.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("intensities")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_FloatUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_FloatUnion Intensities { get; set; }
  [Newtonsoft.Json.JsonProperty("coneAngles_type")]
  private gfl.anm2.fb.KeyData_Float ConeAnglesType {
    get {
      return this.ConeAngles != null ? this.ConeAngles.Type : gfl.anm2.fb.KeyData_Float.NONE;
    }
    set {
      this.ConeAngles = new gfl.anm2.fb.KeyData_FloatUnion();
      this.ConeAngles.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("coneAngles")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_FloatUnion_JsonConverter))]
  public gfl.anm2.fb.KeyData_FloatUnion ConeAngles { get; set; }
  [Newtonsoft.Json.JsonProperty("colors_type")]
  private gfl.anm2.fb.KeyData_Vector3 ColorsType {
    get {
      return this.Colors != null ? this.Colors.Type : gfl.anm2.fb.KeyData_Vector3.NONE;
    }
    set {
      this.Colors = new gfl.anm2.fb.KeyData_Vector3Union();
      this.Colors.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("colors")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Vector3Union_JsonConverter))]
  public gfl.anm2.fb.KeyData_Vector3Union Colors { get; set; }
  [Newtonsoft.Json.JsonProperty("directions_type")]
  private gfl.anm2.fb.KeyData_Vector3 DirectionsType {
    get {
      return this.Directions != null ? this.Directions.Type : gfl.anm2.fb.KeyData_Vector3.NONE;
    }
    set {
      this.Directions = new gfl.anm2.fb.KeyData_Vector3Union();
      this.Directions.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("directions")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Vector3Union_JsonConverter))]
  public gfl.anm2.fb.KeyData_Vector3Union Directions { get; set; }
  [Newtonsoft.Json.JsonProperty("positions_type")]
  private gfl.anm2.fb.KeyData_Vector3 PositionsType {
    get {
      return this.Positions != null ? this.Positions.Type : gfl.anm2.fb.KeyData_Vector3.NONE;
    }
    set {
      this.Positions = new gfl.anm2.fb.KeyData_Vector3Union();
      this.Positions.Type = value;
    }
  }
  [Newtonsoft.Json.JsonProperty("positions")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.KeyData_Vector3Union_JsonConverter))]
  public gfl.anm2.fb.KeyData_Vector3Union Positions { get; set; }

  public LightDataT() {
    this.Name = null;
    this.Intensities = null;
    this.ConeAngles = null;
    this.Colors = null;
    this.Directions = null;
    this.Positions = null;
  }
}

public struct LightAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightAnimationData GetRootAsLightAnimationData(ByteBuffer _bb) { return GetRootAsLightAnimationData(_bb, new LightAnimationData()); }
  public static LightAnimationData GetRootAsLightAnimationData(ByteBuffer _bb, LightAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.FrameSetting? FrameSetting { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.FrameSetting?)(new gfl.anm2.fb.FrameSetting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public gfl.anm2.fb.LightData? Light { get { int o = __p.__offset(6); return o != 0 ? (gfl.anm2.fb.LightData?)(new gfl.anm2.fb.LightData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.LightAnimationData> CreateLightAnimationData(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset = default(Offset<gfl.anm2.fb.FrameSetting>),
      Offset<gfl.anm2.fb.LightData> lightOffset = default(Offset<gfl.anm2.fb.LightData>)) {
    builder.StartTable(2);
    LightAnimationData.AddLight(builder, lightOffset);
    LightAnimationData.AddFrameSetting(builder, frameSettingOffset);
    return LightAnimationData.EndLightAnimationData(builder);
  }

  public static void StartLightAnimationData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrameSetting(FlatBufferBuilder builder, Offset<gfl.anm2.fb.FrameSetting> frameSettingOffset) { builder.AddOffset(0, frameSettingOffset.Value, 0); }
  public static void AddLight(FlatBufferBuilder builder, Offset<gfl.anm2.fb.LightData> lightOffset) { builder.AddOffset(1, lightOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.LightAnimationData> EndLightAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.LightAnimationData>(o);
  }
  public static void FinishLightAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.LightAnimationData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLightAnimationDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.LightAnimationData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LightAnimationDataT UnPack() {
    var _o = new LightAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightAnimationDataT _o) {
    _o.FrameSetting = this.FrameSetting.HasValue ? this.FrameSetting.Value.UnPack() : null;
    _o.Light = this.Light.HasValue ? this.Light.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.LightAnimationData> Pack(FlatBufferBuilder builder, LightAnimationDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.LightAnimationData>);
    var _frameSetting = _o.FrameSetting == null ? default(Offset<gfl.anm2.fb.FrameSetting>) : gfl.anm2.fb.FrameSetting.Pack(builder, _o.FrameSetting);
    var _light = _o.Light == null ? default(Offset<gfl.anm2.fb.LightData>) : gfl.anm2.fb.LightData.Pack(builder, _o.Light);
    return CreateLightAnimationData(
      builder,
      _frameSetting,
      _light);
  }
};

public class LightAnimationDataT
{
  [Newtonsoft.Json.JsonProperty("frameSetting")]
  public gfl.anm2.fb.FrameSettingT FrameSetting { get; set; }
  [Newtonsoft.Json.JsonProperty("light")]
  public gfl.anm2.fb.LightDataT Light { get; set; }

  public LightAnimationDataT() {
    this.FrameSetting = null;
    this.Light = null;
  }

  public static LightAnimationDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LightAnimationDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LightAnimationDataT DeserializeFromBinary(byte[] fbBuffer) {
    return LightAnimationData.GetRootAsLightAnimationData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LightAnimationData.FinishLightAnimationDataBuffer(fbb, LightAnimationData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
