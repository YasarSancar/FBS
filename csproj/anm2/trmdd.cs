// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MotionDetectorParamType : byte
{
  NONE = 0,
  VelocityDetectorParam = 1,
  MoveDetectorParam = 2,
  RotationDetectorParam = 3,
  AngleDetectorParam = 4,
  TwistDetectorParam = 5,
  FootContactDetectorParam = 6,
};

public class MotionDetectorParamTypeUnion {
  public MotionDetectorParamType Type { get; set; }
  public object Value { get; set; }

  public MotionDetectorParamTypeUnion() {
    this.Type = MotionDetectorParamType.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public gfl.anm2.fb.VelocityDetectorParamT AsVelocityDetectorParam() { return this.As<gfl.anm2.fb.VelocityDetectorParamT>(); }
  public gfl.anm2.fb.MoveDetectorParamT AsMoveDetectorParam() { return this.As<gfl.anm2.fb.MoveDetectorParamT>(); }
  public gfl.anm2.fb.RotationDetectorParamT AsRotationDetectorParam() { return this.As<gfl.anm2.fb.RotationDetectorParamT>(); }
  public gfl.anm2.fb.AngleDetectorParamT AsAngleDetectorParam() { return this.As<gfl.anm2.fb.AngleDetectorParamT>(); }
  public gfl.anm2.fb.TwistDetectorParamT AsTwistDetectorParam() { return this.As<gfl.anm2.fb.TwistDetectorParamT>(); }
  public gfl.anm2.fb.FootContactDetectorParamT AsFootContactDetectorParam() { return this.As<gfl.anm2.fb.FootContactDetectorParamT>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, MotionDetectorParamTypeUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case MotionDetectorParamType.VelocityDetectorParam: return gfl.anm2.fb.VelocityDetectorParam.Pack(builder, _o.AsVelocityDetectorParam()).Value;
      case MotionDetectorParamType.MoveDetectorParam: return gfl.anm2.fb.MoveDetectorParam.Pack(builder, _o.AsMoveDetectorParam()).Value;
      case MotionDetectorParamType.RotationDetectorParam: return gfl.anm2.fb.RotationDetectorParam.Pack(builder, _o.AsRotationDetectorParam()).Value;
      case MotionDetectorParamType.AngleDetectorParam: return gfl.anm2.fb.AngleDetectorParam.Pack(builder, _o.AsAngleDetectorParam()).Value;
      case MotionDetectorParamType.TwistDetectorParam: return gfl.anm2.fb.TwistDetectorParam.Pack(builder, _o.AsTwistDetectorParam()).Value;
      case MotionDetectorParamType.FootContactDetectorParam: return gfl.anm2.fb.FootContactDetectorParam.Pack(builder, _o.AsFootContactDetectorParam()).Value;
    }
  }
}

public class MotionDetectorParamTypeUnion_JsonConverter : Newtonsoft.Json.JsonConverter {
  public override bool CanConvert(System.Type objectType) {
    return objectType == typeof(MotionDetectorParamTypeUnion) || objectType == typeof(System.Collections.Generic.List<MotionDetectorParamTypeUnion>);
  }
  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = value as System.Collections.Generic.List<MotionDetectorParamTypeUnion>;
    if (_olist != null) {
      writer.WriteStartArray();
      foreach (var _o in _olist) { this.WriteJson(writer, _o, serializer); }
      writer.WriteEndArray();
    } else {
      this.WriteJson(writer, value as MotionDetectorParamTypeUnion, serializer);
    }
  }
  public void WriteJson(Newtonsoft.Json.JsonWriter writer, MotionDetectorParamTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return;
    serializer.Serialize(writer, _o.Value);
  }
  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
    var _olist = existingValue as System.Collections.Generic.List<MotionDetectorParamTypeUnion>;
    if (_olist != null) {
      for (var _j = 0; _j < _olist.Count; ++_j) {
        reader.Read();
        _olist[_j] = this.ReadJson(reader, _olist[_j], serializer);
      }
      reader.Read();
      return _olist;
    } else {
      return this.ReadJson(reader, existingValue as MotionDetectorParamTypeUnion, serializer);
    }
  }
  public MotionDetectorParamTypeUnion ReadJson(Newtonsoft.Json.JsonReader reader, MotionDetectorParamTypeUnion _o, Newtonsoft.Json.JsonSerializer serializer) {
    if (_o == null) return null;
    switch (_o.Type) {
      default: break;
      case MotionDetectorParamType.VelocityDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.VelocityDetectorParamT>(reader); break;
      case MotionDetectorParamType.MoveDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.MoveDetectorParamT>(reader); break;
      case MotionDetectorParamType.RotationDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.RotationDetectorParamT>(reader); break;
      case MotionDetectorParamType.AngleDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.AngleDetectorParamT>(reader); break;
      case MotionDetectorParamType.TwistDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.TwistDetectorParamT>(reader); break;
      case MotionDetectorParamType.FootContactDetectorParam: _o.Value = serializer.Deserialize<gfl.anm2.fb.FootContactDetectorParamT>(reader); break;
    }
    return _o;
  }
}

public struct VelocityDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static VelocityDetectorParam GetRootAsVelocityDetectorParam(ByteBuffer _bb) { return GetRootAsVelocityDetectorParam(_bb, new VelocityDetectorParam()); }
  public static VelocityDetectorParam GetRootAsVelocityDetectorParam(ByteBuffer _bb, VelocityDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public VelocityDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<gfl.anm2.fb.VelocityDetectorParam> CreateVelocityDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    VelocityDetectorParam.AddJointName(builder, jointNameOffset);
    VelocityDetectorParam.AddBase(builder, baseOffset);
    return VelocityDetectorParam.EndVelocityDetectorParam(builder);
  }

  public static void StartVelocityDetectorParam(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(1, jointNameOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.VelocityDetectorParam> EndVelocityDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.VelocityDetectorParam>(o);
  }
  public VelocityDetectorParamT UnPack() {
    var _o = new VelocityDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(VelocityDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointName = this.JointName;
  }
  public static Offset<gfl.anm2.fb.VelocityDetectorParam> Pack(FlatBufferBuilder builder, VelocityDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.VelocityDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateVelocityDetectorParam(
      builder,
      _base,
      _jointName);
  }
};

public class VelocityDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }

  public VelocityDetectorParamT() {
    this.Base = null;
    this.JointName = null;
  }
}

public struct MoveDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MoveDetectorParam GetRootAsMoveDetectorParam(ByteBuffer _bb) { return GetRootAsMoveDetectorParam(_bb, new MoveDetectorParam()); }
  public static MoveDetectorParam GetRootAsMoveDetectorParam(ByteBuffer _bb, MoveDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.AxisType Axis { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.AxisType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.AxisType.None; } }
  public gfl.anm2.fb.Vector3? BasePosition { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.Vector3?)(new gfl.anm2.fb.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<gfl.anm2.fb.MoveDetectorParam> CreateMoveDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointNameOffset = default(StringOffset),
      gfl.anm2.fb.AxisType axis = gfl.anm2.fb.AxisType.None,
      gfl.anm2.fb.Vector3T basePosition = null) {
    builder.StartTable(4);
    MoveDetectorParam.AddBasePosition(builder, gfl.anm2.fb.Vector3.Pack(builder, basePosition));
    MoveDetectorParam.AddAxis(builder, axis);
    MoveDetectorParam.AddJointName(builder, jointNameOffset);
    MoveDetectorParam.AddBase(builder, baseOffset);
    return MoveDetectorParam.EndMoveDetectorParam(builder);
  }

  public static void StartMoveDetectorParam(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(1, jointNameOffset.Value, 0); }
  public static void AddAxis(FlatBufferBuilder builder, gfl.anm2.fb.AxisType axis) { builder.AddUint(2, (uint)axis, 0); }
  public static void AddBasePosition(FlatBufferBuilder builder, Offset<gfl.anm2.fb.Vector3> basePositionOffset) { builder.AddStruct(3, basePositionOffset.Value, 0); }
  public static Offset<gfl.anm2.fb.MoveDetectorParam> EndMoveDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MoveDetectorParam>(o);
  }
  public MoveDetectorParamT UnPack() {
    var _o = new MoveDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoveDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointName = this.JointName;
    _o.Axis = this.Axis;
    _o.BasePosition = this.BasePosition.HasValue ? this.BasePosition.Value.UnPack() : null;
  }
  public static Offset<gfl.anm2.fb.MoveDetectorParam> Pack(FlatBufferBuilder builder, MoveDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MoveDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateMoveDetectorParam(
      builder,
      _base,
      _jointName,
      _o.Axis,
      _o.BasePosition);
  }
};

public class MoveDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }
  [Newtonsoft.Json.JsonProperty("axis")]
  public gfl.anm2.fb.AxisType Axis { get; set; }
  [Newtonsoft.Json.JsonProperty("basePosition")]
  public gfl.anm2.fb.Vector3T BasePosition { get; set; }

  public MoveDetectorParamT() {
    this.Base = null;
    this.JointName = null;
    this.Axis = gfl.anm2.fb.AxisType.None;
    this.BasePosition = new gfl.anm2.fb.Vector3T();
  }
}

public struct RotationDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RotationDetectorParam GetRootAsRotationDetectorParam(ByteBuffer _bb) { return GetRootAsRotationDetectorParam(_bb, new RotationDetectorParam()); }
  public static RotationDetectorParam GetRootAsRotationDetectorParam(ByteBuffer _bb, RotationDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RotationDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.anm2.fb.RotateAxisType Axis { get { int o = __p.__offset(8); return o != 0 ? (gfl.anm2.fb.RotateAxisType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.RotateAxisType.None; } }

  public static Offset<gfl.anm2.fb.RotationDetectorParam> CreateRotationDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointNameOffset = default(StringOffset),
      gfl.anm2.fb.RotateAxisType axis = gfl.anm2.fb.RotateAxisType.None) {
    builder.StartTable(3);
    RotationDetectorParam.AddAxis(builder, axis);
    RotationDetectorParam.AddJointName(builder, jointNameOffset);
    RotationDetectorParam.AddBase(builder, baseOffset);
    return RotationDetectorParam.EndRotationDetectorParam(builder);
  }

  public static void StartRotationDetectorParam(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(1, jointNameOffset.Value, 0); }
  public static void AddAxis(FlatBufferBuilder builder, gfl.anm2.fb.RotateAxisType axis) { builder.AddUint(2, (uint)axis, 0); }
  public static Offset<gfl.anm2.fb.RotationDetectorParam> EndRotationDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.RotationDetectorParam>(o);
  }
  public RotationDetectorParamT UnPack() {
    var _o = new RotationDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RotationDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointName = this.JointName;
    _o.Axis = this.Axis;
  }
  public static Offset<gfl.anm2.fb.RotationDetectorParam> Pack(FlatBufferBuilder builder, RotationDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.RotationDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateRotationDetectorParam(
      builder,
      _base,
      _jointName,
      _o.Axis);
  }
};

public class RotationDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }
  [Newtonsoft.Json.JsonProperty("axis")]
  public gfl.anm2.fb.RotateAxisType Axis { get; set; }

  public RotationDetectorParamT() {
    this.Base = null;
    this.JointName = null;
    this.Axis = gfl.anm2.fb.RotateAxisType.None;
  }
}

public struct AngleDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AngleDetectorParam GetRootAsAngleDetectorParam(ByteBuffer _bb) { return GetRootAsAngleDetectorParam(_bb, new AngleDetectorParam()); }
  public static AngleDetectorParam GetRootAsAngleDetectorParam(ByteBuffer _bb, AngleDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AngleDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointNameCenter { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameCenterBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameCenterBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameCenterArray() { return __p.__vector_as_array<byte>(6); }
  public string JointName1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointName1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetJointName1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetJointName1Array() { return __p.__vector_as_array<byte>(8); }
  public string JointName2 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointName2Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetJointName2Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetJointName2Array() { return __p.__vector_as_array<byte>(10); }
  public gfl.anm2.fb.RotateAxisType Axis { get { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.RotateAxisType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.RotateAxisType.None; } }
  public bool UseAbsoluteValue { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TriggerWhenUnder { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TriggerWhenOver { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.AngleDetectorParam> CreateAngleDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointNameCenterOffset = default(StringOffset),
      StringOffset jointName1Offset = default(StringOffset),
      StringOffset jointName2Offset = default(StringOffset),
      gfl.anm2.fb.RotateAxisType axis = gfl.anm2.fb.RotateAxisType.None,
      bool useAbsoluteValue = false,
      bool triggerWhenUnder = false,
      bool triggerWhenOver = false) {
    builder.StartTable(8);
    AngleDetectorParam.AddAxis(builder, axis);
    AngleDetectorParam.AddJointName2(builder, jointName2Offset);
    AngleDetectorParam.AddJointName1(builder, jointName1Offset);
    AngleDetectorParam.AddJointNameCenter(builder, jointNameCenterOffset);
    AngleDetectorParam.AddBase(builder, baseOffset);
    AngleDetectorParam.AddTriggerWhenOver(builder, triggerWhenOver);
    AngleDetectorParam.AddTriggerWhenUnder(builder, triggerWhenUnder);
    AngleDetectorParam.AddUseAbsoluteValue(builder, useAbsoluteValue);
    return AngleDetectorParam.EndAngleDetectorParam(builder);
  }

  public static void StartAngleDetectorParam(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointNameCenter(FlatBufferBuilder builder, StringOffset jointNameCenterOffset) { builder.AddOffset(1, jointNameCenterOffset.Value, 0); }
  public static void AddJointName1(FlatBufferBuilder builder, StringOffset jointName1Offset) { builder.AddOffset(2, jointName1Offset.Value, 0); }
  public static void AddJointName2(FlatBufferBuilder builder, StringOffset jointName2Offset) { builder.AddOffset(3, jointName2Offset.Value, 0); }
  public static void AddAxis(FlatBufferBuilder builder, gfl.anm2.fb.RotateAxisType axis) { builder.AddUint(4, (uint)axis, 0); }
  public static void AddUseAbsoluteValue(FlatBufferBuilder builder, bool useAbsoluteValue) { builder.AddBool(5, useAbsoluteValue, false); }
  public static void AddTriggerWhenUnder(FlatBufferBuilder builder, bool triggerWhenUnder) { builder.AddBool(6, triggerWhenUnder, false); }
  public static void AddTriggerWhenOver(FlatBufferBuilder builder, bool triggerWhenOver) { builder.AddBool(7, triggerWhenOver, false); }
  public static Offset<gfl.anm2.fb.AngleDetectorParam> EndAngleDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AngleDetectorParam>(o);
  }
  public AngleDetectorParamT UnPack() {
    var _o = new AngleDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AngleDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointNameCenter = this.JointNameCenter;
    _o.JointName1 = this.JointName1;
    _o.JointName2 = this.JointName2;
    _o.Axis = this.Axis;
    _o.UseAbsoluteValue = this.UseAbsoluteValue;
    _o.TriggerWhenUnder = this.TriggerWhenUnder;
    _o.TriggerWhenOver = this.TriggerWhenOver;
  }
  public static Offset<gfl.anm2.fb.AngleDetectorParam> Pack(FlatBufferBuilder builder, AngleDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AngleDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointNameCenter = _o.JointNameCenter == null ? default(StringOffset) : builder.CreateString(_o.JointNameCenter);
    var _jointName1 = _o.JointName1 == null ? default(StringOffset) : builder.CreateString(_o.JointName1);
    var _jointName2 = _o.JointName2 == null ? default(StringOffset) : builder.CreateString(_o.JointName2);
    return CreateAngleDetectorParam(
      builder,
      _base,
      _jointNameCenter,
      _jointName1,
      _jointName2,
      _o.Axis,
      _o.UseAbsoluteValue,
      _o.TriggerWhenUnder,
      _o.TriggerWhenOver);
  }
};

public class AngleDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointNameCenter")]
  public string JointNameCenter { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName1")]
  public string JointName1 { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName2")]
  public string JointName2 { get; set; }
  [Newtonsoft.Json.JsonProperty("axis")]
  public gfl.anm2.fb.RotateAxisType Axis { get; set; }
  [Newtonsoft.Json.JsonProperty("useAbsoluteValue")]
  public bool UseAbsoluteValue { get; set; }
  [Newtonsoft.Json.JsonProperty("triggerWhenUnder")]
  public bool TriggerWhenUnder { get; set; }
  [Newtonsoft.Json.JsonProperty("triggerWhenOver")]
  public bool TriggerWhenOver { get; set; }

  public AngleDetectorParamT() {
    this.Base = null;
    this.JointNameCenter = null;
    this.JointName1 = null;
    this.JointName2 = null;
    this.Axis = gfl.anm2.fb.RotateAxisType.None;
    this.UseAbsoluteValue = false;
    this.TriggerWhenUnder = false;
    this.TriggerWhenOver = false;
  }
}

public struct TwistDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TwistDetectorParam GetRootAsTwistDetectorParam(ByteBuffer _bb) { return GetRootAsTwistDetectorParam(_bb, new TwistDetectorParam()); }
  public static TwistDetectorParam GetRootAsTwistDetectorParam(ByteBuffer _bb, TwistDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TwistDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointName1 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointName1Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointName1Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointName1Array() { return __p.__vector_as_array<byte>(6); }
  public string JointName2 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointName2Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetJointName2Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetJointName2Array() { return __p.__vector_as_array<byte>(8); }
  public gfl.anm2.fb.RotateAxisType Axis { get { int o = __p.__offset(10); return o != 0 ? (gfl.anm2.fb.RotateAxisType)__p.bb.GetUint(o + __p.bb_pos) : gfl.anm2.fb.RotateAxisType.None; } }
  public float BaseTwist { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool UseAbsoluteValue { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TriggerWhenUnder { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TriggerWhenOver { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2.fb.TwistDetectorParam> CreateTwistDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointName1Offset = default(StringOffset),
      StringOffset jointName2Offset = default(StringOffset),
      gfl.anm2.fb.RotateAxisType axis = gfl.anm2.fb.RotateAxisType.None,
      float baseTwist = 0.0f,
      bool useAbsoluteValue = false,
      bool triggerWhenUnder = false,
      bool triggerWhenOver = false) {
    builder.StartTable(8);
    TwistDetectorParam.AddBaseTwist(builder, baseTwist);
    TwistDetectorParam.AddAxis(builder, axis);
    TwistDetectorParam.AddJointName2(builder, jointName2Offset);
    TwistDetectorParam.AddJointName1(builder, jointName1Offset);
    TwistDetectorParam.AddBase(builder, baseOffset);
    TwistDetectorParam.AddTriggerWhenOver(builder, triggerWhenOver);
    TwistDetectorParam.AddTriggerWhenUnder(builder, triggerWhenUnder);
    TwistDetectorParam.AddUseAbsoluteValue(builder, useAbsoluteValue);
    return TwistDetectorParam.EndTwistDetectorParam(builder);
  }

  public static void StartTwistDetectorParam(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointName1(FlatBufferBuilder builder, StringOffset jointName1Offset) { builder.AddOffset(1, jointName1Offset.Value, 0); }
  public static void AddJointName2(FlatBufferBuilder builder, StringOffset jointName2Offset) { builder.AddOffset(2, jointName2Offset.Value, 0); }
  public static void AddAxis(FlatBufferBuilder builder, gfl.anm2.fb.RotateAxisType axis) { builder.AddUint(3, (uint)axis, 0); }
  public static void AddBaseTwist(FlatBufferBuilder builder, float baseTwist) { builder.AddFloat(4, baseTwist, 0.0f); }
  public static void AddUseAbsoluteValue(FlatBufferBuilder builder, bool useAbsoluteValue) { builder.AddBool(5, useAbsoluteValue, false); }
  public static void AddTriggerWhenUnder(FlatBufferBuilder builder, bool triggerWhenUnder) { builder.AddBool(6, triggerWhenUnder, false); }
  public static void AddTriggerWhenOver(FlatBufferBuilder builder, bool triggerWhenOver) { builder.AddBool(7, triggerWhenOver, false); }
  public static Offset<gfl.anm2.fb.TwistDetectorParam> EndTwistDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.TwistDetectorParam>(o);
  }
  public TwistDetectorParamT UnPack() {
    var _o = new TwistDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TwistDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointName1 = this.JointName1;
    _o.JointName2 = this.JointName2;
    _o.Axis = this.Axis;
    _o.BaseTwist = this.BaseTwist;
    _o.UseAbsoluteValue = this.UseAbsoluteValue;
    _o.TriggerWhenUnder = this.TriggerWhenUnder;
    _o.TriggerWhenOver = this.TriggerWhenOver;
  }
  public static Offset<gfl.anm2.fb.TwistDetectorParam> Pack(FlatBufferBuilder builder, TwistDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.TwistDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointName1 = _o.JointName1 == null ? default(StringOffset) : builder.CreateString(_o.JointName1);
    var _jointName2 = _o.JointName2 == null ? default(StringOffset) : builder.CreateString(_o.JointName2);
    return CreateTwistDetectorParam(
      builder,
      _base,
      _jointName1,
      _jointName2,
      _o.Axis,
      _o.BaseTwist,
      _o.UseAbsoluteValue,
      _o.TriggerWhenUnder,
      _o.TriggerWhenOver);
  }
};

public class TwistDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName1")]
  public string JointName1 { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName2")]
  public string JointName2 { get; set; }
  [Newtonsoft.Json.JsonProperty("axis")]
  public gfl.anm2.fb.RotateAxisType Axis { get; set; }
  [Newtonsoft.Json.JsonProperty("baseTwist")]
  public float BaseTwist { get; set; }
  [Newtonsoft.Json.JsonProperty("useAbsoluteValue")]
  public bool UseAbsoluteValue { get; set; }
  [Newtonsoft.Json.JsonProperty("triggerWhenUnder")]
  public bool TriggerWhenUnder { get; set; }
  [Newtonsoft.Json.JsonProperty("triggerWhenOver")]
  public bool TriggerWhenOver { get; set; }

  public TwistDetectorParamT() {
    this.Base = null;
    this.JointName1 = null;
    this.JointName2 = null;
    this.Axis = gfl.anm2.fb.RotateAxisType.None;
    this.BaseTwist = 0.0f;
    this.UseAbsoluteValue = false;
    this.TriggerWhenUnder = false;
    this.TriggerWhenOver = false;
  }
}

public struct FootContactDetectorParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FootContactDetectorParam GetRootAsFootContactDetectorParam(ByteBuffer _bb) { return GetRootAsFootContactDetectorParam(_bb, new FootContactDetectorParam()); }
  public static FootContactDetectorParam GetRootAsFootContactDetectorParam(ByteBuffer _bb, FootContactDetectorParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FootContactDetectorParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorBaseParam? Base { get { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorBaseParam?)(new gfl.anm2.fb.MotionDetectorBaseParam()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public string JointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetJointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetJointNameArray() { return __p.__vector_as_array<byte>(6); }
  public float UpThreashold { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DownThreashold { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2.fb.FootContactDetectorParam> CreateFootContactDetectorParam(FlatBufferBuilder builder,
      Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset = default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>),
      StringOffset jointNameOffset = default(StringOffset),
      float upThreashold = 0.0f,
      float downThreashold = 0.0f) {
    builder.StartTable(4);
    FootContactDetectorParam.AddDownThreashold(builder, downThreashold);
    FootContactDetectorParam.AddUpThreashold(builder, upThreashold);
    FootContactDetectorParam.AddJointName(builder, jointNameOffset);
    FootContactDetectorParam.AddBase(builder, baseOffset);
    return FootContactDetectorParam.EndFootContactDetectorParam(builder);
  }

  public static void StartFootContactDetectorParam(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddBase(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorBaseParam> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
  public static void AddJointName(FlatBufferBuilder builder, StringOffset jointNameOffset) { builder.AddOffset(1, jointNameOffset.Value, 0); }
  public static void AddUpThreashold(FlatBufferBuilder builder, float upThreashold) { builder.AddFloat(2, upThreashold, 0.0f); }
  public static void AddDownThreashold(FlatBufferBuilder builder, float downThreashold) { builder.AddFloat(3, downThreashold, 0.0f); }
  public static Offset<gfl.anm2.fb.FootContactDetectorParam> EndFootContactDetectorParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.FootContactDetectorParam>(o);
  }
  public FootContactDetectorParamT UnPack() {
    var _o = new FootContactDetectorParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FootContactDetectorParamT _o) {
    _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
    _o.JointName = this.JointName;
    _o.UpThreashold = this.UpThreashold;
    _o.DownThreashold = this.DownThreashold;
  }
  public static Offset<gfl.anm2.fb.FootContactDetectorParam> Pack(FlatBufferBuilder builder, FootContactDetectorParamT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.FootContactDetectorParam>);
    var _base = _o.Base == null ? default(Offset<gfl.anm2.fb.MotionDetectorBaseParam>) : gfl.anm2.fb.MotionDetectorBaseParam.Pack(builder, _o.Base);
    var _jointName = _o.JointName == null ? default(StringOffset) : builder.CreateString(_o.JointName);
    return CreateFootContactDetectorParam(
      builder,
      _base,
      _jointName,
      _o.UpThreashold,
      _o.DownThreashold);
  }
};

public class FootContactDetectorParamT
{
  [Newtonsoft.Json.JsonProperty("base")]
  public gfl.anm2.fb.MotionDetectorBaseParamT Base { get; set; }
  [Newtonsoft.Json.JsonProperty("jointName")]
  public string JointName { get; set; }
  [Newtonsoft.Json.JsonProperty("upThreashold")]
  public float UpThreashold { get; set; }
  [Newtonsoft.Json.JsonProperty("downThreashold")]
  public float DownThreashold { get; set; }

  public FootContactDetectorParamT() {
    this.Base = null;
    this.JointName = null;
    this.UpThreashold = 0.0f;
    this.DownThreashold = 0.0f;
  }
}

public struct MotionDetectorParamList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MotionDetectorParamList GetRootAsMotionDetectorParamList(ByteBuffer _bb) { return GetRootAsMotionDetectorParamList(_bb, new MotionDetectorParamList()); }
  public static MotionDetectorParamList GetRootAsMotionDetectorParamList(ByteBuffer _bb, MotionDetectorParamList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MotionDetectorParamList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.MotionDetectorParamType ParamsType(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.MotionDetectorParamType)__p.bb.Get(__p.__vector(o) + j * 1) : (gfl.anm2.fb.MotionDetectorParamType)0; }
  public int ParamsTypeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<gfl.anm2.fb.MotionDetectorParamType> GetParamsTypeBytes() { return __p.__vector_as_span<gfl.anm2.fb.MotionDetectorParamType>(4, 1); }
#else
  public ArraySegment<byte>? GetParamsTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public gfl.anm2.fb.MotionDetectorParamType[] GetParamsTypeArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); gfl.anm2.fb.MotionDetectorParamType[] a = new gfl.anm2.fb.MotionDetectorParamType[l]; for (int i = 0; i < l; i++) { a[i] = (gfl.anm2.fb.MotionDetectorParamType)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Params<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int ParamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.MotionDetectorParamList> CreateMotionDetectorParamList(FlatBufferBuilder builder,
      VectorOffset params_typeOffset = default(VectorOffset),
      VectorOffset paramsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MotionDetectorParamList.AddParams(builder, paramsOffset);
    MotionDetectorParamList.AddParamsType(builder, params_typeOffset);
    return MotionDetectorParamList.EndMotionDetectorParamList(builder);
  }

  public static void StartMotionDetectorParamList(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddParamsType(FlatBufferBuilder builder, VectorOffset paramsTypeOffset) { builder.AddOffset(0, paramsTypeOffset.Value, 0); }
  public static VectorOffset CreateParamsTypeVector(FlatBufferBuilder builder, gfl.anm2.fb.MotionDetectorParamType[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParamsTypeVectorBlock(FlatBufferBuilder builder, gfl.anm2.fb.MotionDetectorParamType[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddParams(FlatBufferBuilder builder, VectorOffset paramsOffset) { builder.AddOffset(1, paramsOffset.Value, 0); }
  public static VectorOffset CreateParamsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateParamsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.MotionDetectorParamList> EndMotionDetectorParamList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.MotionDetectorParamList>(o);
  }
  public static void FinishMotionDetectorParamListBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorParamList> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMotionDetectorParamListBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.MotionDetectorParamList> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MotionDetectorParamListT UnPack() {
    var _o = new MotionDetectorParamListT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MotionDetectorParamListT _o) {
    _o.Params = new List<gfl.anm2.fb.MotionDetectorParamTypeUnion>();
    for (var _j = 0; _j < this.ParamsLength; ++_j) {
      var _o_Params = new gfl.anm2.fb.MotionDetectorParamTypeUnion();
      _o_Params.Type = this.ParamsType(_j);
      switch (this.ParamsType(_j)) {
        default: break;
        case gfl.anm2.fb.MotionDetectorParamType.VelocityDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.VelocityDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.VelocityDetectorParam>(_j).Value.UnPack() : null;
          break;
        case gfl.anm2.fb.MotionDetectorParamType.MoveDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.MoveDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.MoveDetectorParam>(_j).Value.UnPack() : null;
          break;
        case gfl.anm2.fb.MotionDetectorParamType.RotationDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.RotationDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.RotationDetectorParam>(_j).Value.UnPack() : null;
          break;
        case gfl.anm2.fb.MotionDetectorParamType.AngleDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.AngleDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.AngleDetectorParam>(_j).Value.UnPack() : null;
          break;
        case gfl.anm2.fb.MotionDetectorParamType.TwistDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.TwistDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.TwistDetectorParam>(_j).Value.UnPack() : null;
          break;
        case gfl.anm2.fb.MotionDetectorParamType.FootContactDetectorParam:
          _o_Params.Value = this.Params<gfl.anm2.fb.FootContactDetectorParam>(_j).HasValue ? this.Params<gfl.anm2.fb.FootContactDetectorParam>(_j).Value.UnPack() : null;
          break;
      }
      _o.Params.Add(_o_Params);
    }
  }
  public static Offset<gfl.anm2.fb.MotionDetectorParamList> Pack(FlatBufferBuilder builder, MotionDetectorParamListT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.MotionDetectorParamList>);
    var _params_type = default(VectorOffset);
    if (_o.Params != null) {
      var __params_type = new gfl.anm2.fb.MotionDetectorParamType[_o.Params.Count];
      for (var _j = 0; _j < __params_type.Length; ++_j) { __params_type[_j] = _o.Params[_j].Type; }
      _params_type = CreateParamsTypeVector(builder, __params_type);
    }
    var _params = default(VectorOffset);
    if (_o.Params != null) {
      var __params = new int[_o.Params.Count];
      for (var _j = 0; _j < __params.Length; ++_j) { __params[_j] = gfl.anm2.fb.MotionDetectorParamTypeUnion.Pack(builder,  _o.Params[_j]); }
      _params = CreateParamsVector(builder, __params);
    }
    return CreateMotionDetectorParamList(
      builder,
      _params_type,
      _params);
  }
};

public class MotionDetectorParamListT
{
  [Newtonsoft.Json.JsonProperty("params_type")]
  private gfl.anm2.fb.MotionDetectorParamType[] ParamsType {
    get {
      if (this.Params == null) return null;
      var _o = new gfl.anm2.fb.MotionDetectorParamType[this.Params.Count];
      for (var _j = 0; _j < _o.Length; ++_j) { _o[_j] = this.Params[_j].Type; }
      return _o;
    }
    set {
      this.Params = new List<gfl.anm2.fb.MotionDetectorParamTypeUnion>();
      for (var _j = 0; _j < value.Length; ++_j) {
        var _o = new gfl.anm2.fb.MotionDetectorParamTypeUnion();
        _o.Type = value[_j];
        this.Params.Add(_o);
      }
    }
  }
  [Newtonsoft.Json.JsonProperty("params")]
  [Newtonsoft.Json.JsonConverter(typeof(gfl.anm2.fb.MotionDetectorParamTypeUnion_JsonConverter))]
  public List<gfl.anm2.fb.MotionDetectorParamTypeUnion> Params { get; set; }

  public MotionDetectorParamListT() {
    this.Params = null;
  }

  public static MotionDetectorParamListT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<MotionDetectorParamListT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static MotionDetectorParamListT DeserializeFromBinary(byte[] fbBuffer) {
    return MotionDetectorParamList.GetRootAsMotionDetectorParamList(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MotionDetectorParamList.FinishMotionDetectorParamListBuffer(fbb, MotionDetectorParamList.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
