// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EventData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventData GetRootAsEventData(ByteBuffer _bb) { return GetRootAsEventData(_bb, new EventData()); }
  public static EventData GetRootAsEventData(ByteBuffer _bb, EventData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TrackIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int BeginFrame { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndFrame { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.anm2.fb.EventValue? Values(int j) { int o = __p.__offset(12); return o != 0 ? (gfl.anm2.fb.EventValue?)(new gfl.anm2.fb.EventValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ValuesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.EventData> CreateEventData(FlatBufferBuilder builder,
      int trackIndex = 0,
      StringOffset nameOffset = default(StringOffset),
      int beginFrame = 0,
      int endFrame = 0,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    EventData.AddValues(builder, valuesOffset);
    EventData.AddEndFrame(builder, endFrame);
    EventData.AddBeginFrame(builder, beginFrame);
    EventData.AddName(builder, nameOffset);
    EventData.AddTrackIndex(builder, trackIndex);
    return EventData.EndEventData(builder);
  }

  public static void StartEventData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTrackIndex(FlatBufferBuilder builder, int trackIndex) { builder.AddInt(0, trackIndex, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddBeginFrame(FlatBufferBuilder builder, int beginFrame) { builder.AddInt(2, beginFrame, 0); }
  public static void AddEndFrame(FlatBufferBuilder builder, int endFrame) { builder.AddInt(3, endFrame, 0); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(4, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.EventData> EndEventData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.EventData>(o);
  }
  public EventDataT UnPack() {
    var _o = new EventDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventDataT _o) {
    _o.TrackIndex = this.TrackIndex;
    _o.Name = this.Name;
    _o.BeginFrame = this.BeginFrame;
    _o.EndFrame = this.EndFrame;
    _o.Values = new List<gfl.anm2.fb.EventValueT>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j).HasValue ? this.Values(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.EventData> Pack(FlatBufferBuilder builder, EventDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.EventData>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new Offset<gfl.anm2.fb.EventValue>[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = gfl.anm2.fb.EventValue.Pack(builder, _o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    return CreateEventData(
      builder,
      _o.TrackIndex,
      _name,
      _o.BeginFrame,
      _o.EndFrame,
      _values);
  }
};

public class EventDataT
{
  [Newtonsoft.Json.JsonProperty("trackIndex")]
  public int TrackIndex { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }
  [Newtonsoft.Json.JsonProperty("beginFrame")]
  public int BeginFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("endFrame")]
  public int EndFrame { get; set; }
  [Newtonsoft.Json.JsonProperty("values")]
  public List<gfl.anm2.fb.EventValueT> Values { get; set; }

  public EventDataT() {
    this.TrackIndex = 0;
    this.Name = null;
    this.BeginFrame = 0;
    this.EndFrame = 0;
    this.Values = null;
  }
}

public struct AnimationEventTrackData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationEventTrackData GetRootAsAnimationEventTrackData(ByteBuffer _bb) { return GetRootAsAnimationEventTrackData(_bb, new AnimationEventTrackData()); }
  public static AnimationEventTrackData GetRootAsAnimationEventTrackData(ByteBuffer _bb, AnimationEventTrackData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationEventTrackData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.anm2.fb.EventData? Events(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.anm2.fb.EventData?)(new gfl.anm2.fb.EventData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.anm2.fb.AnimationEventTrackData> CreateAnimationEventTrackData(FlatBufferBuilder builder,
      VectorOffset eventsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnimationEventTrackData.AddEvents(builder, eventsOffset);
    return AnimationEventTrackData.EndAnimationEventTrackData(builder);
  }

  public static void StartAnimationEventTrackData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(0, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEventsVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2.fb.EventData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.anm2.fb.AnimationEventTrackData> EndAnimationEventTrackData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2.fb.AnimationEventTrackData>(o);
  }
  public static void FinishAnimationEventTrackDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationEventTrackData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationEventTrackDataBuffer(FlatBufferBuilder builder, Offset<gfl.anm2.fb.AnimationEventTrackData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationEventTrackDataT UnPack() {
    var _o = new AnimationEventTrackDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationEventTrackDataT _o) {
    _o.Events = new List<gfl.anm2.fb.EventDataT>();
    for (var _j = 0; _j < this.EventsLength; ++_j) {_o.Events.Add(this.Events(_j).HasValue ? this.Events(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.anm2.fb.AnimationEventTrackData> Pack(FlatBufferBuilder builder, AnimationEventTrackDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2.fb.AnimationEventTrackData>);
    var _events = default(VectorOffset);
    if (_o.Events != null) {
      var __events = new Offset<gfl.anm2.fb.EventData>[_o.Events.Count];
      for (var _j = 0; _j < __events.Length; ++_j) { __events[_j] = gfl.anm2.fb.EventData.Pack(builder, _o.Events[_j]); }
      _events = CreateEventsVector(builder, __events);
    }
    return CreateAnimationEventTrackData(
      builder,
      _events);
  }
};

public class AnimationEventTrackDataT
{
  [Newtonsoft.Json.JsonProperty("events")]
  public List<gfl.anm2.fb.EventDataT> Events { get; set; }

  public AnimationEventTrackDataT() {
    this.Events = null;
  }

  public static AnimationEventTrackDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationEventTrackDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationEventTrackDataT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationEventTrackData.GetRootAsAnimationEventTrackData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationEventTrackData.FinishAnimationEventTrackDataBuffer(fbb, AnimationEventTrackData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
