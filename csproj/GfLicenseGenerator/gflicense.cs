// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.framework.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GfLicense : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GfLicense GetRootAsGfLicense(ByteBuffer _bb) { return GetRootAsGfLicense(_bb, new GfLicense()); }
  public static GfLicense GetRootAsGfLicense(ByteBuffer _bb, GfLicense obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GfLicense __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateVersion(uint version) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, version); return true; } else { return false; } }
  public byte HashCode(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int HashCodeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHashCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHashCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHashCodeArray() { return __p.__vector_as_array<byte>(6); }
  public bool MutateHashCode(int j, byte hashCode) { int o = __p.__offset(6); if (o != 0) { __p.bb.Put(__p.__vector(o) + j * 1, hashCode); return true; } else { return false; } }
  public byte Iv(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int IvLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIvBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIvBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIvArray() { return __p.__vector_as_array<byte>(8); }
  public bool MutateIv(int j, byte iv) { int o = __p.__offset(8); if (o != 0) { __p.bb.Put(__p.__vector(o) + j * 1, iv); return true; } else { return false; } }
  public byte Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(10); }
  public bool MutateData(int j, byte data) { int o = __p.__offset(10); if (o != 0) { __p.bb.Put(__p.__vector(o) + j * 1, data); return true; } else { return false; } }

  public static Offset<gfl.framework.fb.GfLicense> CreateGfLicense(FlatBufferBuilder builder,
      uint version = 0,
      VectorOffset hashCodeOffset = default(VectorOffset),
      VectorOffset ivOffset = default(VectorOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(4);
    GfLicense.AddData(builder, dataOffset);
    GfLicense.AddIv(builder, ivOffset);
    GfLicense.AddHashCode(builder, hashCodeOffset);
    GfLicense.AddVersion(builder, version);
    return GfLicense.EndGfLicense(builder);
  }

  public static void StartGfLicense(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 0); }
  public static void AddHashCode(FlatBufferBuilder builder, VectorOffset hashCodeOffset) { builder.AddOffset(1, hashCodeOffset.Value, 0); }
  public static VectorOffset CreateHashCodeVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHashCodeVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartHashCodeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddIv(FlatBufferBuilder builder, VectorOffset ivOffset) { builder.AddOffset(2, ivOffset.Value, 0); }
  public static VectorOffset CreateIvVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIvVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartIvVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<gfl.framework.fb.GfLicense> EndGfLicense(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.framework.fb.GfLicense>(o);
  }
  public static void FinishGfLicenseBuffer(FlatBufferBuilder builder, Offset<gfl.framework.fb.GfLicense> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGfLicenseBuffer(FlatBufferBuilder builder, Offset<gfl.framework.fb.GfLicense> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GfLicenseT UnPack() {
    var _o = new GfLicenseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GfLicenseT _o) {
    _o.Version = this.Version;
    _o.HashCode = new List<byte>();
    for (var _j = 0; _j < this.HashCodeLength; ++_j) {_o.HashCode.Add(this.HashCode(_j));}
    _o.Iv = new List<byte>();
    for (var _j = 0; _j < this.IvLength; ++_j) {_o.Iv.Add(this.Iv(_j));}
    _o.Data = new List<byte>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<gfl.framework.fb.GfLicense> Pack(FlatBufferBuilder builder, GfLicenseT _o) {
    if (_o == null) return default(Offset<gfl.framework.fb.GfLicense>);
    var _hashCode = default(VectorOffset);
    if (_o.HashCode != null) {
      var __hashCode = _o.HashCode.ToArray();
      _hashCode = CreateHashCodeVector(builder, __hashCode);
    }
    var _iv = default(VectorOffset);
    if (_o.Iv != null) {
      var __iv = _o.Iv.ToArray();
      _iv = CreateIvVector(builder, __iv);
    }
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = _o.Data.ToArray();
      _data = CreateDataVector(builder, __data);
    }
    return CreateGfLicense(
      builder,
      _o.Version,
      _hashCode,
      _iv,
      _data);
  }
};

public class GfLicenseT
{
  [Newtonsoft.Json.JsonProperty("version")]
  public uint Version { get; set; }
  [Newtonsoft.Json.JsonProperty("hashCode")]
  public List<byte> HashCode { get; set; }
  [Newtonsoft.Json.JsonProperty("iv")]
  public List<byte> Iv { get; set; }
  [Newtonsoft.Json.JsonProperty("data")]
  public List<byte> Data { get; set; }

  public GfLicenseT() {
    this.Version = 0;
    this.HashCode = null;
    this.Iv = null;
    this.Data = null;
  }

  public static GfLicenseT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<GfLicenseT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static GfLicenseT DeserializeFromBinary(byte[] fbBuffer) {
    return GfLicense.GetRootAsGfLicense(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GfLicense.FinishGfLicenseBuffer(fbb, GfLicense.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
