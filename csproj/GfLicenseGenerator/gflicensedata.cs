// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.framework.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GfLicenseData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static GfLicenseData GetRootAsGfLicenseData(ByteBuffer _bb) { return GetRootAsGfLicenseData(_bb, new GfLicenseData()); }
  public static GfLicenseData GetRootAsGfLicenseData(ByteBuffer _bb, GfLicenseData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GfLicenseData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string UserName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUserNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUserNameArray() { return __p.__vector_as_array<byte>(4); }
  public string CompanyName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompanyNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCompanyNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCompanyNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ProjectName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProjectNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetProjectNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetProjectNameArray() { return __p.__vector_as_array<byte>(8); }
  public string ExtraFlags(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtraFlagsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.framework.fb.GfLicenseData> CreateGfLicenseData(FlatBufferBuilder builder,
      StringOffset userNameOffset = default(StringOffset),
      StringOffset companyNameOffset = default(StringOffset),
      StringOffset projectNameOffset = default(StringOffset),
      VectorOffset extraFlagsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    GfLicenseData.AddExtraFlags(builder, extraFlagsOffset);
    GfLicenseData.AddProjectName(builder, projectNameOffset);
    GfLicenseData.AddCompanyName(builder, companyNameOffset);
    GfLicenseData.AddUserName(builder, userNameOffset);
    return GfLicenseData.EndGfLicenseData(builder);
  }

  public static void StartGfLicenseData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUserName(FlatBufferBuilder builder, StringOffset userNameOffset) { builder.AddOffset(0, userNameOffset.Value, 0); }
  public static void AddCompanyName(FlatBufferBuilder builder, StringOffset companyNameOffset) { builder.AddOffset(1, companyNameOffset.Value, 0); }
  public static void AddProjectName(FlatBufferBuilder builder, StringOffset projectNameOffset) { builder.AddOffset(2, projectNameOffset.Value, 0); }
  public static void AddExtraFlags(FlatBufferBuilder builder, VectorOffset extraFlagsOffset) { builder.AddOffset(3, extraFlagsOffset.Value, 0); }
  public static VectorOffset CreateExtraFlagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtraFlagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartExtraFlagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.framework.fb.GfLicenseData> EndGfLicenseData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.framework.fb.GfLicenseData>(o);
  }
  public static void FinishGfLicenseDataBuffer(FlatBufferBuilder builder, Offset<gfl.framework.fb.GfLicenseData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGfLicenseDataBuffer(FlatBufferBuilder builder, Offset<gfl.framework.fb.GfLicenseData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GfLicenseDataT UnPack() {
    var _o = new GfLicenseDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GfLicenseDataT _o) {
    _o.UserName = this.UserName;
    _o.CompanyName = this.CompanyName;
    _o.ProjectName = this.ProjectName;
    _o.ExtraFlags = new List<string>();
    for (var _j = 0; _j < this.ExtraFlagsLength; ++_j) {_o.ExtraFlags.Add(this.ExtraFlags(_j));}
  }
  public static Offset<gfl.framework.fb.GfLicenseData> Pack(FlatBufferBuilder builder, GfLicenseDataT _o) {
    if (_o == null) return default(Offset<gfl.framework.fb.GfLicenseData>);
    var _userName = _o.UserName == null ? default(StringOffset) : builder.CreateString(_o.UserName);
    var _companyName = _o.CompanyName == null ? default(StringOffset) : builder.CreateString(_o.CompanyName);
    var _projectName = _o.ProjectName == null ? default(StringOffset) : builder.CreateString(_o.ProjectName);
    var _extraFlags = default(VectorOffset);
    if (_o.ExtraFlags != null) {
      var __extraFlags = new StringOffset[_o.ExtraFlags.Count];
      for (var _j = 0; _j < __extraFlags.Length; ++_j) { __extraFlags[_j] = builder.CreateString(_o.ExtraFlags[_j]); }
      _extraFlags = CreateExtraFlagsVector(builder, __extraFlags);
    }
    return CreateGfLicenseData(
      builder,
      _userName,
      _companyName,
      _projectName,
      _extraFlags);
  }
};

public class GfLicenseDataT
{
  [Newtonsoft.Json.JsonProperty("userName")]
  public string UserName { get; set; }
  [Newtonsoft.Json.JsonProperty("companyName")]
  public string CompanyName { get; set; }
  [Newtonsoft.Json.JsonProperty("projectName")]
  public string ProjectName { get; set; }
  [Newtonsoft.Json.JsonProperty("extraFlags")]
  public List<string> ExtraFlags { get; set; }

  public GfLicenseDataT() {
    this.UserName = null;
    this.CompanyName = null;
    this.ProjectName = null;
    this.ExtraFlags = null;
  }

  public static GfLicenseDataT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<GfLicenseDataT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static GfLicenseDataT DeserializeFromBinary(byte[] fbBuffer) {
    return GfLicenseData.GetRootAsGfLicenseData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GfLicenseData.FinishGfLicenseDataBuffer(fbb, GfLicenseData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
