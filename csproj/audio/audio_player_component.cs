// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AudioPlayerComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioPlayerComponent GetRootAsAudioPlayerComponent(ByteBuffer _bb) { return GetRootAsAudioPlayerComponent(_bb, new AudioPlayerComponent()); }
  public static AudioPlayerComponent GetRootAsAudioPlayerComponent(ByteBuffer _bb, AudioPlayerComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioPlayerComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool StartWithDisabled { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.audio.fb.AudioPlayerComponent> CreateAudioPlayerComponent(FlatBufferBuilder builder,
      bool startWithDisabled = false) {
    builder.StartTable(1);
    AudioPlayerComponent.AddStartWithDisabled(builder, startWithDisabled);
    return AudioPlayerComponent.EndAudioPlayerComponent(builder);
  }

  public static void StartAudioPlayerComponent(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddStartWithDisabled(FlatBufferBuilder builder, bool startWithDisabled) { builder.AddBool(0, startWithDisabled, false); }
  public static Offset<gfl.audio.fb.AudioPlayerComponent> EndAudioPlayerComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.AudioPlayerComponent>(o);
  }
  public static void FinishAudioPlayerComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioPlayerComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAudioPlayerComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioPlayerComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AudioPlayerComponentT UnPack() {
    var _o = new AudioPlayerComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioPlayerComponentT _o) {
    _o.StartWithDisabled = this.StartWithDisabled;
  }
  public static Offset<gfl.audio.fb.AudioPlayerComponent> Pack(FlatBufferBuilder builder, AudioPlayerComponentT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.AudioPlayerComponent>);
    return CreateAudioPlayerComponent(
      builder,
      _o.StartWithDisabled);
  }
};

public class AudioPlayerComponentT
{
  [Newtonsoft.Json.JsonProperty("startWithDisabled")]
  public bool StartWithDisabled { get; set; }

  public AudioPlayerComponentT() {
    this.StartWithDisabled = false;
  }

  public static AudioPlayerComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioPlayerComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AudioPlayerComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AudioPlayerComponent.GetRootAsAudioPlayerComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AudioPlayerComponent.FinishAudioPlayerComponentBuffer(fbb, AudioPlayerComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
