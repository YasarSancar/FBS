// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AudioBankComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioBankComponent GetRootAsAudioBankComponent(ByteBuffer _bb) { return GetRootAsAudioBankComponent(_bb, new AudioBankComponent()); }
  public static AudioBankComponent GetRootAsAudioBankComponent(ByteBuffer _bb, AudioBankComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioBankComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string BankNames(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BankNamesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool IsAsyncLoad { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool LoadOnAwake { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<gfl.audio.fb.AudioBankComponent> CreateAudioBankComponent(FlatBufferBuilder builder,
      VectorOffset bankNamesOffset = default(VectorOffset),
      bool isAsyncLoad = false,
      bool loadOnAwake = true) {
    builder.StartTable(3);
    AudioBankComponent.AddBankNames(builder, bankNamesOffset);
    AudioBankComponent.AddLoadOnAwake(builder, loadOnAwake);
    AudioBankComponent.AddIsAsyncLoad(builder, isAsyncLoad);
    return AudioBankComponent.EndAudioBankComponent(builder);
  }

  public static void StartAudioBankComponent(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddBankNames(FlatBufferBuilder builder, VectorOffset bankNamesOffset) { builder.AddOffset(0, bankNamesOffset.Value, 0); }
  public static VectorOffset CreateBankNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBankNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBankNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIsAsyncLoad(FlatBufferBuilder builder, bool isAsyncLoad) { builder.AddBool(1, isAsyncLoad, false); }
  public static void AddLoadOnAwake(FlatBufferBuilder builder, bool loadOnAwake) { builder.AddBool(2, loadOnAwake, true); }
  public static Offset<gfl.audio.fb.AudioBankComponent> EndAudioBankComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.AudioBankComponent>(o);
  }
  public static void FinishAudioBankComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioBankComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAudioBankComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioBankComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AudioBankComponentT UnPack() {
    var _o = new AudioBankComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioBankComponentT _o) {
    _o.BankNames = new List<string>();
    for (var _j = 0; _j < this.BankNamesLength; ++_j) {_o.BankNames.Add(this.BankNames(_j));}
    _o.IsAsyncLoad = this.IsAsyncLoad;
    _o.LoadOnAwake = this.LoadOnAwake;
  }
  public static Offset<gfl.audio.fb.AudioBankComponent> Pack(FlatBufferBuilder builder, AudioBankComponentT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.AudioBankComponent>);
    var _bankNames = default(VectorOffset);
    if (_o.BankNames != null) {
      var __bankNames = new StringOffset[_o.BankNames.Count];
      for (var _j = 0; _j < __bankNames.Length; ++_j) { __bankNames[_j] = builder.CreateString(_o.BankNames[_j]); }
      _bankNames = CreateBankNamesVector(builder, __bankNames);
    }
    return CreateAudioBankComponent(
      builder,
      _bankNames,
      _o.IsAsyncLoad,
      _o.LoadOnAwake);
  }
};

public class AudioBankComponentT
{
  [Newtonsoft.Json.JsonProperty("bankNames")]
  public List<string> BankNames { get; set; }
  [Newtonsoft.Json.JsonProperty("isAsyncLoad")]
  public bool IsAsyncLoad { get; set; }
  [Newtonsoft.Json.JsonProperty("loadOnAwake")]
  public bool LoadOnAwake { get; set; }

  public AudioBankComponentT() {
    this.BankNames = null;
    this.IsAsyncLoad = false;
    this.LoadOnAwake = true;
  }

  public static AudioBankComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioBankComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AudioBankComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AudioBankComponent.GetRootAsAudioBankComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AudioBankComponent.FinishAudioBankComponentBuffer(fbb, AudioBankComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
