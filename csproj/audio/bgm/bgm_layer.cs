// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BGMStoreBehaviour : int
{
  Stop = 0,
  AutoPlay = 1,
  Suspend = 2,
  AutoResume = 3,
};

public struct BGMLayer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BGMLayer GetRootAsBGMLayer(ByteBuffer _bb) { return GetRootAsBGMLayer(_bb, new BGMLayer()); }
  public static BGMLayer GetRootAsBGMLayer(ByteBuffer _bb, BGMLayer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMLayer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LayerName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLayerNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLayerNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Priority { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.audio.fb.BGMStoreBehaviour StoreBehaviour { get { int o = __p.__offset(8); return o != 0 ? (gfl.audio.fb.BGMStoreBehaviour)__p.bb.GetInt(o + __p.bb_pos) : gfl.audio.fb.BGMStoreBehaviour.AutoResume; } }
  public bool ShouldResetAfterStop { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShouldRestoreAfterFinish { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool AllowReTriggerEvent { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.audio.fb.BGMLayer> CreateBGMLayer(FlatBufferBuilder builder,
      StringOffset layerNameOffset = default(StringOffset),
      int priority = 0,
      gfl.audio.fb.BGMStoreBehaviour storeBehaviour = gfl.audio.fb.BGMStoreBehaviour.AutoResume,
      bool shouldResetAfterStop = false,
      bool shouldRestoreAfterFinish = false,
      bool allowReTriggerEvent = false) {
    builder.StartTable(6);
    BGMLayer.AddStoreBehaviour(builder, storeBehaviour);
    BGMLayer.AddPriority(builder, priority);
    BGMLayer.AddLayerName(builder, layerNameOffset);
    BGMLayer.AddAllowReTriggerEvent(builder, allowReTriggerEvent);
    BGMLayer.AddShouldRestoreAfterFinish(builder, shouldRestoreAfterFinish);
    BGMLayer.AddShouldResetAfterStop(builder, shouldResetAfterStop);
    return BGMLayer.EndBGMLayer(builder);
  }

  public static void StartBGMLayer(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddLayerName(FlatBufferBuilder builder, StringOffset layerNameOffset) { builder.AddOffset(0, layerNameOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(1, priority, 0); }
  public static void AddStoreBehaviour(FlatBufferBuilder builder, gfl.audio.fb.BGMStoreBehaviour storeBehaviour) { builder.AddInt(2, (int)storeBehaviour, 3); }
  public static void AddShouldResetAfterStop(FlatBufferBuilder builder, bool shouldResetAfterStop) { builder.AddBool(3, shouldResetAfterStop, false); }
  public static void AddShouldRestoreAfterFinish(FlatBufferBuilder builder, bool shouldRestoreAfterFinish) { builder.AddBool(4, shouldRestoreAfterFinish, false); }
  public static void AddAllowReTriggerEvent(FlatBufferBuilder builder, bool allowReTriggerEvent) { builder.AddBool(5, allowReTriggerEvent, false); }
  public static Offset<gfl.audio.fb.BGMLayer> EndBGMLayer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.BGMLayer>(o);
  }
  public BGMLayerT UnPack() {
    var _o = new BGMLayerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMLayerT _o) {
    _o.LayerName = this.LayerName;
    _o.Priority = this.Priority;
    _o.StoreBehaviour = this.StoreBehaviour;
    _o.ShouldResetAfterStop = this.ShouldResetAfterStop;
    _o.ShouldRestoreAfterFinish = this.ShouldRestoreAfterFinish;
    _o.AllowReTriggerEvent = this.AllowReTriggerEvent;
  }
  public static Offset<gfl.audio.fb.BGMLayer> Pack(FlatBufferBuilder builder, BGMLayerT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.BGMLayer>);
    var _layerName = _o.LayerName == null ? default(StringOffset) : builder.CreateString(_o.LayerName);
    return CreateBGMLayer(
      builder,
      _layerName,
      _o.Priority,
      _o.StoreBehaviour,
      _o.ShouldResetAfterStop,
      _o.ShouldRestoreAfterFinish,
      _o.AllowReTriggerEvent);
  }
};

public class BGMLayerT
{
  [Newtonsoft.Json.JsonProperty("layerName")]
  public string LayerName { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("storeBehaviour")]
  public gfl.audio.fb.BGMStoreBehaviour StoreBehaviour { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldResetAfterStop")]
  public bool ShouldResetAfterStop { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldRestoreAfterFinish")]
  public bool ShouldRestoreAfterFinish { get; set; }
  [Newtonsoft.Json.JsonProperty("allowReTriggerEvent")]
  public bool AllowReTriggerEvent { get; set; }

  public BGMLayerT() {
    this.LayerName = null;
    this.Priority = 0;
    this.StoreBehaviour = gfl.audio.fb.BGMStoreBehaviour.AutoResume;
    this.ShouldResetAfterStop = false;
    this.ShouldRestoreAfterFinish = false;
    this.AllowReTriggerEvent = false;
  }
}

public struct BGMLayerSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BGMLayerSettings GetRootAsBGMLayerSettings(ByteBuffer _bb) { return GetRootAsBGMLayerSettings(_bb, new BGMLayerSettings()); }
  public static BGMLayerSettings GetRootAsBGMLayerSettings(ByteBuffer _bb, BGMLayerSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMLayerSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.audio.fb.BGMLayer? LayersArray(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.audio.fb.BGMLayer?)(new gfl.audio.fb.BGMLayer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LayersArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.audio.fb.BGMLayerSettings> CreateBGMLayerSettings(FlatBufferBuilder builder,
      VectorOffset layersArrayOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BGMLayerSettings.AddLayersArray(builder, layersArrayOffset);
    return BGMLayerSettings.EndBGMLayerSettings(builder);
  }

  public static void StartBGMLayerSettings(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLayersArray(FlatBufferBuilder builder, VectorOffset layersArrayOffset) { builder.AddOffset(0, layersArrayOffset.Value, 0); }
  public static VectorOffset CreateLayersArrayVector(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMLayer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLayersArrayVectorBlock(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMLayer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLayersArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.audio.fb.BGMLayerSettings> EndBGMLayerSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.BGMLayerSettings>(o);
  }
  public static void FinishBGMLayerSettingsBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMLayerSettings> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBGMLayerSettingsBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMLayerSettings> offset) { builder.FinishSizePrefixed(offset.Value); }
  public BGMLayerSettingsT UnPack() {
    var _o = new BGMLayerSettingsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMLayerSettingsT _o) {
    _o.LayersArray = new List<gfl.audio.fb.BGMLayerT>();
    for (var _j = 0; _j < this.LayersArrayLength; ++_j) {_o.LayersArray.Add(this.LayersArray(_j).HasValue ? this.LayersArray(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.audio.fb.BGMLayerSettings> Pack(FlatBufferBuilder builder, BGMLayerSettingsT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.BGMLayerSettings>);
    var _layersArray = default(VectorOffset);
    if (_o.LayersArray != null) {
      var __layersArray = new Offset<gfl.audio.fb.BGMLayer>[_o.LayersArray.Count];
      for (var _j = 0; _j < __layersArray.Length; ++_j) { __layersArray[_j] = gfl.audio.fb.BGMLayer.Pack(builder, _o.LayersArray[_j]); }
      _layersArray = CreateLayersArrayVector(builder, __layersArray);
    }
    return CreateBGMLayerSettings(
      builder,
      _layersArray);
  }
};

public class BGMLayerSettingsT
{
  [Newtonsoft.Json.JsonProperty("layersArray")]
  public List<gfl.audio.fb.BGMLayerT> LayersArray { get; set; }

  public BGMLayerSettingsT() {
    this.LayersArray = null;
  }

  public static BGMLayerSettingsT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<BGMLayerSettingsT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static BGMLayerSettingsT DeserializeFromBinary(byte[] fbBuffer) {
    return BGMLayerSettings.GetRootAsBGMLayerSettings(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BGMLayerSettings.FinishBGMLayerSettingsBuffer(fbb, BGMLayerSettings.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
