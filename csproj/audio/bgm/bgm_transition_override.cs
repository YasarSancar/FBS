// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum BGMTransitionOverrideType : int
{
  Any = 0,
  Layer = 1,
  Event = 2,
};

public struct BGMTransitionOverride : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BGMTransitionOverride GetRootAsBGMTransitionOverride(ByteBuffer _bb) { return GetRootAsBGMTransitionOverride(_bb, new BGMTransitionOverride()); }
  public static BGMTransitionOverride GetRootAsBGMTransitionOverride(ByteBuffer _bb, BGMTransitionOverride obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMTransitionOverride __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float FadeInTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FadeOutTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DelayTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float HoldTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool OverrideFadeInTime { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OverrideFadeOutTime { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OverrideDelayTime { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OverrideHoldTime { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public gfl.audio.fb.AudioCurveType FadeInCurve { get { int o = __p.__offset(20); return o != 0 ? (gfl.audio.fb.AudioCurveType)__p.bb.GetInt(o + __p.bb_pos) : gfl.audio.fb.AudioCurveType.Linear; } }
  public gfl.audio.fb.AudioCurveType FadeOutCurve { get { int o = __p.__offset(22); return o != 0 ? (gfl.audio.fb.AudioCurveType)__p.bb.GetInt(o + __p.bb_pos) : gfl.audio.fb.AudioCurveType.Linear; } }
  public bool OverrideFadeInCurve { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OverrideFadeOutCurve { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.audio.fb.BGMTransitionOverride> CreateBGMTransitionOverride(FlatBufferBuilder builder,
      float fadeInTime = 0.0f,
      float fadeOutTime = 0.0f,
      float delayTime = 0.0f,
      float holdTime = 0.0f,
      bool overrideFadeInTime = false,
      bool overrideFadeOutTime = false,
      bool overrideDelayTime = false,
      bool overrideHoldTime = false,
      gfl.audio.fb.AudioCurveType fadeInCurve = gfl.audio.fb.AudioCurveType.Linear,
      gfl.audio.fb.AudioCurveType fadeOutCurve = gfl.audio.fb.AudioCurveType.Linear,
      bool overrideFadeInCurve = false,
      bool overrideFadeOutCurve = false) {
    builder.StartTable(12);
    BGMTransitionOverride.AddFadeOutCurve(builder, fadeOutCurve);
    BGMTransitionOverride.AddFadeInCurve(builder, fadeInCurve);
    BGMTransitionOverride.AddHoldTime(builder, holdTime);
    BGMTransitionOverride.AddDelayTime(builder, delayTime);
    BGMTransitionOverride.AddFadeOutTime(builder, fadeOutTime);
    BGMTransitionOverride.AddFadeInTime(builder, fadeInTime);
    BGMTransitionOverride.AddOverrideFadeOutCurve(builder, overrideFadeOutCurve);
    BGMTransitionOverride.AddOverrideFadeInCurve(builder, overrideFadeInCurve);
    BGMTransitionOverride.AddOverrideHoldTime(builder, overrideHoldTime);
    BGMTransitionOverride.AddOverrideDelayTime(builder, overrideDelayTime);
    BGMTransitionOverride.AddOverrideFadeOutTime(builder, overrideFadeOutTime);
    BGMTransitionOverride.AddOverrideFadeInTime(builder, overrideFadeInTime);
    return BGMTransitionOverride.EndBGMTransitionOverride(builder);
  }

  public static void StartBGMTransitionOverride(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddFadeInTime(FlatBufferBuilder builder, float fadeInTime) { builder.AddFloat(0, fadeInTime, 0.0f); }
  public static void AddFadeOutTime(FlatBufferBuilder builder, float fadeOutTime) { builder.AddFloat(1, fadeOutTime, 0.0f); }
  public static void AddDelayTime(FlatBufferBuilder builder, float delayTime) { builder.AddFloat(2, delayTime, 0.0f); }
  public static void AddHoldTime(FlatBufferBuilder builder, float holdTime) { builder.AddFloat(3, holdTime, 0.0f); }
  public static void AddOverrideFadeInTime(FlatBufferBuilder builder, bool overrideFadeInTime) { builder.AddBool(4, overrideFadeInTime, false); }
  public static void AddOverrideFadeOutTime(FlatBufferBuilder builder, bool overrideFadeOutTime) { builder.AddBool(5, overrideFadeOutTime, false); }
  public static void AddOverrideDelayTime(FlatBufferBuilder builder, bool overrideDelayTime) { builder.AddBool(6, overrideDelayTime, false); }
  public static void AddOverrideHoldTime(FlatBufferBuilder builder, bool overrideHoldTime) { builder.AddBool(7, overrideHoldTime, false); }
  public static void AddFadeInCurve(FlatBufferBuilder builder, gfl.audio.fb.AudioCurveType fadeInCurve) { builder.AddInt(8, (int)fadeInCurve, 4); }
  public static void AddFadeOutCurve(FlatBufferBuilder builder, gfl.audio.fb.AudioCurveType fadeOutCurve) { builder.AddInt(9, (int)fadeOutCurve, 4); }
  public static void AddOverrideFadeInCurve(FlatBufferBuilder builder, bool overrideFadeInCurve) { builder.AddBool(10, overrideFadeInCurve, false); }
  public static void AddOverrideFadeOutCurve(FlatBufferBuilder builder, bool overrideFadeOutCurve) { builder.AddBool(11, overrideFadeOutCurve, false); }
  public static Offset<gfl.audio.fb.BGMTransitionOverride> EndBGMTransitionOverride(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.BGMTransitionOverride>(o);
  }
  public BGMTransitionOverrideT UnPack() {
    var _o = new BGMTransitionOverrideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMTransitionOverrideT _o) {
    _o.FadeInTime = this.FadeInTime;
    _o.FadeOutTime = this.FadeOutTime;
    _o.DelayTime = this.DelayTime;
    _o.HoldTime = this.HoldTime;
    _o.OverrideFadeInTime = this.OverrideFadeInTime;
    _o.OverrideFadeOutTime = this.OverrideFadeOutTime;
    _o.OverrideDelayTime = this.OverrideDelayTime;
    _o.OverrideHoldTime = this.OverrideHoldTime;
    _o.FadeInCurve = this.FadeInCurve;
    _o.FadeOutCurve = this.FadeOutCurve;
    _o.OverrideFadeInCurve = this.OverrideFadeInCurve;
    _o.OverrideFadeOutCurve = this.OverrideFadeOutCurve;
  }
  public static Offset<gfl.audio.fb.BGMTransitionOverride> Pack(FlatBufferBuilder builder, BGMTransitionOverrideT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.BGMTransitionOverride>);
    return CreateBGMTransitionOverride(
      builder,
      _o.FadeInTime,
      _o.FadeOutTime,
      _o.DelayTime,
      _o.HoldTime,
      _o.OverrideFadeInTime,
      _o.OverrideFadeOutTime,
      _o.OverrideDelayTime,
      _o.OverrideHoldTime,
      _o.FadeInCurve,
      _o.FadeOutCurve,
      _o.OverrideFadeInCurve,
      _o.OverrideFadeOutCurve);
  }
};

public class BGMTransitionOverrideT
{
  [Newtonsoft.Json.JsonProperty("fadeInTime")]
  public float FadeInTime { get; set; }
  [Newtonsoft.Json.JsonProperty("fadeOutTime")]
  public float FadeOutTime { get; set; }
  [Newtonsoft.Json.JsonProperty("delayTime")]
  public float DelayTime { get; set; }
  [Newtonsoft.Json.JsonProperty("holdTime")]
  public float HoldTime { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideFadeInTime")]
  public bool OverrideFadeInTime { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideFadeOutTime")]
  public bool OverrideFadeOutTime { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideDelayTime")]
  public bool OverrideDelayTime { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideHoldTime")]
  public bool OverrideHoldTime { get; set; }
  [Newtonsoft.Json.JsonProperty("fadeInCurve")]
  public gfl.audio.fb.AudioCurveType FadeInCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("fadeOutCurve")]
  public gfl.audio.fb.AudioCurveType FadeOutCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideFadeInCurve")]
  public bool OverrideFadeInCurve { get; set; }
  [Newtonsoft.Json.JsonProperty("overrideFadeOutCurve")]
  public bool OverrideFadeOutCurve { get; set; }

  public BGMTransitionOverrideT() {
    this.FadeInTime = 0.0f;
    this.FadeOutTime = 0.0f;
    this.DelayTime = 0.0f;
    this.HoldTime = 0.0f;
    this.OverrideFadeInTime = false;
    this.OverrideFadeOutTime = false;
    this.OverrideDelayTime = false;
    this.OverrideHoldTime = false;
    this.FadeInCurve = gfl.audio.fb.AudioCurveType.Linear;
    this.FadeOutCurve = gfl.audio.fb.AudioCurveType.Linear;
    this.OverrideFadeInCurve = false;
    this.OverrideFadeOutCurve = false;
  }
}

public struct BGMTransitionOverrideRule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BGMTransitionOverrideRule GetRootAsBGMTransitionOverrideRule(ByteBuffer _bb) { return GetRootAsBGMTransitionOverrideRule(_bb, new BGMTransitionOverrideRule()); }
  public static BGMTransitionOverrideRule GetRootAsBGMTransitionOverrideRule(ByteBuffer _bb, BGMTransitionOverrideRule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMTransitionOverrideRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.audio.fb.BGMTransitionOverrideType SrcType { get { int o = __p.__offset(4); return o != 0 ? (gfl.audio.fb.BGMTransitionOverrideType)__p.bb.GetInt(o + __p.bb_pos) : gfl.audio.fb.BGMTransitionOverrideType.Any; } }
  public string SrcName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSrcNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSrcNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSrcNameArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.audio.fb.BGMTransitionOverrideType DstType { get { int o = __p.__offset(8); return o != 0 ? (gfl.audio.fb.BGMTransitionOverrideType)__p.bb.GetInt(o + __p.bb_pos) : gfl.audio.fb.BGMTransitionOverrideType.Any; } }
  public string DstName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDstNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDstNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDstNameArray() { return __p.__vector_as_array<byte>(10); }
  public gfl.audio.fb.BGMTransitionOverride? TransitionOverride { get { int o = __p.__offset(12); return o != 0 ? (gfl.audio.fb.BGMTransitionOverride?)(new gfl.audio.fb.BGMTransitionOverride()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<gfl.audio.fb.BGMTransitionOverrideRule> CreateBGMTransitionOverrideRule(FlatBufferBuilder builder,
      gfl.audio.fb.BGMTransitionOverrideType srcType = gfl.audio.fb.BGMTransitionOverrideType.Any,
      StringOffset srcNameOffset = default(StringOffset),
      gfl.audio.fb.BGMTransitionOverrideType dstType = gfl.audio.fb.BGMTransitionOverrideType.Any,
      StringOffset dstNameOffset = default(StringOffset),
      Offset<gfl.audio.fb.BGMTransitionOverride> transitionOverrideOffset = default(Offset<gfl.audio.fb.BGMTransitionOverride>)) {
    builder.StartTable(5);
    BGMTransitionOverrideRule.AddTransitionOverride(builder, transitionOverrideOffset);
    BGMTransitionOverrideRule.AddDstName(builder, dstNameOffset);
    BGMTransitionOverrideRule.AddDstType(builder, dstType);
    BGMTransitionOverrideRule.AddSrcName(builder, srcNameOffset);
    BGMTransitionOverrideRule.AddSrcType(builder, srcType);
    return BGMTransitionOverrideRule.EndBGMTransitionOverrideRule(builder);
  }

  public static void StartBGMTransitionOverrideRule(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSrcType(FlatBufferBuilder builder, gfl.audio.fb.BGMTransitionOverrideType srcType) { builder.AddInt(0, (int)srcType, 0); }
  public static void AddSrcName(FlatBufferBuilder builder, StringOffset srcNameOffset) { builder.AddOffset(1, srcNameOffset.Value, 0); }
  public static void AddDstType(FlatBufferBuilder builder, gfl.audio.fb.BGMTransitionOverrideType dstType) { builder.AddInt(2, (int)dstType, 0); }
  public static void AddDstName(FlatBufferBuilder builder, StringOffset dstNameOffset) { builder.AddOffset(3, dstNameOffset.Value, 0); }
  public static void AddTransitionOverride(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMTransitionOverride> transitionOverrideOffset) { builder.AddOffset(4, transitionOverrideOffset.Value, 0); }
  public static Offset<gfl.audio.fb.BGMTransitionOverrideRule> EndBGMTransitionOverrideRule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.BGMTransitionOverrideRule>(o);
  }
  public BGMTransitionOverrideRuleT UnPack() {
    var _o = new BGMTransitionOverrideRuleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMTransitionOverrideRuleT _o) {
    _o.SrcType = this.SrcType;
    _o.SrcName = this.SrcName;
    _o.DstType = this.DstType;
    _o.DstName = this.DstName;
    _o.TransitionOverride = this.TransitionOverride.HasValue ? this.TransitionOverride.Value.UnPack() : null;
  }
  public static Offset<gfl.audio.fb.BGMTransitionOverrideRule> Pack(FlatBufferBuilder builder, BGMTransitionOverrideRuleT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.BGMTransitionOverrideRule>);
    var _srcName = _o.SrcName == null ? default(StringOffset) : builder.CreateString(_o.SrcName);
    var _dstName = _o.DstName == null ? default(StringOffset) : builder.CreateString(_o.DstName);
    var _transitionOverride = _o.TransitionOverride == null ? default(Offset<gfl.audio.fb.BGMTransitionOverride>) : gfl.audio.fb.BGMTransitionOverride.Pack(builder, _o.TransitionOverride);
    return CreateBGMTransitionOverrideRule(
      builder,
      _o.SrcType,
      _srcName,
      _o.DstType,
      _dstName,
      _transitionOverride);
  }
};

public class BGMTransitionOverrideRuleT
{
  [Newtonsoft.Json.JsonProperty("srcType")]
  public gfl.audio.fb.BGMTransitionOverrideType SrcType { get; set; }
  [Newtonsoft.Json.JsonProperty("srcName")]
  public string SrcName { get; set; }
  [Newtonsoft.Json.JsonProperty("dstType")]
  public gfl.audio.fb.BGMTransitionOverrideType DstType { get; set; }
  [Newtonsoft.Json.JsonProperty("dstName")]
  public string DstName { get; set; }
  [Newtonsoft.Json.JsonProperty("transitionOverride")]
  public gfl.audio.fb.BGMTransitionOverrideT TransitionOverride { get; set; }

  public BGMTransitionOverrideRuleT() {
    this.SrcType = gfl.audio.fb.BGMTransitionOverrideType.Any;
    this.SrcName = null;
    this.DstType = gfl.audio.fb.BGMTransitionOverrideType.Any;
    this.DstName = null;
    this.TransitionOverride = null;
  }
}

public struct BGMTransitionOverrides : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BGMTransitionOverrides GetRootAsBGMTransitionOverrides(ByteBuffer _bb) { return GetRootAsBGMTransitionOverrides(_bb, new BGMTransitionOverrides()); }
  public static BGMTransitionOverrides GetRootAsBGMTransitionOverrides(ByteBuffer _bb, BGMTransitionOverrides obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGMTransitionOverrides __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public gfl.audio.fb.BGMTransitionOverrideRule? OverridesArray(int j) { int o = __p.__offset(4); return o != 0 ? (gfl.audio.fb.BGMTransitionOverrideRule?)(new gfl.audio.fb.BGMTransitionOverrideRule()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OverridesArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<gfl.audio.fb.BGMTransitionOverrides> CreateBGMTransitionOverrides(FlatBufferBuilder builder,
      VectorOffset overridesArrayOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BGMTransitionOverrides.AddOverridesArray(builder, overridesArrayOffset);
    return BGMTransitionOverrides.EndBGMTransitionOverrides(builder);
  }

  public static void StartBGMTransitionOverrides(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddOverridesArray(FlatBufferBuilder builder, VectorOffset overridesArrayOffset) { builder.AddOffset(0, overridesArrayOffset.Value, 0); }
  public static VectorOffset CreateOverridesArrayVector(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMTransitionOverrideRule>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOverridesArrayVectorBlock(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMTransitionOverrideRule>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOverridesArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<gfl.audio.fb.BGMTransitionOverrides> EndBGMTransitionOverrides(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.BGMTransitionOverrides>(o);
  }
  public static void FinishBGMTransitionOverridesBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMTransitionOverrides> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBGMTransitionOverridesBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.BGMTransitionOverrides> offset) { builder.FinishSizePrefixed(offset.Value); }
  public BGMTransitionOverridesT UnPack() {
    var _o = new BGMTransitionOverridesT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGMTransitionOverridesT _o) {
    _o.OverridesArray = new List<gfl.audio.fb.BGMTransitionOverrideRuleT>();
    for (var _j = 0; _j < this.OverridesArrayLength; ++_j) {_o.OverridesArray.Add(this.OverridesArray(_j).HasValue ? this.OverridesArray(_j).Value.UnPack() : null);}
  }
  public static Offset<gfl.audio.fb.BGMTransitionOverrides> Pack(FlatBufferBuilder builder, BGMTransitionOverridesT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.BGMTransitionOverrides>);
    var _overridesArray = default(VectorOffset);
    if (_o.OverridesArray != null) {
      var __overridesArray = new Offset<gfl.audio.fb.BGMTransitionOverrideRule>[_o.OverridesArray.Count];
      for (var _j = 0; _j < __overridesArray.Length; ++_j) { __overridesArray[_j] = gfl.audio.fb.BGMTransitionOverrideRule.Pack(builder, _o.OverridesArray[_j]); }
      _overridesArray = CreateOverridesArrayVector(builder, __overridesArray);
    }
    return CreateBGMTransitionOverrides(
      builder,
      _overridesArray);
  }
};

public class BGMTransitionOverridesT
{
  [Newtonsoft.Json.JsonProperty("overridesArray")]
  public List<gfl.audio.fb.BGMTransitionOverrideRuleT> OverridesArray { get; set; }

  public BGMTransitionOverridesT() {
    this.OverridesArray = null;
  }

  public static BGMTransitionOverridesT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<BGMTransitionOverridesT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static BGMTransitionOverridesT DeserializeFromBinary(byte[] fbBuffer) {
    return BGMTransitionOverrides.GetRootAsBGMTransitionOverrides(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BGMTransitionOverrides.FinishBGMTransitionOverridesBuffer(fbb, BGMTransitionOverrides.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
