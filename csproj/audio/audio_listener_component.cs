// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AudioListenerComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioListenerComponent GetRootAsAudioListenerComponent(ByteBuffer _bb) { return GetRootAsAudioListenerComponent(_bb, new AudioListenerComponent()); }
  public static AudioListenerComponent GetRootAsAudioListenerComponent(ByteBuffer _bb, AudioListenerComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioListenerComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SubListenerName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubListenerNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSubListenerNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSubListenerNameArray() { return __p.__vector_as_array<byte>(4); }
  public bool ShouldRegister { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.audio.fb.AudioListenerComponent> CreateAudioListenerComponent(FlatBufferBuilder builder,
      StringOffset subListenerNameOffset = default(StringOffset),
      bool shouldRegister = false) {
    builder.StartTable(2);
    AudioListenerComponent.AddSubListenerName(builder, subListenerNameOffset);
    AudioListenerComponent.AddShouldRegister(builder, shouldRegister);
    return AudioListenerComponent.EndAudioListenerComponent(builder);
  }

  public static void StartAudioListenerComponent(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSubListenerName(FlatBufferBuilder builder, StringOffset subListenerNameOffset) { builder.AddOffset(0, subListenerNameOffset.Value, 0); }
  public static void AddShouldRegister(FlatBufferBuilder builder, bool shouldRegister) { builder.AddBool(1, shouldRegister, false); }
  public static Offset<gfl.audio.fb.AudioListenerComponent> EndAudioListenerComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.AudioListenerComponent>(o);
  }
  public static void FinishAudioListenerComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioListenerComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAudioListenerComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioListenerComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AudioListenerComponentT UnPack() {
    var _o = new AudioListenerComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioListenerComponentT _o) {
    _o.SubListenerName = this.SubListenerName;
    _o.ShouldRegister = this.ShouldRegister;
  }
  public static Offset<gfl.audio.fb.AudioListenerComponent> Pack(FlatBufferBuilder builder, AudioListenerComponentT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.AudioListenerComponent>);
    var _subListenerName = _o.SubListenerName == null ? default(StringOffset) : builder.CreateString(_o.SubListenerName);
    return CreateAudioListenerComponent(
      builder,
      _subListenerName,
      _o.ShouldRegister);
  }
};

public class AudioListenerComponentT
{
  [Newtonsoft.Json.JsonProperty("subListenerName")]
  public string SubListenerName { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldRegister")]
  public bool ShouldRegister { get; set; }

  public AudioListenerComponentT() {
    this.SubListenerName = null;
    this.ShouldRegister = false;
  }

  public static AudioListenerComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioListenerComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AudioListenerComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AudioListenerComponent.GetRootAsAudioListenerComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AudioListenerComponent.FinishAudioListenerComponentBuffer(fbb, AudioListenerComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
