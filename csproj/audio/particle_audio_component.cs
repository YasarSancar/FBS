// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ParticleAudioComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ParticleAudioComponent GetRootAsParticleAudioComponent(ByteBuffer _bb) { return GetRootAsParticleAudioComponent(_bb, new ParticleAudioComponent()); }
  public static ParticleAudioComponent GetRootAsParticleAudioComponent(ByteBuffer _bb, ParticleAudioComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParticleAudioComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(4); }
  public string StopEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStopEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStopEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool ShouldUpdatePosition { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool PlayOnAwake { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.audio.fb.ParticleAudioComponent> CreateParticleAudioComponent(FlatBufferBuilder builder,
      StringOffset eventNameOffset = default(StringOffset),
      StringOffset stopEventNameOffset = default(StringOffset),
      bool shouldUpdatePosition = false,
      bool playOnAwake = false) {
    builder.StartTable(4);
    ParticleAudioComponent.AddStopEventName(builder, stopEventNameOffset);
    ParticleAudioComponent.AddEventName(builder, eventNameOffset);
    ParticleAudioComponent.AddPlayOnAwake(builder, playOnAwake);
    ParticleAudioComponent.AddShouldUpdatePosition(builder, shouldUpdatePosition);
    return ParticleAudioComponent.EndParticleAudioComponent(builder);
  }

  public static void StartParticleAudioComponent(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset eventNameOffset) { builder.AddOffset(0, eventNameOffset.Value, 0); }
  public static void AddStopEventName(FlatBufferBuilder builder, StringOffset stopEventNameOffset) { builder.AddOffset(1, stopEventNameOffset.Value, 0); }
  public static void AddShouldUpdatePosition(FlatBufferBuilder builder, bool shouldUpdatePosition) { builder.AddBool(2, shouldUpdatePosition, false); }
  public static void AddPlayOnAwake(FlatBufferBuilder builder, bool playOnAwake) { builder.AddBool(3, playOnAwake, false); }
  public static Offset<gfl.audio.fb.ParticleAudioComponent> EndParticleAudioComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.ParticleAudioComponent>(o);
  }
  public static void FinishParticleAudioComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.ParticleAudioComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedParticleAudioComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.ParticleAudioComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public ParticleAudioComponentT UnPack() {
    var _o = new ParticleAudioComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ParticleAudioComponentT _o) {
    _o.EventName = this.EventName;
    _o.StopEventName = this.StopEventName;
    _o.ShouldUpdatePosition = this.ShouldUpdatePosition;
    _o.PlayOnAwake = this.PlayOnAwake;
  }
  public static Offset<gfl.audio.fb.ParticleAudioComponent> Pack(FlatBufferBuilder builder, ParticleAudioComponentT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.ParticleAudioComponent>);
    var _eventName = _o.EventName == null ? default(StringOffset) : builder.CreateString(_o.EventName);
    var _stopEventName = _o.StopEventName == null ? default(StringOffset) : builder.CreateString(_o.StopEventName);
    return CreateParticleAudioComponent(
      builder,
      _eventName,
      _stopEventName,
      _o.ShouldUpdatePosition,
      _o.PlayOnAwake);
  }
};

public class ParticleAudioComponentT
{
  [Newtonsoft.Json.JsonProperty("eventName")]
  public string EventName { get; set; }
  [Newtonsoft.Json.JsonProperty("stopEventName")]
  public string StopEventName { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldUpdatePosition")]
  public bool ShouldUpdatePosition { get; set; }
  [Newtonsoft.Json.JsonProperty("playOnAwake")]
  public bool PlayOnAwake { get; set; }

  public ParticleAudioComponentT() {
    this.EventName = null;
    this.StopEventName = null;
    this.ShouldUpdatePosition = false;
    this.PlayOnAwake = false;
  }

  public static ParticleAudioComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<ParticleAudioComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static ParticleAudioComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return ParticleAudioComponent.GetRootAsParticleAudioComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ParticleAudioComponent.FinishParticleAudioComponentBuffer(fbb, ParticleAudioComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
