// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.audio.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum GeneratorType : uint
{
  AreaSound = 0,
  ShapeSound = 1,
  AmbientSound = 2,
  MultiDirectionSound = 3,
  MultiSourceSound = 4,
};

[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
public enum MusicControlType : uint
{
  LayerPlay = 0,
  EventPost = 1,
};

public struct AudioGeneratorComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AudioGeneratorComponent GetRootAsAudioGeneratorComponent(ByteBuffer _bb) { return GetRootAsAudioGeneratorComponent(_bb, new AudioGeneratorComponent()); }
  public static AudioGeneratorComponent GetRootAsAudioGeneratorComponent(ByteBuffer _bb, AudioGeneratorComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AudioGeneratorComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(4); }
  public string StopEventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStopEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStopEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public bool PlayOnAwake { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShouldUpdatePosition { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int UpdatePositionIntervalMin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public gfl.scene.fb.CollisionComponent? Collision { get { int o = __p.__offset(14); return o != 0 ? (gfl.scene.fb.CollisionComponent?)(new gfl.scene.fb.CollisionComponent()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float DistanceCulling { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.audio.fb.GeneratorType Type { get { int o = __p.__offset(18); return o != 0 ? (gfl.audio.fb.GeneratorType)__p.bb.GetUint(o + __p.bb_pos) : gfl.audio.fb.GeneratorType.AreaSound; } }
  public gfl.scene.fb.CollisionShape? Shapes(int j) { int o = __p.__offset(20); return o != 0 ? (gfl.scene.fb.CollisionShape?)(new gfl.scene.fb.CollisionShape()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ShapesLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public gfl.math.fb.Vector3f? Positions(int j) { int o = __p.__offset(22); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PositionsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool ShouldPrepareEvent { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsMusicGenerator { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LayerName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLayerNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLayerNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLayerNameArray() { return __p.__vector_as_array<byte>(28); }
  public gfl.audio.fb.MusicControlType ControlType { get { int o = __p.__offset(30); return o != 0 ? (gfl.audio.fb.MusicControlType)__p.bb.GetUint(o + __p.bb_pos) : gfl.audio.fb.MusicControlType.LayerPlay; } }
  public int UpdatePositionIntervalMax { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float UpdatePositionMaxDistance { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.audio.fb.AudioGeneratorComponent> CreateAudioGeneratorComponent(FlatBufferBuilder builder,
      StringOffset eventNameOffset = default(StringOffset),
      StringOffset stopEventNameOffset = default(StringOffset),
      bool playOnAwake = false,
      bool shouldUpdatePosition = false,
      int updatePositionIntervalMin = 0,
      Offset<gfl.scene.fb.CollisionComponent> collisionOffset = default(Offset<gfl.scene.fb.CollisionComponent>),
      float distanceCulling = 0.0f,
      gfl.audio.fb.GeneratorType type = gfl.audio.fb.GeneratorType.AreaSound,
      VectorOffset shapesOffset = default(VectorOffset),
      VectorOffset positionsOffset = default(VectorOffset),
      bool shouldPrepareEvent = false,
      bool isMusicGenerator = false,
      StringOffset layerNameOffset = default(StringOffset),
      gfl.audio.fb.MusicControlType controlType = gfl.audio.fb.MusicControlType.LayerPlay,
      int updatePositionIntervalMax = 0,
      float updatePositionMaxDistance = 0.0f) {
    builder.StartTable(16);
    AudioGeneratorComponent.AddUpdatePositionMaxDistance(builder, updatePositionMaxDistance);
    AudioGeneratorComponent.AddUpdatePositionIntervalMax(builder, updatePositionIntervalMax);
    AudioGeneratorComponent.AddControlType(builder, controlType);
    AudioGeneratorComponent.AddLayerName(builder, layerNameOffset);
    AudioGeneratorComponent.AddPositions(builder, positionsOffset);
    AudioGeneratorComponent.AddShapes(builder, shapesOffset);
    AudioGeneratorComponent.AddType(builder, type);
    AudioGeneratorComponent.AddDistanceCulling(builder, distanceCulling);
    AudioGeneratorComponent.AddCollision(builder, collisionOffset);
    AudioGeneratorComponent.AddUpdatePositionIntervalMin(builder, updatePositionIntervalMin);
    AudioGeneratorComponent.AddStopEventName(builder, stopEventNameOffset);
    AudioGeneratorComponent.AddEventName(builder, eventNameOffset);
    AudioGeneratorComponent.AddIsMusicGenerator(builder, isMusicGenerator);
    AudioGeneratorComponent.AddShouldPrepareEvent(builder, shouldPrepareEvent);
    AudioGeneratorComponent.AddShouldUpdatePosition(builder, shouldUpdatePosition);
    AudioGeneratorComponent.AddPlayOnAwake(builder, playOnAwake);
    return AudioGeneratorComponent.EndAudioGeneratorComponent(builder);
  }

  public static void StartAudioGeneratorComponent(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset eventNameOffset) { builder.AddOffset(0, eventNameOffset.Value, 0); }
  public static void AddStopEventName(FlatBufferBuilder builder, StringOffset stopEventNameOffset) { builder.AddOffset(1, stopEventNameOffset.Value, 0); }
  public static void AddPlayOnAwake(FlatBufferBuilder builder, bool playOnAwake) { builder.AddBool(2, playOnAwake, false); }
  public static void AddShouldUpdatePosition(FlatBufferBuilder builder, bool shouldUpdatePosition) { builder.AddBool(3, shouldUpdatePosition, false); }
  public static void AddUpdatePositionIntervalMin(FlatBufferBuilder builder, int updatePositionIntervalMin) { builder.AddInt(4, updatePositionIntervalMin, 0); }
  public static void AddCollision(FlatBufferBuilder builder, Offset<gfl.scene.fb.CollisionComponent> collisionOffset) { builder.AddOffset(5, collisionOffset.Value, 0); }
  public static void AddDistanceCulling(FlatBufferBuilder builder, float distanceCulling) { builder.AddFloat(6, distanceCulling, 0.0f); }
  public static void AddType(FlatBufferBuilder builder, gfl.audio.fb.GeneratorType type) { builder.AddUint(7, (uint)type, 0); }
  public static void AddShapes(FlatBufferBuilder builder, VectorOffset shapesOffset) { builder.AddOffset(8, shapesOffset.Value, 0); }
  public static VectorOffset CreateShapesVector(FlatBufferBuilder builder, Offset<gfl.scene.fb.CollisionShape>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateShapesVectorBlock(FlatBufferBuilder builder, Offset<gfl.scene.fb.CollisionShape>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartShapesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPositions(FlatBufferBuilder builder, VectorOffset positionsOffset) { builder.AddOffset(9, positionsOffset.Value, 0); }
  public static void StartPositionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddShouldPrepareEvent(FlatBufferBuilder builder, bool shouldPrepareEvent) { builder.AddBool(10, shouldPrepareEvent, false); }
  public static void AddIsMusicGenerator(FlatBufferBuilder builder, bool isMusicGenerator) { builder.AddBool(11, isMusicGenerator, false); }
  public static void AddLayerName(FlatBufferBuilder builder, StringOffset layerNameOffset) { builder.AddOffset(12, layerNameOffset.Value, 0); }
  public static void AddControlType(FlatBufferBuilder builder, gfl.audio.fb.MusicControlType controlType) { builder.AddUint(13, (uint)controlType, 0); }
  public static void AddUpdatePositionIntervalMax(FlatBufferBuilder builder, int updatePositionIntervalMax) { builder.AddInt(14, updatePositionIntervalMax, 0); }
  public static void AddUpdatePositionMaxDistance(FlatBufferBuilder builder, float updatePositionMaxDistance) { builder.AddFloat(15, updatePositionMaxDistance, 0.0f); }
  public static Offset<gfl.audio.fb.AudioGeneratorComponent> EndAudioGeneratorComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.audio.fb.AudioGeneratorComponent>(o);
  }
  public static void FinishAudioGeneratorComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioGeneratorComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAudioGeneratorComponentBuffer(FlatBufferBuilder builder, Offset<gfl.audio.fb.AudioGeneratorComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AudioGeneratorComponentT UnPack() {
    var _o = new AudioGeneratorComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AudioGeneratorComponentT _o) {
    _o.EventName = this.EventName;
    _o.StopEventName = this.StopEventName;
    _o.PlayOnAwake = this.PlayOnAwake;
    _o.ShouldUpdatePosition = this.ShouldUpdatePosition;
    _o.UpdatePositionIntervalMin = this.UpdatePositionIntervalMin;
    _o.Collision = this.Collision.HasValue ? this.Collision.Value.UnPack() : null;
    _o.DistanceCulling = this.DistanceCulling;
    _o.Type = this.Type;
    _o.Shapes = new List<gfl.scene.fb.CollisionShapeT>();
    for (var _j = 0; _j < this.ShapesLength; ++_j) {_o.Shapes.Add(this.Shapes(_j).HasValue ? this.Shapes(_j).Value.UnPack() : null);}
    _o.Positions = new List<gfl.math.fb.Vector3fT>();
    for (var _j = 0; _j < this.PositionsLength; ++_j) {_o.Positions.Add(this.Positions(_j).HasValue ? this.Positions(_j).Value.UnPack() : null);}
    _o.ShouldPrepareEvent = this.ShouldPrepareEvent;
    _o.IsMusicGenerator = this.IsMusicGenerator;
    _o.LayerName = this.LayerName;
    _o.ControlType = this.ControlType;
    _o.UpdatePositionIntervalMax = this.UpdatePositionIntervalMax;
    _o.UpdatePositionMaxDistance = this.UpdatePositionMaxDistance;
  }
  public static Offset<gfl.audio.fb.AudioGeneratorComponent> Pack(FlatBufferBuilder builder, AudioGeneratorComponentT _o) {
    if (_o == null) return default(Offset<gfl.audio.fb.AudioGeneratorComponent>);
    var _eventName = _o.EventName == null ? default(StringOffset) : builder.CreateString(_o.EventName);
    var _stopEventName = _o.StopEventName == null ? default(StringOffset) : builder.CreateString(_o.StopEventName);
    var _collision = _o.Collision == null ? default(Offset<gfl.scene.fb.CollisionComponent>) : gfl.scene.fb.CollisionComponent.Pack(builder, _o.Collision);
    var _shapes = default(VectorOffset);
    if (_o.Shapes != null) {
      var __shapes = new Offset<gfl.scene.fb.CollisionShape>[_o.Shapes.Count];
      for (var _j = 0; _j < __shapes.Length; ++_j) { __shapes[_j] = gfl.scene.fb.CollisionShape.Pack(builder, _o.Shapes[_j]); }
      _shapes = CreateShapesVector(builder, __shapes);
    }
    var _positions = default(VectorOffset);
    if (_o.Positions != null) {
      StartPositionsVector(builder, _o.Positions.Count);
      for (var _j = _o.Positions.Count - 1; _j >= 0; --_j) { gfl.math.fb.Vector3f.Pack(builder, _o.Positions[_j]); }
      _positions = builder.EndVector();
    }
    var _layerName = _o.LayerName == null ? default(StringOffset) : builder.CreateString(_o.LayerName);
    return CreateAudioGeneratorComponent(
      builder,
      _eventName,
      _stopEventName,
      _o.PlayOnAwake,
      _o.ShouldUpdatePosition,
      _o.UpdatePositionIntervalMin,
      _collision,
      _o.DistanceCulling,
      _o.Type,
      _shapes,
      _positions,
      _o.ShouldPrepareEvent,
      _o.IsMusicGenerator,
      _layerName,
      _o.ControlType,
      _o.UpdatePositionIntervalMax,
      _o.UpdatePositionMaxDistance);
  }
};

public class AudioGeneratorComponentT
{
  [Newtonsoft.Json.JsonProperty("eventName")]
  public string EventName { get; set; }
  [Newtonsoft.Json.JsonProperty("stopEventName")]
  public string StopEventName { get; set; }
  [Newtonsoft.Json.JsonProperty("playOnAwake")]
  public bool PlayOnAwake { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldUpdatePosition")]
  public bool ShouldUpdatePosition { get; set; }
  [Newtonsoft.Json.JsonProperty("updatePositionIntervalMin")]
  public int UpdatePositionIntervalMin { get; set; }
  [Newtonsoft.Json.JsonProperty("collision")]
  public gfl.scene.fb.CollisionComponentT Collision { get; set; }
  [Newtonsoft.Json.JsonProperty("distanceCulling")]
  public float DistanceCulling { get; set; }
  [Newtonsoft.Json.JsonProperty("type")]
  public gfl.audio.fb.GeneratorType Type { get; set; }
  [Newtonsoft.Json.JsonProperty("shapes")]
  public List<gfl.scene.fb.CollisionShapeT> Shapes { get; set; }
  [Newtonsoft.Json.JsonProperty("positions")]
  public List<gfl.math.fb.Vector3fT> Positions { get; set; }
  [Newtonsoft.Json.JsonProperty("shouldPrepareEvent")]
  public bool ShouldPrepareEvent { get; set; }
  [Newtonsoft.Json.JsonProperty("isMusicGenerator")]
  public bool IsMusicGenerator { get; set; }
  [Newtonsoft.Json.JsonProperty("layerName")]
  public string LayerName { get; set; }
  [Newtonsoft.Json.JsonProperty("controlType")]
  public gfl.audio.fb.MusicControlType ControlType { get; set; }
  [Newtonsoft.Json.JsonProperty("updatePositionIntervalMax")]
  public int UpdatePositionIntervalMax { get; set; }
  [Newtonsoft.Json.JsonProperty("updatePositionMaxDistance")]
  public float UpdatePositionMaxDistance { get; set; }

  public AudioGeneratorComponentT() {
    this.EventName = null;
    this.StopEventName = null;
    this.PlayOnAwake = false;
    this.ShouldUpdatePosition = false;
    this.UpdatePositionIntervalMin = 0;
    this.Collision = null;
    this.DistanceCulling = 0.0f;
    this.Type = gfl.audio.fb.GeneratorType.AreaSound;
    this.Shapes = null;
    this.Positions = null;
    this.ShouldPrepareEvent = false;
    this.IsMusicGenerator = false;
    this.LayerName = null;
    this.ControlType = gfl.audio.fb.MusicControlType.LayerPlay;
    this.UpdatePositionIntervalMax = 0;
    this.UpdatePositionMaxDistance = 0.0f;
  }

  public static AudioGeneratorComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioGeneratorComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AudioGeneratorComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AudioGeneratorComponent.GetRootAsAudioGeneratorComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AudioGeneratorComponent.FinishAudioGeneratorComponentBuffer(fbb, AudioGeneratorComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
