// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gfl.anm2ext.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PhysicsResourceData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PhysicsResourceData GetRootAsPhysicsResourceData(ByteBuffer _bb) { return GetRootAsPhysicsResourceData(_bb, new PhysicsResourceData()); }
  public static PhysicsResourceData GetRootAsPhysicsResourceData(ByteBuffer _bb, PhysicsResourceData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PhysicsResourceData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PhysicsResourcePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhysicsResourcePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPhysicsResourcePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPhysicsResourcePathArray() { return __p.__vector_as_array<byte>(4); }
  public int IterationCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AdjustPartRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.1f; } }
  public float AdjustPartOffset { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<gfl.anm2ext.fb.PhysicsResourceData> CreatePhysicsResourceData(FlatBufferBuilder builder,
      StringOffset physicsResourcePathOffset = default(StringOffset),
      int iterationCount = 0,
      float adjustPartRate = 0.1f,
      float adjustPartOffset = 0.0f) {
    builder.StartTable(4);
    PhysicsResourceData.AddAdjustPartOffset(builder, adjustPartOffset);
    PhysicsResourceData.AddAdjustPartRate(builder, adjustPartRate);
    PhysicsResourceData.AddIterationCount(builder, iterationCount);
    PhysicsResourceData.AddPhysicsResourcePath(builder, physicsResourcePathOffset);
    return PhysicsResourceData.EndPhysicsResourceData(builder);
  }

  public static void StartPhysicsResourceData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPhysicsResourcePath(FlatBufferBuilder builder, StringOffset physicsResourcePathOffset) { builder.AddOffset(0, physicsResourcePathOffset.Value, 0); }
  public static void AddIterationCount(FlatBufferBuilder builder, int iterationCount) { builder.AddInt(1, iterationCount, 0); }
  public static void AddAdjustPartRate(FlatBufferBuilder builder, float adjustPartRate) { builder.AddFloat(2, adjustPartRate, 0.1f); }
  public static void AddAdjustPartOffset(FlatBufferBuilder builder, float adjustPartOffset) { builder.AddFloat(3, adjustPartOffset, 0.0f); }
  public static Offset<gfl.anm2ext.fb.PhysicsResourceData> EndPhysicsResourceData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2ext.fb.PhysicsResourceData>(o);
  }
  public PhysicsResourceDataT UnPack() {
    var _o = new PhysicsResourceDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PhysicsResourceDataT _o) {
    _o.PhysicsResourcePath = this.PhysicsResourcePath;
    _o.IterationCount = this.IterationCount;
    _o.AdjustPartRate = this.AdjustPartRate;
    _o.AdjustPartOffset = this.AdjustPartOffset;
  }
  public static Offset<gfl.anm2ext.fb.PhysicsResourceData> Pack(FlatBufferBuilder builder, PhysicsResourceDataT _o) {
    if (_o == null) return default(Offset<gfl.anm2ext.fb.PhysicsResourceData>);
    var _physicsResourcePath = _o.PhysicsResourcePath == null ? default(StringOffset) : builder.CreateString(_o.PhysicsResourcePath);
    return CreatePhysicsResourceData(
      builder,
      _physicsResourcePath,
      _o.IterationCount,
      _o.AdjustPartRate,
      _o.AdjustPartOffset);
  }
};

public class PhysicsResourceDataT
{
  [Newtonsoft.Json.JsonProperty("physicsResourcePath")]
  public string PhysicsResourcePath { get; set; }
  [Newtonsoft.Json.JsonProperty("iterationCount")]
  public int IterationCount { get; set; }
  [Newtonsoft.Json.JsonProperty("adjustPartRate")]
  public float AdjustPartRate { get; set; }
  [Newtonsoft.Json.JsonProperty("adjustPartOffset")]
  public float AdjustPartOffset { get; set; }

  public PhysicsResourceDataT() {
    this.PhysicsResourcePath = null;
    this.IterationCount = 0;
    this.AdjustPartRate = 0.1f;
    this.AdjustPartOffset = 0.0f;
  }
}

public struct SpringBoneConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SpringBoneConfig GetRootAsSpringBoneConfig(ByteBuffer _bb) { return GetRootAsSpringBoneConfig(_bb, new SpringBoneConfig()); }
  public static SpringBoneConfig GetRootAsSpringBoneConfig(ByteBuffer _bb, SpringBoneConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpringBoneConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float MasterBlendWeight { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MasterWindBlendWeight { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MasterWindNoiseBlendWeight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public gfl.anm2ext.fb.PhysicsResourceData? PhysicsResourceData(int j) { int o = __p.__offset(10); return o != 0 ? (gfl.anm2ext.fb.PhysicsResourceData?)(new gfl.anm2ext.fb.PhysicsResourceData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PhysicsResourceDataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool UseGlobalWorld { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<gfl.anm2ext.fb.SpringBoneConfig> CreateSpringBoneConfig(FlatBufferBuilder builder,
      float masterBlendWeight = 0.0f,
      float masterWindBlendWeight = 0.0f,
      float masterWindNoiseBlendWeight = 0.0f,
      VectorOffset physicsResourceDataOffset = default(VectorOffset),
      bool useGlobalWorld = false) {
    builder.StartTable(5);
    SpringBoneConfig.AddPhysicsResourceData(builder, physicsResourceDataOffset);
    SpringBoneConfig.AddMasterWindNoiseBlendWeight(builder, masterWindNoiseBlendWeight);
    SpringBoneConfig.AddMasterWindBlendWeight(builder, masterWindBlendWeight);
    SpringBoneConfig.AddMasterBlendWeight(builder, masterBlendWeight);
    SpringBoneConfig.AddUseGlobalWorld(builder, useGlobalWorld);
    return SpringBoneConfig.EndSpringBoneConfig(builder);
  }

  public static void StartSpringBoneConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddMasterBlendWeight(FlatBufferBuilder builder, float masterBlendWeight) { builder.AddFloat(0, masterBlendWeight, 0.0f); }
  public static void AddMasterWindBlendWeight(FlatBufferBuilder builder, float masterWindBlendWeight) { builder.AddFloat(1, masterWindBlendWeight, 0.0f); }
  public static void AddMasterWindNoiseBlendWeight(FlatBufferBuilder builder, float masterWindNoiseBlendWeight) { builder.AddFloat(2, masterWindNoiseBlendWeight, 0.0f); }
  public static void AddPhysicsResourceData(FlatBufferBuilder builder, VectorOffset physicsResourceDataOffset) { builder.AddOffset(3, physicsResourceDataOffset.Value, 0); }
  public static VectorOffset CreatePhysicsResourceDataVector(FlatBufferBuilder builder, Offset<gfl.anm2ext.fb.PhysicsResourceData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhysicsResourceDataVectorBlock(FlatBufferBuilder builder, Offset<gfl.anm2ext.fb.PhysicsResourceData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPhysicsResourceDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUseGlobalWorld(FlatBufferBuilder builder, bool useGlobalWorld) { builder.AddBool(4, useGlobalWorld, false); }
  public static Offset<gfl.anm2ext.fb.SpringBoneConfig> EndSpringBoneConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<gfl.anm2ext.fb.SpringBoneConfig>(o);
  }
  public static void FinishSpringBoneConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2ext.fb.SpringBoneConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSpringBoneConfigBuffer(FlatBufferBuilder builder, Offset<gfl.anm2ext.fb.SpringBoneConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
  public SpringBoneConfigT UnPack() {
    var _o = new SpringBoneConfigT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpringBoneConfigT _o) {
    _o.MasterBlendWeight = this.MasterBlendWeight;
    _o.MasterWindBlendWeight = this.MasterWindBlendWeight;
    _o.MasterWindNoiseBlendWeight = this.MasterWindNoiseBlendWeight;
    _o.PhysicsResourceData = new List<gfl.anm2ext.fb.PhysicsResourceDataT>();
    for (var _j = 0; _j < this.PhysicsResourceDataLength; ++_j) {_o.PhysicsResourceData.Add(this.PhysicsResourceData(_j).HasValue ? this.PhysicsResourceData(_j).Value.UnPack() : null);}
    _o.UseGlobalWorld = this.UseGlobalWorld;
  }
  public static Offset<gfl.anm2ext.fb.SpringBoneConfig> Pack(FlatBufferBuilder builder, SpringBoneConfigT _o) {
    if (_o == null) return default(Offset<gfl.anm2ext.fb.SpringBoneConfig>);
    var _physicsResourceData = default(VectorOffset);
    if (_o.PhysicsResourceData != null) {
      var __physicsResourceData = new Offset<gfl.anm2ext.fb.PhysicsResourceData>[_o.PhysicsResourceData.Count];
      for (var _j = 0; _j < __physicsResourceData.Length; ++_j) { __physicsResourceData[_j] = gfl.anm2ext.fb.PhysicsResourceData.Pack(builder, _o.PhysicsResourceData[_j]); }
      _physicsResourceData = CreatePhysicsResourceDataVector(builder, __physicsResourceData);
    }
    return CreateSpringBoneConfig(
      builder,
      _o.MasterBlendWeight,
      _o.MasterWindBlendWeight,
      _o.MasterWindNoiseBlendWeight,
      _physicsResourceData,
      _o.UseGlobalWorld);
  }
};

public class SpringBoneConfigT
{
  [Newtonsoft.Json.JsonProperty("masterBlendWeight")]
  public float MasterBlendWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("masterWindBlendWeight")]
  public float MasterWindBlendWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("masterWindNoiseBlendWeight")]
  public float MasterWindNoiseBlendWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("physicsResourceData")]
  public List<gfl.anm2ext.fb.PhysicsResourceDataT> PhysicsResourceData { get; set; }
  [Newtonsoft.Json.JsonProperty("useGlobalWorld")]
  public bool UseGlobalWorld { get; set; }

  public SpringBoneConfigT() {
    this.MasterBlendWeight = 0.0f;
    this.MasterWindBlendWeight = 0.0f;
    this.MasterWindNoiseBlendWeight = 0.0f;
    this.PhysicsResourceData = null;
    this.UseGlobalWorld = false;
  }

  public static SpringBoneConfigT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<SpringBoneConfigT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static SpringBoneConfigT DeserializeFromBinary(byte[] fbBuffer) {
    return SpringBoneConfig.GetRootAsSpringBoneConfig(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SpringBoneConfig.FinishSpringBoneConfigBuffer(fbb, SpringBoneConfig.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
