// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FieldResource
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<FieldResource.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<FieldResource.Vec3>(builder.Offset);
  }
  public Vec3T UnPack() {
    var _o = new Vec3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<FieldResource.Vec3> Pack(FlatBufferBuilder builder, Vec3T _o) {
    if (_o == null) return default(Offset<FieldResource.Vec3>);
    return CreateVec3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class Vec3T
{
  [Newtonsoft.Json.JsonProperty("x")]
  public float X { get; set; }
  [Newtonsoft.Json.JsonProperty("y")]
  public float Y { get; set; }
  [Newtonsoft.Json.JsonProperty("z")]
  public float Z { get; set; }

  public Vec3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

public struct PokemonParam : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PokemonParam GetRootAsPokemonParam(ByteBuffer _bb) { return GetRootAsPokemonParam(_bb, new PokemonParam()); }
  public static PokemonParam GetRootAsPokemonParam(ByteBuffer _bb, PokemonParam obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PokemonParam __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FieldResource.Vec3? Pos { get { int o = __p.__offset(4); return o != 0 ? (FieldResource.Vec3?)(new FieldResource.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Mana { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)150; } }
  public short Hp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FieldResource.PokemonParam> CreatePokemonParam(FlatBufferBuilder builder,
      FieldResource.Vec3T pos = null,
      short mana = 150,
      short hp = 100,
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartTable(4);
    PokemonParam.AddName(builder, nameOffset);
    PokemonParam.AddPos(builder, FieldResource.Vec3.Pack(builder, pos));
    PokemonParam.AddHp(builder, hp);
    PokemonParam.AddMana(builder, mana);
    return PokemonParam.EndPokemonParam(builder);
  }

  public static void StartPokemonParam(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPos(FlatBufferBuilder builder, Offset<FieldResource.Vec3> posOffset) { builder.AddStruct(0, posOffset.Value, 0); }
  public static void AddMana(FlatBufferBuilder builder, short mana) { builder.AddShort(1, mana, 150); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(2, hp, 100); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static Offset<FieldResource.PokemonParam> EndPokemonParam(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FieldResource.PokemonParam>(o);
  }
  public static void FinishPokemonParamBuffer(FlatBufferBuilder builder, Offset<FieldResource.PokemonParam> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPokemonParamBuffer(FlatBufferBuilder builder, Offset<FieldResource.PokemonParam> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PokemonParamT UnPack() {
    var _o = new PokemonParamT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PokemonParamT _o) {
    _o.Pos = this.Pos.HasValue ? this.Pos.Value.UnPack() : null;
    _o.Mana = this.Mana;
    _o.Hp = this.Hp;
    _o.Name = this.Name;
  }
  public static Offset<FieldResource.PokemonParam> Pack(FlatBufferBuilder builder, PokemonParamT _o) {
    if (_o == null) return default(Offset<FieldResource.PokemonParam>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreatePokemonParam(
      builder,
      _o.Pos,
      _o.Mana,
      _o.Hp,
      _name);
  }
};

public class PokemonParamT
{
  [Newtonsoft.Json.JsonProperty("pos")]
  public FieldResource.Vec3T Pos { get; set; }
  [Newtonsoft.Json.JsonProperty("mana")]
  public short Mana { get; set; }
  [Newtonsoft.Json.JsonProperty("hp")]
  public short Hp { get; set; }
  [Newtonsoft.Json.JsonProperty("name")]
  public string Name { get; set; }

  public PokemonParamT() {
    this.Pos = new FieldResource.Vec3T();
    this.Mana = 150;
    this.Hp = 100;
    this.Name = null;
  }

  public static PokemonParamT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<PokemonParamT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static PokemonParamT DeserializeFromBinary(byte[] fbBuffer) {
    return PokemonParam.GetRootAsPokemonParam(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PokemonParam.FinishPokemonParamBuffer(fbb, PokemonParam.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
