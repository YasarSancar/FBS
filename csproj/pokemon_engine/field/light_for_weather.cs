// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace pe.field.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LightForWeather : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LightForWeather GetRootAsLightForWeather(ByteBuffer _bb) { return GetRootAsLightForWeather(_bb, new LightForWeather()); }
  public static LightForWeather GetRootAsLightForWeather(ByteBuffer _bb, LightForWeather obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LightForWeather __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(4); }
  public float TimeSpan { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CurrentTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool StartWithOffsetData { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string OffsetDataName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetDataNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOffsetDataNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOffsetDataNameArray() { return __p.__vector_as_array<byte>(12); }
  public float OffsetBlendWeight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Priority { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string AreaFilePath { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaFilePathBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAreaFilePathBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAreaFilePathArray() { return __p.__vector_as_array<byte>(18); }
  public float AreaTimeSpan { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string OffsetFilePath { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffsetFilePathBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOffsetFilePathBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOffsetFilePathArray() { return __p.__vector_as_array<byte>(22); }
  public float OffsetTimeSpan { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<pe.field.fb.LightForWeather> CreateLightForWeather(FlatBufferBuilder builder,
      StringOffset filePathOffset = default(StringOffset),
      float timeSpan = 0.0f,
      float currentTime = 0.0f,
      bool startWithOffsetData = false,
      StringOffset offsetDataNameOffset = default(StringOffset),
      float offsetBlendWeight = 0.0f,
      int priority = 0,
      StringOffset areaFilePathOffset = default(StringOffset),
      float areaTimeSpan = 0.0f,
      StringOffset offsetFilePathOffset = default(StringOffset),
      float offsetTimeSpan = 0.0f) {
    builder.StartTable(11);
    LightForWeather.AddOffsetTimeSpan(builder, offsetTimeSpan);
    LightForWeather.AddOffsetFilePath(builder, offsetFilePathOffset);
    LightForWeather.AddAreaTimeSpan(builder, areaTimeSpan);
    LightForWeather.AddAreaFilePath(builder, areaFilePathOffset);
    LightForWeather.AddPriority(builder, priority);
    LightForWeather.AddOffsetBlendWeight(builder, offsetBlendWeight);
    LightForWeather.AddOffsetDataName(builder, offsetDataNameOffset);
    LightForWeather.AddCurrentTime(builder, currentTime);
    LightForWeather.AddTimeSpan(builder, timeSpan);
    LightForWeather.AddFilePath(builder, filePathOffset);
    LightForWeather.AddStartWithOffsetData(builder, startWithOffsetData);
    return LightForWeather.EndLightForWeather(builder);
  }

  public static void StartLightForWeather(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static void AddTimeSpan(FlatBufferBuilder builder, float timeSpan) { builder.AddFloat(1, timeSpan, 0.0f); }
  public static void AddCurrentTime(FlatBufferBuilder builder, float currentTime) { builder.AddFloat(2, currentTime, 0.0f); }
  public static void AddStartWithOffsetData(FlatBufferBuilder builder, bool startWithOffsetData) { builder.AddBool(3, startWithOffsetData, false); }
  public static void AddOffsetDataName(FlatBufferBuilder builder, StringOffset offsetDataNameOffset) { builder.AddOffset(4, offsetDataNameOffset.Value, 0); }
  public static void AddOffsetBlendWeight(FlatBufferBuilder builder, float offsetBlendWeight) { builder.AddFloat(5, offsetBlendWeight, 0.0f); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(6, priority, 0); }
  public static void AddAreaFilePath(FlatBufferBuilder builder, StringOffset areaFilePathOffset) { builder.AddOffset(7, areaFilePathOffset.Value, 0); }
  public static void AddAreaTimeSpan(FlatBufferBuilder builder, float areaTimeSpan) { builder.AddFloat(8, areaTimeSpan, 0.0f); }
  public static void AddOffsetFilePath(FlatBufferBuilder builder, StringOffset offsetFilePathOffset) { builder.AddOffset(9, offsetFilePathOffset.Value, 0); }
  public static void AddOffsetTimeSpan(FlatBufferBuilder builder, float offsetTimeSpan) { builder.AddFloat(10, offsetTimeSpan, 0.0f); }
  public static Offset<pe.field.fb.LightForWeather> EndLightForWeather(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<pe.field.fb.LightForWeather>(o);
  }
  public static void FinishLightForWeatherBuffer(FlatBufferBuilder builder, Offset<pe.field.fb.LightForWeather> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLightForWeatherBuffer(FlatBufferBuilder builder, Offset<pe.field.fb.LightForWeather> offset) { builder.FinishSizePrefixed(offset.Value); }
  public LightForWeatherT UnPack() {
    var _o = new LightForWeatherT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LightForWeatherT _o) {
    _o.FilePath = this.FilePath;
    _o.TimeSpan = this.TimeSpan;
    _o.CurrentTime = this.CurrentTime;
    _o.StartWithOffsetData = this.StartWithOffsetData;
    _o.OffsetDataName = this.OffsetDataName;
    _o.OffsetBlendWeight = this.OffsetBlendWeight;
    _o.Priority = this.Priority;
    _o.AreaFilePath = this.AreaFilePath;
    _o.AreaTimeSpan = this.AreaTimeSpan;
    _o.OffsetFilePath = this.OffsetFilePath;
    _o.OffsetTimeSpan = this.OffsetTimeSpan;
  }
  public static Offset<pe.field.fb.LightForWeather> Pack(FlatBufferBuilder builder, LightForWeatherT _o) {
    if (_o == null) return default(Offset<pe.field.fb.LightForWeather>);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    var _offsetDataName = _o.OffsetDataName == null ? default(StringOffset) : builder.CreateString(_o.OffsetDataName);
    var _areaFilePath = _o.AreaFilePath == null ? default(StringOffset) : builder.CreateString(_o.AreaFilePath);
    var _offsetFilePath = _o.OffsetFilePath == null ? default(StringOffset) : builder.CreateString(_o.OffsetFilePath);
    return CreateLightForWeather(
      builder,
      _filePath,
      _o.TimeSpan,
      _o.CurrentTime,
      _o.StartWithOffsetData,
      _offsetDataName,
      _o.OffsetBlendWeight,
      _o.Priority,
      _areaFilePath,
      _o.AreaTimeSpan,
      _offsetFilePath,
      _o.OffsetTimeSpan);
  }
};

public class LightForWeatherT
{
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("timeSpan")]
  public float TimeSpan { get; set; }
  [Newtonsoft.Json.JsonProperty("currentTime")]
  public float CurrentTime { get; set; }
  [Newtonsoft.Json.JsonProperty("startWithOffsetData")]
  public bool StartWithOffsetData { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetDataName")]
  public string OffsetDataName { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetBlendWeight")]
  public float OffsetBlendWeight { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("areaFilePath")]
  public string AreaFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("areaTimeSpan")]
  public float AreaTimeSpan { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetFilePath")]
  public string OffsetFilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("offsetTimeSpan")]
  public float OffsetTimeSpan { get; set; }

  public LightForWeatherT() {
    this.FilePath = null;
    this.TimeSpan = 0.0f;
    this.CurrentTime = 0.0f;
    this.StartWithOffsetData = false;
    this.OffsetDataName = null;
    this.OffsetBlendWeight = 0.0f;
    this.Priority = 0;
    this.AreaFilePath = null;
    this.AreaTimeSpan = 0.0f;
    this.OffsetFilePath = null;
    this.OffsetTimeSpan = 0.0f;
  }

  public static LightForWeatherT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<LightForWeatherT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static LightForWeatherT DeserializeFromBinary(byte[] fbBuffer) {
    return LightForWeather.GetRootAsLightForWeather(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LightForWeather.FinishLightForWeatherBuffer(fbb, LightForWeather.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
