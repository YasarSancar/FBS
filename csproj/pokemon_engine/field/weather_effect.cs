// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace pe.field.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct WeatherEffect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static WeatherEffect GetRootAsWeatherEffect(ByteBuffer _bb) { return GetRootAsWeatherEffect(_bb, new WeatherEffect()); }
  public static WeatherEffect GetRootAsWeatherEffect(ByteBuffer _bb, WeatherEffect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeatherEffect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string WeatherName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetWeatherNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetWeatherNameArray() { return __p.__vector_as_array<byte>(4); }
  public string FilePath { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilePathBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFilePathBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFilePathArray() { return __p.__vector_as_array<byte>(6); }
  public gfl.math.fb.Vector3f? PositionOffset { get { int o = __p.__offset(8); return o != 0 ? (gfl.math.fb.Vector3f?)(new gfl.math.fb.Vector3f()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float KillDelayTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool IsFollowCamera { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<pe.field.fb.WeatherEffect> CreateWeatherEffect(FlatBufferBuilder builder,
      StringOffset weatherNameOffset = default(StringOffset),
      StringOffset filePathOffset = default(StringOffset),
      gfl.math.fb.Vector3fT positionOffset = null,
      float killDelayTime = 0.0f,
      bool isFollowCamera = false) {
    builder.StartTable(5);
    WeatherEffect.AddKillDelayTime(builder, killDelayTime);
    WeatherEffect.AddPositionOffset(builder, gfl.math.fb.Vector3f.Pack(builder, positionOffset));
    WeatherEffect.AddFilePath(builder, filePathOffset);
    WeatherEffect.AddWeatherName(builder, weatherNameOffset);
    WeatherEffect.AddIsFollowCamera(builder, isFollowCamera);
    return WeatherEffect.EndWeatherEffect(builder);
  }

  public static void StartWeatherEffect(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddWeatherName(FlatBufferBuilder builder, StringOffset weatherNameOffset) { builder.AddOffset(0, weatherNameOffset.Value, 0); }
  public static void AddFilePath(FlatBufferBuilder builder, StringOffset filePathOffset) { builder.AddOffset(1, filePathOffset.Value, 0); }
  public static void AddPositionOffset(FlatBufferBuilder builder, Offset<gfl.math.fb.Vector3f> positionOffsetOffset) { builder.AddStruct(2, positionOffsetOffset.Value, 0); }
  public static void AddKillDelayTime(FlatBufferBuilder builder, float killDelayTime) { builder.AddFloat(3, killDelayTime, 0.0f); }
  public static void AddIsFollowCamera(FlatBufferBuilder builder, bool isFollowCamera) { builder.AddBool(4, isFollowCamera, false); }
  public static Offset<pe.field.fb.WeatherEffect> EndWeatherEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<pe.field.fb.WeatherEffect>(o);
  }
  public static void FinishWeatherEffectBuffer(FlatBufferBuilder builder, Offset<pe.field.fb.WeatherEffect> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWeatherEffectBuffer(FlatBufferBuilder builder, Offset<pe.field.fb.WeatherEffect> offset) { builder.FinishSizePrefixed(offset.Value); }
  public WeatherEffectT UnPack() {
    var _o = new WeatherEffectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeatherEffectT _o) {
    _o.WeatherName = this.WeatherName;
    _o.FilePath = this.FilePath;
    _o.PositionOffset = this.PositionOffset.HasValue ? this.PositionOffset.Value.UnPack() : null;
    _o.KillDelayTime = this.KillDelayTime;
    _o.IsFollowCamera = this.IsFollowCamera;
  }
  public static Offset<pe.field.fb.WeatherEffect> Pack(FlatBufferBuilder builder, WeatherEffectT _o) {
    if (_o == null) return default(Offset<pe.field.fb.WeatherEffect>);
    var _weatherName = _o.WeatherName == null ? default(StringOffset) : builder.CreateString(_o.WeatherName);
    var _filePath = _o.FilePath == null ? default(StringOffset) : builder.CreateString(_o.FilePath);
    return CreateWeatherEffect(
      builder,
      _weatherName,
      _filePath,
      _o.PositionOffset,
      _o.KillDelayTime,
      _o.IsFollowCamera);
  }
};

public class WeatherEffectT
{
  [Newtonsoft.Json.JsonProperty("weatherName")]
  public string WeatherName { get; set; }
  [Newtonsoft.Json.JsonProperty("filePath")]
  public string FilePath { get; set; }
  [Newtonsoft.Json.JsonProperty("positionOffset")]
  public gfl.math.fb.Vector3fT PositionOffset { get; set; }
  [Newtonsoft.Json.JsonProperty("killDelayTime")]
  public float KillDelayTime { get; set; }
  [Newtonsoft.Json.JsonProperty("isFollowCamera")]
  public bool IsFollowCamera { get; set; }

  public WeatherEffectT() {
    this.WeatherName = null;
    this.FilePath = null;
    this.PositionOffset = new gfl.math.fb.Vector3fT();
    this.KillDelayTime = 0.0f;
    this.IsFollowCamera = false;
  }

  public static WeatherEffectT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<WeatherEffectT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static WeatherEffectT DeserializeFromBinary(byte[] fbBuffer) {
    return WeatherEffect.GetRootAsWeatherEffect(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    WeatherEffect.FinishWeatherEffectBuffer(fbb, WeatherEffect.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
