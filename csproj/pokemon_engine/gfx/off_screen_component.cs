// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace pe.gfx.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OffScreenComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static OffScreenComponent GetRootAsOffScreenComponent(ByteBuffer _bb) { return GetRootAsOffScreenComponent(_bb, new OffScreenComponent()); }
  public static OffScreenComponent GetRootAsOffScreenComponent(ByteBuffer _bb, OffScreenComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OffScreenComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Width { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Depth { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Priority { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScreenPriority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScreenShareName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScreenShareNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetScreenShareNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetScreenShareNameArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<pe.gfx.fb.OffScreenComponent> CreateOffScreenComponent(FlatBufferBuilder builder,
      int width = 0,
      int height = 0,
      float depth = 0.0f,
      int priority = 0,
      int screenPriority = 0,
      StringOffset screenShareNameOffset = default(StringOffset)) {
    builder.StartTable(6);
    OffScreenComponent.AddScreenShareName(builder, screenShareNameOffset);
    OffScreenComponent.AddScreenPriority(builder, screenPriority);
    OffScreenComponent.AddPriority(builder, priority);
    OffScreenComponent.AddDepth(builder, depth);
    OffScreenComponent.AddHeight(builder, height);
    OffScreenComponent.AddWidth(builder, width);
    return OffScreenComponent.EndOffScreenComponent(builder);
  }

  public static void StartOffScreenComponent(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(0, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(1, height, 0); }
  public static void AddDepth(FlatBufferBuilder builder, float depth) { builder.AddFloat(2, depth, 0.0f); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(3, priority, 0); }
  public static void AddScreenPriority(FlatBufferBuilder builder, int screenPriority) { builder.AddInt(4, screenPriority, 0); }
  public static void AddScreenShareName(FlatBufferBuilder builder, StringOffset screenShareNameOffset) { builder.AddOffset(5, screenShareNameOffset.Value, 0); }
  public static Offset<pe.gfx.fb.OffScreenComponent> EndOffScreenComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<pe.gfx.fb.OffScreenComponent>(o);
  }
  public static void FinishOffScreenComponentBuffer(FlatBufferBuilder builder, Offset<pe.gfx.fb.OffScreenComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedOffScreenComponentBuffer(FlatBufferBuilder builder, Offset<pe.gfx.fb.OffScreenComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public OffScreenComponentT UnPack() {
    var _o = new OffScreenComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OffScreenComponentT _o) {
    _o.Width = this.Width;
    _o.Height = this.Height;
    _o.Depth = this.Depth;
    _o.Priority = this.Priority;
    _o.ScreenPriority = this.ScreenPriority;
    _o.ScreenShareName = this.ScreenShareName;
  }
  public static Offset<pe.gfx.fb.OffScreenComponent> Pack(FlatBufferBuilder builder, OffScreenComponentT _o) {
    if (_o == null) return default(Offset<pe.gfx.fb.OffScreenComponent>);
    var _screenShareName = _o.ScreenShareName == null ? default(StringOffset) : builder.CreateString(_o.ScreenShareName);
    return CreateOffScreenComponent(
      builder,
      _o.Width,
      _o.Height,
      _o.Depth,
      _o.Priority,
      _o.ScreenPriority,
      _screenShareName);
  }
};

public class OffScreenComponentT
{
  [Newtonsoft.Json.JsonProperty("width")]
  public int Width { get; set; }
  [Newtonsoft.Json.JsonProperty("height")]
  public int Height { get; set; }
  [Newtonsoft.Json.JsonProperty("depth")]
  public float Depth { get; set; }
  [Newtonsoft.Json.JsonProperty("priority")]
  public int Priority { get; set; }
  [Newtonsoft.Json.JsonProperty("screenPriority")]
  public int ScreenPriority { get; set; }
  [Newtonsoft.Json.JsonProperty("screenShareName")]
  public string ScreenShareName { get; set; }

  public OffScreenComponentT() {
    this.Width = 0;
    this.Height = 0;
    this.Depth = 0.0f;
    this.Priority = 0;
    this.ScreenPriority = 0;
    this.ScreenShareName = null;
  }

  public static OffScreenComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<OffScreenComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static OffScreenComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return OffScreenComponent.GetRootAsOffScreenComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OffScreenComponent.FinishOffScreenComponentBuffer(fbb, OffScreenComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
