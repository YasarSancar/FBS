// <auto-generated />


namespace pe.fbs.cc.tool.bodyshape
{
    public class Ratio
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tag")]
        public string Tag { get; set; }

        [Newtonsoft.Json.JsonProperty("default")]
        public int Default { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("data")]
        public System.Collections.Generic.List<float> Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.fbs.cc.tool.bodyshape.Ratio FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.fbs.cc.tool.bodyshape.Ratio>(jsonText);
        }
    }

    public class Root
    {
        [Newtonsoft.Json.JsonProperty("trbsmFilePath")]
        public string TrbsmFilePath { get; set; }

        [Newtonsoft.Json.JsonProperty("types")]
        public System.Collections.Generic.List<pe.fbs.cc.tool.bodyshape.Type> Types { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.fbs.cc.tool.bodyshape.Root FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.fbs.cc.tool.bodyshape.Root>(jsonText);
        }

        public byte[] ToFlatBuffers()
        {
            var jsonText = this.ToJson();
            return GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonToFlatBuffers(jsonText, BFBS);
        }

        public static pe.fbs.cc.tool.bodyshape.Root FromFlatBuffers(byte[] fb)
        {
            var jsonText = GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonFromFlatBuffers(fb, BFBS);
            return FromJson(jsonText);
        }

        public static readonly string FileIdentifier = "CCBS";

        public static readonly string FileExtension = "";

        public static readonly string BFBS_BASE64 = "GAAAAEJGQlMQABwABAAIAAwAEAAUABgAEAAAADQAAAAsAAAAHAAAABAAAAA8AAAABAAAAAAAAAAAAAAAAAAAAAQAAABDQ0JTAAAAAAAAAAAFAAAAqAIAABAAAACgAwAArAEAAJgAAAB4/P//GAAAAAgAAAABAAAAAgAAAFQAAAAoAAAAHQAAAHBlLmZicy5jYy50b29sLmJvZHlzaGFwZS5Sb290AAAAHP3//wEABgAUAAAABAAAAEb+//8AAA4PBAAAAAUAAAB0eXBlcwAAAJT8//8AAAQAEAAAAAQAAAAK/f//AAAADQ0AAAB0cmJzbUZpbGVQYXRoAAAADP3//yQAAAAIAAAAAQAAAAUAAADUAAAArAAAADAAAAB8AAAAUAAAAB0AAABwZS5mYnMuY2MudG9vbC5ib2R5c2hhcGUuVHlwZQAAALz9//8EAAwAEAAAAAQAAAAA/f//AAAODQgAAABwYXR0ZXJucwAAAADk/f//AwAKABQAAAAEAAAADv///wAADg8DAAAABgAAAHNjYWxlcgAADP7//wIACAAUAAAABAAAADb///8AAA4PAAAAAAUAAAByYXRpbwAAADT+//8BAAYAEAAAAAQAAAD6/f//AAAADQQAAABuYW1lAAAAAKj9//8AAAQAEAAAAAQAAAAe/v//AAAADQgAAABpZGVudGl0eQAAAAAc/v//IAAAAAgAAAABAAAABAAAAEAAAABwAAAAsAAAAIwAAAAfAAAAcGUuZmJzLmNjLnRvb2wuYm9keXNoYXBlLlNjYWxlcgAMABIACAAMAAQABgAMAAAAAwAKACAAAAAQAAAAAAAKAAwABgAHAAgACgAAAAAADg8CAAAABAAAAGRhdGEAAAAACP///wIACAAQAAAABAAAAM7+//8AAAAHBwAAAGRlZmF1bHQALP///wEABgAQAAAABAAAAPL+//8AAAANAwAAAHRhZwCc/v//AAAEABAAAAAEAAAAEv///wAAAA0EAAAAbmFtZQAAAAAM////IAAAAAgAAAABAAAABAAAADQAAABUAAAArAAAAHwAAAAeAAAAcGUuZmJzLmNjLnRvb2wuYm9keXNoYXBlLlJhdGlvAAC4////AwAKABAAAAAEAAAA/P7//wAADgsEAAAAZGF0YQAAAADc////AgAIABAAAAAEAAAAov///wAAAAcHAAAAZGVmYXVsdAAMABAACAAMAAQABgAMAAAAAQAGABAAAAAEAAAA0v///wAAAA0DAAAAdGFnAAwAEgAIAAwAAAAGAAwAAAAAAAQAGAAAAAwAAAAAAAYACAAHAAYAAAAAAAANBAAAAG5hbWUAAAAADAAQAAQACAAAAAwADAAAABQAAAAIAAAAAQAAAAEAAAA4AAAAIwAAAHBlLmZicy5jYy50b29sLmJvZHlzaGFwZS5TY2FsZVBhcmFtAAwAEAAIAAwAAAAGAAwAAAAAAAQAGAAAAAwAAAAIAAgABgAHAAgAAAAAAA4LBQAAAHNjYWxlAAAA";

        public static byte[] BFBS => System.Convert.FromBase64String(BFBS_BASE64);
    }

    public class ScaleParam
    {
        [Newtonsoft.Json.JsonProperty("scale")]
        public System.Collections.Generic.List<float> Scale { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.fbs.cc.tool.bodyshape.ScaleParam FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.fbs.cc.tool.bodyshape.ScaleParam>(jsonText);
        }
    }

    public class Scaler
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("tag")]
        public string Tag { get; set; }

        [Newtonsoft.Json.JsonProperty("default")]
        public int Default { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("data")]
        public System.Collections.Generic.List<pe.fbs.cc.tool.bodyshape.ScaleParam> Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.fbs.cc.tool.bodyshape.Scaler FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.fbs.cc.tool.bodyshape.Scaler>(jsonText);
        }
    }

    public class Type
    {
        [Newtonsoft.Json.JsonProperty("identity")]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ratio")]
        public System.Collections.Generic.List<pe.fbs.cc.tool.bodyshape.Ratio> Ratio { get; set; }

        [Newtonsoft.Json.JsonProperty("scaler")]
        public System.Collections.Generic.List<pe.fbs.cc.tool.bodyshape.Scaler> Scaler { get; set; }

        [Newtonsoft.Json.JsonProperty("patterns")]
        public System.Collections.Generic.List<string> Patterns { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.fbs.cc.tool.bodyshape.Type FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.fbs.cc.tool.bodyshape.Type>(jsonText);
        }
    }
}
