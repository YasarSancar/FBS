// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace pe.anm.fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AnimationContainerComponent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationContainerComponent GetRootAsAnimationContainerComponent(ByteBuffer _bb) { return GetRootAsAnimationContainerComponent(_bb, new AnimationContainerComponent()); }
  public static AnimationContainerComponent GetRootAsAnimationContainerComponent(ByteBuffer _bb, AnimationContainerComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationContainerComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FilePath(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FilePathLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<pe.anm.fb.AnimationContainerComponent> CreateAnimationContainerComponent(FlatBufferBuilder builder,
      VectorOffset file_pathOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnimationContainerComponent.AddFilePath(builder, file_pathOffset);
    return AnimationContainerComponent.EndAnimationContainerComponent(builder);
  }

  public static void StartAnimationContainerComponent(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFilePath(FlatBufferBuilder builder, VectorOffset filePathOffset) { builder.AddOffset(0, filePathOffset.Value, 0); }
  public static VectorOffset CreateFilePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFilePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFilePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<pe.anm.fb.AnimationContainerComponent> EndAnimationContainerComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<pe.anm.fb.AnimationContainerComponent>(o);
  }
  public static void FinishAnimationContainerComponentBuffer(FlatBufferBuilder builder, Offset<pe.anm.fb.AnimationContainerComponent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAnimationContainerComponentBuffer(FlatBufferBuilder builder, Offset<pe.anm.fb.AnimationContainerComponent> offset) { builder.FinishSizePrefixed(offset.Value); }
  public AnimationContainerComponentT UnPack() {
    var _o = new AnimationContainerComponentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationContainerComponentT _o) {
    _o.FilePath = new List<string>();
    for (var _j = 0; _j < this.FilePathLength; ++_j) {_o.FilePath.Add(this.FilePath(_j));}
  }
  public static Offset<pe.anm.fb.AnimationContainerComponent> Pack(FlatBufferBuilder builder, AnimationContainerComponentT _o) {
    if (_o == null) return default(Offset<pe.anm.fb.AnimationContainerComponent>);
    var _file_path = default(VectorOffset);
    if (_o.FilePath != null) {
      var __file_path = new StringOffset[_o.FilePath.Count];
      for (var _j = 0; _j < __file_path.Length; ++_j) { __file_path[_j] = builder.CreateString(_o.FilePath[_j]); }
      _file_path = CreateFilePathVector(builder, __file_path);
    }
    return CreateAnimationContainerComponent(
      builder,
      _file_path);
  }
};

public class AnimationContainerComponentT
{
  [Newtonsoft.Json.JsonProperty("file_path")]
  public List<string> FilePath { get; set; }

  public AnimationContainerComponentT() {
    this.FilePath = null;
  }

  public static AnimationContainerComponentT DeserializeFromJson(string jsonText) {
    return Newtonsoft.Json.JsonConvert.DeserializeObject<AnimationContainerComponentT>(jsonText);
  }
  public string SerializeToJson() {
    return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
  }
  public static AnimationContainerComponentT DeserializeFromBinary(byte[] fbBuffer) {
    return AnimationContainerComponent.GetRootAsAnimationContainerComponent(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AnimationContainerComponent.FinishAnimationContainerComponentBuffer(fbb, AnimationContainerComponent.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
