// <auto-generated />

namespace pe.text.fb
{
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FontBinaryLoadType : int
    {
        SharedFont = 0,
        BFOTF = 1,
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum FontType : int
    {
        JAPANESE = 0,
        EFIGS = 1,
        HANGLE = 2,
        SIMP_CN = 3,
        TRAD = 4,
    }

    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SharedFontType : int
    {
        None = 0,
        Standard = 1,
        ChineseSimple = 2,
        ChineseSimpleExtension = 3,
        ChineseTraditional = 4,
        Korean = 5,
        NintendoExtension = 6,
    }

    public class BMPFontLoadSetting
    {
        [Newtonsoft.Json.JsonProperty("bmpFontTypeName")]
        public string BmpFontTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("path")]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("registerName")]
        public string RegisterName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.BMPFontLoadSetting FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.BMPFontLoadSetting>(jsonText);
        }
    }

    public class FontBinaryLoadSetting
    {
        [Newtonsoft.Json.JsonProperty("binaryName")]
        public string BinaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("loadType")]
        public pe.text.fb.FontBinaryLoadType LoadType { get; set; } = (pe.text.fb.FontBinaryLoadType)0;

        [Newtonsoft.Json.JsonProperty("type")]
        public pe.text.fb.SharedFontType Type { get; set; } = (pe.text.fb.SharedFontType)0;

        [Newtonsoft.Json.JsonProperty("path")]
        public string Path { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.FontBinaryLoadSetting FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.FontBinaryLoadSetting>(jsonText);
        }
    }

    public class FontData
    {
        [Newtonsoft.Json.JsonProperty("sizeName")]
        public string SizeName { get; set; }

        [Newtonsoft.Json.JsonProperty("width")]
        public int Width { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("height")]
        public int Height { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("textureCacheName")]
        public string TextureCacheName { get; set; }

        [Newtonsoft.Json.JsonProperty("registerName")]
        public string RegisterName { get; set; }

        [Newtonsoft.Json.JsonProperty("fontSetName")]
        public string FontSetName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.FontData FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.FontData>(jsonText);
        }
    }

    public class FontSetting
    {
        [Newtonsoft.Json.JsonProperty("bmpFontLoadSettingList")]
        public System.Collections.Generic.List<pe.text.fb.BMPFontLoadSetting> BmpFontLoadSettingList { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryloadSettingList")]
        public System.Collections.Generic.List<pe.text.fb.FontBinaryLoadSetting> BinaryloadSettingList { get; set; }

        [Newtonsoft.Json.JsonProperty("textureCacheSettingList")]
        public System.Collections.Generic.List<pe.text.fb.TextureCacheSetting> TextureCacheSettingList { get; set; }

        [Newtonsoft.Json.JsonProperty("fontDataList")]
        public System.Collections.Generic.List<pe.text.fb.FontData> FontDataList { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.FontSetting FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.FontSetting>(jsonText);
        }

        public byte[] ToFlatBuffers()
        {
            var jsonText = this.ToJson();
            return GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonToFlatBuffers(jsonText, BFBS);
        }

        public static pe.text.fb.FontSetting FromFlatBuffers(byte[] fb)
        {
            var jsonText = GameFreak.FlatBuffersHelper.FlatBuffersConvert.JsonFromFlatBuffers(fb, BFBS);
            return FromJson(jsonText);
        }

        public static readonly string FileIdentifier = "";

        public static readonly string FileExtension = "";

        public static readonly string BFBS_BASE64 = "GAAAAEJGQlMQABwABAAIAAwAEAAUABgAEAAAADwAAAAoAAAAHAAAABAAAACgAwAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAANACAAAoAAAALAEAAAcAAADsBwAA/AYAAIAEAABkAwAAFAsAAJgIAACoBQAABPX//zAAAAAUAAAABAAAADb0//8AAAAHAQAAAAUAAADIAAAAoAAAAHQAAABIAAAAHAAAABMAAABwZS50ZXh0LmZiLkZvbnRUeXBlAFz9//8YAAAAEAAAAAQAAAAAAAAAAAAAACj9//8EAAAAVFJBRAAAAACE/f//GAAAABAAAAADAAAAAAAAAAAAAABQ/f//BwAAAFNJTVBfQ04ArP3//xgAAAAQAAAAAgAAAAAAAAAAAAAAeP3//wYAAABIQU5HTEUAAAz///8UAAAADAAAAAEAAAAAAAAAnP3//wUAAABFRklHUwAAAMT9//8MAAAABAAAALj9//8IAAAASkFQQU5FU0UAAAAADPb//zgAAAAUAAAABAAAAD71//8AAAAHAgAAAAcAAABgAQAAMAEAAPwAAADAAAAAjAAAAFgAAAAkAAAAGQAAAHBlLnRleHQuZmIuU2hhcmVkRm9udFR5cGUAAACs////FAAAAAwAAAAGAAAAAAAAADz+//8RAAAATmludGVuZG9FeHRlbnNpb24AAADc////FAAAAAwAAAAFAAAAAAAAAGz+//8GAAAAS29yZWFuAAAMABQABAAMAAAACAAMAAAAFAAAAAwAAAAEAAAAAAAAAJz+//8SAAAAQ2hpbmVzZVRyYWRpdGlvbmFsAAAE////GAAAABAAAAADAAAAAAAAAAAAAADQ/v//FgAAAENoaW5lc2VTaW1wbGVFeHRlbnNpb24AADz///8YAAAAEAAAAAIAAAAAAAAAAAAAAAj///8NAAAAQ2hpbmVzZVNpbXBsZQAAAGz///8YAAAAEAAAAAEAAAAAAAAAAAAAADj///8IAAAAU3RhbmRhcmQAAAAAZP///wwAAAAEAAAAWP///wQAAABOb25lAAAAAKj3//8kAAAAFAAAAAQAAADa9v//AAAABwAAAAACAAAAbAAAADQAAAAdAAAAcGUudGV4dC5mYi5Gb250QmluYXJ5TG9hZFR5cGUAAAAMABgABAAMAAAACAAMAAAAGAAAABAAAAABAAAAAAAAAAAAAADY////BQAAAEJGT1RGAAAADAAMAAQAAAAAAAgADAAAABAAAAAIAAAABAAEAAQAAAAKAAAAU2hhcmVkRm9udAAAWPj//yAAAAAIAAAAAQAAAAQAAACUAAAAyAAAACQAAABQAAAAFgAAAHBlLnRleHQuZmIuRm9udFNldHRpbmcAAAj5//8DAAoAFAAAAAQAAAAO+P//AAAODwIAAAAMAAAAZm9udERhdGFMaXN0AAAAADj5//8CAAgAFAAAAAQAAAA++P//AAAODwYAAAAXAAAAdGV4dHVyZUNhY2hlU2V0dGluZ0xpc3QAcPn//wEABgAUAAAABAAAAHb4//8AAA4PAQAAABUAAABiaW5hcnlsb2FkU2V0dGluZ0xpc3QAAABw+f//AAAEABQAAAAEAAAArvj//wAADg8AAAAAFgAAAGJtcEZvbnRMb2FkU2V0dGluZ0xpc3QAAHD5//8oAAAACAAAAAEAAAAGAAAAMAAAALAAAABQAAAA8AAAAHQAAADEAAAAEwAAAHBlLnRleHQuZmIuRm9udERhdGEAJPr//wUADgAQAAAABAAAAGb5//8AAAANCwAAAGZvbnRTZXROYW1lAEz6//8EAAwAEAAAAAQAAACO+f//AAAADQwAAAByZWdpc3Rlck5hbWUAAAAAePr//wMACgAQAAAABAAAALr5//8AAAANEAAAAHRleHR1cmVDYWNoZU5hbWUAAAAAqPr//wIACAAQAAAABAAAAOr5//8AAAAHBgAAAGhlaWdodAAAzPr//wEABgAQAAAABAAAAA76//8AAAAHBQAAAHdpZHRoAAAAuPr//wAABAAQAAAABAAAADL6//8AAAANCAAAAHNpemVOYW1lAAAAAKj6//8oAAAACAAAAAEAAAAGAAAAPAAAANgAAACMAAAA/AAAAKgAAABUAAAAHgAAAHBlLnRleHQuZmIuVGV4dHVyZUNhY2hlU2V0dGluZwAAaPv//wUADgAUAAAABAAAAG76//8AAA4PBAAAAAgAAABkYXRhTGlzdAAAAACU+///BAAMABAAAAAEAAAA1vr//wAAAAcOAAAAd29ya01lbW9yeVNpemUAAMD7//8DAAoAEAAAAAQAAAAC+///AAAABwYAAABoZWlnaHQAAOT7//8CAAgAEAAAAAQAAAAm+///AAAABwUAAAB3aWR0aAAAAAj8//8BAAYAEAAAAAQAAABK+///AAAABw4AAABnbHlwaE5vZGVDb3VudAAA/Pv//wAABAAQAAAABAAAAHb7//8AAAANBAAAAG5hbWUAAAAA6Pv//yAAAAAIAAAAAQAAAAQAAACwAAAAgAAAADAAAABQAAAAIAAAAHBlLnRleHQuZmIuRm9udEJpbmFyeUxvYWRTZXR0aW5nAAAAAKT8//8DAAoAEAAAAAQAAADm+///AAAADQQAAABwYXRoAAAAAMj8//8CAAgAFAAAAAQAAACK+///AAAABwIAAAAEAAAAdHlwZQAAAADw/P//AQAGABQAAAAEAAAAsvv//wAAAAcAAAAACAAAAGxvYWRUeXBlAAAAAOT8//8AAAQAEAAAAAQAAABe/P//AAAADQoAAABiaW5hcnlOYW1lAADU/P//HAAAAAgAAAABAAAAAwAAAIAAAABYAAAAKAAAAB0AAABwZS50ZXh0LmZiLkJNUEZvbnRMb2FkU2V0dGluZwAAAIj9//8CAAgAEAAAAAQAAADK/P//AAAADQwAAAByZWdpc3Rlck5hbWUAAAAAtP3//wEABgAQAAAABAAAAPb8//8AAAANBAAAAHBhdGgAAAAAoP3//wAABAAQAAAABAAAABr9//8AAAANDwAAAGJtcEZvbnRUeXBlTmFtZQCU/f//PAAAAAgAAAABAAAACwAAAFQAAADkAAAADAEAACACAACkAAAAbAAAACgBAADYAQAAnAEAAEQBAABsAQAAIAAAAHBlLnRleHQuZmIuVGV4dHVyZUNhY2hlUGFyYW1ldGVyAAAAAGz+//8KABgAEAAAAAQAAACu/f//AAAABw4AAABiYXNlbGluZU9mZnNldAAAmP7//wkAFgAQAAAABAAAANr9//8AAAAHFAAAAGZvcmNlTW9ub3NwYWNlZFdpZHRoAAAAAMz+//8IABQAEAAAAAQAAAAO/v//AAAAAhYAAABmb3JjZU1vbm9zcGFjZWRFbmFibGVkAAAA////BwASABAAAAAEAAAAQv7//wAAAAcOAAAAYmVhcmluZ09mZnNldFgAACz///8GABAAEAAAAAQAAABu/v//AAAAAg4AAABkZWxldGVCZWFyaW5nWAAAWP///wUADgAQAAAABAAAAJr+//8AAAACCgAAAGlnbm9yZVBhbHQAAID///8EAAwAEAAAAAQAAADC/v//AAAACwwAAABzY2FsZUhlaWdodHMAAAAArP///wMACgAQAAAABAAAAO7+//8AAAALCwAAAHNjYWxlV2lkdGhzANT///8CAAgAEAAAAAQAAAAW////AAAABw0AAABwQm9yZGVyV2lkdGhzAAAADAAQAAgADAAEAAYADAAAAAEABgAQAAAABAAAAE7///8AAAALDAAAAHBCb2xkV2VpZ2h0cwAAAAAMABAACAAMAAAABgAMAAAAAAAEABAAAAAEAAAAhv///wAAAA0OAAAAZm9udEJpbmFyeU5hbWUAAAwAEAAEAAgAAAAMAAwAAAAcAAAACAAAAAEAAAADAAAALAAAAKgAAABgAAAAGwAAAHBlLnRleHQuZmIuVGV4dHVyZUNhY2hlRGF0YQDQ////AgAIABgAAAAMAAAAAAAGAAgABwAGAAAAAAAADQsAAABmb250U2V0TmFtZQAMABIACAAMAAQABgAMAAAAAQAGACAAAAAQAAAAAAAKAAwABgAHAAgACgAAAAAADg8FAAAACQAAAHBhcmFtTGlzdAAAAAwAEgAIAAwAAAAGAAwAAAAAAAQAIAAAABAAAAAAAAoADAAHAAAACAAKAAAAAAAABwEAAAAIAAAAZm9udFR5cGUAAAAA";

        public static byte[] BFBS => System.Convert.FromBase64String(BFBS_BASE64);
    }

    public class TextureCacheData
    {
        [Newtonsoft.Json.JsonProperty("fontType")]
        public pe.text.fb.FontType FontType { get; set; } = (pe.text.fb.FontType)0;

        [Newtonsoft.Json.JsonProperty("paramList")]
        public System.Collections.Generic.List<pe.text.fb.TextureCacheParameter> ParamList { get; set; }

        [Newtonsoft.Json.JsonProperty("fontSetName")]
        public string FontSetName { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.TextureCacheData FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.TextureCacheData>(jsonText);
        }
    }

    public class TextureCacheParameter
    {
        [Newtonsoft.Json.JsonProperty("fontBinaryName")]
        public string FontBinaryName { get; set; }

        [Newtonsoft.Json.JsonProperty("pBoldWeights")]
        public float PBoldWeights { get; set; } = 0.0f;

        [Newtonsoft.Json.JsonProperty("pBorderWidths")]
        public int PBorderWidths { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("scaleWidths")]
        public float ScaleWidths { get; set; } = 0.0f;

        [Newtonsoft.Json.JsonProperty("scaleHeights")]
        public float ScaleHeights { get; set; } = 0.0f;

        [Newtonsoft.Json.JsonProperty("ignorePalt")]
        public bool IgnorePalt { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("deleteBearingX")]
        public bool DeleteBearingX { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("bearingOffsetX")]
        public int BearingOffsetX { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("forceMonospacedEnabled")]
        public bool ForceMonospacedEnabled { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("forceMonospacedWidth")]
        public int ForceMonospacedWidth { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("baselineOffset")]
        public int BaselineOffset { get; set; } = 0;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.TextureCacheParameter FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.TextureCacheParameter>(jsonText);
        }
    }

    public class TextureCacheSetting
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("glyphNodeCount")]
        public int GlyphNodeCount { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("width")]
        public int Width { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("height")]
        public int Height { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("workMemorySize")]
        public int WorkMemorySize { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("dataList")]
        public System.Collections.Generic.List<pe.text.fb.TextureCacheData> DataList { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public static pe.text.fb.TextureCacheSetting FromJson(string jsonText)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<pe.text.fb.TextureCacheSetting>(jsonText);
        }
    }
}
